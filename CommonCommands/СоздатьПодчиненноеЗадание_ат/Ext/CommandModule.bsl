
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	ПричинаОтказа = ПроверитьВозможностьСозданияЗадания(ПараметрКоманды);
	
	Если ЗначениеЗаполнено(ПричинаОтказа) Тогда
		
		ПоказатьПредупреждение(, ПричинаОтказа, 5);
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.Заявка_ат") Тогда 
		
		ТипСвязи = ПредопределенноеЗначение("Справочник.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеПодчиненоЗаявке");
		
	ИначеЕсли	ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.Задание_ат") Тогда
		
		//!!ТУДУ - переделать по нормальному!
		СписокТиповСвязи = Новый СписокЗначений;
		СписокТиповСвязи.Добавить(ПредопределенноеЗначение("Справочник.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеПодчиненоЗаданию"));
		СписокТиповСвязи.Добавить(ПредопределенноеЗначение("Справочник.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеЗамещаетЗадание"));
		ВыбТипСвязи = СписокТиповСвязи.ВыбратьЭлемент("Выберите тип связи:");
		
		Если ВыбТипСвязи = Неопределено Тогда 
			
			Возврат;
			
		Иначе
			
			ТипСвязи = ВыбТипСвязи.Значение;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура("Предок, ТипСвязи", ПараметрКоманды, ТипСвязи);
	ОткрытьФорму("Документ.Задание_ат.ФормаОбъекта", ПараметрыОткрытия, ПараметрыВыполненияКоманды.Источник);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Ссылка", ПараметрКоманды));
		
КонецПроцедуры

// ТУДУ [Grig]: Анализ оставшегося времени производится без учёта содержания работ, необходимо доработать функцию
&НаСервере
Функция   ПроверитьВозможностьСозданияЗадания(Предок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиОбъектов_ат.Предок КАК Заявка
		|ПОМЕСТИТЬ ТаблицаЗаявок
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
		|ГДЕ
		|	(СвязиОбъектов_ат.Объект = &Ссылка
		|			ИЛИ СвязиОбъектов_ат.Предок = &Ссылка)
		|	И СвязиОбъектов_ат.Предок ССЫЛКА Документ.Заявка_ат
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Заявка_ат.Ссылка
		|ИЗ
		|	Документ.Заявка_ат КАК Заявка_ат
		|ГДЕ
		|	Заявка_ат.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаявок.Заявка.Тикет КАК Тикет,
		|	ТаблицаЗаявок.Заявка.ПометкаУдаления КАК ПометкаУдаления,
		|	МАКСИМУМ(ИсторияСтатусовЗаявок_атСрезПоследних.Статус) КАК Статус
		|ИЗ
		|	ТаблицаЗаявок КАК ТаблицаЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовЗаявок_атСрезПоследних
		|		ПО ТаблицаЗаявок.Заявка = ИсторияСтатусовЗаявок_атСрезПоследних.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаявок.Заявка,
		|	ТаблицаЗаявок.Заявка.Тикет,
		|	ТаблицаЗаявок.Заявка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаЗаявок";
	
	Запрос.УстановитьПараметр("Ссылка", Предок);
	
	ТаблицаДляАнализа = Запрос.Выполнить().Выгрузить();
	
	//+ Проверка Заявок на ПУ
	
	Если ТаблицаДляАнализа.Найти(Истина, "ПометкаУдаления") <> Неопределено Тогда
		
		Возврат "Запрещено создавать Задания на основании помеченных на удаление Заявок.";
		
	КонецЕсли;
	
	//- Проверка Заявок на ПУ
	
	//+ Проверка на закрытость Заявок
	
	Если ТаблицаДляАнализа.Найти(Перечисления.СтатусыЗаявок_ат.Закрыта, "Статус") <> Неопределено Тогда
		
		Возврат "Запрещено создавать Задания на основании закрытых Заявок.";
		
	КонецЕсли;
	
	//- Проверка на закрытость Заявок
	 
	////+ Проверка наличия необходимых внутренних согласований
	//ОтборВнешнихСогласований = Новый Структура;
	//ОтборВнешнихСогласований.Вставить("ОбязательноВнутрСогласование", Истина);
	//ОтборВнешнихСогласований.Вставить("ЕстьВнутрСогласование", Ложь);
	//
	//ЗаявкиБезВнутреннегоСогласования = ТаблицаДляАнализа.НайтиСтроки(ОтборВнешнихСогласований);
	//
	//Если ЗаявкиБезВнутреннегоСогласования.Количество() = 1 Тогда
	//	Возврат "Заявка с тикетом " + ЗаявкиБезВнутреннегоСогласования[0].Тикет +
	//		" не прошла внутреннее согласование." + Символы.ПС + "Создание Задания запрещено.";
	//ИначеЕсли ЗаявкиБезВнутреннегоСогласования.Количество() > 1 Тогда		
	//	ПричинаОтказа = "Заявки со следующими тикетами не прошли внутреннее согласование:";
	//	Для Каждого Строка Из ЗаявкиБезВнутреннегоСогласования Цикл
	//		ПричинаОтказа = ПричинаОтказа + Символы.ПС + "- "+ Строка.Тикет;
	//	КонецЦикла;
	//	Возврат ПричинаОтказа + Символы.ПС + "Создание Задания запрещено.";
	//КонецЕсли;
	////- Проверка наличия необходимых внутренних согласований
	//
	////+ Проверка наличия необходимых внешних согласований
	//ОтборВнутреннихСогласований = Новый Структура;
	//ОтборВнутреннихСогласований.Вставить("ОбязательноВнутрСогласование", Истина);
	//ОтборВнутреннихСогласований.Вставить("ЕстьВнутрСогласование", Ложь);
	//
	//ЗаявкиБезВнешнегоСогласования = ТаблицаДляАнализа.НайтиСтроки(ОтборВнутреннихСогласований);
	//
	//Если ЗаявкиБезВнешнегоСогласования.Количество() = 1 Тогда
	//	Возврат "Заявка с тикетом " + ЗаявкиБезВнешнегоСогласования[0].Тикет +
	//		" не прошла внешнее согласование." + Символы.ПС + "Создание Задания запрещено.";
	//ИначеЕсли ЗаявкиБезВнешнегоСогласования.Количество() > 1 Тогда		
	//	ПричинаОтказа = "Заявки со следующими тикетами не прошли внешнее согласование:";
	//	Для Каждого Строка Из ЗаявкиБезВнешнегоСогласования Цикл
	//		ПричинаОтказа = ПричинаОтказа + Символы.ПС + "- "+ Строка.Тикет;
	//	КонецЦикла;
	//	Возврат ПричинаОтказа + Символы.ПС + "Создание Задания запрещено.";
	//КонецЕсли;
	////- Проверка наличия необходимых внешних согласований
	//
	////+ Проверка наличия остатка согласованного времени
	//ОтборНулевыхОстатковВремени = Новый Структура;
	//ОтборНулевыхОстатковВремени.Вставить("ОбязательноВнутрСогласование", Истина);
	//ОтборНулевыхОстатковВремени.Вставить("ОстатокСогласованногоВремени", 0);
	//
	//ЗаявкиСНулевымОстаткомВремени = ТаблицаДляАнализа.НайтиСтроки(ОтборНулевыхОстатковВремени);
	//
	//Если ЗаявкиСНулевымОстаткомВремени.Количество() = 1 Тогда
	//	Возврат "По Заявке с тикетом " + ЗаявкиСНулевымОстаткомВремени[0].Тикет +
	//		" отсутствует остаток согласованного времени." + Символы.ПС + "Создание Задания запрещено.";
	//ИначеЕсли ЗаявкиСНулевымОстаткомВремени.Количество() > 1 Тогда		
	//	ПричинаОтказа = "По Заявкам со следующими тикетами отстутствует остаток согласованного времени:";
	//	Для Каждого Строка Из ЗаявкиСНулевымОстаткомВремени Цикл
	//		ПричинаОтказа = ПричинаОтказа + Символы.ПС + "- "+ Строка.Тикет;
	//	КонецЦикла;
	//	Возврат ПричинаОтказа + Символы.ПС + "Создание Задания запрещено.";
	//КонецЕсли;
	////- Проверка наличия остатка согласованного времени
	
	Возврат "";
	
КонецФункции
