////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для создания уведомлений.
//
////////////////////////////////////////////////////////////////////////////////

#Область  ПрограммныйИнтерфейс

Процедура УведомитьОСменеСтатуса(Ссылка, Статус, Вложения = Неопределено, УведомлятьВнешних = Ложь) Экспорт
	
	Если Ссылка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		УведомитьОСменеСтатусаЗаявки(Ссылка, Статус, Вложения, УведомлятьВнешних);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задание_ат") Тогда
		
		УведомитьОСменеСтатусаЗадания(Ссылка, Статус);
		
	Иначе
		
		Сообщить("Ошибка архитектуры кода!", СтатусСообщения.ОченьВажное);
		ЗаписьЖурналаРегистрации("Ошибка архитектуры кода", УровеньЖурналаРегистрации.Ошибка, Ссылка.Метаданные(), Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомитьОСменеИсполнителяПоЗаданию(Задание, НовыйИсполнитель, СтарыйИсполнитель) Экспорт
	
	Если НовыйИсполнитель = СтарыйИсполнитель Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если НовыйИсполнитель <> ТекущийПользователь Тогда
		
		ТаблицаАдресов_НовыйИсполнитель = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			НовыйИсполнитель);
		
	Иначе
		
		ТаблицаАдресов_НовыйИсполнитель = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Если СтарыйИсполнитель <> ТекущийПользователь Тогда
		
		ТаблицаАдресов_СтарыйИсполнитель = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			СтарыйИсполнитель);
		
	Иначе
		
		ТаблицаАдресов_СтарыйИсполнитель = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Если ТаблицаАдресов_НовыйИсполнитель.Количество() > 0 ИЛИ ТаблицаАдресов_СтарыйИсполнитель.Количество() > 0 Тогда
		
		РодительскиеЗаявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание, Ложь);
		Тема = "Изменение исполнителя Заявки #" + РодительскиеЗаявки[0].Тикет; // хардкодим сокращённый сабж
		ПредставлениеЗадания = Документы.Задание_ат.ПолучитьЗаголовокЗадания(Задание, РодительскиеЗаявки);
		
		Если ТаблицаАдресов_НовыйИсполнитель.Количество() > 0 Тогда
			
			Текст = "Вам назначено " + ПредставлениеЗадания + ". Автор изменения " + ТекущийПользователь + ".";
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗадания(Задание, Текст, НовыйИсполнитель); 
			
			СоздатьПисьмо(ДокументHTML, РодительскиеЗаявки[0], Тема, ТаблицаАдресов_НовыйИсполнитель,,,,, Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке);
			
		КонецЕсли;
		
		Если ТаблицаАдресов_СтарыйИсполнитель.Количество() > 0 Тогда
			
			Текст = ПредставлениеЗадания + " назначено другому исполнителю. Автор изменения " + ТекущийПользователь + ".";
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗадания(Задание, Текст, СтарыйИсполнитель); 
			
			СоздатьПисьмо(ДокументHTML, РодительскиеЗаявки[0], Тема, ТаблицаАдресов_СтарыйИсполнитель,,,,, Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ОповеститьОПринятииРешенияПоСогласованию(Согласование, Согласующий = Неопределено, РешениеОСогласованииИЛИПринудительныйСтатус,
	УведомлятьВнешних = Ложь) Экспорт
	
	ТекстУведомления = "";
	
	Если Согласующий <> Неопределено Тогда
		
		ТекстУведомления = "Пользователь " + Согласующий + " принял решение - "
			+ ?(РешениеОСогласованииИЛИПринудительныйСтатус = Перечисления.РешенияОСогласовании.Согласовано, "СОГЛАСОВАТЬ", "ОТКЛОНИТЬ");
		
	Иначе
		
		Если РешениеОСогласованииИЛИПринудительныйСтатус = Перечисления.СтатусыСогласований_ат.Принято Тогда
			ТекстУведомления = "Согласование ПРИНЯТО";
		ИначеЕсли РешениеОСогласованииИЛИПринудительныйСтатус = Перечисления.СтатусыСогласований_ат.Отклонено Тогда
			ТекстУведомления = "Согласование ОТКЛОНЕНО";
		ИначеЕсли РешениеОСогласованииИЛИПринудительныйСтатус = Перечисления.СтатусыСогласований_ат.Отменено Тогда
			ТекстУведомления = "Согласование ОТМЕНЕНО";
		КонецЕсли;
		
	КонецЕсли;
	
	Согласующие = Согласование.Согласующие;
	ВсеПринялиРешение = Истина;
	МассивПринявшихРешение = Новый Массив;
	МассивОставшихся = Новый Массив;
	
	Если Согласующие.Количество() > 0 Тогда
		
		Для Каждого СтрокаСогласующих Из Согласующие Цикл
			
			Если ЗначениеЗаполнено(СтрокаСогласующих.Согласовано) Тогда
				
				МассивПринявшихРешение.Добавить(СтрокаСогласующих.Согласующий);
				
			Иначе
				
				МассивОставшихся.Добавить(СтрокаСогласующих.Согласующий);
				ВсеПринялиРешение = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВсеПринялиРешение Тогда
		
		ТекстУведомления = ТекстУведомления + Символы.ПС + "Согласование полностью завершено.";
		
	Иначе
		
		Если МассивПринявшихРешение.Количество() > 0 Тогда
			
			ТекстУведомления = ТекстУведомления + Символы.ПС + "Приняли решение:";
			
			Для Каждого ПринявшийРешение Из МассивПринявшихРешение Цикл
				ТекстУведомления = ТекстУведомления + Символы.ПС + " - " + ПринявшийРешение;
			КонецЦикла;
			
		КонецЕсли;
		
		Если МассивОставшихся.Количество() > 0 Тогда
			
			ТекстУведомления = ТекстУведомления + Символы.ПС + "Остались:";
			
			Для Каждого Оставшийся Из МассивОставшихся Цикл
				ТекстУведомления = ТекстУведомления + Символы.ПС + " - " + Оставшийся;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.Добавить(Согласование.Заявка.Ответственный);
	ДополнитьСписокКураторамиПроектов(СписокПользователей, 
		Планирование_Сервер_ат.ПолучитьРодительскиеПроекты(Согласование.Заявка.Проект, Истина, Истина));
	
	// НЕУДОБНО! TODO что-нибудь, СВ?
	//Для Каждого ЭлементСпискаПользователей Из СписокПользователей Цикл
	//	
	//	Если ТипЗнч(ЭлементСпискаПользователей.Значение) = Тип("СправочникСсылка.Пользователи")
	//		И НЕ ЭлементСпискаПользователей.Значение.Пустая() Тогда
	//		
	//		ПараметрыНапоминания = Новый Структура;
	//		ПараметрыНапоминания.Вставить("Пользователь", 		ЭлементСпискаПользователей.Значение);
	//		ПараметрыНапоминания.Вставить("Описание", 			ТекстУведомления);
	//		ПараметрыНапоминания.Вставить("Источник", 			Согласование);
	//		ПараметрыНапоминания.Вставить("ВремяСобытия", 		ТекущаяДатаСеанса());
	//		ПараметрыНапоминания.Вставить("СрокНапоминания", 	ТекущаяДатаСеанса());
	//		
	//		НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	УведомитьОПринятииРешенияПоСогласованию(Согласование, ТекстУведомления, Согласующий, УведомлятьВнешних);
	
КонецПроцедуры

Функция   СоздатьДокументHTMLСОписаниемЗаявки(Заявка, Текст = "", Внутреннее = Ложь, Получатели = Неопределено,
	СвойстваЗаявки = Неопределено, ПоказыватьТаблицы = Ложь, Финансы = Ложь) Экспорт
	
	Если ТипЗнч(Заявка) = Тип("ДокументОбъект.Заявка_ат") Тогда
		СсылкаНаЗаявку = Заявка.Ссылка;
	Иначе
		СсылкаНаЗаявку = Заявка;
	КонецЕсли;
	
	Если СвойстваЗаявки = Неопределено Тогда
		СвойстваЗаявки = Планирование_Сервер_ат.ПолучитьСвойстваЗаявки(СсылкаНаЗаявку);
	КонецЕсли;
	
	СтатусЗаявки = Планирование_Сервер_ат.ПолучитьТекущийСтатус(СсылкаНаЗаявку);
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	НетНачальногоОтступа = Истина;
	
	Если ТипЗнч(Текст) = Тип("Массив") Тогда //!!! из этой и последующих функций такого рода - выделить в отдельную функцию
		
		Для Каждого СтрокаТекста Из Текст Цикл
			
			Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
				
				Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, СтрокаТекста, Истина, Истина);
				ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
				НетНачальногоОтступа = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если НЕ ПустаяСтрока(Текст) Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Текст, Истина, Истина);
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			НетНачальногоОтступа = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отклонена
			ИЛИ СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отменена
			ИЛИ СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Закрыта)
		И СвойстваЗаявки.Свойство("РезультатВыполненияВHTML") И НЕ ПустаяСтрока(СвойстваЗаявки.РезультатВыполненияВHTML) Тогда
		
		Если НетНачальногоОтступа Тогда
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		КонецЕсли;
		
		//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Результат заявки: ", Истина); //??
		//ЭлементВыделенный = ДокументHTML.СоздатьЭлемент("b");
		ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(
			ЭлементБлок,
			"div",
			Новый Структура("style", "border:none;border-left:solid magenta 4px;padding:0cm 0cm 0cm 10px;background-color:#f5f5f5;font-family:arial,verdana,sans-serif"));
		
		ВставитьТекстHTMLВДокументИзИсточника(ДокументHTML, ЭлементDIV, СвойстваЗаявки.РезультатВыполненияВHTML, СсылкаНаЗаявку);
		
		ДобавитьИнформациюОбЭкземпляреПродукта(ДокументHTML, ЭлементDIV, СсылкаНаЗаявку, СвойстваЗаявки, Внутреннее);
		
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
		
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Краткое описание Заявки (", Истина, Ложь);
	ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, СсылкаНаЗаявку, "веб-ссылка", Ложь);
	
	Если Внутреннее Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " / ", Истина);
		ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, СсылкаНаЗаявку, "прямая ссылка", Истина);
		
	КонецЕсли;
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "):", Истина, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Тикет: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Заявка.Тикет), Ложь, Истина); 
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Клиент: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ?(Внутреннее,
		Строка(Заявка.Клиент), Заявка.Клиент.НаименованиеПолное), Ложь, Истина); 
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Подразделение: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Заявка.Подразделение), Ложь, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Сотрудник: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Заявка.Сотрудник), Ложь, Истина);
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Ожидаемая дата завершения: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок,
		Формат(Планирование_Сервер_ат.ПолучитьОжидаемуюДатуЗавершенияЗаявки(СсылкаНаЗаявку), "ДФ=dd.MM.yyyy; ДП='НЕ ОПРЕДЕЛЕНА'"), Ложь, Истина);
	
	ОписаниеМетокОбъекта = Метки_Сервер_ат.ПолучитьСтрокуСоСпискомДоступныхМеток(СсылкаНаЗаявку, Получатели);
	Если НЕ ПустаяСтрока(ОписаниеМетокОбъекта) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Метки: ", Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ОписаниеМетокОбъекта,, Истина);
		
	КонецЕсли;
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Проект: ", Истина);
	
	Если Внутреннее Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Заявка.Проект), Ложь, Истина);
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Ответственный: ", Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Заявка.Ответственный), Ложь, Истина);
		
		//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Внутренняя ссылка: ", Истина, Ложь);
		//ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, Ссылка, "ссылка", Истина);
		//ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		//!!!!!HOTFIX - внутренний комм. перенесён к обычному комм-ию
		
	Иначе
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Заявка.Проект.НаименованиеДляОтчетов), Ложь, Истина);
		
	КонецЕсли;
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Тип заявки: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Справочники.ТипыЗаявок_ат.ПолучитьПредставлениеТипаЗаявки(Заявка.ТипЗаявки, Внутреннее),
		Ложь, Истина);
	
	Если Финансы Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Финансовый статус: ", Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Финансы_ат.ПолучитьФинансовыйСтатусЗаявки(Заявка, Истина)),, Истина);
		
	КонецЕсли;
	
	РодительскаяЗаявка = Заявка.РодительскаяЗаявка;
	Если ЗначениеЗаполнено(РодительскаяЗаявка) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Родительская заявка: ", Истина, Ложь);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(РодительскаяЗаявка), Ложь, Истина);
		
	КонецЕсли;
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Тезис заявки: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Заявка.Тезис, Ложь, Истина);
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Если (СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Зарегистрирована
		Или СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отменена //???
		Или СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отклонена //???
		) Тогда //!!!!!HOTFIX
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Текст заявки: ", Истина, Истина);
		
		ВставитьТекстHTMLВДокументИзИсточника(ДокументHTML, ЭлементБлок, Заявка.ТекстЗаявкиВHTML, СсылкаНаЗаявку);
		
	КонецЕсли;
	
	//!!!!!HOTFIX - результат перенесён в самое начало
	
	Комментарий = Комментарии_ат.ПолучитьКомментарийПоВиду(СсылкаНаЗаявку, "Комментарий");
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Комментарий: ", Истина, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Комментарий, Ложь, Истина);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	Если Внутреннее Тогда //!!!!!HOTFIX
		
		ВнутреннийКомментарий = Комментарии_ат.ПолучитьКомментарийПоВиду(СсылкаНаЗаявку, "КомментарийВнутренний");
		
		Если НЕ ПустаяСтрока(РаботаСHTML_КлиентСервер_ат.ПолучитьОбычныйТекстИзHTML(ВнутреннийКомментарий)) Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Внутренний комментарий: ", Истина, Истина);
			РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок,
				РаботаСHTML_КлиентСервер_ат.ПолучитьОбъектДокументHTMLИзТекстаHTML(ВнутреннийКомментарий));
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПоказыватьТаблицы Тогда
		
		ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
			ЭлементТело,
			"div",
			Новый Структура("style", "font-family:arial,verdana,sans-serif"));
		
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		ДобавитьТаблицуСтатусовВДокумент(СсылкаНаЗаявку, ДокументHTML, ЭлементБлок, Внутреннее);
		
		СтруктураВремен = ПолучитьСтруктуруВремен(Заявка, СвойстваЗаявки);
		
		Если ЗначениеЗаполнено(СтруктураВремен) И СтруктураВремен.Количество() > 0 Тогда
			ДобавитьТаблицуВременВДокументHTML(ДокументHTML, ЭлементБлок, СтруктураВремен, Внутреннее, Истина);
		КонецЕсли;
		
		Если Финансы Тогда
			
			ДобавитьТаблицуФинансовыхСтатусовВДокумент(СсылкаНаЗаявку, ДокументHTML, ЭлементБлок);
			
			//Если Статус = Перечисления.СтатусыЗаявок_ат.Закрыта ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отклонена ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
				СтруктураСтоимостей = Финансы_ат.ПолучитьСтруктуруСтоимостейЗаявки(Заявка);
			//Иначе
			//	СтруктураСтоимостей = Неопределено;
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураСтоимостей) И СтруктураСтоимостей.Количество() > 0 Тогда
				ДобавитьТаблицуСтоимостейВДокументHTML(ДокументHTML, ЭлементБлок, СтруктураСтоимостей, Истина, Ложь);
			КонецЕсли;
			
			Если НЕ Внутреннее Тогда
				ДобавитьУведомлениеОЗадолженностяхПоСчетамВДокументHTML(СсылкаНаЗаявку.Клиент, ДокументHTML, ЭлементБлок, Внутреннее);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции 

Функция   СоздатьДокументHTMLСОписаниемЗадания(Задание, Текст = "", Получатели = Неопределено) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	Если ТипЗнч(Текст) = Тип("Массив") Тогда
		
		Для Каждого СтрокаТекста Из Текст Цикл
			
			Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
				
				Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, СтрокаТекста, Истина, Истина);
				
				ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если НЕ ПустаяСтрока(Текст) Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Текст, Истина, Истина);
			
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементПодчеркнутый = ДокументHTML.СоздатьЭлемент("u");
	ЭлементБлок.ДобавитьДочерний(ЭлементПодчеркнутый);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементПодчеркнутый, "Краткое описание Задания:", Истина, Истина);
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Тезис: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Задание.Тезис, Ложь, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Вид деятельности: ", Истина);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Задание.СодержаниеРабот), Ложь, Истина);

	Если НЕ ПустаяСтрока(Задание.ТекстЗадания) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Текст задания: ", Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Задание.ТекстЗадания, Ложь, Истина);
		
	КонецЕсли;
	
	Комментарий = Комментарии_ат.ПолучитьКомментарийПоВиду(Задание, "Комментарий");
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Внутренний комментарий: ", Истина, Истина);
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок,
			РаботаСHTML_КлиентСервер_ат.ПолучитьДокументHTMLИзОбычногоТекста(Комментарий));
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
	
	Если СвойстваЗадания.Количество() <> 0 Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Краткосрочное: ", Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(СвойстваЗадания.Краткосрочное), Ложь, Истина);
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Исполнитель: ", Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(СвойстваЗадания.Исполнитель), Ложь, Истина);
		
		Если НЕ ПустаяСтрока(РаботаСHTML_КлиентСервер_ат.ПолучитьОбычныйТекстИзHTML(СвойстваЗадания.РезультатВыполненияВHTML)) Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Результат: ", Истина, Истина);
			РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок,
				РаботаСHTML_КлиентСервер_ат.ПолучитьОбъектДокументHTMLИзТекстаHTML(СвойстваЗадания.РезультатВыполненияВHTML));
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			
		КонецЕсли;
		
		ДобавитьТаблицуВременВДокументHTML(ДокументHTML, ЭлементБлок, СвойстваЗадания, Истина, Ложь);
		//ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "   Комментарий: ", Истина, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Комментарий), Ложь, Истина);
		
	КонецЕсли;
	
	СвязанныеЗаявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	
	Для Каждого Заявка Из СвязанныеЗаявки Цикл
		
		ЭлементБлокЗаявка = ДокументHTML.СоздатьЭлемент("p");
		ЭлементТело.ДобавитьДочерний(ЭлементБлокЗаявка);
		
		ДокументHTML_Заявка = СоздатьДокументHTMLСОписаниемЗаявки(Заявка,, Истина, Получатели,, Истина);
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлокЗаявка, ДокументHTML_Заявка);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлокЗаявка);
		
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции 

Функция   СоздатьДокументHTMLСОписаниемСогласования(Согласование, Текст = "", ТребуетОтвет = Ложь, //!!!!!HOTFIX
	ТехническоеСогласование = Неопределено, ФинансовоеСогласование = Неопределено, ПолноеОписание = Истина,
	ИдентификаторПисьмаОснования = Неопределено, Содержание = "", Получатели = Неопределено, Внутреннее = Ложь) Экспорт
	
	ВидСогласования = Согласование.ТипСогласования;
	ВидыСогласований = Перечисления.ТипыСогласований_ат;
	
	Если ТехническоеСогласование = Неопределено Тогда
		
		ТехническоеСогласование = ВидСогласования = ВидыСогласований.Техническое
			ИЛИ ВидСогласования = ВидыСогласований.ТехническоеИФинансовое;
		
	КонецЕсли;
	
	Если ФинансовоеСогласование = Неопределено Тогда
		
		ФинансовоеСогласование	= ВидСогласования = ВидыСогласований.Финансовое
			ИЛИ ВидСогласования = ВидыСогласований.ТехническоеИФинансовое;
		
	КонецЕсли;
	
	Заявка = Согласование.Заявка;
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	ЗаголовокПисьма = "Согласование Заявки по тикету #" + Заявка.Тикет;
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ЗаголовокПисьма + " (", Истина, Ложь);
	
	//ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, Согласование, "ссылка", Ложь);
	//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "):", Истина, Истина);
	//ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, Согласование, "веб-ссылка", Ложь);
	
	Если Внутреннее Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " / ", Истина);
		ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, Согласование, "прямая ссылка", Истина);
		
	КонецЕсли;
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "):", Истина, Истина);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Если НЕ ПустаяСтрока(Содержание) Тогда
		
		СодержаниеДокумент = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Содержание);
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок, СодержаниеДокумент);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	Если ТребуетОтвет Тогда
		
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок,
			РаботаСHTML_КлиентСервер_ат.ПолучитьОбъектДокументHTMLИзТекстаHTML(Согласование.ТекстСогласования));
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		ДобавитьКнопкиВопросаВДокументHTML(ДокументHTML, ЭлементБлок,
			"ПРИНЯТЬ", "ОТКЛОНИТЬ",
			ПолучитьТемуОтветногоПисьмаПоВиду(
				Документы.Согласование_ат.ПолучитьИдентификаторВидаПисьмаДляАвтоматическойОбработки(),
				"ACCEPT", Согласование.Номер,  ИдентификаторПисьмаОснования),
			ПолучитьТемуОтветногоПисьмаПоВиду(
				Документы.Согласование_ат.ПолучитьИдентификаторВидаПисьмаДляАвтоматическойОбработки(),
				"DECLINE", Согласование.Номер, ИдентификаторПисьмаОснования),
			"Согласовано.", "Отклонено.", ФинансовоеСогласование);
		
	КонецЕсли;
	
	// Строки с переносом строки некорректно преобразуются в HTML (остаются без переносов).
	// Рекомендуется разбивать строку в массив подстрок.
	Если ТипЗнч(Текст) = Тип("Массив") Тогда
		
		Для Каждого СтрокаТекста Из Текст Цикл
			
			Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
				
				Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, СтрокаТекста, Истина, Истина);
				ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если НЕ ПустаяСтрока(Текст) Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Текст, Истина, Истина);
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	ЭлементПодчеркнутый = ДокументHTML.СоздатьЭлемент("u");
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементПодчеркнутый, "Краткое описание согласования: ", Истина, Истина);
	ЭлементБлок.ДобавитьДочерний(ЭлементПодчеркнутый);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " Номер: ", Истина, Ложь);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Согласование.Номер, Ложь, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " Тип: ", Истина, Ложь);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Согласование.ТипСогласования), Ложь, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " Статус: ", Истина, Ложь);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Согласование.СтатусСогласования), Ложь, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " Дата создания: ", Истина, Ложь);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Формат(Согласование.Дата, "ДФ='dd.MM.yyyy" + ?(Внутреннее, " HH:mm:ss'", "'")), Ложь, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " Дата отправки: ", Истина, Ложь);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Формат(Согласование.ДатаОтправкиНаСогласование, "ДФ='dd.MM.yyyy" + ?(Внутреннее, " HH:mm:ss'", "'")), Ложь, Истина);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " Ожидаемая дата реализации (при согласовании в течение суток): ", Истина, Ложь);
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Формат(Согласование.ОжидаемаяДатаЗавершения, "ДФ=dd.MM.yyyy"), Ложь, Истина);
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Если ПолноеОписание Тогда
	
		// Таблица текущего состояния согласования.
		СостояниеСогласования = Новый ТаблицаЗначений;
		
		СостояниеСогласования.Колонки.Добавить("Согласующий",, 		"Согласующий");
		СостояниеСогласования.Колонки.Добавить("Статус",, 			"Статус");
		СостояниеСогласования.Колонки.Добавить("ДатаСогласования",, "Дата согласования");
		СостояниеСогласования.Колонки.Добавить("Комментарий",, 		"Комментарий", 50);
		
		Для Каждого СтрокаСогласующих Из Согласование.Согласующие Цикл
			
			НоваяСтрока = СостояниеСогласования.Добавить();
			
			НоваяСтрока.Согласующий = СтрокаСогласующих.Согласующий;
			НоваяСтрока.Статус = ?(ЗначениеЗаполнено(СтрокаСогласующих.Согласовано),
				СтрокаСогласующих.Согласовано, "Решение не принято");
			НоваяСтрока.ДатаСогласования = Формат(СтрокаСогласующих.ДатаВремяСогласования, "ДФ='dd.MM.yyyy HH:mm'");
			НоваяСтрока.Комментарий = СтрокаСогласующих.Комментарий;
			
		КонецЦикла;
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Состояние согласования:", Истина);
		ДобавитьТаблицуВДокументHTML(ДокументHTML, ЭлементБлок, СостояниеСогласования);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		ОтчетныеДокументы = Новый Массив;
		ОтчетныеДокументы.Добавить(Согласование);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Данные документов:", Истина, Истина);
		ДобавитьТаблицуОтчетныхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, ОтчетныеДокументы, ФинансовоеСогласование);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		Если ФинансовоеСогласование Тогда
			
			//выделить в процедуру
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Остаток оперативного баланса*: ", Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Финансы_ат.ПолучитьОстатокНаСчетеКлиентаПоДоговоруНаДату(
				Согласование.Договор, НачалоДня(Согласование.ДатаОтправкиНаСогласование))),, Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Значение для выбора тарифного плана*: ", Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Строка(Финансы_ат.ПолучитьЗначениеОпределяющееТарифныйПланПоДоговору(
				Согласование.Договор, НачалоДня(Согласование.ДатаОтправкиНаСогласование))),, Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "  * - на начало дня создания согласования",, Истина);
			
			Если НЕ ПустаяСтрока(Согласование.ТарифныйПлан) Тогда
				
				Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Использованный тарифный план: ", Истина);
				Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Согласование.ТарифныйПлан,, Истина);
				
			ИначеЕсли НЕ Согласование.Тариф.Пустая() Тогда
				
				Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Использованный тариф: ", Истина);
				Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Согласование.Тариф,, Истина);
				
			КонецЕсли;
			
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			
		КонецЕсли;
		
		Если НЕ ТребуетОтвет Тогда
			
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Содержание согласования: ", Истина, Истина);
			РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок,
				РаботаСHTML_КлиентСервер_ат.ПолучитьОбъектДокументHTMLИзТекстаHTML(Согласование.ТекстСогласования));
			ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементТело,
		СоздатьДокументHTMLСОписаниемЗаявки(Заявка,,, Получатели));
	
	Возврат ДокументHTML;
	
КонецФункции

Функция   СоздатьДокументHTMLСОписаниемПисьмаОПриемкеЗаявки(Текст, Заявка,
	ИдентификаторИсточника = Неопределено, Содержание = "", Получатели = Неопределено, Внутреннее = Ложь) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Текст,, Истина);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	//!!!!!HOTFIX {
	Если ТипЗнч(Заявка) = Тип("ДокументОбъект.Заявка_ат") Тогда
		Ссылка = Заявка.Ссылка;
	Иначе
		Ссылка = Заявка;
	КонецЕсли;
	
	СвойстваЗаявки = Планирование_Сервер_ат.ПолучитьСвойстваЗаявки(Ссылка);
	
	Если СвойстваЗаявки.Свойство("РезультатВыполненияВHTML") И НЕ ПустаяСтрока(СвойстваЗаявки.РезультатВыполненияВHTML) Тогда
		
		ЭлементВыделенный = ДокументHTML.СоздатьЭлемент("b");
		ЭлементБлок.ДобавитьДочерний(ЭлементВыделенный);
		
		ВставитьТекстHTMLВДокументИзИсточника(ДокументHTML, ЭлементВыделенный, СвойстваЗаявки.РезультатВыполненияВHTML, Ссылка);
		
		ДобавитьИнформациюОбЭкземпляреПродукта(ДокументHTML, ЭлементВыделенный, Ссылка, СвойстваЗаявки, Внутреннее);
		
		ДобавитьПереводСтроки(ДокументHTML, ЭлементВыделенный);
		
	КонецЕсли;
	//!!!!!HOTFIX }
	
	Если НЕ ПустаяСтрока(Содержание) Тогда
		
		СодержаниеДокумент = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Содержание);
		
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок, СодержаниеДокумент);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	ДобавитьКнопкиВопросаВДокументHTML(ДокументHTML, ЭлементБлок,
		"ПОДТВЕРДИТЬ", "ОТКАЗАТЬ",
		ПолучитьТемуОтветногоПисьмаДляПриемкиЗаявки(Заявка, Истина, ИдентификаторИсточника),
		ПолучитьТемуОтветногоПисьмаДляПриемкиЗаявки(Заявка, Ложь, ИдентификаторИсточника),
		"Подтверждено.",
		"Отказано.",
		Ложь);
	
	#Область Приемка_СтарыйМеханизм
	
	//ШаблонТекстаОтветногоПисьма =
	//"
	//| %1
	//| %2
	//| ___________________________________________________________
	//| Это служебная информация, необходимая для обработки письма.
	//| Не удаляйте и не изменяйте ее!
	//|
	//| #Ticket: #" + Заявка.Тикет + "#
	//| #CheckSum: #%3#
	//| #MailType: #%4#
	//| #Source: #%5#
	//| ___________________________________________________________";
	
	//ШаблонТекстаОтветногоПисьма = "";
	//
	//ТекстПоложительногоОтвета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОтветногоПисьма, "Подтверждено.", "",
	//	СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Подтверждено")), Символы.НПП, ""),
	//	СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Приемка")), Символы.НПП, ""));
	//
	//ДобавитьMailToСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, "<Подтвердить>", ТемаОтветногоПисьма,
	//									ТекстПоложительногоОтвета, АдресЭлектроннойПочтыСистемнойУчетнойЗаписи);
	//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " / ");
	//
	//ТекстОтрицательногоОтвета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОтветногоПисьма, "Не подтверждено.",
	//	Символы.ПС + "Пожалуйста, укажите причину отказа!",
	//	СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Отказано")), Символы.НПП, ""),
	//	СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Приемка")), Символы.НПП, ""));
	//
	//ДобавитьMailToСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, "<Отказаться>", ТемаОтветногоПисьма,
	//									ТекстОтрицательногоОтвета, АдресЭлектроннойПочтыСистемнойУчетнойЗаписи);
	
	#КонецОбласти
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок,
		СоздатьДокументHTMLСОписаниемЗаявки(Заявка,, Внутреннее, Получатели, СвойстваЗаявки, Истина));
	
	Возврат ДокументHTML;
	
КонецФункции

Функция   СоздатьДокументHTMLСОписаниемПисьмаОРешенииПользователя(Текст, Документ, ПараметрыПисьма, Получатели = Неопределено) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Текст, Истина, Истина);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементТело);
	
	Если ПараметрыПисьма.Свойство("Ошибка") Тогда
		
		Если НЕ ПараметрыПисьма.Свойство("ИсходящееПисьмо") Тогда
			ПараметрыПисьма.Вставить("ИсходящееПисьмо", "...");
		КонецЕсли;
		
		Если ПараметрыПисьма.Свойство("Согласование") Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "При обработке согласования <" + ПараметрыПисьма.ИсходящееПисьмо + "> возникли ошибки:", Истина, Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ПараметрыПисьма.Ошибка,, Истина);
			
		Иначе
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "На письмо " + ПараметрыПисьма.ИсходящееПисьмо + " был получен ответ ("
				+ ПараметрыПисьма.Письмо.Номер + ").", Истина, Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "При обработке возникли следующие ошибки:",, Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ПараметрыПисьма.Ошибка,, Истина);
			
		КонецЕсли;
		
	Иначе
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "По письму " + ПараметрыПисьма.ИсходящееПисьмо + " было принято "
			+ ?(ПараметрыПисьма.ПоложительноеРешение, "положительное", "отрицательное") + " решение.", Истина, Истина);
			
		ТекстПисьма = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(
			ПараметрыПисьма.Письмо);
		
		Если НЕ ПустаяСтрока(ТекстПисьма) Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Пользователем был оставлен комментарий:", Истина, Истина);
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, РаботаСHTML_КлиентСервер_ат.ПолучитьОбычныйТекстИзHTML(ТекстПисьма),, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Документ <> Неопределено Тогда //!!! некрасивый код - непонятно что кому и куда отправляется. См. УведомитьОПринятииРешенияПоСогласованию
		
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементТело,
			?(ТипЗнч(Документ) = Тип("ДокументСсылка.Заявка_ат"),
				СоздатьДокументHTMLСОписаниемЗаявки(Документ,,, Получатели),
				СоздатьДокументHTMLСОписаниемСогласования(Документ,,,,, Ложь,,, Получатели)
				)
			);
		
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

Функция   СоздатьДокументHTMLСОписаниемЗадолжностей(Клиент, Внутренний = Ложь, СтрокиРеализацийКлиента) Экспорт
	
	ОстатокНаСчете = 0;
	
	ДокументHTML = Новый ДокументHTML;
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(ЭлементБлок, "div",
		Новый Структура("style", "color: #880000"));
	
	Если Внутренний Тогда
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIV, "Клиент: " + Клиент, Истина, Истина);
	Иначе
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIV, "ПРОСИМ ОБРАТИТЬ ВНИМАНИЕ!" , Истина, Истина);
	КонецЕсли;
	
	ВставитьТаблицуОстатковПоДоговорамВДокументHTML(ДокументHTML, ЭлементБлок, Клиент,, Внутренний, Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Договоры_ат.Ссылка,
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период
		|ИЗ
		|	Справочник.Договоры_ат КАК Договоры_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
		|		ПО ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка = Договоры_ат.Ссылка
		|ГДЕ
		|	Договоры_ат.Владелец = &Клиент
		|	И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус.ПереданКорреспонденту
		|	И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус.ТипСтатуса = &ТипСтатуса");
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("ТипСтатуса", Перечисления.ТипыСтатусовОтправкиФинДокументов_ат.НеФинальный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	Колонки = ТаблицаДоговоров.Колонки;
	Колонки.Добавить("Договор",, "Договор");
	Колонки.Добавить("ДатаПолученияКлиентом",, "Дата получения клиентом");
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДоговоров.Добавить();
		НоваяСтрока.Договор = Выборка.Ссылка;
		НоваяСтрока.ДатаПолученияКлиентом = Выборка.Период;
		
	КонецЦикла;
	
	Если ТаблицаДоговоров.Количество() > 0 Тогда
		
		Если Внутренний Тогда
			Текст = "Договоры не подписаны клиентом:";
		Иначе
			Текст = "Вашей компанией не подписаны следующие договоры:";
		КонецЕсли;
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Текст,, Истина);
		
		ДобавитьТаблицуВДокументHTML(ДокументHTML, ЭлементБлок, ТаблицаДоговоров, Истина);
		
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	СчетаНаОплату = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетНаОплату_ат.СуммаДокумента КАК Сумма,
		|	СчетНаОплату_ат.ДатаОплатыПланируемая КАК ПланируемаяДатаОплаты,
		|	СчетНаОплату_ат.Договор КАК Договор,
		|	СчетНаОплату_ат.Дата,
		|	СчетНаОплату_ат.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетНаОплату_ат КАК СчетНаОплату_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСчетовНаОплату_ат КАК СтатусыСчетовНаОплату_ат
		|		ПО (СтатусыСчетовНаОплату_ат.Счет = СчетНаОплату_ат.Ссылка)
		|ГДЕ
		|	СтатусыСчетовНаОплату_ат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОплатыСчетов_ат.НеОплачен)
		|	И СчетНаОплату_ат.Клиент = &Клиент
		|	И СчетНаОплату_ат.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договор,
		|	СчетНаОплату_ат.Дата");
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			СчетаНаОплату.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СчетаНаОплату.Количество() = 0 Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Не оплачены счета:", Истина, Истина);
		ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, СчетаНаОплату, Ложь);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	Если СтрокиРеализацийКлиента.Количество() > 0 Тогда
		
		Реализации = Новый Массив;
		
		Для Каждого СтрокаРеализацийКлиента Из СтрокиРеализацийКлиента Цикл
			Реализации.Добавить(СтрокаРеализацийКлиента.Ссылка);
		КонецЦикла;
		
		Если Внутренний Тогда
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Неподписанные реализации:", Истина, Истина);
		Иначе
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Вашей компанией не подписаны следующие реализации:", Истина, Истина);
		КонецЕсли;
		
		ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, Реализации, Ложь);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	Если Внутренний Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Реализация_ат.Ссылка КАК Реализация,
		|	Реализация_ат.Клиент,
		|	Реализация_ат.Договор,
		|	ЕСТЬNULL(ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУстановкиСтатуса,
		|	Реализация_ат.СуммаДокумента КАК Сумма,
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус
		|ИЗ
		|	Документ.Реализация_ат КАК Реализация_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних(,) КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
		|		ПО (ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка = Реализация_ат.Ссылка)
		|ГДЕ
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус.ТипСтатуса = &ТипСтатуса
		|	И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период < &ДатаКонтроля
		|	И Реализация_ат.Клиент = &Клиент";
		
		Сутки = 24*60*60;
		ДнейПросрочкиАктов = Константы.КонтрольПросрочкиАктовВДнях_ат.Получить();
		ДатаКонтроля = ?(ДнейПросрочкиАктов = 0, 40, ДнейПросрочкиАктов) * Сутки;
		
		Запрос.УстановитьПараметр("ДатаКонтроля", НачалоДня(ТекущаяДатаСеанса() - ДатаКонтроля));
		Запрос.УстановитьПараметр("ТипСтатуса", Перечисления.ТипыСтатусовОтправкиФинДокументов_ат.НеФинальный);
		Запрос.УстановитьПараметр("Клиент", Клиент);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			ТаблицаРеализаций = Новый ТаблицаЗначений;
			КолонкиТаблицыРеализаций = ТаблицаРеализаций.Колонки;
			КолонкиТаблицыРеализаций.Добавить("Договор",, "Договор");
			КолонкиТаблицыРеализаций.Добавить("Реализация",, "Реализация");
			КолонкиТаблицыРеализаций.Добавить("ДатаУстановкиСтатуса",, "Дата установки статуса");
			КолонкиТаблицыРеализаций.Добавить("Статус",, "Статус");
			КолонкиТаблицыРеализаций.Добавить("Сумма",, "Сумма");
			
			СуммаВсего = 0;
			
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ТаблицаРеализаций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				СуммаВсего = СуммаВсего + Выборка.Сумма;
				
			КонецЦикла;
			
			Если ТаблицаРеализаций.Количество() > 1 Тогда
				
				НоваяСтрока = ТаблицаРеализаций.Добавить();
				НоваяСтрока.Реализация = "Всего реализаций: " + (ТаблицаРеализаций.Количество() - 1);
				НоваяСтрока.Сумма = СуммаВсего;
				
			КонецЕсли;
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Статус реализаций установлен более "
				+ ДнейПросрочкиАктов + " дней назад:", Истина, Истина);
			
			//ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, ТаблицаРеализаций, Истина);
			// - т.к. немного иная внутренняя инфа
			ДобавитьТаблицуВДокументHTML(ДокументHTML, ЭлементБлок, ТаблицаРеализаций, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

Функция   СоздатьПисьмо(ДокументHTML, Основание, Тема, ТаблицаАдресовПолучателей, ТаблицаАдресовПолучателейКопий = Неопределено,
	ЦитироватьОснование = Истина, Важность = Неопределено, НаКонтроле = Ложь, ТипУведомления = Неопределено,
	УведомитьОПрочтении = Ложь, Вложения = Неопределено, УчетнаяЗапись = Неопределено, ОчищатьТемуИсходногоПисьма = Ложь) Экспорт
	
	Если ТаблицаАдресовПолучателей.Количество() = 0
		И (ТаблицаАдресовПолучателейКопий = Неопределено ИЛИ ТаблицаАдресовПолучателейКопий.Количество() = 0) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПисьмоОснование = Документы.ЭлектронноеПисьмоВходящее.ПустаяСсылка();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		Если ТипЗнч(Основание.Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ПисьмоОснование = Основание.Основание;
		Иначе
			ПисьмоОснование = ПолучитьПервоеПисьмоЦепочкиДляПолучателейПоЗаявке(Основание, ТипУведомления);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		ПисьмоОснование = Основание;
		
	КонецЕсли;
	
	НовоеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Основание", ПисьмоОснование);
	ДанныеЗаполнения.Вставить("Команда", "Ответить");
	
	НовоеПисьмо.Заполнить(ДанныеЗаполнения);
	
	Если УчетнаяЗапись = Неопределено ИЛИ НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		НовоеПисьмо.УчетнаяЗапись = ПолучитьСистемнуюУчетнуюЗапись(); // В обработке заполнения ЭПИ на основании учетной записи устанавливается ОтправительПредставление.
	Иначе
		НовоеПисьмо.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли;
	
	НовоеПисьмо.ОтправительПредставление = НовоеПисьмо.ПолучитьПредставлениеДляУчетнойЗаписи(НовоеПисьмо.УчетнаяЗапись);
	НовоеПисьмо.ВключатьТелоИсходногоПисьма = Ложь;
	НовоеПисьмо.Дата = ТекущаяДатаСеанса();
	НовоеПисьмо.Предмет = Взаимодействия.ПолучитьЗначениеПредмета(Основание);
	
	Если ОчищатьТемуИсходногоПисьма
		ИЛИ НЕ Константы.ИспользоватьТемуПисьмаОснованияПриФормированииТемыОтвета_ат.Получить() Тогда
		
		НовоеПисьмо.Тема = Тема;
		
	Иначе
		
		НовоеПисьмо.Тема = ?(ПустаяСтрока(НовоеПисьмо.Тема), Тема,
			?(НовоеПисьмо.Тема <> Тема И ПустаяСтрока(Тема), НовоеПисьмо.Тема + " - " + Тема,
			НовоеПисьмо.Тема));
		
	КонецЕсли;
	
	Если ПустаяСтрока(НовоеПисьмо.Тема) Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.Заявка_ат") Тогда
			НовоеПисьмо.Тема = "Заявка #" + Основание.Тикет;
		ИначеЕсли ТипЗнч(НовоеПисьмо.Предмет) = Тип("ДокументСсылка.Заявка_ат") Тогда
			НовоеПисьмо.Тема = "Заявка #" + НовоеПисьмо.Предмет.Тикет;
		Иначе
			НовоеПисьмо.Тема = "Уведомление @supportum";
		КонецЕсли;
		
	КонецЕсли;
	
	НовоеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	
	Если ТипЗнч(НовоеПисьмо.Предмет) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПредметыПапкиВзаимодействий.Взаимодействие.ИдентификаторСообщения КАК ИдентификаторСообщения
			|ИЗ
			|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
			|ГДЕ
			|	ПредметыПапкиВзаимодействий.Взаимодействие ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
			|	И ПредметыПапкиВзаимодействий.Предмет = &Предмет
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПредметыПапкиВзаимодействий.Взаимодействие.ДатаОтправления";
			
		Запрос.УстановитьПараметр("Предмет", НовоеПисьмо.Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НовоеПисьмо.ИдентификаторОснования = Выборка.ИдентификаторСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
	НовоеПисьмо.ПолучателиПисьма.Загрузить(ТаблицаАдресовПолучателей);
	
	Если ТаблицаАдресовПолучателейКопий <> Неопределено Тогда
		НовоеПисьмо.ПолучателиКопий.Загрузить(ТаблицаАдресовПолучателейКопий);
	КонецЕсли;
	
	НовоеПисьмо.СформироватьПредставленияКонтактов();
	
	Если НЕ Важность = Неопределено Тогда
		НовоеПисьмо.Важность = Важность;
	КонецЕсли;
	
	НовоеПисьмо.УведомитьОПрочтении = УведомитьОПрочтении;
	НовоеПисьмо.ТипУведомления_ат = ТипУведомления;
	
	Если НаКонтроле Тогда
		НовоеПисьмо.РассмотретьПосле = ПолучитьДатуРассмотренияПисьма();
	КонецЕсли;
	
	НовоеПисьмо.Записать();
	
	Если Вложения <> Неопределено Тогда
		
		Для Каждого Вложение Из Вложения Цикл
			
			УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(НовоеПисьмо.Ссылка,
				Вложение.АдресВоВременномХранилище, Вложение.ИмяФайлаСРасширением, Неопределено);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(НовоеПисьмо, НовоеПисьмо.Предмет);
	
	ДобавитьПодписьВДокументHTML(ДокументHTML, НовоеПисьмо.УчетнаяЗапись);
	
	ИсходящееHTML = СформироватьИсходящееHTML(ДокументHTML, ПисьмоОснование, ЦитироватьОснование);
	
	ОбработчикиСобытийДляПочтовыхДокументов_ат.ЭкспортироватьТекстВРССодержаниеЭлектронныхПисем(НовоеПисьмо.Ссылка, ИсходящееHTML, Ложь);
	
	// [Макс] 24.06.2016 Решено все письма отправлять регламентом.
	//Если ОтправитьПослеСоздания И НовоеПисьмо.УчетнаяЗапись <> Неопределено Тогда
		
		//Попытка
		//	
		//	ИдентификаторПисьма = Взаимодействия.ВыполнитьОтправкуПисьма(НовоеПисьмо);
		//	
		//Исключение
		//	
		//	Сообщение = Новый СообщениеПользователю;
		//	Сообщение.Текст = ОписаниеОшибки();
		//	Сообщение.Сообщить(); 
		//	
		//	Возврат Неопределено;
		//	
		//КонецПопытки;
		//
		//НовоеПисьмо.ИдентификаторСообщения = ИдентификаторПисьма;
		//НовоеПисьмо.СтатусПисьма    = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
		//НовоеПисьмо.ДатаОтправления = ТекущаяДатаСеанса();
		
	НовоеПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
	НовоеПисьмо.Записать();
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации() Тогда // Клиентам не нужно видеть что и кому отправилось
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Уведомление <" + НовоеПисьмо.Тема + "> отправлено:" + Символы.ПС
			+ "  получатели - " + НовоеПисьмо.СписокПолучателейПисьма
			+ ?(ПустаяСтрока(НовоеПисьмо.СписокПолучателейКопий), "",
				Символы.ПС + "  в копии: " + НовоеПисьмо.СписокПолучателейКопий)
			//+ ?(ПустаяСтрока(НовоеПисьмо.СписокПолучателейСкрытыхКопий), "",
			//	Символы.ПС + "  в СК: " + НовоеПисьмо.СписокПолучателейСкрытыхКопий);
			;
		Сообщение.КлючДанных = Основание;
		Сообщение.Сообщить();
		
	КонецЕсли;
	//	
	//КонецЕсли;
	
	ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(
		НовоеПисьмо.Ссылка, Взаимодействия.ОпределитьПапкуДляПисьма(НовоеПисьмо.Ссылка));
		
	Если НаКонтроле Тогда
		ЗаписатьСведенияОКонтролеЭлектронногоПисьма(НовоеПисьмо.Ссылка, НаКонтроле);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовоеПисьмо.Ссылка;
	
КонецФункции

Функция   СоздатьПисьмоДляСогласованияЗаявки(Согласование, Содержание = "", Вложения = Неопределено, УведомлятьВнешних = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Согласующие = Согласование.Согласующие;
	Причина = "!!! " + Строка(Согласование);
	
	ТипыСогласований = Перечисления.ТипыСогласований_ат;
	
	Для Каждого СтрокаСогласующих Из Согласующие Цикл
		
		ИдентификаторПисьмаОснования = Новый УникальныйИдентификатор;
		
		ВидСогласованияСогласующего = СтрокаСогласующих.ТипСогласования;
		
		ДокументHTML = СоздатьДокументHTMLСОписаниемСогласования(Согласование,, Истина,
			ВидСогласованияСогласующего = ТипыСогласований.Техническое
				ИЛИ ВидСогласованияСогласующего = ТипыСогласований.ТехническоеИФинансовое,
			ВидСогласованияСогласующего = ТипыСогласований.Финансовое
				ИЛИ ВидСогласованияСогласующего = ТипыСогласований.ТехническоеИФинансовое,,
			ИдентификаторПисьмаОснования, Содержание, СтрокаСогласующих.Согласующий);
		
		ТаблицаАдресовПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			СтрокаСогласующих.Согласующий);
		Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
			
			Письмо = СоздатьПисьмо(ДокументHTML, Согласование, Причина, ТаблицаАдресовПолучателей,,
				Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая, Истина,
				?(ВидСогласованияСогласующего = ТипыСогласований.Финансовое
					ИЛИ ВидСогласованияСогласующего = ТипыСогласований.ТехническоеИФинансовое,
					Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое,
					Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке), Истина, Вложения,
				Константы.УчетнаяЗаписьДляПолученияАвтоматическихОтветов_ат.Получить());
			
			ЗаписатьИдентификаторПисьмаВРегистрКонтроля(Письмо, ИдентификаторПисьмаОснования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Текст = Строка(Согласование) + " отправлено на рассмотрение";
	УведомитьОПринятииРешенияПоСогласованию(Согласование, Текст, Пользователи.ТекущийПользователь(), УведомлятьВнешних, Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция   СоздатьПисьмоДляПриемкиЗаявки(Заявка, Содержание = "", Вложения = Неопределено) Экспорт
	
	Сотрудник = Заявка.Сотрудник;
	
	СотрудникОрганизации = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ПользовательИмеетРоль(Сотрудник, "ОрганизацияСотрудник_ат");
	
	ИдентификаторИсточника = Новый УникальныйИдентификатор;
	
	Если СотрудникОрганизации Тогда
		
		ТемаОтветногоПисьма = ПолучитьТемуПисьмаОСменеСтатуса(Заявка);
		Причина = ПолучитьТемуПисьмаОСменеСтатуса(Заявка);
		
	Иначе
		
		ТемаОтветногоПисьма = "! ПРОСЬБА ПОДТВЕРДИТЬ ВЫПОЛНЕНИЕ Заявки #" + Заявка.Тикет;
		Причина = "";
		
	КонецЕсли;
	
	ДокументHTML = СоздатьДокументHTMLСОписаниемПисьмаОПриемкеЗаявки(Причина, Заявка, ИдентификаторИсточника, Содержание, Сотрудник, СотрудникОрганизации);
	
	ТаблицаАдресовПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		Сотрудник);
	Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
		
		Письмо = СоздатьПисьмо(ДокументHTML, Заявка, ТемаОтветногоПисьма, ТаблицаАдресовПолучателей,,
			Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая, Истина,
			?(СотрудникОрганизации, Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке,
				Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке), Истина, Вложения,
			Константы.УчетнаяЗаписьДляПолученияАвтоматическихОтветов_ат.Получить());
		
		ЗаписатьИдентификаторПисьмаВРегистрКонтроля(Письмо, ИдентификаторИсточника);
		Возврат Письмо;
		
	КонецЕсли;
	
КонецФункции

Процедура УведомитьОПоступленииДенежныхСредств(Поступление, ОтменаПоступления = Ложь) Экспорт
	
	Если НЕ НужноОтправлятьУведомлениеОПоступленииСписанииДенежныхСредств(Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	Клиент = Поступление.Клиент;
	
	Если НЕ Клиент.Клиент Тогда
		Возврат;
	КонецЕсли;
	
	Тема = "Уведомление о поступлении денежных средств от клиента ";
	
	ТаблицаАдресовПолучателей = ПолучитьТаблицуАдресовПолучателейФинансовыхДокументов(Клиент);
	СписокФинансовыйУведомляемых = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Клиент, Неопределено, Неопределено,, Истина);
	ТаблицаАдресовФинПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокФинансовыйУведомляемых);
	
	СписокФинансовыйУведомляемых_Внутренний = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
	
	УдалитьПовторыИзСписка(СписокФинансовыйУведомляемых, СписокФинансовыйУведомляемых_Внутренний);
	УдалитьВсеВхожденияЗначенияИзСписка(СписокФинансовыйУведомляемых_Внутренний, Пользователи.ТекущийПользователь());
	
	ДополнитьТаблицуАдресовИзДругойТаблицы(ТаблицаАдресовПолучателей, ТаблицаАдресовФинПолучателей);
	
	ТаблицаАдресовФинПолучателей_Внутренний = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокФинансовыйУведомляемых_Внутренний);
	
	Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
		
		ДокументHTML = СоздатьДокументHTMLСОписаниемПисьмаОПоступленииДенежныхСредств(Поступление,, ОтменаПоступления);
		СоздатьПисьмо(ДокументHTML, Поступление, Тема + Клиент.НаименованиеПолное, ТаблицаАдресовПолучателей,, Ложь,,,
			Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое,,,
			Поступление.Организация.УчетнаяЗаписьДляОтправкиФинансовыхДокументов);
		
	КонецЕсли;
	
	Если ТаблицаАдресовФинПолучателей_Внутренний.Количество() > 0 Тогда
		
		ДокументHTML_Внутренний = СоздатьДокументHTMLСОписаниемПисьмаОПоступленииДенежныхСредств(Поступление, Истина, ОтменаПоступления);
		СоздатьПисьмо(ДокументHTML_Внутренний, Поступление, Тема + Клиент, ТаблицаАдресовФинПолучателей_Внутренний,, Ложь,,,
			Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое);
		
		ЗаписатьИнформациюОНеобходимостиОтправкиУведомленийПоФинансовымДокументам(Поступление, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомитьОСписанииДенежныхСредств(Списание, ОтменаСписания = Ложь) Экспорт
	
	Если НЕ НужноОтправлятьУведомлениеОПоступленииСписанииДенежныхСредств(Списание) Тогда
		Возврат;
	КонецЕсли;
	
	Клиент = Списание.Клиент;
	
	Если НЕ Клиент.Клиент Тогда
		Возврат;
	КонецЕсли;
	
	Тема = "Уведомление о списании денежных средств по фактическому балансу клиента ";
	
	ТаблицаАдресовПолучателей = ПолучитьТаблицуАдресовПолучателейФинансовыхДокументов(Клиент);
	
	СписокФинансовыйУведомляемых = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Клиент, Неопределено, Неопределено,, Истина);
	СписокФинансовыйУведомляемых_Внутренний =
		ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
	УдалитьПовторыИзСписка(СписокФинансовыйУведомляемых, СписокФинансовыйУведомляемых_Внутренний);
	УдалитьВсеВхожденияЗначенияИзСписка(СписокФинансовыйУведомляемых_Внутренний, Пользователи.ТекущийПользователь());
	
	ТаблицаАдресовФинПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокФинансовыйУведомляемых);
	
	ДополнитьТаблицуАдресовИзДругойТаблицы(ТаблицаАдресовПолучателей, ТаблицаАдресовФинПолучателей);
	
	ТаблицаАдресовФинПолучателей_Внутренний = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокФинансовыйУведомляемых_Внутренний);
	
	Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
		
		ДокументHTML = СоздатьДокументHTMLСОписаниемПисьмаОСписанииДенежныхСредств(Списание,, ОтменаСписания);
		СоздатьПисьмо(ДокументHTML, Списание, Тема + Клиент.НаименованиеПолное, ТаблицаАдресовПолучателей,, Ложь,,,
			Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое,,,
			Списание.Организация.УчетнаяЗаписьДляОтправкиФинансовыхДокументов);
		
	КонецЕсли;
	
	Если ТаблицаАдресовФинПолучателей_Внутренний.Количество() > 0 Тогда
		
		ДокументHTML_Внутренний = СоздатьДокументHTMLСОписаниемПисьмаОСписанииДенежныхСредств(Списание, Истина, ОтменаСписания);
		СоздатьПисьмо(ДокументHTML_Внутренний, Списание, Тема + Клиент, ТаблицаАдресовФинПолучателей_Внутренний,,,,,
			Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое);
		
		ЗаписатьИнформациюОНеобходимостиОтправкиУведомленийПоФинансовымДокументам(Списание, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомитьОСозданииФинансовогоДокумента(Ссылка, Источник, Ошибки = "", СоздаватьФинДокументНеНужно = Ложь) Экспорт
	
	СписокПолучателей = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
	УдалитьВсеВхожденияЗначенияИзСписка(СписокПолучателей, Пользователи.ТекущийПользователь());
	
	Если СписокПолучателей.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(СписокПолучателей);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда
			
			Если СоздаватьФинДокументНеНужно Тогда
				Тема = "Документом " + Источник + " списаны средства с оперативного баланса без выставления счета";
			ИначеЕсли ПустаяСтрока(Ошибки) Тогда
				Тема = "Создание финансовых документов";
			Иначе
				Тема = "Ошибка создания финансовых документов";
			КонецЕсли;
			
			ДокументHTML = СоздатьДокументСОписаниемУведомленияОСозданииФинДокумента(Ссылка, Источник, Ошибки, СоздаватьФинДокументНеНужно);
			СоздатьПисьмо(ДокументHTML, Источник, Тема, ТаблицаАдресов,, Ложь,,, Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое);
			
			Текст = Взаимодействия.ПолучитьОбычныйТекстИзHTML(РаботаСHTML_КлиентСервер_ат.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML));
			СоздатьНапоминаниеОСозданииФинансовыхДокументов(Текст, Ссылка, Источник, СписокПолучателей)
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Ссылка - Согласование ИЛИ Счет
Процедура УведомитьОСписанииСОперативногоБаланса(Ссылка, УведомлятьВнешних = Ложь, ОтменаСогласования = Ложь) Экспорт
	
	Клиент = Ссылка.Клиент;
	
	Тема = "Уведомление о списании денежных средств по оперативному балансу клиента ";
	
	СписокФинансовыйУведомляемых_Внутренний = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
	УдалитьВсеВхожденияЗначенияИзСписка(СписокФинансовыйУведомляемых_Внутренний, Пользователи.ТекущийПользователь());
	
	ТаблицаАдресовФинПолучателей_Внутренний = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокФинансовыйУведомляемых_Внутренний);
	
	Если ТаблицаАдресовФинПолучателей_Внутренний.Количество() > 0 Тогда
		
		ДокументHTML_Внутренний = СоздатьДокументHTMLСОписаниемПисьмаОСписанииДенежныхСредствСОперативногоБаланса(Ссылка, Истина, ОтменаСогласования);
		СоздатьПисьмо(ДокументHTML_Внутренний, Ссылка, Тема + Клиент, ТаблицаАдресовФинПолучателей_Внутренний,, Ложь,,,
			Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое);
		
		ЗаписатьИнформациюОНеобходимостиОтправкиУведомленийПоФинансовымДокументам(Ссылка, Ложь);
		
	КонецЕсли;
	
	Если УведомлятьВнешних Тогда
		
		ТаблицаАдресовПолучателей = ПолучитьТаблицуАдресовПолучателейФинансовыхДокументов(Клиент);
		СписокФинансовыйУведомляемых = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Клиент, Неопределено, Неопределено,, Истина);
		УдалитьПовторыИзСписка(СписокФинансовыйУведомляемых, СписокФинансовыйУведомляемых_Внутренний);
		ТаблицаАдресовФинПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			СписокФинансовыйУведомляемых);
		ДополнитьТаблицуАдресовИзДругойТаблицы(ТаблицаАдресовПолучателей, ТаблицаАдресовФинПолучателей);
		
		Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемПисьмаОСписанииДенежныхСредствСОперативногоБаланса(Ссылка,, ОтменаСогласования);
			СоздатьПисьмо(ДокументHTML, Ссылка, Тема + Клиент.НаименованиеПолное, ТаблицаАдресовПолучателей,, Ложь,,,
				Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое,,,
				Ссылка.Договор.Организация.УчетнаяЗаписьДляОтправкиФинансовыхДокументов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомитьОНеоплаченныхСчетахИЗадолжностях() Экспорт
	
	Сутки = 24*60*60;
	
	ТаблицаРеализаций = Финансы_ат.ПолучитьТаблицуРеализацийДляАвтоматическихСписаний(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРеализаций.Клиент
		|ПОМЕСТИТЬ Реализации
		|ИЗ
		|	&ТаблицаРеализаций КАК ТаблицаРеализаций
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетНаОплату_ат.Клиент КАК Клиент
		|ИЗ
		|	РегистрСведений.СтатусыСчетовНаОплату_ат КАК СтатусыСчетовНаОплату_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплату_ат КАК СчетНаОплату_ат
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВложенныйЗапрос.Ссылка КАК Ссылка,
		|				МИНИМУМ(ВложенныйЗапрос.Период) КАК Период
		|			ИЗ
		|				(ВЫБРАТЬ
		|					ИсторияСтатусовОтправкиФинДокументов.Ссылка КАК Ссылка,
		|					МИНИМУМ(ИсторияСтатусовОтправкиФинДокументов.Период) КАК Период
		|				ИЗ
		|					РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат КАК ИсторияСтатусовОтправкиФинДокументов
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
		|						ПО ИсторияСтатусовОтправкиФинДокументов.Ссылка = ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка
		|				ГДЕ
		|					ИсторияСтатусовОтправкиФинДокументов.Статус.ПереданКорреспонденту
		|					И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус.ТипСтатуса = &ТипСтатуса
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ИсторияСтатусовОтправкиФинДокументов.Ссылка
		|				
		|				ОБЪЕДИНИТЬ ВСЕ
		|				
		|				ВЫБРАТЬ
		|					ОтправкаФинДокументовПоЭлектроПочте_ат.Документ,
		|					МИНИМУМ(ОтправкаФинДокументовПоЭлектроПочте_ат.Дата)
		|				ИЗ
		|					РегистрСведений.ОтправкаФинДокументовПоЭлектроПочте_ат КАК ОтправкаФинДокументовПоЭлектроПочте_ат
		|				
		|				СГРУППИРОВАТЬ ПО
		|					ОтправкаФинДокументовПоЭлектроПочте_ат.Документ) КАК ВложенныйЗапрос
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ВложенныйЗапрос.Ссылка) КАК ВложенныйЗапрос
		|			ПО СчетНаОплату_ат.Ссылка = ВложенныйЗапрос.Ссылка
		|		ПО СтатусыСчетовНаОплату_ат.Счет = СчетНаОплату_ат.Ссылка
		|ГДЕ
		|	СтатусыСчетовНаОплату_ат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОплатыСчетов_ат.НеОплачен)
		|	И СчетНаОплату_ат.Проведен
		|	И ВложенныйЗапрос.Период > &ДатаКонтроля
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Клиентский_атОстатки.Клиент
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.Остатки КАК Клиентский_атОстатки
		|ГДЕ
		|	Клиентский_атОстатки.СуммаОстаток < 0
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Реализации.Клиент
		|ИЗ
		|	Реализации КАК Реализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты_ат КАК Контрагенты_ат
		|		ПО Реализации.Клиент = Контрагенты_ат.Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Договоры_ат.Владелец
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры_ат КАК Договоры_ат
		|		ПО ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка = Договоры_ат.Ссылка
		|ГДЕ
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус.ПереданКорреспонденту
		|	И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус.ТипСтатуса = &ТипСтатуса
		|	И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период > &ДатаКонтроляДоговора
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Реализация_ат.Клиент
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Реализация_ат КАК Реализация_ат
		|			ПО ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка = Реализация_ат.Ссылка
		|ГДЕ
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус.ТипСтатуса = &ТипСтатуса
		|	И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период < &ДатаПросрочкиАктов
		|	И Реализация_ат.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Клиент
		|;
		|
		|УНИЧТОЖИТЬ Реализации";
	Запрос.УстановитьПараметр("ТаблицаРеализаций", ТаблицаРеализаций);
	Запрос.УстановитьПараметр("ДатаКонтроля", НачалоДня(ТекущаяДатаСеанса() - 3*Сутки));
	Запрос.УстановитьПараметр("ДатаКонтроляДоговора", НачалоДня(ТекущаяДатаСеанса() - 5*Сутки));
	
	ДнейПросрочкиАктов = Константы.КонтрольПросрочкиАктовВДнях_ат.Получить();
	ДатаПросрочкиАктов = ?(ДнейПросрочкиАктов = 0, 40, ДнейПросрочкиАктов) * Сутки;
	
	Запрос.УстановитьПараметр("ДатаПросрочкиАктов", НачалоДня(ТекущаяДатаСеанса() - ДатаПросрочкиАктов));
	Запрос.УстановитьПараметр("ТипСтатуса", Перечисления.ТипыСтатусовОтправкиФинДокументов_ат.НеФинальный);
	
	КлиентыДляРассылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
	
	ОтправлятьКлиентам = Константы.ОтправлятьУведомленияОЗадолженностяхКлиентам_ат.Получить();
	
	Если ОтправлятьКлиентам Тогда
		ТемаПисемОЗадолженностяхКлиента = Константы.ТемаПисемОЗадолженностяхКлиента_ат.Получить();
	КонецЕсли;
	
	СписокПолучателей_Внутренний = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
	УдалитьВсеВхожденияЗначенияИзСписка(СписокПолучателей_Внутренний, Пользователи.ТекущийПользователь());
	ТаблицаАдресовПолучателей_Внутренний = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокПолучателей_Внутренний);
	ЕстьВнутренниеПолучатели = ТаблицаАдресовПолучателей_Внутренний.Количество() > 0;
	
	Если ЕстьВнутренниеПолучатели Тогда
		МассивДокументовHTML = Новый Массив;
	КонецЕсли;
	
	Для Каждого Клиент Из КлиентыДляРассылки Цикл
		
		Если ЗначениеЗаполнено(Клиент) Тогда
			
			СтрокиРеализацийКлиента = ТаблицаРеализаций.НайтиСтроки(Новый Структура("Клиент", Клиент));
			
			Если ОтправлятьКлиентам И Клиент.УведомлятьОЗадолженностях Тогда
				
				СписокФинПолучателей = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Клиент, Неопределено, Неопределено, Ложь, Истина);
				ТаблицаАдресовПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
					СписокФинПолучателей);
				
				Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
					
					ДокументHTML = СоздатьДокументHTMLСОписаниемЗадолжностей(Клиент, Ложь, СтрокиРеализацийКлиента);
					
					Тема = ?(ПустаяСтрока(ТемаПисемОЗадолженностяхКлиента), "Уведомление о задолженности по оплатам!", ТемаПисемОЗадолженностяхКлиента);
					
					СоздатьПисьмо(ДокументHTML, Неопределено, Тема, ТаблицаАдресовПолучателей,,, Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
						Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое, Истина,, Константы.УчетнаяЗаписьДляОтправкиФинансовыхДокументов_ат.Получить());
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьВнутренниеПолучатели Тогда
				МассивДокументовHTML.Добавить(СоздатьДокументHTMLСОписаниемЗадолжностей(Клиент, Истина, СтрокиРеализацийКлиента));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьВнутренниеПолучатели И МассивДокументовHTML.Количество() > 0 Тогда
		
		Тема = "Задолженности клиентов";
		
		ДокументHTMLВнутренний = Новый ДокументHTML;
		ЭлементТело = ДокументHTMLВнутренний.СоздатьЭлемент("body");
		ДокументHTMLВнутренний.Тело = ЭлементТело;
		
		ЭлементБлок = ДокументHTMLВнутренний.СоздатьЭлемент("p");
		ЭлементТело.ДобавитьДочерний(ЭлементБлок);
		
		Для Каждого ЭлементМассиваДокументовHTML Из МассивДокументовHTML Цикл
			
			РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTMLВнутренний, ЭлементБлок, ЭлементМассиваДокументовHTML);
			ДобавитьПереводСтроки(ДокументHTMLВнутренний, ЭлементБлок);
			
		КонецЦикла;
		
		СоздатьПисьмо(ДокументHTMLВнутренний, Неопределено, Тема, ТаблицаАдресовПолучателей_Внутренний,,,,,
			Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОНеобходимостиОтправкиУведомленийПоФинансовымДокументам(СсылкаНаДокументПоступленияИлиСписания, Отправлять) Экспорт
	
	НаборЗаписей = РегистрыСведений.НеобходимостьОтправкиУведомленийПоФинансовымДокументам_ат.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Ссылка.Установить(СсылкаНаДокументПоступленияИлиСписания);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Ссылка = СсылкаНаДокументПоступленияИлиСписания;
	Запись.Отправлять = Отправлять;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция   НужноОтправлятьУведомлениеОПоступленииСписанииДенежныхСредств(СсылкаНаДокументПоступленияИлиСписания) Экспорт //!!!!!HOTFIX //TODO надо см. в УиС
	
	Возврат Истина;
	
	Если НЕ Константы.УведомлятьОПоступленииСписанииДенежныхСредств_ат.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Индикатор
		|ИЗ
		|	РегистрСведений.НеобходимостьОтправкиУведомленийПоФинансовымДокументам_ат КАК НеобходимостьОтправкиУведомленийПоФинансовымДокументам
		|ГДЕ
		|	НЕ НеобходимостьОтправкиУведомленийПоФинансовымДокументам.Отправлять
		|	И НеобходимостьОтправкиУведомленийПоФинансовымДокументам.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокументПоступленияИлиСписания);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Пустой();
		
КонецФункции

Процедура ОтправитьФинансовыеДокументы(СоответствиеДокументов, ПараметрыПечати) Экспорт
	
	Договор = Неопределено;
	Клиент = Неопределено;
	РазныеКлиенты = Ложь;
	
	Организации = Новый Массив;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументов Цикл
		
		Документ = КлючИЗначение.Ключ;
		
		Если Организации.Найти(Документ.Организация) = Неопределено Тогда
			Организации.Добавить(Документ.Организация);
		КонецЕсли;
		
		Если Клиент = Неопределено Тогда
			
			Договор = Документ.Договор;
			Клиент = Документ.Клиент;
			
		Иначе
			
			Если НЕ Документ.Клиент = Клиент Тогда
				
				РазныеКлиенты = Истина;
				Прервать;
				
			КонецЕсли;
			
			Клиент = Документ.Клиент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазныеКлиенты Тогда
		
		Сообщить("Нельзя отправлять финансовые документы по разным клиентам одновременно!");
		Возврат;
		
	КонецЕсли;
	
	СтатусОтправкиДокументовЧерезЭДО = Константы.СтатусОтправкиФинДокументаЧерезЭДО_ат.Получить();
	СтатусОтправкиКорреспонденции = Константы.СтатусОтправкиФинДокумента_ат.Получить();
	
	Для Каждого Организация Из Организации Цикл
		
		ТаблицаПолучателей = ПолучитьТаблицуАдресовПолучателейФинансовыхДокументов(Клиент, Договор);
		
		Если ТаблицаПолучателей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИменФайлов = Новый Массив;
		
		НачатьТранзакцию();
		Попытка
			
			Вложения = Новый ТаблицаЗначений;
			Вложения.Колонки.Добавить("АдресВоВременномХранилище", Новый ОписаниеТипов("Строка"));
			Вложения.Колонки.Добавить("ИмяФайлаСРасширением", Новый ОписаниеТипов("Строка"));
			
			Для Каждого КлючИЗначение Из СоответствиеДокументов Цикл
				
				Документ = КлючИЗначение.Ключ;
				
				Если НЕ Документ.Организация = Организация Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Строка(Документ), "") + ".pdf";
				
				ПолноеИмяФайла = ПолучитьИмяВременногоФайла();
				ПолноеИмяФайла = Лев(ПолноеИмяФайла, СтрНайти(ПолноеИмяФайла, "\", НаправлениеПоиска.СКонца)) + ИмяФайла;
				
				МассивИменФайлов.Добавить(ПолноеИмяФайла);
				
				ТабличныйДокумент = КлючИЗначение.Значение.ТабличныйДокумент;
				ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
				
				НоваяСтрока = Вложения.Добавить();
				НоваяСтрока.ИмяФайлаСРасширением = ИмяФайла;
				НоваяСтрока.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый УникальныйИдентификатор);
				
			КонецЦикла;
			
			Тема = ПолучитьТемуПисьмаСФинансовымиДокументами(СоответствиеДокументов, Организация);
			ДокументHTML = ПолучитьОписаниеПисьмаСФинансовымиДокументами(СоответствиеДокументов, ПараметрыПечати, Организация);
			Письмо = СоздатьПисьмо(ДокументHTML,, Тема, ТаблицаПолучателей,, Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
				Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое, Истина, Вложения,
				Организация.УчетнаяЗаписьДляОтправкиФинансовыхДокументов);
			
			Для Каждого КлючИЗначение Из СоответствиеДокументов Цикл
				
				Документ = КлючИЗначение.Ключ;
				
				Если НЕ Документ.Организация = Организация Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписатьСтатусОтправкиФинансовогоДокумента(Документ,
					Перечисления.СтатусыОтправкиФинансовыхДокументовПоЭлектроннойПочте_ат.Отправлен, Письмо);
				
				Если КлючИЗначение.Значение.ЭДО И НЕ СтатусОтправкиДокументовЧерезЭДО.Пустая() Тогда
					
					Финансы_ат.ЗаписатьСтатусОтправкиФинДокумента(Документ, СтатусОтправкиДокументовЧерезЭДО);
					
				ИначеЕсли НЕ КлючИЗначение.Значение.ЭДО И НЕ СтатусОтправкиКорреспонденции.Пустая() Тогда
					
					Финансы_ат.ЗаписатьСтатусОтправкиФинДокумента(Документ, СтатусОтправкиКорреспонденции,
						"Получатели: " + Строки_КлиентСервер_ат.ПреобразоватьВСтроку(ТаблицаПолучателей.ВыгрузитьКолонку("Представление")));
					
				КонецЕсли; 
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить(ОписаниеОшибки);
			ЗаписьЖурналаРегистрации("Отправка финдокументов", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
			
		КонецПопытки;
		
		Для Каждого ИмяУдаляемогоФайла Из МассивИменФайлов Цикл
			УдалитьФайлы(ИмяУдаляемогоФайла);
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНапоминанияПоЗаданию(Задание, СвойстваЗадания) Экспорт
	
	Статус = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Задание);
	
	Если НЕ Задание.ПометкаУдаления
		И СвойстваЗадания.Свойство("ПланируемаяДатаНачала")
		И ЗначениеЗаполнено(СвойстваЗадания.ПланируемаяДатаНачала)
		И СвойстваЗадания.Свойство("Исполнитель")
		И ЗначениеЗаполнено(СвойстваЗадания.Исполнитель) Тогда
		
		Если (Статус = Перечисления.СтатусыЗаданий_ат.КВозобновлению
		 ИЛИ Статус = Перечисления.СтатусыЗаданий_ат.ПустаяСсылка())
		   И СвойстваЗадания.ПланируемаяДатаНачала > КонецДня(ТекущаяДата()) Тогда
			
			Текст = "На сегодня запланировано начало выполнения Задания <" + Задание.Тезис + ">";
			
			ПараметрыНапоминания = Новый Структура;
			ПараметрыНапоминания.Вставить("Пользователь", СвойстваЗадания.Исполнитель);
			ПараметрыНапоминания.Вставить("Описание", Текст);
			ПараметрыНапоминания.Вставить("Источник", Задание);
			ПараметрыНапоминания.Вставить("ВремяСобытия", НачалоДня(СвойстваЗадания.ПланируемаяДатаНачала));
			ПараметрыНапоминания.Вставить("СрокНапоминания", НачалоДня(СвойстваЗадания.ПланируемаяДатаНачала));
			
			НапоминанияПользователяСлужебный.УдалитьНапоминанияПользователяПоИсточнику(СвойстваЗадания.Исполнитель, Задание);
			НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
			
		Иначе
			
			ПараметрыНапоминания = Новый Структура;
			ПараметрыНапоминания.Вставить("Пользователь", СвойстваЗадания.Исполнитель);
			ПараметрыНапоминания.Вставить("Источник", Задание);
			ПараметрыНапоминания.Вставить("ВремяСобытия", НачалоДня(СвойстваЗадания.ПланируемаяДатаНачала));
			
			НапоминанияПользователяСлужебный.УдалитьНапоминанияПользователяПоИсточнику(СвойстваЗадания.Исполнитель, Задание);
			НапоминанияПользователяСлужебный.ОтключитьНапоминание(ПараметрыНапоминания, Ложь);
			
		КонецЕсли;
		
	КонецЕсли
	
КонецПроцедуры

Процедура СоздатьНапоминаниеПоЗаявке(Заявка) Экспорт
	
	СтатусЗаявки = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Заявка);
	
	Если СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Закрыта
		ИЛИ СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отклонена
		ИЛИ СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
		
		НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Источник.Установить(Заявка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		
	Иначе
		
		СписокПользователей = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
		
		Если ЗначениеЗаполнено(Заявка.Ответственный) Тогда
			СписокПользователей.Добавить(Заявка.Ответственный);
		КонецЕсли;
		ДополнитьСписокКураторамиПроектов(СписокПользователей, 
			Планирование_Сервер_ат.ПолучитьРодительскиеПроекты(Заявка.Проект, Истина, Истина));
		Если НЕ ЗначениеЗаполнено(СписокПользователей) Тогда
			Возврат;
		КонецЕсли;
		
		ОжидаемаяДатаЗавершения = Планирование_Сервер_ат.ПолучитьОжидаемуюДатуЗавершенияЗаявки(Заявка);
		Если НЕ ЗначениеЗаполнено(ОжидаемаяДатаЗавершения) Тогда
			Возврат;
		КонецЕсли;
		
		Если ОжидаемаяДатаЗавершения < КонецДня(ТекущаяДата()) Тогда
			
			Для Каждого ЭлементСпискаПользователей Из СписокПользователей Цикл
				
				Если ТипЗнч(ЭлементСпискаПользователей.Значение) = Тип("СправочникСсылка.Пользователи")
					И НЕ ЭлементСпискаПользователей.Значение.Пустая() Тогда
					
					ПараметрыНапоминания = Новый Структура;
					ПараметрыНапоминания.Вставить("Пользователь", ЭлементСпискаПользователей.Значение);
					ПараметрыНапоминания.Вставить("Источник", Заявка);
					ПараметрыНапоминания.Вставить("ВремяСобытия", НачалоДня(ОжидаемаяДатаЗавершения));
					
					НапоминанияПользователяСлужебный.УдалитьНапоминанияПользователяПоИсточнику(ЭлементСпискаПользователей.Значение, Заявка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если ОжидаемаяДатаЗавершения < НачалоДня(ТекущаяДата()) Тогда
				Текст = "Заявка по тикету #" + Заявка.Тикет + " просрочена!";
			Иначе
				Текст = "До ожидаемого завершения заявки по тикету #" + Заявка.Тикет + " осталось менее 2х дней!";
			КонецЕсли;
			
			Для Каждого ЭлементСпискаПользователей Из СписокПользователей Цикл
				
				Если ТипЗнч(ЭлементСпискаПользователей.Значение) = Тип("СправочникСсылка.Пользователи")
					И НЕ ЭлементСпискаПользователей.Значение.Пустая() Тогда
					
					ПараметрыНапоминания = Новый Структура;
					ПараметрыНапоминания.Вставить("Пользователь", ЭлементСпискаПользователей.Значение);
					ПараметрыНапоминания.Вставить("Описание", Текст);
					ПараметрыНапоминания.Вставить("Источник", Заявка);
					ПараметрыНапоминания.Вставить("ВремяСобытия", НачалоДня(ОжидаемаяДатаЗавершения));
					ПараметрыНапоминания.Вставить("СрокНапоминания", НачалоДня(ОжидаемаяДатаЗавершения - 24*60*60));
					
					НапоминанияПользователяСлужебный.УдалитьНапоминанияПользователяПоИсточнику(ЭлементСпискаПользователей.Значение, Заявка);
					НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗначениеНеобходимостиОтправкиУведомленийПоДокументу(Документ, Значение) Экспорт
	
	НаборЗаписей = РегистрыСведений.НеобходимостьОтправкиУведомленийПоФинансовымДокументам_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ссылка.Установить(Документ);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Ссылка = Документ;
	Запись.Отправлять = Значение;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПроверитьОтветыНаПисьмаСФинансовымиДокументами(Знач МассивПисем) Экспорт
	
	ТаблицаВходящихПисем = ПолучитьТаблицуВходящихПисемСИдентификаторамиОснований(МассивПисем);
	
	Если ТаблицаВходящихПисем.Количество() = 0 Тогда // Если писем нет - проверять ничего не нужно.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// В текст запроса дополнительно включены проверки для оповещений из CLASIX (отсутствует report-type)
	// и для оповещений от mail.ru (нет report-type и в теме уведомления нет темы исходного письма).
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеПисьма1.Письмо,
	|	ВходящиеПисьма1.ИдентификаторОснования
	|ПОМЕСТИТЬ ВходящиеПисьма1
	|ИЗ
	|	&ВходящиеПисьма КАК ВходящиеПисьма1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходящиеПисьма1.Письмо КАК ВходящееПисьмо,
	|	ОтправкаФинДокументовПоЭлектроПочте_ат.Документ
	|ИЗ
	|	РегистрСведений.ОтправкаФинДокументовПоЭлектроПочте_ат КАК ОтправкаФинДокументовПоЭлектроПочте_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВходящиеПисьма1 КАК ВходящиеПисьма1
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержаниеЭлектронныхПисемВходящих_ат КАК СодержаниеЭлектронныхПисемВходящих_ат
	|					ПО ЭлектронноеПисьмоВходящее.Ссылка = СодержаниеЭлектронныхПисемВходящих_ат.ЭПВ
	|				ПО ВходящиеПисьма1.Письмо = ЭлектронноеПисьмоВходящее.Ссылка
	|			ПО (ЭлектронноеПисьмоИсходящее.Тема ПОДОБНО ""%"" + ПОДСТРОКА(ЭлектронноеПисьмоВходящее.Тема, 1, 1000) + ""%""
	|					ИЛИ ЭлектронноеПисьмоВходящее.Тема = ""Подтверждение прочтения""
	|						И СодержаниеЭлектронныхПисемВходящих_ат.ТекстПисьма ПОДОБНО ""%"" + ПОДСТРОКА(ЭлектронноеПисьмоИсходящее.Тема, 1, 1000) + ""%"")
	|		ПО ОтправкаФинДокументовПоЭлектроПочте_ат.Письмо = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	НЕ ВходящиеПисьма1.Письмо ЕСТЬ NULL 
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И (ЭлектронноеПисьмоВходящее.ВнутреннийЗаголовок ПОДОБНО ""%report-type=disposition-notification%""
	|			ИЛИ ЭлектронноеПисьмоВходящее.Тема ПОДОБНО ""%Read-Receipt:%""
	|			ИЛИ ЭлектронноеПисьмоВходящее.Тема ПОДОБНО ""%Подтверждение прочтения%"")";
	
	Запрос.УстановитьПараметр("ВходящиеПисьма", ТаблицаВходящихПисем);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписатьСтатусОтправкиФинансовогоДокумента(Выборка.Документ,
			Перечисления.СтатусыОтправкиФинансовыхДокументовПоЭлектроннойПочте_ат.ПолученАдресатом, Выборка.ВходящееПисьмо);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АвтоматическоеЗакрытиеЗаявок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заявка_ат.Ссылка,
	|	ИсторияСтатусовЗаявок_атСрезПоследних.Период КАК ДатаСтатуса
	|ИЗ
	|	РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовЗаявок_атСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка_ат КАК Заявка_ат
	|		ПО ИсторияСтатусовЗаявок_атСрезПоследних.Ссылка = Заявка_ат.Ссылка
	|ГДЕ
	|	ИсторияСтатусовЗаявок_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.НаПриемке)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВремяНаПриемкуЗаявки = ПолучитьВремяНаПриемкуЗаявки(Выборка.Ссылка);
		
		Если ВремяНаПриемкуЗаявки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаЗакрытияЗаявки = ПолучитьДатуЗакрытияЗаявкиПоВремениНаПриемку(ВремяНаПриемкуЗаявки + 1); // Не учитывается день установки статуса.
		
		Если НЕ ДатаЗакрытияЗаявки = Неопределено Тогда
			
			Если ДатаЗакрытияЗаявки > Выборка.ДатаСтатуса Тогда
				Планирование_Сервер_ат.ЗакрытьЗаявку(Выборка.Ссылка, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьАвтоответ(ВходящееПисьмо, ОписаниеОшибки = "") Экспорт
	
	УчетнаяЗапись = ВходящееПисьмо.УчетнаяЗапись;
	ТаблицаПолучателей = Новый ТаблицаЗначений;
	
	ТаблицаПолучателей.Колонки.Добавить("Адрес");
	ТаблицаПолучателей.Колонки.Добавить("Контакт");
	ТаблицаПолучателей.Колонки.Добавить("Представление");
	
	НоваяСтрока = ТаблицаПолучателей.Добавить();
	НоваяСтрока.Адрес			= ВходящееПисьмо.ОтправительАдрес;
	НоваяСтрока.Контакт			= ВходящееПисьмо.ОтправительКонтакт;
	НоваяСтрока.Представление	= ВходящееПисьмо.ОтправительПредставление;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
	
		ТекстАвтоответа = Константы.ТекстАвтоответаНаNoReplayУчетнуюЗапись_ат.Получить();
		
		Если ПустаяСтрока(ТекстАвтоответа) Тогда
			Возврат;
		КонецЕсли;
		
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ТекстАвтоответа);
		
	Иначе
		
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ОписаниеОшибки);
		
	КонецЕсли;
	
	СоздатьПисьмо(ДокументHTML, ВходящееПисьмо, "Re: " + ВходящееПисьмо.Тема, ТаблицаПолучателей,,,, Истина,
		Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке, Истина,, УчетнаяЗапись);
	
КонецПроцедуры

Процедура ОтправитьУведомленияИзМассива(МассивСтруктурУведомлений) Экспорт
	
	Для Каждого Структура Из МассивСтруктурУведомлений Цикл
		
		УдалитьПовторыИзСписка(Структура.СписокПолучателей, Структура.СписокПолучателейКопий);
		УдалитьВсеВхожденияЗначенияИзСписка(Структура.СписокПолучателей, Пользователи.ТекущийПользователь());
		
		ТаблицаАдресовПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			Структура.СписокПолучателей);
		
		ТаблицаАдресовПолучателейКопий = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			Структура.СписокПолучателейКопий);
		
		Если ТаблицаАдресовПолучателей.Количество() = 0 И ТаблицаАдресовПолучателейКопий.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьПисьмо(Структура.ДокументHTML, Структура.Ссылка, Структура.Тема, ТаблицаАдресовПолучателей, ТаблицаАдресовПолучателейКопий,,,,
			Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке);
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьМассивСтруктурУведомленийПриИзмененииЗаявки(ЗаявкаОбъект) Экспорт
	
	МассивСтруктурУведомлений = Новый Массив;
	
	ВнутренниеУведомляемые = ПолучитьСписокУведомляемыхСоСтороныИсполнителяОбИзмененииЗаявки(ЗаявкаОбъект.Ссылка);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УдалитьВсеВхожденияЗначенияИзСписка(ВнутренниеУведомляемые, ТекущийПользователь);
	
	Если ЗаявкаОбъект.Ответственный <> ЗаявкаОбъект.Ссылка.Ответственный Тогда
		
		СвойстваЗаявки = Планирование_Сервер_ат.ПолучитьСвойстваЗаявки(ЗаявкаОбъект.Ссылка);
		
		Если ЗаявкаОбъект.Ссылка.Ответственный <> ТекущийПользователь Тогда
			
			Текст = "Вы более не ответственный по Заявке #" + ЗаявкаОбъект.Тикет;
			Тема = Текст;
			Текст = Текст + ". Автор изменения " + ТекущийПользователь + ".";
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(ЗаявкаОбъект, Текст, Истина, ЗаявкаОбъект.Ссылка.Ответственный,
				СвойстваЗаявки, Истина);
			
			ДобавитьСтруктуруУведомления(МассивСтруктурУведомлений, ЗаявкаОбъект.Ссылка, Тема, ДокументHTML,
				ЗаявкаОбъект.Ссылка.Ответственный); 
			
		КонецЕсли;
		
		Если НЕ ЗаявкаОбъект.Ответственный.Пустая() Тогда
			
			Текст = "Ответственным по Заявке #" + ЗаявкаОбъект.Тикет + " назначен " + ЗаявкаОбъект.Ответственный;
			Тема = Текст;
			Текст = Текст + ". Автор изменения " + ТекущийПользователь + ".";
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(ЗаявкаОбъект, Текст, Истина, ВнутренниеУведомляемые,
				СвойстваЗаявки, Истина);
			
			ДобавитьСтруктуруУведомления(МассивСтруктурУведомлений, ЗаявкаОбъект.Ссылка, Тема, ДокументHTML,
				ВнутренниеУведомляемые); 
			
			Если ЗаявкаОбъект.Ответственный <> ТекущийПользователь Тогда
				
				Текст = "Вы назначены ответственным по Заявке #" + ЗаявкаОбъект.Тикет;
				Тема = Текст;
				Текст = Текст + ". Автор изменения " + ТекущийПользователь + ".";
				ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(ЗаявкаОбъект, Текст, Истина, ЗаявкаОбъект.Ответственный,
					СвойстваЗаявки, Истина);
				
				ДобавитьСтруктуруУведомления(МассивСтруктурУведомлений, ЗаявкаОбъект.Ссылка, Тема, ДокументHTML,
					ЗаявкаОбъект.Ответственный); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнитьМассивСтруктурУведомленийДаннымиОбИзмененииСвойствЗаявки(МассивСтруктурУведомлений, ЗаявкаОбъект, ВнутренниеУведомляемые);
	
	Возврат МассивСтруктурУведомлений;
	
КонецФункции

Процедура ДобавитьТаблицуВДокументHTML(ДокументHTML, ЭлементБлок = Неопределено, ИсходнаяТаблица,
	ДобавлятьЗаголовок = Истина, ПараметрыОформления = Неопределено) Экспорт
	
	// ПараметрыОформления - Структура. Ключ - Имя колонки таблицы, для которой применить оформление.
	// Значение - Структура атрибутов оформления, где Ключ - Имя атрибута, Значение - значение атрибута.
	// Жирный шрифт : Ключ "style", Значение "font: bold".
	// Выравнивание: Ключ "align", Значения "Left", "Right", "Center", "Justify".
	
	Если ЭлементБлок = Неопределено Тогда
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	КонецЕсли;
	
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементБлок);
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Таблица = ДокументHTML.СоздатьЭлемент("TABLE");
	Таблица.Рамка = "1";
	
	ЭлементБлок.ДобавитьДочерний(Таблица);
	
	ТелоТаблицы = ДокументHTML.СоздатьЭлемент("TBODY");
	Таблица.ДобавитьДочерний(ТелоТаблицы);
	
	КолонкиТаблицы = ИсходнаяТаблица.Колонки;
	
	Если ДобавлятьЗаголовок Тогда
		
		Строка = ДокументHTML.СоздатьЭлемент("TR");
		ТелоТаблицы.ДобавитьДочерний(Строка);
		
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			
			Ячейка = ДокументHTML.СоздатьЭлемент("TH");
			Ячейка.ТекстовоеСодержимое = Колонка.Заголовок;
			
			Если Колонка.Ширина > 0 Тогда
				Ячейка.УстановитьАтрибут("Width", Строка(Колонка.Ширина));
			КонецЕсли;
			
			Строка.ДобавитьДочерний(Ячейка);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		ДобавитьСтрокуТаблицы(ДокументHTML, ТелоТаблицы, СтрокаТаблицы, КолонкиТаблицы, ПараметрыОформления);
		
	КонецЦикла;
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
КонецПроцедуры

// Создает тему письма для автоматического ответа пользователем. 
//
Функция   ПолучитьТемуОтветногоПисьмаПоВиду(ВидПисьма, КодОтвета, НомерДокумента, ИдентификаторИсточника) Экспорт
	
	Разделитель = "_";
	
	Возврат ВидПисьма + Разделитель + НомерДокумента + Разделитель + КодОтвета + Разделитель + ИдентификаторИсточника;
	
КонецФункции

Функция   ПолучитьТемуПисьмаДляОтправкиДокумента(Документ, ПредставлениеНесколькихДокументов, КоличествоОбъектов, ПредставлениеПериода = "") Экспорт
	
	Тема = Документ.Клиент.Наименование;
	
	Если КоличествоОбъектов = 1 Тогда
		Тема = Тема + " - " + Строка(Документ);
	Иначе
		Тема = Тема + " - " + ПредставлениеНесколькихДокументов;
	КонецЕсли;
	
	Тема = Тема + " от " + Документ.Организация.НаименованиеПолное;
	
	Возврат Тема + ?(ПустаяСтрока(ПредставлениеПериода), "", " за " + ПредставлениеПериода);
	
КонецФункции

Функция   ПолучитьТемуПисьмаОСменеСтатуса(Заявка, Внутреннее = Ложь) Экспорт
	
	ТемаПисьма = "";
	
	Если Внутреннее Тогда
		
		ШаблонТемы = Константы.ШаблонТемыУведомленияПоЗаявкеДляВнутреннихПользователей_ат.Получить();
		
		Если ПустаяСтрока(ШаблонТемы) Тогда
			
			ТемаПисьма = "Заявка #" + Заявка.Тикет;
			
		Иначе
			
			Параметры = Новый Структура;
			
			РеквизитыЗаявки = Метаданные.Документы.Заявка_ат.Реквизиты;
			
			Для Каждого РеквизитЗаявки Из РеквизитыЗаявки Цикл
				
				ИмяРеквизита = РеквизитЗаявки.Имя;
				Параметры.Вставить(ИмяРеквизита, Заявка[ИмяРеквизита]);
				
			КонецЦикла;
			
			ТемаПисьма = ЗаполнитьПараметрыВШаблоне(ШаблонТемы, Параметры);
			
		КонецЕсли;
		
	Иначе
		
		Если Заявка.Клиент.СокращеннаяТемаУведомлений Тогда
			ТемаПисьма = "Заявка #" + Заявка.Тикет;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТемаПисьма;
	
	//ТемаПисьма = "";
	//ПустойСотрудник = Ложь;
	//ПустойПроект = Ложь;
	//ПустойТипЗаявки = Ложь;
	//
	//Сотрудник = Заявка.Сотрудник;
	//
	//Если ЗначениеЗаполнено(Сотрудник) Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст =
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	СпецификацияПользователей_ат.ФамилияИО
	//	|ИЗ
	//	|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
	//	|ГДЕ
	//	|	СпецификацияПользователей_ат.Пользователь = &Пользователь
	//	|	И НЕ СпецификацияПользователей_ат.ФамилияИО = """"";
	//	
	//	Запрос.УстановитьПараметр("Пользователь", Сотрудник);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если РезультатЗапроса.Пустой() Тогда
	//		
	//		СотрудникСтрокой = "";
	//		ПустойСотрудник = Истина;
	//		
	//	Иначе
	//		
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Выборка.Следующий();
	//		
	//		СотрудникСтрокой = Выборка.ФамилияИО;
	//		ПустойСотрудник = ПустаяСтрока(СотрудникСтрокой);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Проект = Заявка.Проект;
	//
	//Если ЗначениеЗаполнено(Проект) Тогда
	//	
	//	ПроектСтрокой = Строка(Проект);
	//	
	//Иначе
	//	
	//	ПроектСтрокой = "";
	//	ПустойПроект = Истина;
	//	
	//КонецЕсли;
	//
	//ТипЗаявки = Заявка.ТипЗаявки;
	//
	//Если ЗначениеЗаполнено(ТипЗаявки) Тогда
	//	
	//	ТипЗаявкиСтрокой = ТипЗаявки;
	//	
	//Иначе
	//	
	//	ТипЗаявкиСтрокой = "";
	//	ПустойТипЗаявки = Истина;
	//	
	//КонецЕсли;
	//
	//ПустоеОписание = ПустойСотрудник И ПустойПроект И ПустойТипЗаявки;
	//
	//Если ПустоеОписание Тогда
	//	
	//	ТемаПисьма = Заявка.Тезис;
	//	
	//Иначе
	//	
	//	ТемаПисьма = Заявка.Тезис + " [" + СотрудникСтрокой + ?(НЕ ПустойСотрудник И (НЕ ПустойПроект ИЛИ НЕ ПустойТипЗаявки), ", ", " ")
	//		+ ПроектСтрокой + ?(НЕ ПустойПроект И НЕ ПустойТипЗаявки , ", ", "")
	//		+ ТипЗаявкиСтрокой + "]";
	//	
	//КонецЕсли;
	//
	//Возврат ТемаПисьма;
	
КонецФункции

#Область  ИсходящиеНаКонтролн

// Записывает сведения о необходимости контролировать ответ на письмо в регистр.
//
Процедура ЗаписатьСведенияОКонтролеЭлектронногоПисьма(Письмо, НаКонтроле, Основание = Неопределено,
	ТребуетАвтоматическогоОтвета = Неопределено, ИдентификаторПисьма = Неопределено) Экспорт
	
	Если Основание = Неопределено Тогда
		
		Основание = ПолучитьПервоеПисьмоСКонтролем(Письмо);
		
	КонецЕсли;
	
	Если Основание = Письмо Тогда
		
		ДобавитьЗаписьВРегистрКонтроля(Письмо, НаКонтроле,, ТребуетАвтоматическогоОтвета, ИдентификаторПисьма);
		
	Иначе
		
		ДобавитьЗаписьВРегистрКонтроля(Письмо, НаКонтроле, Основание, ТребуетАвтоматическогоОтвета, ИдентификаторПисьма);
		ДобавитьЗаписьВРегистрКонтроля(Основание, НаКонтроле,, ТребуетАвтоматическогоОтвета, ИдентификаторПисьма);
		
	КонецЕсли;
	
	// Проставим пометки подчиненных писем.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо
	|ИЗ
	|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|ГДЕ
	|	КонтрольИсходящихЭлектронныхПисем_ат.Основание = &Основание";
	Запрос.УстановитьПараметр("Основание", Письмо); // Если передано не первое письмо, запрос будет пустым.
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДобавитьЗаписьВРегистрКонтроля(Выборка.ЭлектронноеПисьмо, НаКонтроле, Письмо, ТребуетАвтоматическогоОтвета, ИдентификаторПисьма);
		
	КонецЦикла;
	
	Если НЕ Основание = Письмо Тогда
		
		// Проставим пометки писем с общим основанием.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо
		|ИЗ
		|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
		|ГДЕ
		|	КонтрольИсходящихЭлектронныхПисем_ат.Основание = &Основание";
		Запрос.УстановитьПараметр("Основание", Основание); // Если передано не первое письмо, запрос будет пустым.
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДобавитьЗаписьВРегистрКонтроля(Выборка.ЭлектронноеПисьмо, НаКонтроле, Основание, ТребуетАвтоматическогоОтвета, ИдентификаторПисьма);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРассмотренностьПисем(Письмо, НаКонтроле) Экспорт
	
	Письмо.Рассмотрено = НЕ НаКонтроле;
	Если НЕ Письмо.Ссылка.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо
		|ИЗ
		|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
		|ГДЕ
		|	КонтрольИсходящихЭлектронныхПисем_ат.Основание = &Основание";
		Запрос.УстановитьПараметр("Основание", Письмо.Ссылка); // Если передано не первое письмо, запрос будет пустым.
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			УстановитьРассмотренностьПисьма(Выборка.ЭлектронноеПисьмо, НаКонтроле);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРассмотренностьПисьма(Письмо, НаКонтроле) Экспорт
	
	ПисьмоОбъект = Письмо.ПолучитьОбъект();
	ПисьмоОбъект.Рассмотрено = НЕ НаКонтроле;
	//ПисьмоОбъект.ОбменДанными.Загрузка = Истина;
	ПисьмоОбъект.Записать();
	
КонецПроцедуры

Процедура СнятьСКонтроляПисьмаПоЗаявке(Заявка) Экспорт
	
	ВзаимодействияПоЗаявке = Взаимодействия.ПолучитьВзаимодействияИзЦепочки(
		Взаимодействия.ПолучитьЗначениеПредмета(Заявка), Неопределено);
	
	Если ТолькоОднаЗаявкаВЦепочке(Заявка.Основание) Тогда
		
		Если ЗначениеЗаполнено(Заявка.Основание) Тогда
			
			ВзаимодействияПоПервомуПисьму = Взаимодействия.ПолучитьВзаимодействияИзЦепочки(
				Взаимодействия.ПолучитьЗначениеПредмета(Заявка.Основание), Взаимодействия.ПолучитьЗначениеПредмета(Заявка));
			
			Для Каждого ЭлементВзаимодействий Из ВзаимодействияПоПервомуПисьму Цикл
				
				ВзаимодействияПоЗаявке.Добавить(ЭлементВзаимодействий);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо
		|ИЗ
		|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
		|ГДЕ
		|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо В (&ВзаимодействияПоЗаявке)
		|	И КонтрольИсходящихЭлектронныхПисем_ат.ПисьмоНаКонтроле
		|	И КонтрольИсходящихЭлектронныхПисем_ат.Основание = ЗНАЧЕНИЕ(Документ.ЭлектронноеПисьмоИсходящее.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("ВзаимодействияПоЗаявке", ВзаимодействияПоЗаявке);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписатьСведенияОКонтролеЭлектронногоПисьма(Выборка.ЭлектронноеПисьмо, Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьСКонтроляПисьмаПоПредмету(Предмет) Экспорт //!!!!!почему-то не используется
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Взаимодействие
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо
	|				ИЛИ ПредметыПапкиВзаимодействий.Взаимодействие = КонтрольИсходящихЭлектронныхПисем_ат.Основание)
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И КонтрольИсходящихЭлектронныхПисем_ат.ПисьмоНаКонтроле";
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписатьСведенияОКонтролеЭлектронногоПисьма(Выборка.Взаимодействие, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает значение реквизита формы НаКонтроле письма.
//
Процедура УстановитьРеквизитФормыНаКонтролеПисьма(Письмо, НаКонтроле) Экспорт
	
	Если Письмо.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрольИсходящихЭлектронныхПисем_ат.ПисьмоНаКонтроле
	|ИЗ
	|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|ГДЕ
	|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо = &ЭлектронноеПисьмо";
	
	Запрос.УстановитьПараметр("ЭлектронноеПисьмо", Письмо);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НаКонтроле = Ложь;
	Иначе
		НаКонтроле = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПисьмоНаКонтроле")[0];
	КонецЕсли;
	
КонецПроцедуры

// Получает дату, после которой начнут слаться повторные уведомления.
//
Функция   ПолучитьДатуРассмотренияПисьма() Экспорт
	
	Возврат КонецДня(ТекущаяДата() + 24*60*60); // Конец следующего дня.
	
КонецФункции

// Повторно отправляет письма, находящиеся на контроле.
//
Процедура ВыполнитьПовторнуюОтправкуПисемНаКонтроле() Экспорт //!!!!!почему-то не используется
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо,
	|	ЭлектронноеПисьмоИсходящее.Тема,
	|	СодержаниеЭлектронныхПисемИсходящих_ат.ТекстПисьма,
	|	СодержаниеЭлектронныхПисемИсходящих_ат.HTMLТекстПисьма,
	|	ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения,
	|	ЭлектронноеПисьмоИсходящее.УчетнаяЗапись,
	|	ЭлектронноеПисьмоИсходящее.Автор,
	|	ЭлектронноеПисьмоИсходящее.Ответственный,
	|	ЭлектронноеПисьмоИсходящее.ТипУведомления_ат КАК ТипУведомления,
	|	ПредметыПапкиВзаимодействий.Предмет,
	|	КонтрольИсходящихЭлектронныхПисем_ат.ТребуетАвтоматическогоОтвета,
	|	КонтрольИсходящихЭлектронныхПисем_ат.ИдентификаторПисьма
	|ИЗ
	|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержаниеЭлектронныхПисемИсходящих_ат КАК СодержаниеЭлектронныхПисемИсходящих_ат
	|			ПО ЭлектронноеПисьмоИсходящее.Ссылка = СодержаниеЭлектронныхПисемИсходящих_ат.ЭПИ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|		ПО КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	КонтрольИсходящихЭлектронныхПисем_ат.ПисьмоНаКонтроле
	|	И КонтрольИсходящихЭлектронныхПисем_ат.Основание = ЗНАЧЕНИЕ(Документ.ЭлектронноеПисьмоИсходящее.ПустаяСсылка)
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ЭлектронноеПисьмоИсходящее.РассмотретьПосле < &ТекущаяДата"; // Шлем копию только первого письма (без основания).
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Предмет = Выборка.Предмет;
		
		ОтправлятьПисьмо = Истина;
		
		Если ЗначениеЗаполнено(Предмет) И ТипЗнч(Предмет) = Тип("ДокументСсылка.Заявка_ат") Тогда //! может переделать на анализ сразу в запросе? а НаКонтроле надо снимать при установке статуса сразу
			
			Статус = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Предмет);
			
			Если Статус = Перечисления.СтатусыЗаявок_ат.Закрыта //!!! Не отправляем по закрытым заявкам. Убрать после написания механизма автозакрытия.
				ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отклонена ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
				ОтправлятьПисьмо = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтправлятьПисьмо Тогда
			
			КопияПисьма = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
			КопияПисьма.УчетнаяЗапись			= Выборка.УчетнаяЗапись;
			КопияПисьма.Заполнить(Выборка.ЭлектронноеПисьмо);
			КопияПисьма.Дата					= ТекущаяДата();
			КопияПисьма.Тема					= "ПОВТОРНО!!! " + Выборка.Тема;
			КопияПисьма.ТипТекста				= Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
			КопияПисьма.Текст					= Выборка.ТекстПисьма;
			КопияПисьма.ТекстHTML				= Выборка.HTMLТекстПисьма;
			КопияПисьма.СтатусПисьма			= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
			КопияПисьма.ИдентификаторОснования	= Выборка.ИдентификаторСообщения;
			КопияПисьма.Автор					= Выборка.Автор;
			КопияПисьма.Ответственный			= Выборка.Ответственный;
			КопияПисьма.Рассмотрено				= Ложь;
			КопияПисьма.Предмет					= Выборка.Предмет;
			КопияПисьма.ТипУведомления_ат		= Выборка.ТипУведомления;
			КопияПисьма.Записать();
			
			ОбработчикиСобытийДляПочтовыхДокументов_ат.ЭкспортироватьТекстВРССодержаниеЭлектронныхПисем(КопияПисьма.Ссылка, Выборка.HTMLТекстПисьма, Ложь);
			ЗаписатьСведенияОКонтролеЭлектронногоПисьма(КопияПисьма.Ссылка, Истина, Выборка.ЭлектронноеПисьмо);
			Взаимодействия.УстановитьПредмет(КопияПисьма.Ссылка, Выборка.Предмет);
			
		Иначе
			
			ЗаписатьСведенияОКонтролеЭлектронногоПисьма(Выборка.ЭлектронноеПисьмо, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, являются ли входящие письма ответами на письма с контролем.
//  Если являются - контроль снимается и уведомляется ответственный.
//
Процедура ПроверитьОтветыНаПисьмаСКонтролем(Знач МассивПисем) Экспорт
	
	ТаблицаВходящихПисем = Уведомления_ат.ПолучитьТаблицуВходящихПисемСИдентификаторамиОснований(МассивПисем);
	
	Если ТаблицаВходящихПисем.Количество() = 0 Тогда // Если писем нет - проверять ничего не нужно.
		Возврат;
	КонецЕсли;
	
	// Получаются все письма на контроле, на которые получен ответ.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВходящиеПисьма1.Письмо,
	|	ВходящиеПисьма1.ИдентификаторОснования
	|ПОМЕСТИТЬ ВходящиеПисьма1
	|ИЗ
	|	&ВходящиеПисьма КАК ВходящиеПисьма1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения,
	|	КонтрольИсходящихЭлектронныхПисем_ат.Основание,
	|	ВходящиеПисьма1.Письмо КАК ВходящееПисьмо
	|ИЗ
	|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВходящиеПисьма1 КАК ВходящиеПисьма1
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|				ПО ВходящиеПисьма1.Письмо = ЭлектронноеПисьмоВходящее.Ссылка
	|			ПО ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения = ВходящиеПисьма1.ИдентификаторОснования
	|				И (НЕ ВходящиеПисьма1.ИдентификаторОснования = """")
	|		ПО (КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо = ЭлектронноеПисьмоИсходящее.Ссылка
	|				ИЛИ КонтрольИсходящихЭлектронныхПисем_ат.Основание = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	НЕ ВходящиеПисьма1.Письмо ЕСТЬ NULL 
	|	И КонтрольИсходящихЭлектронныхПисем_ат.ПисьмоНаКонтроле
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоВходящее.ВнутреннийЗаголовок ПОДОБНО ""%report-type=disposition-notification%""
	|	И НЕ ЭлектронноеПисьмоВходящее.ВнутреннийЗаголовок ПОДОБНО ""%report-type=delivery-status%""
	|	И НЕ ВходящиеПисьма1.ИдентификаторОснования = """"
	|	И НЕ КонтрольИсходящихЭлектронныхПисем_ат.ТребуетАвтоматическогоОтвета";
	
	Запрос.УстановитьПараметр("ВходящиеПисьма", ТаблицаВходящихПисем);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивИсходныхПисем = Новый Массив;
	МассивВходящихПисемСПрямымиОтветами = Новый Массив;
	СоответствиеВходящихПисем = Новый Соответствие;
	
	// Формируется массив только из первых писем.
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Основание) Тогда
			ИсходящееПисьмо = Выборка.Основание;
		Иначе
			ИсходящееПисьмо = Выборка.Ссылка;
		КонецЕсли;
		
		Если МассивИсходныхПисем.Найти(ИсходящееПисьмо) = Неопределено Тогда // На случай, если сразу пришли ответы на несколько писем.
			
			МассивИсходныхПисем.Добавить(ИсходящееПисьмо);
			ВходящееПисьмо = Выборка.ВходящееПисьмо;
			МассивВходящихПисемСПрямымиОтветами.Добавить(ВходящееПисьмо);
			СоответствиеВходящихПисем.Вставить(ИсходящееПисьмо, ВходящееПисьмо);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнитьМассивИсходныхПисемНепрямымиОтветами(МассивИсходныхПисем, МассивПисем, МассивВходящихПисемСПрямымиОтветами, СоответствиеВходящихПисем);
	ДополнитьМассивИсходныхПисемАвтоматическимиОтветами(МассивИсходныхПисем, МассивПисем);
	
	// Снимается контроль со всех писем цепочки, если хотя бы на одно получен ответ.
	Для Каждого ЭлектронноеПисьмо Из МассивИсходныхПисем Цикл
		
		ЗаписатьСведенияОКонтролеЭлектронногоПисьма(ЭлектронноеПисьмо, Ложь);
		СоздатьНапоминаниеОбОтветеНаПисьмоСКонтролем(ЭлектронноеПисьмо, СоответствиеВходящихПисем[ЭлектронноеПисьмо]);
		Документы.Заявка_ат.ОбновитьКомментарийЗаявкиПоОтветуНаПисьмо(СоответствиеВходящихПисем);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ИсходящиеНаКонтролн

#Область  ОбработкаВходящихПисем

Процедура ПроверитьОтветыНаПисьмаОПриемке(Знач Письма) Экспорт
	
	Для Каждого Письмо Из Письма Цикл
		
		Если ПроверитьВалидностьПисьма(Документы.Заявка_ат, Письмо.Тема) Тогда
			
			ПараметрыВходящегоПисьма = ПолучитьПараметрыВходящегоПисьма(Письмо, "Confirmation");
			
			Если НЕ ПараметрыВходящегоПисьма.Свойство("Ошибка") Тогда
				Ошибки = ВыполнитьАвтоматическиеДействияПоПисьму(ПараметрыВходящегоПисьма);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Ошибки) Тогда
				
				Если НЕ ПараметрыВходящегоПисьма.Свойство("Ошибка") Тогда
					ПараметрыВходящегоПисьма.Вставить("Ошибка", Ошибки);
				Иначе
					ПараметрыВходящегоПисьма.Ошибка = ПараметрыВходящегоПисьма.Ошибка + Символы.ПС + Символы.ПС + Ошибки;
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации("Ошибка обработки ответа на письмо о приемке <" + Письмо + ">" + Символы.ПС,,,, Ошибки);
				УведомитьОПолучениПисьмаОПриемке(Неопределено, ПараметрыВходящегоПисьма);
				
				Продолжить;
				
			КонецЕсли;
			
		ИначеЕсли Письмо.УчетнаяЗапись = Константы.УчетнаяЗаписьДляПолученияАвтоматическихОтветов_ат.Получить()
			И ЭтоОтветНеПоСсылке(Письмо) Тогда
			
			ОтправитьАвтоответ(Письмо);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ЭтоОтветНеПоСсылке(Письмо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Индикатор
	|ИЗ
	|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения = &ИдентификаторСообщения
	|	И НЕ ПОДСТРОКА(ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения, 1, 1) = """"
	|	И КонтрольИсходящихЭлектронныхПисем_ат.ТребуетАвтоматическогоОтвета";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Письмо.ИдентификаторОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция   ВыполнитьАвтоматическиеДействияПоПисьму(ПараметрыВходящегоПисьма) Экспорт
	
	Если НЕ ПараметрыВходящегоПисьма.Свойство("Ошибка") Тогда
		
		ИсходящееПисьмо = ПолучитьПисьмоПоИдентификатору(ПараметрыВходящегоПисьма.Идентификатор);
		
		Если ИсходящееПисьмо = Неопределено Тогда
			Возврат "Не найдено исходящее письмо";
		Иначе
			ПараметрыВходящегоПисьма.Вставить("ИсходящееПисьмо", ИсходящееПисьмо);
		КонецЕсли;
		
		Получатели = ИсходящееПисьмо.ПолучателиПисьма.ВыгрузитьКолонку("Контакт");
		
		АдресПочтыОтправителя = СокрЛП(ПараметрыВходящегоПисьма.Письмо.ОтправительАдрес);
		//!!!TODO: переписать это на анализ РС.УиС, где надо вместо флагов использовать строковые реквизиты с адресами ЭП
		// на которые слать нужно и, собственно, с которых проверять ответы. Всякие доп. КИ из Пользователя - грохнуть.
		// Только надо ещё подумать о фин. доках (туда где ФинСогласования?) и просто уведомлениях разных (ещё в
		// Спецификации Пользователей есть ПолучатьУведомления - надо всё это объединить)
		// А также надо не ссылки сомнительные на исх. письма отправлять, а кодировать сразу по сути строку согласующего,
		// чтобы уйти от проверки адресов вообще
		КонтактыОтправителя = Взаимодействия.ПолучитьВсеКонтактыПоEmail(АдресПочтыОтправителя);
		
		ОтправительВПолучателях = Неопределено;
		
		Если КонтактыОтправителя <> Неопределено Тогда
			
			Для Каждого Контакт Из КонтактыОтправителя Цикл
				
				Если Получатели.Найти(Контакт.Контакт) <> Неопределено Тогда
					
					ОтправительВПолучателях = Контакт.Контакт;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОтправительВПолучателях = Неопределено Тогда
			Возврат "Письмо от адреса не входящего в зарегистрированные адреса получателей исходящего запроса";
		КонецЕсли;
		
		Если ПараметрыВходящегоПисьма.ВидПисьма = Документы.Заявка_ат.ВидПисьма() Тогда //!!!TODO - весь этот блок надо перенести в ММ документа
			ОбработчикПисьма = Документы.Заявка_ат;
		ИначеЕсли ПараметрыВходящегоПисьма.ВидПисьма = Документы.Согласование_ат.ВидПисьма() Тогда
			ОбработчикПисьма = Документы.Согласование_ат;
		Иначе
			Возврат "Письмо неизвестного вида";
		КонецЕсли;
		
		Ошибка = ОбработчикПисьма.ЗаполнитьДанныеДляОбработкиОтветногоПисьма(ПараметрыВходящегоПисьма);
		
		Если Ошибка = "" Тогда
			
			ИндексОтветчика = ПараметрыВходящегоПисьма.ВалидныеОтветчики.Найти(ОтправительВПолучателях);
			
			Если ИндексОтветчика = Неопределено Тогда
				
				ОписаниеОшибки = "Не удалось определить Вас в нашей системе как пользователя, которому был отправлен исходящий запрос.
					|Система ожидает ответ от другого пользователя!";
				ОтправитьАвтоответ(ПараметрыВходящегоПисьма.Письмо, ОписаниеОшибки);
				
				Возврат "Письмо от некорректного отправителя (не являющегося ответчиком)";
				
			КонецЕсли;
			
			ПараметрыВходящегоПисьма.Вставить("Ответчик", ПараметрыВходящегоПисьма.ВалидныеОтветчики[ИндексОтветчика]);
			
			Если ПараметрыВходящегоПисьма.ПоложительноеРешение = Неопределено Тогда
				
				ОписаниеОшибки = "Не удалось определить решение по Вашему письму!";
				ОтправитьАвтоответ(ПараметрыВходящегоПисьма.Письмо, ОписаниеОшибки);
				
				Возврат "Не удалось определить решение";
				
			КонецЕсли;
			
			//перенесено в конец алгоритма обработки писем
			//ЗаписатьСведенияОКонтролеЭлектронногоПисьма(ИсходящееПисьмо, Ложь);
			//УстановитьРассмотренность(ПараметрыВходящегоПисьма.ИсходящееПисьмо);
			
		Иначе
			
			ОтправитьАвтоответ(ПараметрыВходящегоПисьма.Письмо, Ошибка);
			Возврат Ошибка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработчикПисьма.ОбработатьАвтоматическоеУведомление(ПараметрыВходящегоПисьма);
	
	Если ПараметрыВходящегоПисьма.Свойство("Ошибка") Тогда
		Возврат ПараметрыВходящегоПисьма.Ошибка;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьПараметрыВходящегоПисьма(Письмо, ВидПисьма) Экспорт
	
	ПараметрыВходящегоПисьма = Новый Структура;
	ПараметрыВходящегоПисьма.Вставить("ВидПисьма", ВидПисьма);
	ПараметрыВходящегоПисьма.Вставить("Письмо", Письмо);
	
	ТемаПисьма = Письмо.Тема;
	
	//Если СтрНайти(ТемаПисьма, "%") > 0 Тогда
	//	Разделитель = "%";
	//Иначе
		Разделитель = "_";
	//КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(ТемаПисьма, Разделитель);
	
	Если ПозицияРазделителя = 0 Тогда
		
		ПараметрыВходящегоПисьма.Вставить("Ошибка", "Нарушена структура письма");
		Возврат ПараметрыВходящегоПисьма;
		
	КонецЕсли;
	
	СлужебнаяСтрока = Прав(ТемаПисьма, СтрДлина(ТемаПисьма) - ПозицияРазделителя);
	
	ПозицияРазделителя = СтрНайти(СлужебнаяСтрока, Разделитель);
	
	Если ПозицияРазделителя = 0 Тогда
		
		ПараметрыВходящегоПисьма.Вставить("Ошибка", "Нарушена структура письма");
		Возврат ПараметрыВходящегоПисьма;
		
	КонецЕсли;
	
	ПараметрыВходящегоПисьма.Вставить("НомерДокумента", СокрЛП(Лев(СлужебнаяСтрока, ПозицияРазделителя - 1)));
	
	СлужебнаяСтрока = Прав(СлужебнаяСтрока, СтрДлина(СлужебнаяСтрока) - ПозицияРазделителя);
	
	ПозицияРазделителя = СтрНайти(СлужебнаяСтрока, Разделитель);
	
	Если ПозицияРазделителя = 0 Тогда
		
		ПараметрыВходящегоПисьма.Вставить("Ошибка", "Нарушена структура письма");
		Возврат ПараметрыВходящегоПисьма;
		
	КонецЕсли;
	
	ПараметрыВходящегоПисьма.Вставить("Ответ", СокрЛП(Лев(СлужебнаяСтрока, ПозицияРазделителя - 1)));
	
	ПараметрыВходящегоПисьма.Вставить("Идентификатор", Новый УникальныйИдентификатор(СокрЛП(Прав(СлужебнаяСтрока,
		СтрДлина(СлужебнаяСтрока) - ПозицияРазделителя))));
	
	Возврат ПараметрыВходящегоПисьма;
	
КонецФункции

Функция   ПроверитьВалидностьПисьма(МенеджерДокумента, ТемаПисьма) Экспорт
	
	Возврат СтрНайти(ТемаПисьма, МенеджерДокумента.ПолучитьИдентификаторВидаПисьмаДляАвтоматическойОбработки()) > 0;
	
КонецФункции

Процедура УведомитьОПолучениПисьмаОПриемке(Заявка, ПараметрыПисьма) Экспорт
	
	Если Заявка = Неопределено Тогда //TODO!!!!! сделать отдельную процедуру уведомления об ошибках
		СписокУведомляемых = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
	Иначе
		СписокУведомляемых = ПолучитьСписокВнутреннихУведомляемыхОСтатусеЗаявки(Заявка, Перечисления.СтатусыЗаявок_ат.Закрыта);
	КонецЕсли;
	
	УдалитьВсеВхожденияЗначенияИзСписка(СписокУведомляемых, Пользователи.ТекущийПользователь());
	Если СписокУведомляемых.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Заявка = Неопределено Тогда
		
		ТемаОтветногоПисьма = "Ошибка обработки ответа";
		Если ТипЗнч(ПараметрыПисьма) = Тип("Структура") Тогда
			Если ПараметрыПисьма.Свойство("ИсходящееПисьмо") Тогда
				ТемаОтветногоПисьма = ТемаОтветногоПисьма + " на " + ПараметрыПисьма.ИсходящееПисьмо;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ТемаОтветногоПисьма = ПолучитьТемуПисьмаОСменеСтатуса(Заявка);
		
	КонецЕсли;
	
	ДокументHTML = СоздатьДокументHTMLСОписаниемПисьмаОРешенииПользователя(ТемаОтветногоПисьма, Заявка, ПараметрыПисьма);
	
	ТаблицаАдресовПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокУведомляемых);
	Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
		
		Письмо = СоздатьПисьмо(ДокументHTML, Заявка, ТемаОтветногоПисьма, ТаблицаАдресовПолучателей,, Ложь,
			Перечисления.ВариантыВажностиВзаимодействия.Высокая, Ложь,
			Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке
			);//,,,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УведомитьОПолучениПисьмаОСогласовании(Согласование, ПараметрыПисьма) Экспорт
	
	СписокПолучателей = Новый СписокЗначений;
	СписокПолучателей.Добавить(Согласование.Заявка.Ответственный);
	ДополнитьСписокКураторамиПроектов(СписокПолучателей, 
		Планирование_Сервер_ат.ПолучитьРодительскиеПроекты(Согласование.Заявка.Проект, Истина, Истина));
	УдалитьВсеВхожденияЗначенияИзСписка(СписокПолучателей, Пользователи.ТекущийПользователь());
	Если СписокПолучателей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТемаОтветногоПисьма = ПолучитьТемуПисьмаОСменеСтатуса(Согласование.Заявка);
	ДокументHTML = СоздатьДокументHTMLСОписаниемПисьмаОРешенииПользователя(ТемаОтветногоПисьма, Согласование, ПараметрыПисьма);
	
	ТаблицаАдресовПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		СписокПолучателей);
	Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
		
		СоздатьПисьмо(ДокументHTML, Согласование, ТемаОтветногоПисьма, ТаблицаАдресовПолучателей,, Ложь,
			Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
			Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке
			);//,,,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработкаВходящихПисем

#КонецОбласти // ПрограммныйИнтерфейс

#Область  СлужебныеПроцедурыИФункции

Функция   СоздатьДокументHTMLСОписаниемПисьмаОПоступленииДенежныхСредств(Поступление, Внутреннее = Ложь, ОтменаПоступления = Ложь)
	
	МассивДоговоров = Новый Массив;
	
	ДокументHTML = Новый ДокументHTML;
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	МакетШаблона = ПолучитьОбщийМакет("ШаблоныФинансовыхУведомлений_ат");
	
	РасшифровкаПлатежа = Поступление.РасшифровкаПлатежа;
	Сумма = 0;
	ДокументыСтрокой = "";
	
	Для Каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Сумма = СтрокаРасшифровкиПлатежа.Сумма + Сумма;
		ДокументыСтрокой = ДокументыСтрокой + СтрокаРасшифровкиПлатежа.СчетНаОплату + ", ";
		
		//Договор = ?(СтрокаРасшифровкиПлатежа.СчетНаОплату.Договор.Родитель = Справочники.Договоры_ат.ПустаяСсылка(),
		//	СтрокаРасшифровкиПлатежа.СчетНаОплату.Договор, СтрокаРасшифровкиПлатежа.СчетНаОплату.Договор.Родитель);
		
		Если МассивДоговоров.Найти(СтрокаРасшифровкиПлатежа.СчетНаОплату.Договор) = Неопределено Тогда
			МассивДоговоров.Добавить(СтрокаРасшифровкиПлатежа.СчетНаОплату.Договор);
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыСтрокой = Лев(ДокументыСтрокой, СтрДлина(ДокументыСтрокой) - 2);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",
		?(ПустаяСтрока(Поступление.Организация.НаименованиеПолное),
			Поступление.Организация.Наименование, Поступление.Организация.НаименованиеПолное));
	СтруктураПараметров.Вставить("Клиент", Поступление.Клиент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ОписаниеДокументовВИмПадеже", ?(РасшифровкаПлатежа.Количество() = 1, "документ", "документы"));
	СтруктураПараметров.Вставить("ОписаниеДокументовВРодПадеже", ?(РасшифровкаПлатежа.Количество() = 1, "документа", "документов"));
	СтруктураПараметров.Вставить("ОписаниеДокументовВДатПадеже", ?(РасшифровкаПлатежа.Количество() = 1, "документу", "документам"));
	СтруктураПараметров.Вставить("Документы", ДокументыСтрокой);
	СтруктураПараметров.Вставить("Сумма", Сумма);
	СтруктураПараметров.Вставить("ДатаПоступления", Формат(Финансы_ат.ПолучитьФактическуюДатуПоступления(Поступление), "ДФ=dd.MM.yyyy"));
	
	Если ОтменаПоступления Тогда
		
		Если Внутреннее Тогда
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиОтменаПоступлениеВнутренний");
		Иначе
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиОтменаПоступление");
		КонецЕсли;
		
	Иначе
		
		Если Внутреннее Тогда
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиПоступлениеВнутренний");
		Иначе
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиПоступление");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьШапки.Параметры.Заполнить(СтруктураПараметров);
	ТекстШапки = МакетШаблона.Вывести(ОбластьШапки).Текст;
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ТекстШапки, Истина, Истина);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Содержание документа учёта:",, Истина);
	
	СчетаНаОплату = Новый Массив;
	ФактическиеСуммыДокументов = Новый Соответствие;
	
	Для Каждого СтрокаРасшифровкиПлатежа Из Поступление.РасшифровкаПлатежа Цикл
		
		СчетаНаОплату.Добавить(СтрокаРасшифровкиПлатежа.СчетНаОплату);
		ФактическиеСуммыДокументов.Вставить(СтрокаРасшифровкиПлатежа.СчетНаОплату, СтрокаРасшифровкиПлатежа.Сумма);
		
	КонецЦикла;
	
	ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, СчетаНаОплату,,, ФактическиеСуммыДокументов);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Если МассивДоговоров.Количество() > 0 Тогда
		
		ВставитьТаблицуОстатковПоДоговорамВДокументHTML(ДокументHTML, ЭлементБлок,
			Поступление.Клиент, МассивДоговоров, Внутреннее,, Поступление.Дата + 1);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	Если НЕ Внутреннее Тогда
		ДобавитьУведомлениеОЗадолженностяхПоСчетамВДокументHTML(Поступление.Клиент, ДокументHTML, ЭлементБлок, Внутреннее);
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

Функция   СоздатьДокументHTMLСОписаниемПисьмаОСписанииДенежныхСредств(Списание, Внутреннее = Ложь, ОтменаСписания = Ложь)
	
	ПоступлениеПоОбслуживанию = Ложь;
	НесколькоТикетов = Ложь;
	
	МассивДоговоров = Новый Массив;
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	МакетШаблона = ПолучитьОбщийМакет("ШаблоныФинансовыхУведомлений_ат");
	
	РасшифровкаПлатежа = Списание.РасшифровкаПлатежа;
	Сумма = 0;
	ДокументыСтрокой = "";
	
	Для Каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Сумма = СтрокаРасшифровкиПлатежа.Сумма + Сумма;
		ДокументыСтрокой = ДокументыСтрокой + СтрокаРасшифровкиПлатежа.Реализация + ", ";
		
	КонецЦикла;
	
	ДокументыСтрокой = Лев(ДокументыСтрокой, СтрДлина(ДокументыСтрокой) - 2);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",
		?(ПустаяСтрока(Списание.Организация.НаименованиеПолное),
			Списание.Организация.Наименование, Списание.Организация.НаименованиеПолное));
	СтруктураПараметров.Вставить("Клиент", Списание.Клиент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ОписаниеДокументовВИмПадеже", ?(РасшифровкаПлатежа.Количество() = 1, "документ",  "документы"));
	СтруктураПараметров.Вставить("ОписаниеДокументовВРодПадеже", ?(РасшифровкаПлатежа.Количество() = 1, "документа", "документов"));
	СтруктураПараметров.Вставить("ОписаниеДокументовВДатПадеже", ?(РасшифровкаПлатежа.Количество() = 1, "документу", "документам"));
	СтруктураПараметров.Вставить("Документы", ДокументыСтрокой);
	СтруктураПараметров.Вставить("Сумма", Сумма);
	СтруктураПараметров.Вставить("ДатаСписания", Формат(Списание.Дата, "ДФ=dd.MM.yyyy"));
	
	Если ОтменаСписания Тогда
		
		Если Внутреннее Тогда
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиОтменаСписанияВнутренний");
		Иначе
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиОтменаСписания");
		КонецЕсли;
		
	Иначе
		
		Если Внутреннее Тогда
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиСписаниеВнутренний");
		Иначе
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиСписание");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьШапки.Параметры.Заполнить(СтруктураПараметров);
	ТекстШапки = МакетШаблона.Вывести(ОбластьШапки).Текст;
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ТекстШапки, Истина, Истина);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Содержание документа учёта:",, Истина);
	
	Реализации = Новый Массив;
	
	Для Каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Реализации.Добавить(СтрокаРасшифровкиПлатежа.Реализация);
		
		//Договор = ?(СтрокаРасшифровкиПлатежа.Реализация.Договор.Родитель = Справочники.Договоры_ат.ПустаяСсылка(), СтрокаРасшифровкиПлатежа.Реализация.Договор, СтрокаРасшифровкиПлатежа.Реализация.Договор.Родитель);
		
		Если МассивДоговоров.Найти(СтрокаРасшифровкиПлатежа.Реализация.Договор) = Неопределено Тогда
			МассивДоговоров.Добавить(СтрокаРасшифровкиПлатежа.Реализация.Договор);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, Реализации,, Истина);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Если МассивДоговоров.Количество() > 0 Тогда
		
		ВставитьТаблицуОстатковПоДоговорамВДокументHTML(ДокументHTML, ЭлементБлок,
			Списание.Клиент, МассивДоговоров, Внутреннее,, Списание.Дата + 1);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
	КонецЕсли;
	
	Если НЕ Внутреннее Тогда
		ДобавитьУведомлениеОЗадолженностяхПоСчетамВДокументHTML(Списание.Клиент, ДокументHTML, ЭлементБлок, Внутреннее);
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

Функция   СоздатьДокументHTMLСОписаниемПисьмаОСписанииДенежныхСредствСОперативногоБаланса(СогласованиеИлиСчет,
	Внутреннее = Ложь, ОтменаСогласования = Ложь)
	
	ДокументHTML = Новый ДокументHTML;
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	//ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	//ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	ЭлементБлок = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТело,
		"div",
		Новый Структура("style", "font-family:arial,verdana,sans-serif"));
	
	МакетШаблона = ПолучитьОбщийМакет("ШаблоныФинансовыхУведомлений_ат");
	
	//Договор = ?(Согласование.Договор.Родитель = Справочники.Договоры_ат.ПустаяСсылка(), Согласование.Договор,
	//	Согласование.Договор.Родитель);
	
	ДатаСписания = Финансы_ат.ПолучитьФактическуюДатуСписания(СогласованиеИлиСчет);
	
	//выделить в процедуру
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",
		?(ПустаяСтрока(СогласованиеИлиСчет.Договор.Организация.НаименованиеПолное),
			СогласованиеИлиСчет.Договор.Организация.Наименование, СогласованиеИлиСчет.Договор.Организация.НаименованиеПолное));
	СтруктураПараметров.Вставить("Клиент", СогласованиеИлиСчет.Клиент.НаименованиеПолное);
	СтруктураПараметров.Вставить("ОписаниеДокументовВИмПадеже", "документ");
	СтруктураПараметров.Вставить("ОписаниеДокументовВРодПадеже", "документа");
	СтруктураПараметров.Вставить("ОписаниеДокументовВДатПадеже", "документу");
	СтруктураПараметров.Вставить("Документы", Строка(СогласованиеИлиСчет));
	СтруктураПараметров.Вставить("Сумма", СогласованиеИлиСчет.СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаСписания", Формат(ДатаСписания, "ДФ=dd.MM.yyyy"));
	
	Если ОтменаСогласования Тогда
		
		Если Внутреннее Тогда
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиОтменаСписанияОперативныйВнутренний");
		Иначе
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиОтменаСписанияОперативный");
		КонецЕсли;
		
	Иначе
		
		Если Внутреннее Тогда
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиСписаниеОперативныйВнутренний");
		Иначе
			ОбластьШапки = МакетШаблона.ПолучитьОбласть("ТекстШапкиСписаниеОперативный");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбластьШапки.Параметры.Заполнить(СтруктураПараметров);
	Описание = МакетШаблона.Вывести(ОбластьШапки).Текст;
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Описание, Истина, Истина);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Содержание документа учёта:",, Истина);
	
	МассивОтчетныхДокументов = Новый Массив;
	МассивОтчетныхДокументов.Добавить(СогласованиеИлиСчет);
	ДобавитьТаблицуОтчетныхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, МассивОтчетныхДокументов, Истина);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	МассивДоговоров = Новый Массив;
	МассивДоговоров.Добавить(СогласованиеИлиСчет.Договор);
	ВставитьТаблицуОстатковПоДоговорамВДокументHTML(ДокументHTML, ЭлементБлок,
		СогласованиеИлиСчет.Клиент, МассивДоговоров, Внутреннее,, ДатаСписания + 1);
	
	Если НЕ Внутреннее Тогда
		ДобавитьУведомлениеОЗадолженностяхПоСчетамВДокументHTML(СогласованиеИлиСчет.Клиент, ДокументHTML, ЭлементБлок, Внутреннее);
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

Процедура УведомитьОСменеСтатусаЗаявки(Заявка, Статус, Вложения = Неопределено, УведомлятьВнешних = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	
	СвойстваЗаявки = Планирование_Сервер_ат.ПолучитьСвойстваЗаявки(Заявка);
	
	ВнутрУведомляемые = ПолучитьСписокВнутреннихУведомляемыхОСтатусеЗаявки(Заявка, Статус);
	ВнутрУведомляемыеФинансы = ПолучитьСписокВнутреннихУведомляемыхСРольюФинансыОСтатусеЗаявки(Заявка, Статус);
	ВнутрУведомляемыеФинансыРасширенные = ПолучитьСписокВнутреннихУведомляемыхСРасширеннымиПравами(ВнутрУведомляемыеФинансы, Статус);
	
	ВнешнУведомляемые = Новый СписокЗначений;
	ВнешнУведомляемыеФинансы = Новый СписокЗначений;
	
	Если ВнутреннегоИспользования_ат.КонтрагентЯвляетсяВнутренним(Заявка.Клиент) Тогда
		
		ВнутрУведомляемые.Добавить(Заявка.Сотрудник);
		
	Иначе
		
		Если УведомлятьВнешних Тогда
			
			ВнешнУведомляемые = ПолучитьСписокВнешнихУведомляемыхОСтатусеЗаявки(Заявка, Статус);
			ВнешнУведомляемыеФинансы = ПолучитьСписокВнешнихУведомляемыхСРольюФинансыОСтатусеЗаявки(Заявка, Статус);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	УдалитьВсеВхожденияЗначенияИзСписка(ВнутрУведомляемые,		ТекущийПользователь);
	УдалитьПовторыИзСписка(ВнутрУведомляемыеФинансы,			ВнутрУведомляемые);
	УдалитьПовторыИзСписка(ВнутрУведомляемыеФинансыРасширенные, ВнутрУведомляемые);
	УдалитьВсеВхожденияЗначенияИзСписка(ВнешнУведомляемые,		ТекущийПользователь);
	УдалитьПовторыИзСписка(ВнешнУведомляемыеФинансы,			ВнешнУведомляемые);
	УдалитьПовторыИзСписка(ВнешнУведомляемые,					ВнутрУведомляемые);
	УдалитьПовторыИзСписка(ВнешнУведомляемыеФинансы,			ВнутрУведомляемые);
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.НаСогласовании Тогда
		
		СписокСогласующих = ПолучитьСписокСогласующих(Заявка);
		УдалитьПовторыИзСписка(ВнешнУведомляемые, СписокСогласующих);
		УдалитьПовторыИзСписка(ВнешнУведомляемыеФинансы, СписокСогласующих);
		
	КонецЕсли;
	
	//
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.Зарегистрирована Тогда
		Причина = "Зарегистрирована новая Заявка. Назначен тикет #" + Заявка.Тикет;
	Иначе
		Причина = "Заявка #" + Заявка.Тикет + " получила статус <" + Статус + ">";
	КонецЕсли;
	
	ТемаПисьма = ПолучитьТемуПисьмаОСменеСтатуса(Заявка);
	
	Если ПустаяСтрока(ТемаПисьма) Тогда
		ТемаПисьма = Причина;
	КонецЕсли;
	
	ВнутренняяПричина = Причина + " в " + Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'");
	
	ВнутренняяТемаПисьма = ПолучитьТемуПисьмаОСменеСтатуса(Заявка, Истина);
	
	//
	
	Если ВнутрУведомляемые.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнутрУведомляемые);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда 
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(Заявка, ВнутренняяПричина, Истина, ВнутрУведомляемые,
				СвойстваЗаявки, Истина);
			
			СоздатьПисьмо(ДокументHTML, Заявка, ВнутренняяТемаПисьма, ТаблицаАдресов,,,,,
				Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке
				);//,,,, Истина); //???
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Макс 27.04.2016
	// Решено не отправлять уведомления о закрытии внутренним финансам, так как они получат уведомления о создании актов,
	// а другие статусы им не интересны, вроде как
	
	//Если ВнутрУведомляемыеФинансы.Количество() > 0 Тогда
	//	
	//	ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
	//		ВнутрУведомляемыеФинансы);
	//		
	//	Если ТаблицаАдресов.Количество() > 0 Тогда 
	//		
	//		ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(Причина, Заявка, СвойстваЗаявки, Истина,,,,,
	//			ВнутрУведомляемыеФинансы, Истина);
	//		
	//		Если Статус = Перечисления.СтатусыЗаявок_ат.Закрыта ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отклонена ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
	//			
	//			Если ЗначениеЗаполнено(СтруктураВремен) Тогда
	//				ДобавитьТаблицуВременВДокументHTML(ДокументHTML, ЭлементБлок, СтруктураВремен, Истина, Истина);
	//			КонецЕсли;
	//			
	//			Если ЗначениеЗаполнено(СтруктураСтоимостей) Тогда
	//				ДобавитьТаблицуСтоимостейВДокументHTML(ДокументHTML, ЭлементБлок, СтруктураСтоимостей);
	//			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	//		СоздатьПисьмо(ДокументHTML, Заявка, ВнутренняяТемаПисьма, ТаблицаАдресов,,,,,
	//			Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое
	//			);//,,,, Истина); //???
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если ВнутрУведомляемыеФинансыРасширенные.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнутрУведомляемыеФинансыРасширенные);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда 
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(Заявка, ВнутренняяПричина, Истина, ВнутрУведомляемыеФинансыРасширенные,
				СвойстваЗаявки, Истина, Истина);
			
			СоздатьПисьмо(ДокументHTML, Заявка, ВнутренняяТемаПисьма, ТаблицаАдресов,,,,,
				Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое
				);//,,,, Истина); //???
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВнешнУведомляемые.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнешнУведомляемые);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда 
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(Заявка, Причина,, ВнешнУведомляемые,
				СвойстваЗаявки, Истина);
			
			СоздатьПисьмо(ДокументHTML, Заявка, ТемаПисьма, ТаблицаАдресов,,,, Истина,
				Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке,, Вложения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВнешнУведомляемыеФинансы.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнешнУведомляемыеФинансы);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда 
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(Заявка, Причина,, ВнешнУведомляемыеФинансы,
				СвойстваЗаявки, Истина, Истина);
			
			СоздатьПисьмо(ДокументHTML, Заявка, ТемаПисьма, ТаблицаАдресов,,,, Истина,
				Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое,, Вложения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

Процедура УведомитьОСменеСтатусаЗадания(Задание, Статус)
	
	Если Статус = Перечисления.СтатусыЗаданий_ат.ВОчереди ИЛИ Статус = Перечисления.СтатусыЗаданий_ат.КВозобновлению Тогда
		Возврат;
	КонецЕсли;
	
	ВнутренниеУведомляемые = ПолучитьСписокУведомляемыхСоСтороныИсполнителяОСтатусеЗадания(Задание);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УдалитьВсеВхожденияЗначенияИзСписка(ВнутренниеУведомляемые, ТекущийПользователь);
	
	ТаблицаАдресовПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
		ВнутренниеУведомляемые);

	Если ТаблицаАдресовПолучателей.Количество() > 0 Тогда
		
		РодительскиеЗаявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание, Ложь);
		
		Если РодительскиеЗаявки.Количество() = 1 Тогда //!!!!!
		//	
		//	СтатусЗаявки = Планирование_Сервер_ат.ПолучитьТекущийСтатус(РодительскиеЗаявки[0]);
		//	
		//	Если СтатусЗаявки <> Перечисления.СтатусыЗаявок_ат.Выполняется Тогда
		//		Возврат;
		//	КонецЕсли;
			
			Причина = Документы.Задание_ат.ПолучитьЗаголовокЗадания(Задание, РодительскиеЗаявки) + " получило статус <" + Статус + ">"
				+ " в " + Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'");
			ДокументHTML = СоздатьДокументHTMLСОписаниемЗадания(Задание, Причина, ВнутренниеУведомляемые); 
			Заявка = РодительскиеЗаявки[0];
			ТемаПисьма = ПолучитьТемуПисьмаОСменеСтатуса(Заявка);
			
			СоздатьПисьмо(ДокументHTML, Заявка,
				//"тикет #" + РодительскиеЗаявки[0].Тикет, // хардкодим сокращённый сабж
				ТемаПисьма,
				ТаблицаАдресовПолучателей,,,,, Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке
				);//,,,, Истина); //???
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура УведомитьОПринятииРешенияПоСогласованию(Согласование, Текст, Пользователь, УведомлятьВнешних = Ложь, УведомлятьСогласующих = Истина)
	
	Заявка = Согласование.Заявка;
	ТипСогласования = Согласование.ТипСогласования;
	ТипыСогласований = Перечисления.ТипыСогласований_ат;
	ТехническоеСогласование =
		ТипСогласования = ТипыСогласований.Техническое
		ИЛИ ТипСогласования = ТипыСогласований.ТехническоеИФинансовое
		ИЛИ ТипСогласования = ТипыСогласований.ПереносДат;
	ФинансовоеСогласование =
		ТипСогласования = ТипыСогласований.Финансовое
		ИЛИ ТипСогласования = ТипыСогласований.ТехническоеИФинансовое;
	
	//
	
	//ВнутрУведомляемые = ПолучитьСписокВнутреннихУведомляемыхОСтатусеЗаявки(Заявка);
	ВнутрУведомляемые = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
	ВнутрУведомляемые.Добавить(Заявка.Ответственный);
	
	СогласованиеЗакрыто =
		Согласование.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято
		ИЛИ Согласование.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отклонено
		ИЛИ Согласование.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отменено;
	
	//ВнутрУведомляемыеФинансы = ПолучитьСписокВнутреннихУведомляемыхСРольюФинансыОСтатусеЗаявки(Заявка, Статус);
	Если СогласованиеЗакрыто И ФинансовоеСогласование Тогда
		ВнутрУведомляемыеФинансы = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
		ВнутрУведомляемыеФинансыРасширенные = ПолучитьСписокВнутреннихУведомляемыхСрасширеннымиПравами(ВнутрУведомляемыеФинансы);
	Иначе
		ВнутрУведомляемыеФинансы = Новый СписокЗначений;
		ВнутрУведомляемыеФинансыРасширенные = Новый СписокЗначений;
	КонецЕсли;
	
	ВнешнУведомляемые = Новый СписокЗначений;
	ВнешнУведомляемыеФинансы = Новый СписокЗначений;
	
	Если ВнутреннегоИспользования_ат.КонтрагентЯвляетсяВнутренним(Заявка.Клиент) Тогда
		
		ВнутрУведомляемые.Добавить(Заявка.Сотрудник);
		
	Иначе
		
		Если УведомлятьВнешних И НЕ Согласование.ФлагВнутреннего Тогда
			
			Если СогласованиеЗакрыто Тогда
				
				//ВнешнУведомляемые = ПолучитьСписокВнешнихУведомляемыхОСтатусеЗаявки(Заявка, Статус);
				ВнешнУведомляемые = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Заявка.Клиент, Заявка.Подразделение,
					Заявка.Проект, Истина,, ТехническоеСогласование);
				
				Для Каждого Причастный Из Заявка.Причастные Цикл //!!! выделить в отд. функцию
					
					Если Причастный.Отправлять Тогда
						
						Если Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке Тогда
							ВнешнУведомляемые.Добавить(Причастный.Пользователь);
						ИначеЕсли Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееПоКлиенту Тогда
							Запрос = Новый Запрос( //!!! переписать в функции
								"ВЫБРАТЬ
								|	СпецификацияПользователей_ат.Пользователь КАК Пользователь
								|ИЗ
								|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
								|ГДЕ
								|	НЕ СпецификацияПользователей_ат.Пользователь.ПометкаУдаления
								|	И СпецификацияПользователей_ат.Контрагент = &Контрагент");
							Запрос.УстановитьПараметр("Контрагент", Заявка.Клиент);
							Выборка = Запрос.Выполнить().Выбрать();
							Пока Выборка.Следующий() Цикл
								ВнешнУведомляемые.Добавить(Выборка.Пользователь);
							КонецЦикла;
						ИначеЕсли Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееПоПодразделению Тогда
							Запрос = Новый Запрос( //!!! переписать в функции
								"ВЫБРАТЬ
								|	СпецификацияПользователей_ат.Пользователь КАК Пользователь
								|ИЗ
								|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
								|ГДЕ
								|	НЕ СпецификацияПользователей_ат.Пользователь.ПометкаУдаления
								|	И СпецификацияПользователей_ат.Подразделение = &Подразделение");
							Запрос.УстановитьПараметр("Контрагент", Причастный.Подразделение);
							Выборка = Запрос.Выполнить().Выбрать();
							Пока Выборка.Следующий() Цикл
								ВнешнУведомляемые.Добавить(Выборка.Пользователь);
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				//ВнешнУведомляемыеФинансы = ПолучитьСписокВнешнихУведомляемыхСРольюФинансыОСтатусеЗаявки(Заявка, Статус);
				ВнешнУведомляемыеФинансы = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Заявка.Клиент, Заявка.Подразделение,
					Заявка.Проект,, Истина,, ФинансовоеСогласование);
				
				Для Каждого Причастный Из Заявка.Причастные Цикл
					
					Если Причастный.Отправлять Тогда
						
						Если Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое Тогда
							ВнешнУведомляемыеФинансы.Добавить(Причастный.Пользователь);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Согласование.Согласующие.Найти(Заявка.Сотрудник, "Согласующий") = Неопределено Тогда
				ВнешнУведомляемые.Добавить(Заявка.Сотрудник);
			КонецЕсли; 
			
			Если УведомлятьСогласующих Тогда
				
				Для Каждого СтрокаСогласующего Из Согласование.Согласующие Цикл
					
					Если СтрокаСогласующего.ТипСогласования = ТипыСогласований.Техническое
						И ВнешнУведомляемые.НайтиПоЗначению(СтрокаСогласующего.Согласующий) = Неопределено Тогда
						
						ВнешнУведомляемые.Добавить(СтрокаСогласующего.Согласующий);
						
					ИначеЕсли (СтрокаСогласующего.ТипСогласования = ТипыСогласований.ТехническоеИФинансовое
							ИЛИ СтрокаСогласующего.ТипСогласования = ТипыСогласований.Финансовое)
						И ВнешнУведомляемыеФинансы.НайтиПоЗначению(СтрокаСогласующего.Согласующий) = Неопределено Тогда
						
						ВнешнУведомляемыеФинансы.Добавить(СтрокаСогласующего.Согласующий);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьВсеВхожденияЗначенияИзСписка(ВнутрУведомляемые,		Пользователь);
	УдалитьПовторыИзСписка(ВнутрУведомляемыеФинансы,			ВнутрУведомляемые);
	УдалитьПовторыИзСписка(ВнутрУведомляемыеФинансыРасширенные, ВнутрУведомляемые);
	УдалитьПовторыИзСписка(ВнутрУведомляемыеФинансы,			ВнутрУведомляемыеФинансыРасширенные);
	УдалитьВсеВхожденияЗначенияИзСписка(ВнешнУведомляемые,		Пользователь);
	УдалитьПовторыИзСписка(ВнешнУведомляемыеФинансы,			ВнешнУведомляемые);
	УдалитьПовторыИзСписка(ВнешнУведомляемые,					ВнутрУведомляемые);
	УдалитьПовторыИзСписка(ВнешнУведомляемыеФинансы,			ВнутрУведомляемые);
	УдалитьПовторыИзСписка(ВнешнУведомляемыеФинансы,			ВнутрУведомляемыеФинансы);
	УдалитьПовторыИзСписка(ВнешнУведомляемыеФинансы,			ВнутрУведомляемыеФинансыРасширенные);
	
	//
	
	Если ВнутрУведомляемые.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнутрУведомляемые);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемСогласования(
				Согласование, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС),,
				ТехническоеСогласование, Ложь,,,, ВнутрУведомляемые, Истина);
			
			СоздатьПисьмо(ДокументHTML, Согласование, ПолучитьТемуПисьмаОСменеСтатуса(Согласование.Заявка, Истина),
				ТаблицаАдресов,, Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
				Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке
				);//,,,, Истина); //???
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВнутрУведомляемыеФинансы.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнутрУведомляемыеФинансы);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемСогласования(
				Согласование, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС),,
				ТехническоеСогласование, ФинансовоеСогласование, Ложь,,, ВнутрУведомляемыеФинансы, Истина);
			
			СоздатьПисьмо(ДокументHTML, Согласование, ПолучитьТемуПисьмаОСменеСтатуса(Согласование.Заявка, Истина),
				ТаблицаАдресов,, Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
				Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое
				);//,,,, Истина); //???
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВнутрУведомляемыеФинансыРасширенные.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнутрУведомляемыеФинансыРасширенные);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемСогласования(
				Согласование, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС),,
				ТехническоеСогласование, ФинансовоеСогласование,,,, ВнутрУведомляемыеФинансыРасширенные, Истина);
			
			СоздатьПисьмо(ДокументHTML, Согласование, ПолучитьТемуПисьмаОСменеСтатуса(Согласование.Заявка, Истина),
				ТаблицаАдресов,, Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
				Перечисления.ТипыУведомлений_ат.ВнутреннееФинансовое
				);//,,,, Истина); //???
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УведомлятьВнешних ИЛИ Согласование.ФлагВнутреннего Тогда
		Возврат;
	КонецЕсли;
	
	Если ВнешнУведомляемые.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнешнУведомляемые);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемСогласования(
				Согласование, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС),,
				ТехническоеСогласование, Ложь,,,, ВнешнУведомляемые);
			
			СоздатьПисьмо(ДокументHTML, Согласование, ПолучитьТемуПисьмаОСменеСтатуса(Согласование.Заявка),
				ТаблицаАдресов,, Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
				Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВнешнУведомляемыеФинансы.Количество() > 0 Тогда
		
		ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			ВнешнУведомляемыеФинансы);
		
		Если ТаблицаАдресов.Количество() > 0 Тогда
			
			ДокументHTML = СоздатьДокументHTMLСОписаниемСогласования(
				Согласование, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС),,
				ТехническоеСогласование, ФинансовоеСогласование,,,, ВнешнУведомляемыеФинансы);
			
			СоздатьПисьмо(ДокументHTML, Согласование, ПолучитьТемуПисьмаОСменеСтатуса(Согласование.Заявка),
				ТаблицаАдресов,, Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая,,
				Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//oldver
	//
	//СписокСогласующих = Новый СписокЗначений;
	//СписокСогласующих.ЗагрузитьЗначения(Согласование.Согласующие.ВыгрузитьКолонку("Согласующий"));
	//УдалитьПользователяИзСписка(СписокСогласующих, Пользователь);
	//
	//ТаблицаАдресовПолучателейВнешнихФинансовых =
	//	ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляФинансовыхДокументовПользователей(СписокСогласующих);
	//	
	//СписокФинансовыхСогласующих = СписокСогласующих.Скопировать();
	//
	//УдалитьПовторыИзСписка(СписокСогласующих,
	//	Коллекции_ат.СкопироватьВСписокЗначений(ТаблицаАдресовПолучателейВнешнихФинансовых.ВыгрузитьКолонку("Контакт")));
	//
	//ТаблицаАдресовПолучателейВнешних = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
	//	СписокСогласующих);
	//
	//Если ТаблицаАдресовПолучателейВнешних.Количество() > 0 Тогда
	//	
	//	ДокументHTMLВнешний = СоздатьДокументHTMLСОписаниемСогласования(
	//		Согласование, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС),, Истина, Ложь, Истина,,,
	//		СписокСогласующих);
	//	
	//	СоздатьПисьмо(ДокументHTMLВнешний, Согласование, Причина, ТаблицаАдресовПолучателейВнешних,, Истина,
	//		Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая, Истина, Истина,,,,, Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке);
	//	
	//КонецЕсли;
	//
	//Если ТаблицаАдресовПолучателейВнешнихФинансовых.Количество() > 0 Тогда
	//	
	//	ДокументHTMLВнешний = СоздатьДокументHTMLСОписаниемСогласования(
	//		Согласование, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС),, Истина, Истина, Истина,,,
	//		СписокФинансовыхСогласующих);
	//	
	//	СоздатьПисьмо(ДокументHTMLВнешний, Согласование, Причина, ТаблицаАдресовПолучателейВнешнихФинансовых,, Истина,
	//		Ложь, Перечисления.ВариантыВажностиВзаимодействия.Высокая, Истина, Истина,,,,, Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое);
	//	
	//КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьОписаниеПлатежа(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КосвенныеСвязиЗаданий_ат.Заявка,
	|	КосвенныеСвязиЗаданий_ат.Счет
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	КосвенныеСвязиЗаданий_ат.Поступление = &Поступление";
	
	Запрос.УстановитьПараметр("Поступление", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеЗаявокИСчетов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеЗаявокИСчетов.Вставить(Выборка.Счет, Выборка.Заявка);
		
	КонецЦикла;
		
	Описание = "Содержание платежа: ";
		
	Для Каждого СтрокаРасшифровкиПлатежа Из Ссылка.РасшифровкаПлатежа Цикл
		
		СчетПоЗаявке = СоответствиеЗаявокИСчетов[СтрокаРасшифровкиПлатежа.СчетНаОплату];
		
		Если СчетПоЗаявке = Неопределено Тогда
		
			Для Каждого СтрокаУслуг Из СтрокаРасшифровкиПлатежа.СчетНаОплату.Услуги Цикл
				
				Описание = Описание + Символы.ПС + СтрокаУслуг.Содержание;
				
			КонецЦикла;
			
		Иначе
			
			Описание = Описание + Символы.ПС + "Работы по тикету #" + СчетПоЗаявке.Значение.Тикет;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция   ПолучитьОписаниеФинансовогоДокумента(Ссылка)
	
	Описание = Новый Массив;
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		Возврат Описание;
	КонецЕсли;
	
	ТипДокументаСтрокой = "";
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетНаОплату_ат") Тогда
		ТипДокументаСтрокой = "СчетНаОплату";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Реализация_ат") Тогда
		ТипДокументаСтрокой = "Реализация";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КосвенныеСвязиЗаданий_ат.Заявка
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипДокументаСтрокой = ""СчетНаОплату""
	|				ТОГДА КосвенныеСвязиЗаданий_ат.Счет = &Документ
	|			КОГДА &ТипДокументаСтрокой = ""Реализация""
	|				ТОГДА КосвенныеСвязиЗаданий_ат.Реализация = &Документ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("ТипДокументаСтрокой", ТипДокументаСтрокой);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		
		Для Каждого СтрокаУслуг Из Ссылка.Услуги Цикл
			
			ОписаниеНоменклатуры = Строка(СтрокаУслуг.Номенклатура)
				+ ?(ЗначениеЗаполнено(Ссылка.Период), " за " + Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Ссылка.Период), "");
			
			Описание.Добавить(ОписаниеНоменклатуры);
			
		КонецЦикла;
		
	Иначе
		
		Пока Выборка.Следующий() Цикл
			
			Описание.Добавить("Услуги (работы) по тикету #" + Выборка.Заявка.Тикет);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция   ПолучитьОписаниеОтчетногоДокумента(СсылкаНаДокумент, ВыводитьФинЧасть)
	
	Описание = Новый ТаблицаЗначений;
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("Строка") Тогда
		Возврат Описание;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.Согласование_ат") Тогда
		Описание = ПолучитьОписаниеСогласования(СсылкаНаДокумент, ВыводитьФинЧасть);
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ФиксацияРабот_ат") Тогда
		Описание = ПолучитьОписаниеФиксацииРабот(СсылкаНаДокумент, ВыводитьФинЧасть);
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.СчетНаОплату_ат") Тогда //!!!!!!НЕДОДЕЛАНО!
		Описание = ПолучитьОписаниеФинДокумента(СсылкаНаДокумент);
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.Реализация_ат") Тогда   //!!!!!!НЕДОДЕЛАНО!
		Описание = ПолучитьОписаниеФинДокумента(СсылкаНаДокумент);
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция   ПолучитьОписаниеСогласования(Согласование, ВыводитьФинЧасть)
	
	СодержаниеСогласования = Новый ТаблицаЗначений;
	
	СодержаниеСогласования.Колонки.Добавить("Описание",,	"Деятельность");
	СодержаниеСогласования.Колонки.Добавить("Количество",,	"Количество");
	
	Если ВыводитьФинЧасть Тогда
		СодержаниеСогласования.Колонки.Добавить("Сумма",,	"Сумма");
	КонецЕсли;
	
	Для Каждого СтрокаСогласованныхРабот Из Согласование.СодержаниеСогласования Цикл
		
		НоваяСтрока = СодержаниеСогласования.Добавить();
		
		Если ВыводитьФинЧасть Тогда
			
			НоваяСтрока.Описание = ?(ПустаяСтрока(СтрокаСогласованныхРабот.Номенклатура.НаименованиеПолное),
				СтрокаСогласованныхРабот.Номенклатура.Наименование, СтрокаСогласованныхРабот.Номенклатура.НаименованиеПолное)
				+ " (" + СтрокаСогласованныхРабот.СодержаниеРабот + ")";
			
		Иначе
			
			НоваяСтрока.Описание = СтрокаСогласованныхРабот.СодержаниеРабот;
			
		КонецЕсли;
		
		НоваяСтрока.Количество = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
			СтрокаСогласованныхРабот.Количество);
		
		Если ВыводитьФинЧасть Тогда
			НоваяСтрока.Сумма = СтрокаСогласованныхРабот.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СодержаниеСогласования.Количество() > 1 Тогда
		
		НоваяСтрока = СодержаниеСогласования.Добавить();
		НоваяСтрока.Описание = "ИТОГО:";
		НоваяСтрока.Количество = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
			Согласование.КоличествоДокумента);
		
		Если ВыводитьФинЧасть Тогда
			НоваяСтрока.Сумма = Согласование.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СодержаниеСогласования;
	
КонецФункции

Функция   ПолучитьОписаниеФиксацииРабот(Закрытие, ВыводитьФинЧасть)
	
	Содержание = Новый ТаблицаЗначений;
	
	Содержание.Колонки.Добавить("Описание",,	"Деятельность");
	Содержание.Колонки.Добавить("Количество",,	"Количество");
	
	Если ВыводитьФинЧасть Тогда
		Содержание.Колонки.Добавить("Сумма",,	"Сумма");
	КонецЕсли;
	
	Для Каждого СтрокаУслуг Из Закрытие.Услуги Цикл
		
		НоваяСтрока = Содержание.Добавить();
		
		Если ВыводитьФинЧасть Тогда
			
			НоваяСтрока.Описание = ?(ПустаяСтрока(СтрокаУслуг.Номенклатура.НаименованиеПолное),
				СтрокаУслуг.Номенклатура.Наименование, СтрокаУслуг.Номенклатура.НаименованиеПолное)
				+ " (" + СтрокаУслуг.СодержаниеРабот + ")";
			
		Иначе
			
			НоваяСтрока.Описание = СтрокаУслуг.СодержаниеРабот;
			
		КонецЕсли;
		
		НоваяСтрока.Количество = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
			СтрокаУслуг.ОтчетноеВремя);
		
		Если ВыводитьФинЧасть Тогда
			НоваяСтрока.Сумма = СтрокаУслуг.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Содержание.Количество() > 1 Тогда
		
		НоваяСтрока = Содержание.Добавить();
		
		НоваяСтрока.Описание = "ИТОГО:";
		НоваяСтрока.Количество = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
			Закрытие.КоличествоДокумента);
		
		Если ВыводитьФинЧасть Тогда
			НоваяСтрока.Сумма = Закрытие.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

Функция   ПолучитьОписаниеФинДокумента(Ссылка)
	
	Содержание = Новый ТаблицаЗначений;
	
	Содержание.Колонки.Добавить("Описание",, 	"Номенклатура");
	Содержание.Колонки.Добавить("Количество",, 	"Количество");
	Содержание.Колонки.Добавить("Сумма",, 		"Сумма");
	
	Для Каждого СтрокаУслуг Из Ссылка.Услуги Цикл
		
		НоваяСтрока = Содержание.Добавить();
		
		НоваяСтрока.Описание 		= ?(ПустаяСтрока(СтрокаУслуг.Номенклатура.НаименованиеПолное),
			СтрокаУслуг.Номенклатура.Наименование, СтрокаУслуг.Номенклатура.НаименованиеПолное);
		НоваяСтрока.Количество 		= СтрокаУслуг.Количество;
		НоваяСтрока.Сумма 			= СтрокаУслуг.Сумма;
		
	КонецЦикла;
	
	Если Содержание.Количество() > 1 Тогда
		
		НоваяСтрока = Содержание.Добавить();
		
		НоваяСтрока.Описание 		= "ИТОГО:";
		//НоваяСтрока.Количество 	= Ссылка.КоличествоДокумента;
		НоваяСтрока.Сумма 			= Ссылка.СуммаДокумента;
		
	КонецЕсли;
	
	Возврат Содержание;
	
КонецФункции

Функция   ПолучитьСписокВнутреннихУведомляемыхОСтатусеЗаявки(Заявка, Статус = Неопределено)
	
	Если //Статус = Перечисления.СтатусыЗаявок_ат.Выполняется
		Статус = Перечисления.СтатусыЗаявок_ат.ВОчереди
		//ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.НаПриемке
		ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.НаСогласовании
		//ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.ВОжиданииОтвета
		ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Черновик Тогда //!!!сделать настраиваемым
		
		Список = Новый СписокЗначений;
		
	Иначе
		
		Список = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
		Список.Добавить(Заявка.Ответственный);
		
		ПроектыЗаявки = Планирование_Сервер_ат.ПолучитьРодительскиеПроекты(Заявка.Проект, Истина, Истина);
		
		Для Каждого Проект Из ПроектыЗаявки Цикл
			
			Если ЗначениеЗаполнено(Проект.Ответственный) Тогда
				Список.Добавить(Проект.Ответственный);
			КонецЕсли;
			
		КонецЦикла;
		
		ДополнитьСписокКураторамиПроектов(Список, ПроектыЗаявки);
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция   ПолучитьСписокВнутреннихУведомляемыхСРольюФинансыОСтатусеЗаявки(Заявка, Статус)
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.Закрыта Тогда
		Список = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
	Иначе
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция   ПолучитьСписокВнутреннихУведомляемыхСРасширеннымиПравами(ВнутрУведомляемыеФинансы, Статус = Неопределено)
	
	Уведомлямые = Новый СписокЗначений;
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.Выполняется
		ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.НаПриемке
		ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.НаСогласовании
		ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.ВОжиданииОтвета
		ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Черновик Тогда
		
		Возврат Уведомлямые;
		
	Иначе
		
		МенеджерыПроектов = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
		РуководителиПроектов = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияРуководительПроекта_ат");
		
		Для Каждого ЭлементВнутреннихУведомляемых Из ВнутрУведомляемыеФинансы Цикл
			
			Уведомляемый = ЭлементВнутреннихУведомляемых.Значение;
			
			Если НЕ МенеджерыПроектов.НайтиПоЗначению(Уведомляемый) = Неопределено
				ИЛИ НЕ РуководителиПроектов.НайтиПоЗначению(Уведомляемый) = Неопределено Тогда
				
				Уведомлямые.Добавить(Уведомляемый);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Уведомлямые;
	
КонецФункции

Функция   ПолучитьСписокВнешнихУведомляемыхОСтатусеЗаявки(Заявка, Статус)
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.Зарегистрирована
		ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Закрыта ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отклонена ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
		
		Список = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Заявка.Клиент, Заявка.Подразделение, Заявка.Проект, Истина);
		Список.Добавить(Заявка.Сотрудник);
		
		Для Каждого Причастный Из Заявка.Причастные Цикл
			
			Если Причастный.Отправлять Тогда
				
				Если Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке Тогда
					Список.Добавить(Причастный.Пользователь);
				ИначеЕсли Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееПоКлиенту Тогда
					Запрос = Новый Запрос( //!!! переписать в функции
						"ВЫБРАТЬ
						|	СпецификацияПользователей_ат.Пользователь КАК Пользователь
						|ИЗ
						|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
						|ГДЕ
						|	НЕ СпецификацияПользователей_ат.Пользователь.ПометкаУдаления
						|	И СпецификацияПользователей_ат.Контрагент = &Контрагент");
					Запрос.УстановитьПараметр("Контрагент", Заявка.Клиент);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						Список.Добавить(Выборка.Пользователь);
					КонецЦикла;
				ИначеЕсли Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееПоПодразделению Тогда
					Запрос = Новый Запрос( //!!! переписать в функции
						"ВЫБРАТЬ
						|	СпецификацияПользователей_ат.Пользователь КАК Пользователь
						|ИЗ
						|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
						|ГДЕ
						|	НЕ СпецификацияПользователей_ат.Пользователь.ПометкаУдаления
						|	И СпецификацияПользователей_ат.Подразделение = &Подразделение");
					Запрос.УстановитьПараметр("Контрагент", Причастный.Подразделение);
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						Список.Добавить(Выборка.Пользователь);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Список = Новый СписокЗначений;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция   ПолучитьСписокВнешнихУведомляемыхСРольюФинансыОСтатусеЗаявки(Заявка, Статус)
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.Закрыта Тогда
		
		Список = ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Заявка.Клиент, Заявка.Подразделение, Заявка.Проект, Ложь, Истина);
		
		Для Каждого Причастный Из Заявка.Причастные Цикл
			
			Если Причастный.Отправлять Тогда
				
				Если Причастный.ТипУведомления = Перечисления.ТипыУведомлений_ат.ВнешнееФинансовое Тогда
					Список.Добавить(Причастный.Пользователь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция   ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(Клиент, Подразделение, Проект,
	Уведомление = Ложь, ФинансовоеУведомление = Ложь, Согласование = Ложь, ФинансовоеСогласование = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлятьИСогласовывать_ат.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.УведомлятьИСогласовывать_ат КАК УведомлятьИСогласовывать_ат
		|ГДЕ
		|	УведомлятьИСогласовывать_ат.Клиент = &Клиент
		|	И (УведомлятьИСогласовывать_ат.Подразделение = &Подразделение
		|			ИЛИ УведомлятьИСогласовывать_ат.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияКлиентов_ат.ПустаяСсылка))
		|	И (УведомлятьИСогласовывать_ат.Проект = &Проект
		|			ИЛИ УведомлятьИСогласовывать_ат.Проект = ЗНАЧЕНИЕ(Справочник.Проекты_ат.ПустаяСсылка))
		|	И (ВЫБОР
		|				КОГДА &Уведомление
		|					ТОГДА УведомлятьИСогласовывать_ат.Уведомления
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА &ФинансовоеУведомление
		|					ТОГДА УведомлятьИСогласовывать_ат.ФинансовыеУведомления
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА &Согласование
		|					ТОГДА УведомлятьИСогласовывать_ат.Согласования
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|			ИЛИ ВЫБОР
		|				КОГДА &ФинансовоеСогласование
		|					ТОГДА УведомлятьИСогласовывать_ат.ФинансовыеСогласования
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Запрос.УстановитьПараметр("ФинансовоеУведомление", ФинансовоеУведомление);
	Запрос.УстановитьПараметр("Согласование", Согласование);
	Запрос.УстановитьПараметр("ФинансовоеСогласование", ФинансовоеСогласование);
	
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	
	Возврат СписокПользователей;
	
КонецФункции 

Функция   ПолучитьСписокУведомляемыхСоСтороныИсполнителяОбИзмененииЗаявки(Заявка)
	
	Список = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
	
	Список.Добавить(Заявка.Ответственный);
	
	ДополнитьСписокКураторамиПроектов(Список,
		Планирование_Сервер_ат.ПолучитьРодительскиеПроекты(Заявка.Проект, Истина, Истина));
	
	Возврат Список;
	
КонецФункции

Функция   ПолучитьСписокУведомляемыхСоСтороныИсполнителяОСтатусеЗадания(Задание)
	
	Список = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
	
	Список.Добавить(Задание.Автор);
	
	СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
	
	Если СвойстваЗадания.Свойство("Исполнитель") Тогда
		Список.Добавить(СвойстваЗадания.Исполнитель);
	КонецЕсли;
	
	МассивЗаявок = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	
	Для Каждого Заявка Из МассивЗаявок Цикл
		Список.Добавить(Заявка.Ответственный);
	КонецЦикла;
	
	ДополнитьСписокКураторамиПроектов(Список, Планирование_Сервер_ат.ПолучитьПроектыЗаявок(МассивЗаявок, Истина, Истина));
	
	Возврат Список;
	
КонецФункции

Функция   ПолучитьСписокСогласующих(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументСогласование_ат.Ссылка
	|ПОМЕСТИТЬ СогласованияПоЗаявке
	|ИЗ
	|	Документ.Согласование_ат КАК ДокументСогласование_ат
	|ГДЕ
	|	НЕ ДокументСогласование_ат.ПометкаУдаления
	|	И ДокументСогласование_ат.Заявка = &Заявка
	|	И ДокументСогласование_ат.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.ОжиданиеОтвета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСогласование_ат.ДатаОтправкиНаСогласование УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Согласование_атСогласующие.Согласующий
	|ИЗ
	|	СогласованияПоЗаявке КАК СогласованияПоЗаявке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Согласование_ат.Согласующие КАК Согласование_атСогласующие
	|		ПО СогласованияПоЗаявке.Ссылка = Согласование_атСогласующие.Ссылка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	СписокСогласующих = Новый СписокЗначений;
	СписокСогласующих.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Согласующий"));
	Возврат СписокСогласующих;
	
КонецФункции

Процедура ДополнитьТаблицуАдресовИзДругойТаблицы(ОсновнаяТаблица, ВторостепеннаяТаблица)
	
	Для Каждого СтрокаВторостепеннойТаблицы Из ВторостепеннаяТаблица Цикл
		
		СтрокаОсновнойТаблицы = ОсновнаяТаблица.Найти(СтрокаВторостепеннойТаблицы.Адрес, "Адрес");
		
		Если СтрокаОсновнойТаблицы = Неопределено Тогда
			
			НоваяСтрока = ОсновнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВторостепеннойТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет переданный список значений кураторами проектов из переданного массива проектов
//
// Параметры:
//	Список - СписокЗначений - Список значений который будет дополнен.
//	МассивПроектов - Массив - Проекты дла которых будут отобраны кураторы.
//
Процедура ДополнитьСписокКураторамиПроектов(Список, МассивПроектов)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Проекты_атКураторы.Куратор КАК Куратор
		|ИЗ
		|	Справочник.Проекты_ат.Кураторы КАК Проекты_атКураторы
		|ГДЕ
		|	Проекты_атКураторы.Ссылка В(&МассивПроектов)
		|	И НЕ Проекты_атКураторы.Куратор.ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Куратор);
	КонецЦикла;
	
КонецПроцедуры 

Процедура ДополнитьМассивСтруктурУведомленийДаннымиОбИзмененииСвойствЗаявки(МассивСтруктурУведомлений, ЗаявкаОбъект, ВнутренниеУведомляемые)
	
	ИменаПроверяемыхРеквизитов = Новый Массив;
	ИменаПроверяемыхРеквизитов.Добавить("Клиент");
	//ИменаПроверяемыхРеквизитов.Добавить("ОжидаемаяДатаЗавершения"); // По ОДЗ должно быть отдельное письмо с причиной изменения.
	ИменаПроверяемыхРеквизитов.Добавить("Основание");
	ИменаПроверяемыхРеквизитов.Добавить("Подразделение");
	ИменаПроверяемыхРеквизитов.Добавить("Проект");
	ИменаПроверяемыхРеквизитов.Добавить("РодительскаяЗаявка");
	ИменаПроверяемыхРеквизитов.Добавить("Сотрудник");
	ИменаПроверяемыхРеквизитов.Добавить("Тезис");
	ИменаПроверяемыхРеквизитов.Добавить("ТекстЗаявки");
	ИменаПроверяемыхРеквизитов.Добавить("ТипЗаявки");
	
	ТаблицаИзмененийСвойствЗаявки = Новый ТабличныйДокумент;
	
	//Тема = "Изменились свойства заявки по тикету #" + ЗаявкаОбъект.Тикет;
	Тема = ПолучитьТемуПисьмаОСменеСтатуса(ЗаявкаОбъект.Ссылка, Истина);
	Текст = "Изменились свойства Заявки #" + ЗаявкаОбъект.Тикет
		+ " в " + Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'")
		+ ". Автор изменений: " + Пользователи.ТекущийПользователь();
	КоличествоИзмененныхСвойств = 0;
	
	ШаблонТаблицы = Документы.Заявка_ат.ПолучитьМакет("ШаблонТаблицыИзмененийСвойствЗаявки");
	ОбластьШапка = ШаблонТаблицы.ПолучитьОбласть("ОбластьШапка");
	
	ТаблицаИзмененийСвойствЗаявки.Вывести(ОбластьШапка);
	
	ОбластьСтрока =  ШаблонТаблицы.ПолучитьОбласть("ОбластьСтрока");
	
	Для Каждого ИмяПроверяемогоРеквизита Из ИменаПроверяемыхРеквизитов Цикл
		
		ЗначениеИзСсылки = ЗаявкаОбъект.Ссылка[ИмяПроверяемогоРеквизита];
		ЗначениеИзОбъекта = ЗаявкаОбъект[ИмяПроверяемогоРеквизита];
		
		Если НЕ ЗначениеИзОбъекта = ЗначениеИзСсылки Тогда
			
			Реквизит = ЗаявкаОбъект.Метаданные().Реквизиты[ИмяПроверяемогоРеквизита];
			
			ОбластьСтрока.Параметры.Свойство = Реквизит.Синоним;
			
			Если Реквизит.Тип = Новый ОписаниеТипов("Строка",,, Новый КвалификаторыСтроки(0)) Тогда
				
				ОбластьСтрока.Параметры.Было = "<Изменено>";
				ОбластьСтрока.Параметры.Стало = "<Изменено>";
				
			Иначе
				
				ОбластьСтрока.Параметры.Было = ?(ЗначениеЗаполнено(ЗначениеИзСсылки), ЗначениеИзСсылки, "<->");
				ОбластьСтрока.Параметры.Стало = ?(ЗначениеЗаполнено(ЗначениеИзОбъекта), ЗначениеИзОбъекта, "<->");
				
			КонецЕсли;
			
			КоличествоИзмененныхСвойств = КоличествоИзмененныхСвойств + 1;
			ТаблицаИзмененийСвойствЗаявки.Вывести(ОбластьСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоИзмененныхСвойств > 0 Тогда
		
		ДокументHTML = СоздатьДокументHTMLСОписаниемЗаявки(ЗаявкаОбъект,, Истина, ВнутренниеУведомляемые);
		
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
		ДокументHTML.Тело.ДобавитьДочерний(ЭлементБлок);
		ДокументHTML.Тело.ВставитьПеред(ЭлементБлок, ДокументHTML.Тело.ПервыйДочерний);
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Текст, Истина, Истина);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		ДобавитьТаблицуИзТабличногоДокументаВДокументHTML(ДокументHTML, ЭлементБлок, ТаблицаИзмененийСвойствЗаявки);
		
		ДобавитьСтруктуруУведомления(МассивСтруктурУведомлений, ЗаявкаОбъект.Ссылка, Тема, ДокументHTML,
			?(ЗначениеЗаполнено(ВнутренниеУведомляемые), ВнутренниеУведомляемые, ЗаявкаОбъект.Ответственный)); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВсеВхожденияЗначенияИзСписка(Список, УдаляемоеЗначение)
	
	Если ТипЗнч(Список) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(УдаляемоеЗначение);
	
	Пока ЭлементСписка <> Неопределено Цикл
		Список.Удалить(ЭлементСписка);
		ЭлементСписка = Список.НайтиПоЗначению(УдаляемоеЗначение);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПовторыИзСписка(ОсновнойСписок, ВторостепенныйСписок)
	
	Если ТипЗнч(ОсновнойСписок) <> Тип("СписокЗначений") ИЛИ ТипЗнч(ВторостепенныйСписок) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементОсновногоСписка Из ОсновнойСписок Цикл
		УдалитьВсеВхожденияЗначенияИзСписка(ВторостепенныйСписок, ЭлементОсновногоСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры 

Процедура ДобавитьСтруктуруУведомления(МассивСтруктурУведомлений, Ссылка, Тема, ДокументHTML, Получатели, ПолучателиКопий = Неопределено)
	
	Если ТипЗнч(Получатели) = Тип("СписокЗначений") Тогда
		
		СписокПолучателей = Получатели;
		
	Иначе
		
		СписокПолучателей = Новый СписокЗначений;
		СписокПолучателей.Добавить(Получатели);
		
	КонецЕсли;
	
	Если ПолучателиКопий = Тип("СписокЗначений") Тогда
		
		СписокПолучателейКопий = ПолучателиКопий;
		
	Иначе
		
		СписокПолучателейКопий = Новый СписокЗначений;
		
		Если ПолучателиКопий <> Неопределено Тогда
			СписокПолучателейКопий.Добавить(ПолучателиКопий);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураУведомления = Новый Структура;
	СтруктураУведомления.Вставить("Ссылка", Ссылка);
	СтруктураУведомления.Вставить("Тема", Тема);
	СтруктураУведомления.Вставить("ДокументHTML", ДокументHTML);
	СтруктураУведомления.Вставить("СписокПолучателей", СписокПолучателей);
	СтруктураУведомления.Вставить("СписокПолучателейКопий", СписокПолучателейКопий);
	
	МассивСтруктурУведомлений.Добавить(СтруктураУведомления);
	
КонецПроцедуры 

Функция   ПолучитьПредставлениеОтвета(Ответ)
	
	Возврат ?(Ответ, "ACCEPT", "DECLINE");
	
КонецФункции

Функция   ПолучитьТемуОтветногоПисьмаДляПриемкиЗаявки(Заявка, ПоложительныйОтвет, ИдентификаторИсточника)
	
	Возврат ПолучитьТемуОтветногоПисьмаПоВиду(Документы.Заявка_ат.ПолучитьИдентификаторВидаПисьмаДляАвтоматическойОбработки(),
		ПолучитьПредставлениеОтвета(ПоложительныйОтвет), Заявка.Тикет, ИдентификаторИсточника);
	
КонецФункции

Процедура ДобавитьИнформациюОбЭкземпляреПродукта(ДокументHTML, ЭлементБлок, Заявка, СвойстваЗаявки, Внутреннее)
	
	ЭкземплярПродуктаЗаявки = СвойстваЗаявки.ЭкземплярПродукта_ИзЗакрытияЗаявки;
	ВерсияПродуктаЗаявки = СвойстваЗаявки.ВерсияПродукта_ИзЗакрытияЗаявки;
	ТребуетсяПерезапускЭкземпляраПродукта = СвойстваЗаявки.ТребуетсяПерезапускЭкземпляраПродукта;
	
	ОповещениеОНеобходимостиПерезапуска = ?(ТребуетсяПерезапускЭкземпляраПродукта, ", требуется перезагрузка", "");
	
	ПредставлениеЭкземпляраЗаявки = ПолучитьПредставлениеЭкземпляра(ЭкземплярПродуктаЗаявки, Внутреннее);
	
	ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементБлок,
		"div",
		Новый Структура("style", "border:none;margin:10pt;font-size:80%"));
	
	Если НЕ ПустаяСтрока(ПредставлениеЭкземпляраЗаявки) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIV, "Реализовано в " + ПредставлениеЭкземпляраЗаявки + " "
			+ ?(ВерсияПродуктаЗаявки = ЭкземплярПродуктаЗаявки.ТекущаяВерсия,
			" (текущая версия" + ОповещениеОНеобходимостиПерезапуска + ")", "(" + ВерсияПродуктаЗаявки + ")"),
			Истина, Истина);
		
	КонецЕсли;
		
	Задания = Планирование_Сервер_ат.ПолучитьДочерниеЗадания(Заявка);
	
	Для Каждого Задание Из Задания Цикл
		
		ЭкземплярПродуктаЗадания = Задание.ЭкземплярПродукта;
		ВерсияПродуктаЗадания = Задание.ВерсияПродукта;
		
		СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
		
		Если СвойстваЗадания.Свойство("ТребуетсяПерезапускЭкземпляраПродукта") Тогда
			ТребуетсяПерезапускЭкземпляраПродукта = СвойстваЗадания.ТребуетсяПерезапускЭкземпляраПродукта;
		Иначе
			ТребуетсяПерезапускЭкземпляраПродукта = Неопределено;
		КонецЕсли;
		
		ДругаяВерсия = НЕ ВерсияПродуктаЗаявки = ВерсияПродуктаЗадания;
		
		Если ЗначениеЗаполнено(ВерсияПродуктаЗадания)
			И ДругаяВерсия
			И ЗначениеЗаполнено(СвойстваЗадания.РезультатВыполненияВHTML) Тогда
			
			ЭлементDIVЗаданий = Взаимодействия.ДобавитьЭлементСАтрибутами(
				ЭлементDIV,
				"div",
				Новый Структура("style", "border:none;border-left:solid blue 0.5pt;margin:10pt;font-size:120%"));
			
			РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементDIVЗаданий,
				Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(СвойстваЗадания.РезультатВыполненияВHTML));
				
			Если ТребуетсяПерезапускЭкземпляраПродукта = Неопределено Тогда
				ОповещениеОНеобходимостиПерезапуска = ?(ТребуетсяПерезапускЭкземпляраПродукта, ", требуется перезагрузка", "");
			Иначе
				ОповещениеОНеобходимостиПерезапуска = ", возможно требуется перезагрузка";
			КонецЕсли;
			
			ПредставлениеЭкземпляраЗадания = ПолучитьПредставлениеЭкземпляра(ЭкземплярПродуктаЗадания, Внутреннее);
			
			ЭлементDIVЭПЗаданий = Взаимодействия.ДобавитьЭлементСАтрибутами(
				ЭлементDIVЗаданий,
				"div",
				Новый Структура("style", "border:none;margin:10pt;font-size:80%"));
				
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIVЭПЗаданий, "Реализовано в " + ПредставлениеЭкземпляраЗадания + " "
				+ ?(ВерсияПродуктаЗадания = ЭкземплярПродуктаЗадания.ТекущаяВерсия,
				" (текущая версия" + ОповещениеОНеобходимостиПерезапуска + ")", "(" + ВерсияПродуктаЗадания + ")"),
				Истина, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьПредставлениеЭкземпляра(ЭкземплярПродукта, Внутреннее)
	
	Если ЗначениеЗаполнено(ЭкземплярПродукта) Тогда
		
		ИмяРегистра = УчетПродуктов_ат.ПолучитьИмяРегистраСпецификацииЭкземпляраПродукта(ЭкземплярПродукта.ТекущийПродукт.ТипПродукта);
		
		Если ИмяРегистра = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭкземплярПродукта.Установить(ЭкземплярПродукта);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			Запись = НаборЗаписей[0];
			
		Иначе
			
			Запись = Неопределено;
			
		КонецЕсли;
		
		Если Запись = Неопределено Тогда
			
			Представление = "";
			
		Иначе
			
			Если Внутреннее Тогда
				
				ЗаполненоИмя = НЕ ПустаяСтрока(Запись.ИмяИБНа1С);
				ЗаполненСервер = НЕ ПустаяСтрока(Запись.СерверБД);
				
				Представление = Строка(ЭкземплярПродукта.ТекущийПродукт) 
				//+ " (База: " + Запись.ИмяИБНа1С + "; Сервер: " + Запись.СерверБД + ")";
					+ ?(ЗаполненоИмя ИЛИ ЗаполненСервер, " (", "") + ?(ЗаполненоИмя, "База: " + Запись.ИмяИБНа1С, "")
					+ ?(ЗаполненоИмя И ЗаполненСервер, "; ", "") + ?(ЗаполненСервер, "Сервер: " + Запись.СерверБД, "")
					+ ?(ЗаполненоИмя ИЛИ ЗаполненСервер, ")", "");
				
			Иначе
				
				Представление = ?(ПустаяСтрока(Запись.ИмяИБВСписке), Строка(ЭкземплярПродукта.ТекущийПродукт), Запись.ИмяИБВСписке);
				
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		Представление = "";
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

//

Функция   СформироватьИсходящееHTML(ДокументHTMLТекущееРедактирование, ПисьмоОснование, ЦитироватьОснование)
	
	Если НЕ ЗначениеЗаполнено(ПисьмоОснование) ИЛИ НЕ ЦитироватьОснование Тогда
		Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTMLТекущееРедактирование);
	КонецЕсли;
	
	Выборка = Взаимодействия.ПолучитьДанныеПисьмаОснования(ПисьмоОснование);
	
	Если Выборка.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		
		ОбычныйТекстПисьма =
			ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(ПисьмоОснование);
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ОбычныйТекстПисьма);
		
	Иначе
		
		ТекстHTMLПисьма =
			ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(ПисьмоОснование);
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTMLПисьма);
		
	КонецЕсли;
	
	ЭлементТелоПисьма = ДокументHTML.Тело;
	Если ЭлементТелоПисьма = Неопределено Тогда
		Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTMLТекущееРедактирование);
	КонецЕсли;
	
	МассивДочернихУзловТела = Взаимодействия.ПолучитьМассивДочернихУзловСодержащихHTML(ЭлементТелоПисьма);
	
	//Добавляем текст отредактированный в поле форматированного документа
	Если ДокументHTMLТекущееРедактирование.Тело <> Неопределено Тогда
		
		Для Каждого ДочернийУзел Из ДокументHTMLТекущееРедактирование.Тело.ДочерниеУзлы Цикл
			
			ЭлементТелоПисьма.ДобавитьДочерний(ДокументHTML.ИмпортироватьУзел(ДочернийУзел, Истина));
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементТелоПисьма);
	
	ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементТелоПисьма,
		"div",
		Новый Структура("style", "border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt"));
	
	Для Каждого ДочернийУзел Из МассивДочернихУзловТела Цикл
		ЭлементDIV.ДобавитьДочерний(ДочернийУзел);
	КонецЦикла;
	
	//Подготовим шапку письма основания
	//Горизонтальный разделитель
	ЭлементHR = Взаимодействия.ДобавитьЭлементСАтрибутами(
		ЭлементDIV,
		"hr",
		Новый Структура("size, width, align, tabindex", "2", "100%", "center", "-1"));
	Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV ,ЭлементHR, МассивДочернихУзловТела);
	
	//Данные письма основания
	Если ЗначениеЗаполнено(ПисьмоОснование) Тогда
		
		ЭлементШрифт = Взаимодействия.СформироватьЭлементДанныхШапкиПисьма(ЭлементDIV, Выборка);
		Взаимодействия.ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV, ЭлементШрифт, МассивДочернихУзловТела);
		
	КонецЕсли;
	
	Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

// //TODO: большую часть надо перенести в ОМ.РаботаСHTML

Процедура ДобавитьКнопкиВопросаВДокументHTML(ДокументHTML, ЭлементБлок,
	ТекстКнопкиПоложительногоОтвета, ТекстКнопкиОтрицательногоОтвета,
	ТемаПоложительногоОтвета, ТемаОтрицательногоОтвета,
	ТекстПоложительногоОтвета, ТекстОтрицательногоОтвета, ФинансовоеСогласование)
	
	УчетнаяЗаписьДляУведомлений = Константы.УчетнаяЗаписьДляПолученияАвтоматическихОтветов_ат.Получить();
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьДляУведомлений) Тогда
		СистемнаяУчетнаяЗапись = УчетнаяЗаписьДляУведомлений;
	Иначе
		СистемнаяУчетнаяЗапись = ПолучитьСистемнуюУчетнуюЗапись();
	КонецЕсли;
	
	Если НЕ СистемнаяУчетнаяЗапись = Неопределено Тогда
		
		АдресЭлектроннойПочтыСистемнойУчетнойЗаписи = СистемнаяУчетнаяЗапись.АдресЭлектроннойПочты;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресЭлектроннойПочтыСистемнойУчетнойЗаписи) Тогда
		
		СсылкаПоложительногоОтвета =
			"charSet=""UTF-8"" href=""mailto:" + АдресЭлектроннойПочтыСистемнойУчетнойЗаписи
			+ "?subject=" + ТемаПоложительногоОтвета
			+ "&body=" + КодироватьСтроку(ТекстПоложительногоОтвета, СпособКодированияСтроки.URLВКодировкеURL)
			+ "
			  |"""
			+ " target=""_blank"">";
			//КодироватьСтроку("<a href=""mailto:" + ... + """ target=""_blank"">ОТКЛОНИТЬ</a>"
			//	, СпособКодированияСтроки.URLВКодировкеURL);
		
		СсылкаОтрицательногоОтвета =
			"charSet=""UTF-8"" href=""mailto:" + АдресЭлектроннойПочтыСистемнойУчетнойЗаписи
			+ "?subject=" + ТемаОтрицательногоОтвета
			+ "&body=" + КодироватьСтроку(ТекстОтрицательногоОтвета, СпособКодированияСтроки.URLВКодировкеURL)
			+ "
			  |"""
			+ " target=""_blank"">";
		
		//ДобавитьMailToСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, "<Согласовать>", ТемаПоложительногоОтвета,
		//	ТекстПоложительногоОтвета, АдресЭлектроннойПочтыСистемнойУчетнойЗаписи);
		//
		//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " / ");
		//
		//ДобавитьMailToСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, "<Отклонить>", ТемаОтрицательногоОтвета,
		//	ТекстОтрицательногоОтвета, АдресЭлектроннойПочтыСистемнойУчетнойЗаписи);
		
		БлокДействий = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(
			"<table border=""0"" width=""100%"" cellspacing=""0"" cellpadding=""0"" style=""border-collapse:collapse;"">
			|	<tr style="""">
			|		<td height=""2"" style=""line-height:2px;"" colspan=""4"">&nbsp;</td>
			|	</tr>
			|	<tr>
			|		<td style=""width:20%"">
			|			<table border=""0"" width=""100%"" cellspacing=""0"" cellpadding=""0"" style=""border-collapse:collapse;"">
			|				<tr>
			|					<td style=""border-collapse:collapse;border-radius:2px;text-align:center;display:block;border:solid 1px #344c80;box-shadow:inset 0 1px 1px rgba(255, 255, 255, 0.1),0 1px 0 rgba(0, 0, 0, 0.1);background:#4c649b;padding:7px 16px 11px 16px;"">
			|						<a style=""color:#3b5998;text-decoration:none;display:inline;width:100%;height:100%;""" + СсылкаПоложительногоОтвета + "
			|							<span style=""font-family:Helvetica Neue,Helvetica,Lucida Grande,tahoma,verdana,arial,sans-serif;white-space:nowrap;font-weight:bold;align:center;vertical-align:middle;color:#ffffff;text-shadow:0 -1px 0 #415686;font-size:14px;"">
			|							" + ТекстКнопкиПоложительногоОтвета + "
			|							</span>
			|						</a>
			|					</td>
			|				</tr>
			|			</table>
			|		</td>
			|		<td width=""10"" style=""display:block;width:10px;"">&nbsp;&nbsp;&nbsp;</td>
			|		<td style=""width:20%"">
			|			<table border=""0"" width=""100%"" cellspacing=""0"" cellpadding=""0"" style=""border-collapse:collapse;"">
			|				<tr>
			|					<td style=""border-collapse:collapse;border-radius:2px;text-align:center;display:block;border:solid 1px #344c80;box-shadow:inset 0 1px 1px rgba(255, 255, 255, 0.1),0 1px 0 rgba(0, 0, 0, 0.1);background:#4c649b;padding:7px 16px 11px 16px;"">
			|						<a style=""color:#3b5998;text-decoration:none;display:inline;width:100%;height:100%;""" + СсылкаОтрицательногоОтвета + "
			|							<span style=""font-family:Helvetica Neue,Helvetica,Lucida Grande,tahoma,verdana,arial,sans-serif;white-space:nowrap;font-weight:bold;align:center;vertical-align:middle;color:#ffffff;text-shadow:0 -1px 0 #415686;font-size:14px;"">
			|							" + ТекстКнопкиОтрицательногоОтвета + "
			|							</span>
			|						</a>
			|					</td>
			|				</tr>
			|			</table>
			|		</td>
			|		<td width=""100%"" style=""""></td>
			|	</tr>
			|	<tr style="""">
			|		<td height=""32"" style=""line-height:32px;"" colspan=""4"">&nbsp;</td>
			|	</tr>
			|</table>
			|");
		
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок, БлокДействий);
		
		ЭлементВыделения = ДокументHTML.СоздатьЭлемент("i");
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения, "ВНИМАНИЕ! Пожалуйста, НЕ ОТВЕЧАЙТЕ на это письмо через Ваш почтовый клиент!", Истина, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения, "Для выражения Вашего решения используйте соответствующую кнопку выше.",, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения, "ИНЫЕ СПОСОБЫ ОТВЕТА УЧТЕНЫ НЕ БУДУТ!", Истина, Истина);
		
		ДобавитьПереводСтроки(ДокументHTML, ЭлементВыделения);
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения,
			"В результате Вашего выбора автоматически сформируется специальное письмо.",, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения,
			"ВАЖНО! Для подтверждения Вашего решения "
			+ ?(ФинансовоеСогласование, "(акцепта данной оферты выраженной настоящим Согласованием)", "")
			+ "
			|это письмо необходимо отправить!", Истина, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения,
			"В его содержании (тексте) Вы можете указать любой произвольный комментарий (причину отклонения).",, Истина);
		
		Если ФинансовоеСогласование Тогда
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения, "При положительном ответе ОБЯЗАТЕЛЬНО укажите PIN-код!", Истина, Истина);
			
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементВыделения,
				"Когда мы получим Ваше письмо c подтверждением Согласования, с Вашего Клиентского счёта будет
				|списана указанная сумма (или выставлен отдельный счёт на оплату).",, Истина);
			
		КонецЕсли;
		
		ЭлементБлок.ДобавитьДочерний(ЭлементВыделения);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКнопкиВопросаВДокументHTML

Процедура ДобавитьПереводСтроки(ДокументВладелец, ЭлементРодитель)
	
	ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	
КонецПроцедуры 

Процедура ДобавитьТаблицуВременВДокументHTML(ДокументHTML, ЭлементБлок, СтруктураВремен,
	ПланИФактДлительности, ОтчетныеДлительности) Экспорт
	
	Если СтруктураВремен.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// таблица длительностей
	
	Если ЭлементБлок = Неопределено Тогда
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	КонецЕсли;
	
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементБлок);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Таблица = ДокументHTML.СоздатьЭлемент("TABLE");
	Таблица.Рамка = "1";
	
	ЭлементБлок.ДобавитьДочерний(Таблица);
	
	ТелоТаблицы = ДокументHTML.СоздатьЭлемент("TBODY");
	Таблица.ДобавитьДочерний(ТелоТаблицы);
	
	Строка = ДокументHTML.СоздатьЭлемент("TR");
	ТелоТаблицы.ДобавитьДочерний(Строка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TH");
	Ячейка.ТекстовоеСодержимое = "";
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TH");
	Ячейка.ТекстовоеСодержимое = "Начало";
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TH");
	Ячейка.ТекстовоеСодержимое = "Окончание";
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TH");
	Ячейка.ТекстовоеСодержимое = "Дни";
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TH");
	Ячейка.ТекстовоеСодержимое = "Часы";
	Строка.ДобавитьДочерний(Ячейка);
	
	Строка = ДокументHTML.СоздатьЭлемент("TR");
	ТелоТаблицы.ДобавитьДочерний(Строка);
	
	Если ПланИФактДлительности Тогда
		
		ДобавитьСтрокуТаблицыВремен(ДокументHTML, ТелоТаблицы, "План.",
			СтруктураВремен.ПланируемаяДатаНачала, СтруктураВремен.ПланируемаяДатаОкончания,
			СтруктураВремен.ПланируемаяДлительность,
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СтруктураВремен.ПланируемоеВремяВыполнения));
		
		ДобавитьСтрокуТаблицыВремен(ДокументHTML, ТелоТаблицы, "Факт.",
			СтруктураВремен.ФактическаяДатаНачала, СтруктураВремен.ФактическаяДатаОкончания,
			СтруктураВремен.ФактическаяДлительность,
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СтруктураВремен.ФактическоеВремяВыполнения),
				Истина);
		
	КонецЕсли;
	
	Если ОтчетныеДлительности Тогда
		
		Если СтруктураВремен.СогласованноеВремяВыполнения > 0 Тогда
			
			ДобавитьСтрокуТаблицыВремен(ДокументHTML, ТелоТаблицы, "Соглас.",
				СтруктураВремен.ПланируемаяДатаНачала, СтруктураВремен.ПланируемаяДатаОкончания,
				СтруктураВремен.ПланируемаяДлительность,
				ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СтруктураВремен.СогласованноеВремяВыполнения));
			
		КонецЕсли;
		
		ДобавитьСтрокуТаблицыВремен(ДокументHTML, ТелоТаблицы, "Отчет.",
			СтруктураВремен.ОтчетнаяДатаНачала, СтруктураВремен.ОтчетнаяДатаОкончания,
			СтруктураВремен.ОтчетнаяДлительность,
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СтруктураВремен.ОтчетноеВремяВыполнения));
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДобавитьСтрокуТаблицыВремен(ДокументHTML, ТелоТаблицы, ЗаголовокСтроки, ДатаНачала, ДатаОкончания,
	Длительность, Время, ДатаСВременем = Ложь)
	
	ФорматДаты = ?(ДатаСВременем, "ДФ='dd.MM.yyyy HH:mm'; ДП=-", "ДФ=dd.MM.yyyy; ДП=-"); 
	
	Строка = ДокументHTML.СоздатьЭлемент("TR");
	ТелоТаблицы.ДобавитьДочерний(Строка);
	
	Если НЕ ПустаяСтрока(ЗаголовокСтроки) Тогда
		
		Ячейка = ДокументHTML.СоздатьЭлемент("TD");
		Ячейка.ТекстовоеСодержимое = ЗаголовокСтроки;
		Строка.ДобавитьДочерний(Ячейка);
		
	КонецЕсли;
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	Ячейка.УстановитьАтрибут("align", "right");
	Ячейка.ТекстовоеСодержимое = Формат(ДатаНачала, ФорматДаты);
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	Ячейка.УстановитьАтрибут("align", "right");
	Ячейка.ТекстовоеСодержимое = Формат(ДатаОкончания, ФорматДаты);
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	Ячейка.УстановитьАтрибут("align", "right");
	Ячейка.ТекстовоеСодержимое = Строка(Длительность);
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	Ячейка.УстановитьАтрибут("align", "right");
	Ячейка.ТекстовоеСодержимое = ?(ЗначениеЗаполнено(Время), Формат(Время, "ЧДЦ=2; ЧН=0"), "-");
	Строка.ДобавитьДочерний(Ячейка);
	
КонецПроцедуры 

Процедура ДобавитьТаблицуСтоимостейВДокументHTML(ДокументHTML, ЭлементБлок, СтруктураСтоимостей,
	ДобавлятьЗаголовок = Истина, ДобавлятьДетализацию = Истина)
	
	Если НЕ ЗначениеЗаполнено(СтруктураСтоимостей) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементБлок = Неопределено Тогда
		ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	КонецЕсли;
	
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементБлок);
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Таблица = ДокументHTML.СоздатьЭлемент("TABLE");
	Таблица.Рамка = "1";
	
	ЭлементБлок.ДобавитьДочерний(Таблица);
	
	ТелоТаблицы = ДокументHTML.СоздатьЭлемент("TBODY");
	Таблица.ДобавитьДочерний(ТелоТаблицы);
	
	Если ДобавлятьЗаголовок Тогда
		
		Строка = ДокументHTML.СоздатьЭлемент("TR");
		ТелоТаблицы.ДобавитьДочерний(Строка);
		
		Ячейка = ДокументHTML.СоздатьЭлемент("TH");
		Ячейка.ТекстовоеСодержимое = "Услуга";
		Строка.ДобавитьДочерний(Ячейка);
		
		Ячейка = ДокументHTML.СоздатьЭлемент("TH");
		Ячейка.ТекстовоеСодержимое = "Сумма";
		Строка.ДобавитьДочерний(Ячейка);
		
		//Ячейка = ДокументHTML.СоздатьЭлемент("TH");
		//Ячейка.ТекстовоеСодержимое = "По тарифу клиента";
		//Строка.ДобавитьДочерний(Ячейка);
		//
		//Ячейка = ДокументHTML.СоздатьЭлемент("TH");
		//Ячейка.ТекстовоеСодержимое = "По общему тарифу";
		//Строка.ДобавитьДочерний(Ячейка);
		//
		//Ячейка = ДокументHTML.СоздатьЭлемент("TH");
		//Ячейка.ТекстовоеСодержимое = "Скидка";
		//Строка.ДобавитьДочерний(Ячейка);
		//
		//Ячейка = ДокументHTML.СоздатьЭлемент("TH");
		//Ячейка.ТекстовоеСодержимое = "Скидка в %";
		//Строка.ДобавитьДочерний(Ячейка);
		
	КонецЕсли;
	
	Если СтруктураСтоимостей.Свойство("ДетализацияСтоимостей") И ДобавлятьДетализацию Тогда
		
		Для Каждого СтруктураДетализации Из СтруктураСтоимостей.ДетализацияСтоимостей Цикл
			
			ДобавитьСтрокуТаблицыСтоимостей(ДокументHTML, ТелоТаблицы, СтруктураДетализации);
			
		КонецЦикла;
		
		ДобавитьСтрокуТаблицыСтоимостей(ДокументHTML, ТелоТаблицы, СтруктураСтоимостей, Истина);
		
	Иначе
		
		ДобавитьСтрокуТаблицыСтоимостей(ДокументHTML, ТелоТаблицы, СтруктураСтоимостей);
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДобавитьСтрокуТаблицыСтоимостей(ДокументHTML, ТелоТаблицы, СтруктураСтоимостей, ВыделитьЖирным = Ложь)
	
	Строка = ДокументHTML.СоздатьЭлемент("TR");
	
	Если ВыделитьЖирным Тогда
		Строка.УстановитьАтрибут("style", "font: bold");
	КонецЕсли;
	
	ТелоТаблицы.ДобавитьДочерний(Строка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	Ячейка.ТекстовоеСодержимое = Строка(СтруктураСтоимостей.Номенклатура)
		+ " (" + СтруктураСтоимостей.СодержаниеРабот + ")";
	Строка.ДобавитьДочерний(Ячейка);
	
	Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	Ячейка.УстановитьАтрибут("align", "right");
	Ячейка.ТекстовоеСодержимое = Строка(СтруктураСтоимостей.СтоимостьТарифКлиента);
	Строка.ДобавитьДочерний(Ячейка);
	
	//Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	//Ячейка.УстановитьАтрибут("align", "right");
	//Ячейка.ТекстовоеСодержимое = Строка(СтруктураСтоимостей.СтоимостьТарифОбщий);
	//Строка.ДобавитьДочерний(Ячейка);
	//
	//Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	//Ячейка.УстановитьАтрибут("align", "right");
	//Ячейка.ТекстовоеСодержимое = Строка(СтруктураСтоимостей.СкидкаСумма);
	//Строка.ДобавитьДочерний(Ячейка);
	//
	//Ячейка = ДокументHTML.СоздатьЭлемент("TD");
	//Ячейка.УстановитьАтрибут("align", "right");
	//Ячейка.ТекстовоеСодержимое = Строка(СтруктураСтоимостей.СкидкаПроцент);
	//Строка.ДобавитьДочерний(Ячейка);
	
КонецПроцедуры

Процедура ДобавитьСтрокуТаблицы(ДокументHTML, ТелоТаблицы, СтрокаТаблицы, КолонкиТаблицы, ПараметрыОформления)
	
	Если ПараметрыОформления = Неопределено Тогда
		ПараметрыОформления = Новый Структура;
	КонецЕсли;
	
	Строка = ДокументHTML.СоздатьЭлемент("TR");
	//Если ВыделятьЖирным Тогда
	//	Строка.УстановитьАтрибут("style", "font: bold");
	//КонецЕсли;
	ТелоТаблицы.ДобавитьДочерний(Строка);
	
	Для Каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
		
		ИмяКолонки = КолонкаТаблицы.Имя;
		Ячейка = ДокументHTML.СоздатьЭлемент("TD");
		
		Если ПараметрыОформления.Свойство(ИмяКолонки) Тогда
			
			Для Каждого КлючИЗначение Из ПараметрыОформления[ИмяКолонки] Цикл
				Ячейка.УстановитьАтрибут(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		ЗначениеЯчейки = Строка(СтрокаТаблицы[ИмяКолонки]);
		Ячейка.ТекстовоеСодержимое = ?(ПустаяСтрока(ЗначениеЯчейки), Символы.НПП, ЗначениеЯчейки);
		Строка.ДобавитьДочерний(Ячейка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементРодитель, Ссылка, ПредставлениеСсылки = "", Внутренняя)
	
	АдресПубликации = Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
	
	Если НЕ Внутренняя И ЗначениеЗаполнено(АдресПубликации) Тогда
		
		Если Прав(АдресПубликации, 2) = "/#" ИЛИ Прав(АдресПубликации, 1) = "#" Тогда
			// Адрес уже корректный
		ИначеЕсли Прав(АдресПубликации, 1) = "/" Тогда
			АдресПубликации = АдресПубликации + "#";
		Иначе
			АдресПубликации = АдресПубликации + "/#";
		КонецЕсли;
		
		Гиперссылка = АдресПубликации + ПолучитьНавигационнуюСсылку(Ссылка);
		
		Если ПустаяСтрока(ПредставлениеСсылки) Тогда
			ПредставлениеСсылки = Гиперссылка;
		КонецЕсли;
		
		ЭлементПодчеркнутый = ДокументHTML.СоздатьЭлемент("u");
		ЭлементРодитель.ДобавитьДочерний(ЭлементПодчеркнутый);
		Якорь = ДокументHTML.СоздатьЭлемент("a");
		ЭлементРодитель.ДобавитьДочерний(Якорь);
		
		Якорь.Гиперссылка = КодироватьСтроку(Гиперссылка, СпособКодированияСтроки.URLВКодировкеURL);
		Якорь.ТекстовоеСодержимое = ПредставлениеСсылки;
		
	Иначе
		
		//НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
		//
		//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементРодитель, НавигационнаяСсылка, Ложь, Ложь);
		Гиперссылка = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "#" + ПолучитьНавигационнуюСсылку(Ссылка);
		
		Если ПустаяСтрока(ПредставлениеСсылки) Тогда
			ПредставлениеСсылки = Гиперссылка;
		КонецЕсли;
		
		ЭлементПодчеркнутый = ДокументHTML.СоздатьЭлемент("u");
		ЭлементРодитель.ДобавитьДочерний(ЭлементПодчеркнутый);
		Якорь = ДокументHTML.СоздатьЭлемент("a");
		ЭлементРодитель.ДобавитьДочерний(Якорь);
		
		Якорь.Гиперссылка = КодироватьСтроку(Гиперссылка, СпособКодированияСтроки.URLВКодировкеURL);
		Якорь.ТекстовоеСодержимое = ПредставлениеСсылки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьMailToСсылкуВДокументHTML(ДокументHTML, ЭлементРодитель,
	ПредставлениеСсылки, ТемаПисьма, ТекстПисьма, Получатели, Копии = "", СкрытыеКопии = "")
	
	Якорь = ДокументHTML.СоздатьЭлемент("a");
	ЭлементРодитель.ДобавитьДочерний(Якорь);
	
	ДокументHTML.Тело.УстановитьАтрибут("charSet", "UTF-8");
	Якорь.УстановитьАтрибут("charSet", "UTF-8");
	
	ПервыйПараметр = Истина;
	
	Гиперссылка = "mailto:" + Получатели;
	
	Если НЕ ПустаяСтрока(Копии) Тогда
		
		Гиперссылка = Гиперссылка + ?(ПервыйПараметр, "?", "&") + "сс=" + Копии;
		ПервыйПараметр = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СкрытыеКопии) Тогда
		
		Гиперссылка = Гиперссылка + ?(ПервыйПараметр, "?", "&") + "bсс=" + СкрытыеКопии;
		ПервыйПараметр = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТемаПисьма) Тогда
		
		Гиперссылка = Гиперссылка + ?(ПервыйПараметр, "?", "&") + "subject=" + ТемаПисьма;
		ПервыйПараметр = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПисьма) Тогда
		
		Гиперссылка = Гиперссылка + ?(ПервыйПараметр, "?", "&") + "body=" + ТекстПисьма;
		ПервыйПараметр = Ложь;
		
	КонецЕсли;
	
	Якорь.Гиперссылка = КодироватьСтроку(Гиперссылка, СпособКодированияСтроки.URLВКодировкеURL);
	Якорь.ТекстовоеСодержимое = ПредставлениеСсылки;
	
КонецПроцедуры

//

Процедура ДобавитьПодписьВДокументHTML(ДокументHTML, УчетнаяЗапись, Пользователь = Неопределено)
	
	ДокументHTMLПодписи = Неопределено;
	
	Подпись = ПодписиЭлектронныхПисем_ат.ПолучитьПодписьПользователяПоУчетнойЗаписи(
		?(Пользователь = Неопределено, Пользователи.ТекущийПользователь(), Пользователь), УчетнаяЗапись);
	
	Если Подпись <> Неопределено Тогда
		
		ПодписьHTML = Подпись.ПодписьHTML.Получить();
		
		ТекстПодписи = "";
		Вложения = Новый Структура;
		
		Если ТипЗнч(ПодписьHTML) = Тип("ФорматированныйДокумент") Тогда
			ПодписьHTML.ПолучитьHTML(ТекстПодписи, Вложения);
		Иначе
			ТекстПодписи = ПодписьHTML;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(РаботаСHTML_КлиентСервер_ат.ПолучитьОбычныйТекстИзHTML(ТекстПодписи)) Тогда
			ДокументHTMLПодписи = РаботаСHTML_КлиентСервер_ат.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстПодписи);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементБлок);
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	Если ДокументHTMLПодписи <> Неопределено Тогда
		
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок, ДокументHTMLПодписи);
		
	Иначе
		
		ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(ЭлементБлок, "div",
			Новый Структура("style", "font-family: Arial; font-size: 8pt; color: #000088"));
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIV, "Данное письмо автоматически сформировано системой @supportum");
		
	КонецЕсли;
	
КонецПроцедуры

//

Функция   ПолучитьТаблицуВходящихПисемСИдентификаторамиОснований(МассивПисем) Экспорт
	
	ТаблицаВходящихПисем = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	ТаблицаВходящихПисем.Колонки.Добавить("Письмо", Новый ОписаниеТипов(МассивТипов));
	ТаблицаВходящихПисем.Колонки.Добавить("ИдентификаторОснования", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	
	Для Каждого Письмо Из МассивПисем Цикл
		
		Если НЕ ПустаяСтрока(Письмо.ИдентификаторОснования) Тогда
			
			НоваяСтрока = ТаблицаВходящихПисем.Добавить();
			НоваяСтрока.Письмо = Письмо;
			НоваяСтрока.ИдентификаторОснования = Письмо.ИдентификаторОснования;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВходящихПисем;
	
КонецФункции

Процедура УдалитьУстаревшиеУведомления() Экспорт
	
	СрокХраненияУведомлений = Константы.СрокХраненияУведомлений_ат.Получить();
	СрокХраненияУведомлений = ?(СрокХраненияУведомлений = 0, 90, СрокХраненияУведомлений);
	
	МассивУдаляемыхОбъектов = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭлектронноеПисьмоИсходящее.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|ГДЕ
		|	ЭлектронноеПисьмоИсходящее.ТипУведомления_ат <> ЗНАЧЕНИЕ(Перечисление.ТипыУведомлений_ат.ПустаяСсылка)
		|	И ЭлектронноеПисьмоИсходящее.Дата < &ДатаСреза
		|");
	
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата() - СрокХраненияУведомлений * 24*60*60);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивУдаляемыхОбъектов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ДополнитьСвязаннымиОбъектами(МассивУдаляемыхОбъектов, МассивУдаляемыхОбъектов);
	
	Попытка
	
		УдалитьОбъекты(МассивУдаляемыхОбъектов);
		ЗаписьЖурналаРегистрации("Удаление уведомлений прошло успешно. Удалено " + МассивУдаляемыхОбъектов.Количество() + " объектов");
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ОписаниеОшибки(), УровеньЖурналаРегистрации.Предупреждение);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьСвязьПисьмаСКлиентом_атПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоВходящее") Тогда
		ЗаписатьСвязьВходящегоПисьмаСКлиентом(Источник.Ссылка);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее") Тогда
		ЗаписатьСвязьИсходящегоПисьмаСКлиентом(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУведомлениеОЗадолженностяхПоСчетамВДокументHTML(Клиент, ДокументHTML, ЭлементБлок, Внутреннее = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетНаОплату_ат.Ссылка КАК Счет,
		|	СчетНаОплату_ат.ДатаОплатыПланируемая КАК ПланируемаяДатаОплаты,
		|	СчетНаОплату_ат.СуммаДокумента КАК Сумма
		|ИЗ
		|	РегистрСведений.СтатусыСчетовНаОплату_ат КАК СтатусыСчетовНаОплату_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплату_ат КАК СчетНаОплату_ат
		|		ПО СтатусыСчетовНаОплату_ат.Счет = СчетНаОплату_ат.Ссылка
		|ГДЕ
		|	СчетНаОплату_ат.Клиент = &Клиент
		|	И СтатусыСчетовНаОплату_ат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОплатыСчетов_ат.НеОплачен)
		|	И СчетНаОплату_ат.ДатаОплатыПланируемая <= &ДатаКонтроля
		|	И СчетНаОплату_ат.Проведен
		|	И СчетНаОплату_ат.Клиент.УведомлятьОЗадолженностях");
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("ДатаКонтроля", ТекущаяДата + 24*60*60);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	Колонки = ТаблицаСчетов.Колонки;
	Колонки.Добавить("Счет",, "Счет");
	Колонки.Добавить("Сумма",, "Сумма");
	Колонки.Добавить("ПланируемаяДатаОплаты",, "Планируемая дата оплаты");
	Колонки.Добавить("ДнейПросрочки",, "Дней просрочки");
	
	ОбщаяСумма = 0;
	МинимальнаяДатаОплаты = '39991101';
	СуммаПросрочки = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаСчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПланируемаяДатаОплаты = Формат(Выборка.ПланируемаяДатаОплаты, "ДФ='dd.MM.yyyy'; ДП=-");
		ДнейПросрочки = ?(ЗначениеЗаполнено(Выборка.ПланируемаяДатаОплаты), Цел((НачалоДня(ТекущаяДата) - НачалоДня(Выборка.ПланируемаяДатаОплаты))/(24*60*60)), 0);
		НоваяСтрока.ДнейПросрочки = ?(ЗначениеЗаполнено(Выборка.ПланируемаяДатаОплаты),
			?(ДнейПросрочки > 0, Строка(ДнейПросрочки), "Осталось " + Строка(-ДнейПросрочки)), "-");
		ОбщаяСумма = ОбщаяСумма + Выборка.Сумма;
		МинимальнаяДатаОплаты = ?(МинимальнаяДатаОплаты > Выборка.ПланируемаяДатаОплаты И ЗначениеЗаполнено(Выборка.ПланируемаяДатаОплаты), Выборка.ПланируемаяДатаОплаты, МинимальнаяДатаОплаты);
		СуммаПросрочки = СуммаПросрочки + ДнейПросрочки;
		
	КонецЦикла;
	
	//Если ТаблицаСчетов.Количество() > 1 Тогда
	//
	//	НоваяСтрока = ТаблицаСчетов.Добавить();
	//	НоваяСтрока.Счет = "Всего счетов " + (ТаблицаСчетов.Количество() - 1);
	//	НоваяСтрока.Сумма = "Общая сумма: " + ОбщаяСумма;
	//	НоваяСтрока.ПланируемаяДатаОплаты = "Мин. план. дата оплаты " + Формат(МинимальнаяДатаОплаты, "ДФ='dd.MM.yyyy'");
	//	НоваяСтрока.ДнейПросрочки = "Средняя просрочка " + Формат(СуммаПросрочки / ТаблицаСчетов.Количество() - 1, "ЧДЦ=2");
	//	
	//КонецЕсли;
	
	ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
	
	ЭлементDIV = Взаимодействия.ДобавитьЭлементСАтрибутами(ЭлементБлок, "div",
		Новый Структура("style", "color: #880000"));
		
	Если Внутреннее Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIV, "Клиентом не оплачены следующие счета:", Истина, Истина);
		
	Иначе
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIV, "ПРОСИМ ОБРАТИТЬ ВНИМАНИЕ!" , Истина, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементDIV, "Вашей компанией не оплачены следующие счета:", Истина, Истина);
		
	КонецЕсли;
	
	//ДобавитьТаблицуВДокументHTML(ДокументHTML, ЭлементБлок, ТаблицаСчетов, Истина);
	ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, ТаблицаСчетов.ВыгрузитьКолонку("Счет"), Ложь);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьТаблицуФинансовыхСтатусовВДокумент(Заявка, ДокументHTML, Элемент = Неопределено, Внутренний = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФинансовыеСтатусыРабот_атСрезПоследних.Статус,
	|	ФинансовыеСтатусыРабот_атСрезПоследних.Автор,
	|	ФинансовыеСтатусыРабот_атСрезПоследних.Период КАК ДатаСтатуса
	|ИЗ
	|	РегистрСведений.ФинансовыеСтатусыРабот_ат.СрезПоследних КАК ФинансовыеСтатусыРабот_атСрезПоследних
	|ГДЕ
	|	ФинансовыеСтатусыРабот_атСрезПоследних.Ссылка = &Заявка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСтатуса УБЫВ";
	
	Запрос.УстановитьПараметр("Заявка",		Заявка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("Статус",, 	"Статус");
	ТаблицаСтатусов.Колонки.Добавить("ДатаСтатуса",,"Дата Статуса");
	ТаблицаСтатусов.Колонки.Добавить("Автор",, 		"Автор");
	
	ПредыдущийСтатус = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Статус = Выборка.Статус;
		
		Если Статус = ПредыдущийСтатус Тогда
			НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Новый Структура("Статус", Статус));
		Иначе
			НайденныеСтроки = Новый Массив;
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока = НайденныеСтроки[0];
		Иначе
			НоваяСтрока = ТаблицаСтатусов.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Статус = Статус;
		НоваяСтрока.ДатаСтатуса = Формат(Выборка.ДатаСтатуса, ?(Внутренний,"ДФ='dd.MM.yyyy HH:mm'" ,"ДФ=dd.MM.yyyy"));
		
		НоваяСтрока.Автор = Выборка.Автор;
		
		ПредыдущийСтатус = Статус;
		
	КонецЦикла;
	
	ДобавитьТаблицуВДокументHTML(ДокументHTML, Элемент, ТаблицаСтатусов);
	
КонецПроцедуры

Процедура ДобавитьТаблицуСтатусовВДокумент(Заявка, ДокументHTML, Элемент = Неопределено, Внутренний = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Внутренний
	|			ТОГДА ИсторияСтатусовЗаявок_ат.Статус
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ИсторияСтатусовЗаявок_ат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.ВОчереди)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Выполняется)
	|				ИНАЧЕ ИсторияСтатусовЗаявок_ат.Статус
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус,
	|	ИсторияСтатусовЗаявок_ат.Период КАК ДатаСтатуса,
	|	ИсторияСтатусовЗаявок_ат.Автор
	|ИЗ
	|	РегистрСведений.ИсторияСтатусовЗаявок_ат КАК ИсторияСтатусовЗаявок_ат
	|ГДЕ
	|	ИсторияСтатусовЗаявок_ат.Ссылка = &Заявка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСтатуса УБЫВ";
	
	Запрос.УстановитьПараметр("Заявка",		Заявка);
	Запрос.УстановитьПараметр("Внутренний", Внутренний);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСтатусов = Новый ТаблицаЗначений;
	ТаблицаСтатусов.Колонки.Добавить("Статус",, "Статус");
	ТаблицаСтатусов.Колонки.Добавить("ДатаСтатуса",, "Дата Статуса");
	
	РазныеОтветственные = Ложь;
	
	Если Внутренний Тогда
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ Заявка.Ответственный = Выборка.Автор Тогда
				
				РазныеОтветственные = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазныеОтветственные Тогда
			ТаблицаСтатусов.Колонки.Добавить("Ответственный",, "Автор");
		КонецЕсли;
		
		Выборка.Сбросить();
		
	КонецЕсли;
	
	ПредыдущийСтатус = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Статус = Выборка.Статус;
		
		// Схлопываются соседние одинаковые статусы на раннюю дату
		Если Статус = ПредыдущийСтатус Тогда
			НайденныеСтроки = ТаблицаСтатусов.НайтиСтроки(Новый Структура("Статус", Статус));
		Иначе
			НайденныеСтроки = Новый Массив;
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока = НайденныеСтроки[0];
		Иначе
			НоваяСтрока = ТаблицаСтатусов.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Статус = Статус;
		НоваяСтрока.ДатаСтатуса = Формат(Выборка.ДатаСтатуса, ?(Внутренний,"ДФ='dd.MM.yyyy HH:mm'" ,"ДФ=dd.MM.yyyy"));
		
		Если Внутренний И РазныеОтветственные Тогда
			НоваяСтрока.Ответственный = Выборка.Автор;
		КонецЕсли;
		
		ПредыдущийСтатус = Статус;
		
	КонецЦикла;
	
	ДобавитьТаблицуВДокументHTML(ДокументHTML, Элемент, ТаблицаСтатусов);
	
КонецПроцедуры

Функция   ПолучитьСистемнуюУчетнуюЗапись()
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Если УчетнаяЗапись.ПометкаУдаления ИЛИ НЕ УчетнаяЗапись.ИспользоватьДляОтправки Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не определена учетная запись для отправки системного эл. письма!";
		Сообщение.Сообщить(); 
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат УчетнаяЗапись;
		
	КонецЕсли;
	
КонецФункции 

Функция   ПолучитьСтруктуруВремен(Заявка, СвойстваЗаявки)
	
	СтруктураДлительностей = Новый Структура;
	
	Если ЗначениеЗаполнено(СвойстваЗаявки) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВременаРабот_атОбороты.ПланируемоеВремяОборот,
		|	ВременаРабот_атОбороты.ФактическоеВремяОборот,
		|	ВременаРабот_атОбороты.ОтчетноеВремяОборот,
		|	ВременаРабот_атОбороты.СогласованноеВремяОборот
		|ИЗ
		|	РегистрНакопления.ВременаРабот_ат.Обороты КАК ВременаРабот_атОбороты
		|ГДЕ
		|	ВременаРабот_атОбороты.Заявка = &Заявка";
		Запрос.УстановитьПараметр("Заявка", Заявка.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			СтруктураДлительностей.Вставить("ПланируемаяДатаНачала", 		СвойстваЗаявки.ПланируемаяДатаНачала);
			СтруктураДлительностей.Вставить("ПланируемаяДатаОкончания", 	СвойстваЗаявки.ПланируемаяДатаОкончания);
			СтруктураДлительностей.Вставить("ПланируемаяДлительность", 		СвойстваЗаявки.ПланируемаяДлительность);
			
			СтруктураДлительностей.Вставить("ФактическаяДатаНачала", 		СвойстваЗаявки.ФактическаяДатаНачала);
			СтруктураДлительностей.Вставить("ФактическаяДатаОкончания", 	СвойстваЗаявки.ФактическаяДатаОкончания);
			СтруктураДлительностей.Вставить("ФактическаяДлительность", 		СвойстваЗаявки.ФактическаяДлительность);
			
			СтруктураДлительностей.Вставить("ОтчетнаяДатаНачала", 	 		СвойстваЗаявки.ОтчетнаяДатаНачала);
			СтруктураДлительностей.Вставить("ОтчетнаяДатаОкончания", 		СвойстваЗаявки.ОтчетнаяДатаОкончания);
			СтруктураДлительностей.Вставить("ОтчетнаяДлительность", 	 	СвойстваЗаявки.ОтчетнаяДлительность);
			
			СтруктураДлительностей.Вставить("ПланируемоеВремяВыполнения", 	Выборка.ПланируемоеВремяОборот);
			СтруктураДлительностей.Вставить("ФактическоеВремяВыполнения", 	Выборка.ФактическоеВремяОборот);
			СтруктураДлительностей.Вставить("СогласованноеВремяВыполнения", Выборка.СогласованноеВремяОборот);
			СтруктураДлительностей.Вставить("ОтчетноеВремяВыполнения", 		Выборка.ОтчетноеВремяОборот);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДлительностей;
	
КонецФункции

Процедура ДополнитьСвязаннымиОбъектами(МассивСсылок, МассивУдаляемыхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла В (&ВладелецФайла)";
	Запрос.УстановитьПараметр("ВладелецФайла", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивУдаляемыхОбъектов.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСвязьИсходящегоПисьмаСКлиентом(ИсходящееПисьмо)
	
	Контакты = Новый Массив;
	ДополнитьМассивКонтактовИзТабличнойЧасти(ИсходящееПисьмо.ПолучателиПисьма, Контакты);
	ДополнитьМассивКонтактовИзТабличнойЧасти(ИсходящееПисьмо.ПолучателиКопий, Контакты);
	ДополнитьМассивКонтактовИзТабличнойЧасти(ИсходящееПисьмо.ПолучателиСкрытыхКопий, Контакты);
	
	Если Контакты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Клиенты = ПолучитьКлиентовПоПользователям(Контакты);
	
	Если Клиенты.Количество() > 0 Тогда
		
		НаборЗаписей = РегистрыСведений.ЭлектронныеПисьмаПоКлиентам_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронноеПисьмо.Установить(ИсходящееПисьмо);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Для Каждого Клиент Из Клиенты Цикл
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.ЭлектронноеПисьмо = ИсходящееПисьмо;
			Запись.Клиент = Клиент;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьМассивКонтактовИзТабличнойЧасти(ТабличнаяЧасть, Контакты)
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контакт) Тогда
			
			Контакты.Добавить(СтрокаТабличнойЧасти.Контакт);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСвязьВходящегоПисьмаСКлиентом(ВходящееПисьмо)
	
	Если НЕ ЗначениеЗаполнено(ВходящееПисьмо.ОтправительКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	Клиенты = ПолучитьКлиентовПоПользователям(ВходящееПисьмо.ОтправительКонтакт);
	
	Если Клиенты.Количество() > 0 Тогда
		
		НаборЗаписей = РегистрыСведений.ЭлектронныеПисьмаПоКлиентам_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронноеПисьмо.Установить(ВходящееПисьмо);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Для Каждого Клиент Из Клиенты Цикл
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.ЭлектронноеПисьмо = ВходящееПисьмо;
			Запись.Клиент = Клиент;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьКлиентовПоПользователям(Пользователи)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СпецификацияПользователей_ат.Контрагент
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	СпецификацияПользователей_ат.Пользователь В (&Пользователи)";
		
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
КонецФункции

Функция   ЗаполнитьПараметрыВШаблоне(Знач Шаблон, Параметры)
	
	Для Каждого Параметр Из Параметры Цикл
		
		ИмяПараметра = "%" + Параметр.Ключ + "%";
		ЗначениеПараметра = Строка(Параметр.Значение);
		
		ПозицияПараметра = СтрНайти(Шаблон, ИмяПараметра);
		
		Если ПозицияПараметра > 0 Тогда
			
			Шаблон = СтрЗаменить(Шаблон, ИмяПараметра, ?(ПустаяСтрока(ЗначениеПараметра), "-", ЗначениеПараметра));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Шаблон;
	
КонецФункции

Процедура ДобавитьТаблицуИзТабличногоДокументаВДокументHTML(ДокументHTML, ЭлементБлок, ТабличныйДокумент)
	
	ВыделитьОтрицательныеЧислаВТабличномДокументе(ТабличныйДокумент, Новый Цвет(155, 0 , 0));
	
	ИмяФайла = ПолучитьИмяВременногоФайла("HTML");
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML3);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	ТекстТаблицыHTML = ТекстовыйДокумент.ПолучитьТекст();
	
	РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок, Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстТаблицыHTML));
	
КонецПроцедуры

Функция   НужноВыводитьФинансы(Документы)
	
	НужноВыводитьФинансы = Истина;
	
	Для Каждого Документ Из Документы Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.Согласование_ат") И Документ.ТипСогласования = Перечисления.ТипыСогласований_ат.Техническое Тогда
			
			НужноВыводитьФинансы = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НужноВыводитьФинансы;
	
КонецФункции

/////

Функция   ЕстьСогласования(Документы) //!!!!!переделать
	
	Для Каждого Документ Из Документы Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.Согласование_ат") Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция   ПолучитьДатуЗакрытияЗаявкиПоВремениНаПриемку(ВремяНаПриемкуЗаявки)
	
	Календарь = Константы.ОсновнойКалендарь_ат.Получить();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ВложенныйЗапрос.Дата) КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ &КоличествоДней
	|		ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|	ИЗ
	|		РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|	ГДЕ
	|		ДанныеПроизводственногоКалендаря.Дата < &Дата
	|		И ДанныеПроизводственногоКалендаря.ВидДня = &ВидДня
	|		И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Дата УБЫВ) КАК ВложенныйЗапрос";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КоличествоДней", ВремяНаПриемкуЗаявки);
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВидДня", Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Календарь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат НачалоДня(Выборка.Дата);
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьВремяНаПриемкуЗаявки(Заявка)
	
	Договор = Заявка.Проект.Договор;
	
	ИмяРегистра = Справочники.Договоры_ат.ПолучитьИмяРегистраСпецификацииДляТипаДоговора(Договор.ВидДоговора.ТипДоговора);
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(Договор);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 1 Тогда
		
		Запись = НаборЗаписей[0];
		Возврат Запись.ВремяНаПриемкуЗаявок;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

/////

Процедура ВыделитьОтрицательныеЧислаВТабличномДокументе(ТабличныйДокумент, Цвет)
	
	КоличествоСтрок 	= ТабличныйДокумент.ВысотаТаблицы;
	КоличествоКолонок 	= ТабличныйДокумент.ШиринаТаблицы;
	
	ТекущийНомерСтроки = 1;
	ТекущийНомерКолонки = 1;
	
	Пока ТекущийНомерСтроки <= КоличествоСтрок Цикл
		
		ТекущийНомерКолонки = 1;
		
		Пока ТекущийНомерКолонки <= КоличествоКолонок Цикл
			
			Ячейка = ТабличныйДокумент.Область("R" + ТекущийНомерСтроки + "C" + ТекущийНомерКолонки);
			
			Текст = Ячейка.Текст;
			
			Если НЕ ПустаяСтрока(Текст) Тогда
				
				Если Строки_КлиентСервер_ат.ЯвляетсяЧислом(Текст) Тогда
					
					Если Число(Текст) < 0 Тогда
						Ячейка.ЦветТекста = Цвет;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекущийНомерКолонки = ТекущийНомерКолонки + 1;
			
		КонецЦикла;
		
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#Область  ИсходящиеНаКонтроле

Функция   ПолучитьПервоеПисьмоЦепочкиДляПолучателейПоЗаявке(Заявка, ТипУведомления)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлектронноеПисьмоИсходящее.Ссылка
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Предмет = &Заявка
		|	И ВЫБОР
		|		КОГДА &ИспользоватьОтборПоТипу
		|			ТОГДА ЭлектронноеПисьмоИсходящее.ТипУведомления_ат = &ТипУведомления_ат
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭлектронноеПисьмоИсходящее.Дата
		|");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоТипу", ТипУведомления <> Неопределено);
	Запрос.УстановитьПараметр("ТипУведомления_ат", ТипУведомления);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка();
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьПервоеПисьмоСКонтролем(Письмо)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА КонтрольИсходящихЭлектронныхПисем_ат.Основание = ЗНАЧЕНИЕ(Документ.ЭлектронноеПисьмоИсходящее.ПустаяСсылка)
	|			ТОГДА КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо
	|		ИНАЧЕ КонтрольИсходящихЭлектронныхПисем_ат.Основание
	|	КОНЕЦ КАК Письмо
	|ИЗ
	|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|ГДЕ
	|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо = &ЭлектронноеПисьмо";
	
	Запрос.УстановитьПараметр("ЭлектронноеПисьмо", Письмо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Письмо;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Письмо;
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗаписьВРегистрКонтроля(Письмо, НаКонтроле, Основание = Неопределено, ТребуетАвтоматическогоОтвета = Неопределено,
		ИдентификаторПисьма = Неопределено)
	
	НаборЗаписей = РегистрыСведений.КонтрольИсходящихЭлектронныхПисем_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронноеПисьмо.Установить(Письмо);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли;
	
	Запись.ЭлектронноеПисьмо			= Письмо;
	Запись.ПисьмоНаКонтроле				= НаКонтроле;
	Запись.Основание					= Основание;
	
	Если НЕ ТребуетАвтоматическогоОтвета = Неопределено Тогда
		
		Запись.ТребуетАвтоматическогоОтвета = ТребуетАвтоматическогоОтвета;
		Запись.ИдентификаторПисьма			= ИдентификаторПисьма;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ДополнитьМассивИсходныхПисемАвтоматическимиОтветами(МассивИсходныхПисем, МассивПисем)
	
	Идентификатор_Источник = "#Source: #";
	
	Для Каждого Письмо Из МассивПисем Цикл
		
		ТекстПисьма = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(Письмо);
		ЗначениеИдентификатора = Уведомления_ат.ПолучитьЗначениеИндикатора(ТекстПисьма, Идентификатор_Источник);
		
		Если НЕ ЗначениеИдентификатора = Неопределено Тогда
			
			ИсходноеПисьмо = ПолучитьПисьмоПоИдентификатору(Новый УникальныйИдентификатор(ЗначениеИдентификатора));
			
			Если НЕ ИсходноеПисьмо = Неопределено Тогда
				
				МассивИсходныхПисем.Добавить(ИсходноеПисьмо);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьПисьмоПоИдентификатору(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо
	|ИЗ
	|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
	|ГДЕ
	|	КонтрольИсходящихЭлектронныхПисем_ат.ТребуетАвтоматическогоОтвета
	|	И КонтрольИсходящихЭлектронныхПисем_ат.ИдентификаторПисьма = &ИдентификаторПисьма
	|	И КонтрольИсходящихЭлектронныхПисем_ат.Основание = ЗНАЧЕНИЕ(Документ.ЭлектронноеПисьмоИсходящее.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ИдентификаторПисьма", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЭлектронноеПисьмо;
		
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьМассивИсходныхПисемНепрямымиОтветами(МассивИсходныхПисем, МассивВходящихПисем, МассивВходящихПисемСПрямымиОтветами,
	СоответствиеВходящихПисем)
	
	Для Каждого Письмо Из МассивВходящихПисем Цикл
		
		Если МассивВходящихПисемСПрямымиОтветами.Найти(Письмо) = Неопределено Тогда
			
			ИдентификаторыОснований = СтрЗаменить(СтрЗаменить(Письмо.ИдентификаторыОснований, "<", ""), ">", "");
			
			Если ПустаяСтрока(ИдентификаторыОснований) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивИдентификаторов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторыОснований, " ");
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЭлектронноеПисьмоИсходящее.Ссылка,
			|	КонтрольИсходящихЭлектронныхПисем_ат.Основание
			|ИЗ
			|	РегистрСведений.КонтрольИсходящихЭлектронныхПисем_ат КАК КонтрольИсходящихЭлектронныхПисем_ат
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
			|		ПО (КонтрольИсходящихЭлектронныхПисем_ат.ЭлектронноеПисьмо = ЭлектронноеПисьмоИсходящее.Ссылка
			|				ИЛИ КонтрольИсходящихЭлектронныхПисем_ат.Основание = ЭлектронноеПисьмоИсходящее.Ссылка)
			|ГДЕ
			|	КонтрольИсходящихЭлектронныхПисем_ат.ПисьмоНаКонтроле
			|	И ЭлектронноеПисьмоИсходящее.Дата < &Дата
			|	И ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения В(&ИдентификаторСообщения)
			|	И НЕ ПОДСТРОКА(ЭлектронноеПисьмоИсходящее.ИдентификаторСообщения, 1, 100) = """"
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭлектронноеПисьмоИсходящее.Дата УБЫВ";
			Запрос.УстановитьПараметр("Дата", Письмо.Дата);
			Запрос.УстановитьПараметр("ИдентификаторСообщения", МассивИдентификаторов);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Основание) Тогда
					ИсходящееПисьмо = Выборка.Основание;
				Иначе
					ИсходящееПисьмо = Выборка.Ссылка;
				КонецЕсли;
				
				Если МассивИсходныхПисем.Найти(ИсходящееПисьмо) = Неопределено Тогда // На случай, если сразу пришли ответы на несколько писем.
					
					МассивИсходныхПисем.Добавить(ИсходящееПисьмо);
					МассивВходящихПисемСПрямымиОтветами.Добавить(Письмо);
					СоответствиеВходящихПисем.Вставить(ИсходящееПисьмо, Письмо);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает напоминание о том, что на письмо с контролем получен ответ.
//
Процедура СоздатьНапоминаниеОбОтветеНаПисьмоСКонтролем(Письмо, Ответ = Неопределено)
	
	ПараметрыНапоминания = Новый Структура;
	ПараметрыНапоминания.Вставить("Пользователь", Письмо.Автор);
	Если Ответ = Неопределено Тогда
		ПараметрыНапоминания.Вставить("Источник", Письмо);
	Иначе
		ПараметрыНапоминания.Вставить("Источник", Ответ);
	КонецЕсли;
	ПараметрыНапоминания.Вставить("ВремяСобытия", ТекущаяДата());
	ПараметрыНапоминания.Вставить("СрокНапоминания", ТекущаяДата());
	ПараметрыНапоминания.Вставить("Описание", "На письмо <" + Письмо + "> был получен ответ");
	
	НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
	
КонецПроцедуры

Функция   ТолькоОднаЗаявкаВЦепочке(Письмо)
	
	Если НЕ ЗначениеЗаполнено(Письмо) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заявка_ат.Ссылка
	|ИЗ
	|	Документ.Заявка_ат КАК Заявка_ат
	|ГДЕ
	|	Заявка_ат.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Основание", Письмо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество() <= 1;
	
КонецФункции

#КонецОбласти // ИсходящиеНаКонтроле

#Область  ОбработкаВходящих

Функция   ПолучитьОснованиеВходящегоПисьма(Письмо)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ Первые 1
	|	ЭлектронноеПисьмоВходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Письмо.ИдентификаторОснования);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьИдентификаторПисьмаВРегистрКонтроля(Письмо, ИдентификаторИсточника)
	
	НаборЗаписей = РегистрыСведений.КонтрольИсходящихЭлектронныхПисем_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронноеПисьмо.Установить(Письмо);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.ЭлектронноеПисьмо = Письмо;
		
	Иначе
		
		Запись = НаборЗаписей[0];
		
	КонецЕсли;
	
	Запись.ТребуетАвтоматическогоОтвета = Истина;
	Запись.ИдентификаторПисьма = ИдентификаторИсточника;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить+
Функция   ПолучитьСтруктуруОтвета_Старое(Письмо)
	
	//Ошибка = "";
	//СтруктураОтвета = Новый Структура;
	//Индикатор_Заявка = "#Заявка: #";
	//Индикатор_КонтрольнаяСумма = "#Контрольная сумма: #";
	//
	//АдресПочтыОтправителя = Письмо.ОтправительАдрес;
	//
	//ИсходящееПисьмо = ПолучитьОснованиеВходящегоПисьма(Письмо);
	//
	//Контакты = Взаимодействия.ПолучитьВсеКонтактыПоEmail(АдресПочтыОтправителя);
	//
	//Получатели = Новый Массив;
	//
	//Отправитель = Неопределено;
	//
	//Для Каждого Контакт Из Контакты Цикл
	//	
	//	Если ЗначениеЗаполнено(Контакт) Тогда
	//		
	//		Отправитель = Контакт.Контакт;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Если Отправитель = Неопределено Тогда
	//	
	//	Возврат "Письмо от неизвестного отправителя.";
	//	
	//КонецЕсли;
	//
	//ТекстПисьма = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(Письмо);
	//
	//НомерТикета = Уведомления_ат.ПолучитьЗначениеИндикатора(ТекстПисьма, Индикатор_Заявка, СтруктураОтвета);
	//КонтрольнаяСумма = Уведомления_ат.ПолучитьЗначениеИндикатора(ТекстПисьма, Индикатор_КонтрольнаяСумма, СтруктураОтвета);
	//
	//Если СтруктураОтвета.Свойство("Ошибка") Тогда
	//	
	//	Возврат СтруктураОтвета.Ошибка;
	//	
	//КонецЕсли;
	//
	//Заявка = Документы.Заявка_ат.ПолучитьЗаявкуПоНомеруТикета(НомерТикета);
	//
	//Если Заявка = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Заявка) Тогда
	//	
	//	СтруктураОтвета.Вставить("Ошибка", "Не найдена заявка по контрольной сумме");
	//	Возврат СтруктураОтвета.Ошибка;
	//	
	//КонецЕсли;
	//
	//Если ИсходящееПисьмо = Неопределено Тогда
	//	
	//	Получатели.Добавить(Заявка.Сотрудник);
	//	
	//Иначе
	//	
	//	Получатели = ИсходящееПисьмо.ПолучателиПисьма.ВыгрузитьКолонку("Контакт");
	//	
	//КонецЕсли;
	//
	//Если Получатели.Найти(Отправитель) = Неопределено Тогда
	//	
	//	Возврат "Отправитель письма не соответствует получателям письма о приемке";
	//	
	//КонецЕсли;
	//
	//РешениеОПриемке = ПолучитьРешениеОПриемкеЗаявки(КонтрольнаяСумма);
	//
	//Если РешениеОПриемке = Неопределено Тогда
	//	
	//	СтруктураОтвета.Вставить("Ошибка", "Не определено решение о приемке");
	//	Возврат СтруктураОтвета.Ошибка;
	//	
	//ИначеЕсли РешениеОПриемке Тогда
	//	
	//	Статус = Перечисления.СтатусыЗаявок_ат.Закрыта;
	//	ТекДата = ТекущаяДатаСеанса();
	//	
	//	Попытка
	//		
	//		ТекущийСтатус = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Заявка);
	//		
	//		Если ТекущийСтатус = Перечисления.СтатусыЗаявок_ат.НаПриемке Тогда
	//			
	//			Планирование_Сервер_ат.УстановитьСтатус(Заявка, Статус, ТекДата, Истина);
	//			Планирование_Сервер_ат.ПересчитатьСвойстваЗаявки(Заявка);
	//			
	//			Согласование_ат.ЗафиксироватьЗаявку(Заявка, Истина);
	//			
	//		КонецЕсли;
	//		
	//	Исключение
	//		
	//		Ошибка = ОписаниеОшибки();
	//		
	//	КонецПопытки;
	//	
	//КонецЕсли;
	//
	//Возврат Ошибка;
	
КонецФункции

Функция   ПолучитьРешениеОПриемкеЗаявки(КонтрольнаяСумма)
	
	//Если СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Подтверждено")), Символы.НПП, "") = КонтрольнаяСумма Тогда
	//	Возврат Истина;
	//ИначеЕсли СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Отказано")), Символы.НПП, "") = КонтрольнаяСумма Тогда
	//	Возврат Ложь;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;
	
КонецФункции
// Удалить -

Функция   ЭтоОтветНаПисьмоОПриемке(Письмо, СтарыйМеханизм) //УДАЛИТЬ
	//
	//ТекстПисьма = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(Письмо);
	//Индикатор_ВидПисьма1 = "#Вид письма: #";
	//Индикатор_ВидПисьма2 = "#MailType: #";
	//
	//ВалидностьСтарая = СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Приемка")), Символы.НПП, "")
	//		= ПолучитьЗначениеИндикатора(ТекстПисьма, Индикатор_ВидПисьма1)
	//		ИЛИ СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Аcceptance")), Символы.НПП, "")
	//		= ПолучитьЗначениеИндикатора(ТекстПисьма, Индикатор_ВидПисьма2);
	//		
	//Если ВалидностьСтарая Тогда
	//	
	//	СтарыйМеханизм = Истина;
	//	Возврат ВалидностьСтарая;
	//	
	//Иначе
	//	
	//	Возврат ПроверитьВалидностьПисьма(Документы.Заявка_ат, Письмо.Тема);
	//	
	//КонецЕсли;
	//
КонецФункции

#КонецОбласти // ОбработкаВходящих

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область  ФинансовыеДокументы

Функция   ПолучитьОписаниеПисьмаСФинансовымиДокументами(СоответствиеДокументов, ПараметрыПечати, Организация)
	
	ДокументHTML = Новый ДокументHTML;
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	Документ = Неопределено;
	Договор = Неопределено;
	РазныеДоговоры = Ложь;
	ОдинаковыйПериод = Истина;
	
	СоответствиеДокументовПоОрганизации = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументов Цикл
		
		Если НЕ Организация = Неопределено И Организация = КлючИЗначение.Ключ.Организация Тогда
			
			Если НЕ Договор = Неопределено И НЕ КлючИЗначение.Ключ.Договор = Договор Тогда
				РазныеДоговоры = Истина;
			КонецЕсли;
			
			Если НЕ Документ = Неопределено И НЕ НачалоМесяца(КлючИЗначение.Ключ.Период) = НачалоМесяца(Документ.Период) Тогда
				ОдинаковыйПериод = Ложь;
			КонецЕсли;
			
			Документ = КлючИЗначение.Ключ;
			Договор = Документ.Договор;
			
			СоответствиеДокументовПоОрганизации.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПечати.Свойство("ШаблонТекстаПисьма") Тогда
		
		Текст = ПараметрыПечати.ШаблонТекстаПисьма;
		
		ПолноеИмяОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Документ)).ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
		МенеджерОбъекта.ЗаменитьПараметрыВТекстеПисьма(Документ, Текст, СоответствиеДокументовПоОрганизации.Количество(),
			РазныеДоговоры, ОдинаковыйПериод);
		
	Иначе
		
		Текст = "";
		
	КонецЕсли;
	
	МассивТекстов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, Символы.ПС);
	
	Для Каждого ЭлементМассиваТекстов Из МассивТекстов Цикл
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ЭлементМассиваТекстов,, Истина);
	КонецЦикла;
	
	Если СоответствиеДокументов.Количество() > 0 Тогда
		
		Клиент = Неопределено;
		Для Каждого КлючИЗначение Из СоответствиеДокументов Цикл
			Клиент = КлючИЗначение.Ключ.Клиент;
			Прервать;
		КонецЦикла;
		
		Если Клиент <> Неопределено Тогда
			
			ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
			ЭлементТело.ДобавитьДочерний(ЭлементБлок);
			ДобавитьУведомлениеОЗадолженностяхПоСчетамВДокументHTML(Клиент, ДокументHTML, ЭлементБлок);
			
		КонецЕсли;;
		
	КонецЕсли;;
	
	Возврат ДокументHTML;
	
КонецФункции

Функция   ПолучитьТемуПисьмаСФинансовымиДокументами(СоответствиеДокументов, Организация = Неопределено)
	
	Документ = Неопределено;
	ОдинаковыйПериод = Истина;
	
	СоответствиеДокументовПоОрганизации = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументов Цикл
		
		Если НЕ Организация = Неопределено И Организация = КлючИЗначение.Ключ.Организация Тогда
			
			Если НЕ Документ = Неопределено И НЕ НачалоМесяца(КлючИЗначение.Ключ.Период) = НачалоМесяца(Документ.Период) Тогда
				ОдинаковыйПериод = Ложь;
			КонецЕсли;
			
			Документ = КлючИЗначение.Ключ;
			
			СоответствиеДокументовПоОрганизации.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПолноеИмяОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Документ)).ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	
	Возврат МенеджерОбъекта.ПолучитьТемуПисьма(Документ, СоответствиеДокументовПоОрганизации.Количество(),
		?(ОдинаковыйПериод, Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Документ.Период), ""));
	
КонецФункции

Функция   ПолучитьТаблицуАдресовПолучателейФинансовыхДокументов(Клиент, Договор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПолучателиФинансовыхДокументов_ат.Получатель
	|ИЗ
	|	РегистрСведений.ПолучателиФинансовыхДокументов_ат КАК ПолучателиФинансовыхДокументов_ат
	|ГДЕ
	|	(ПолучателиФинансовыхДокументов_ат.Клиент = &Клиент
	|			ИЛИ ПолучателиФинансовыхДокументов_ат.Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка))
	|	И (ПолучателиФинансовыхДокументов_ат.Договор = &Договор
	|			ИЛИ ПолучателиФинансовыхДокументов_ат.Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка))
	|	И ПолучателиФинансовыхДокументов_ат.ПолучательФинансовыхДокументов";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Договор", ?(Договор = Неопределено, Справочники.Договоры_ат.ПустаяСсылка(), Договор));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокПользователей = Новый СписокЗначений;
	СписокАдресов = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		Получатель = Выборка.Получатель;
		
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СписокПользователей.Добавить(Получатель);
			
		Иначе
			
			СписокАдресов.Добавить(Получатель);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаАдресов = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляФинансовыхДокументовПользователей(СписокПользователей);
	
	Для Каждого ЭлементСпискаАдресов Из СписокАдресов Цикл
		
		НоваяСтрока = ТаблицаАдресов.Добавить();
		НоваяСтрока.Адрес = ЭлементСпискаАдресов.Значение;
		
	КонецЦикла;
	
	Возврат ТаблицаАдресов;
	
КонецФункции

Процедура СоздатьНапоминаниеОСозданииФинансовыхДокументов(ТекстНапоминания, Документ, Источник, СписокПолучателей)
	
	Для Каждого ЭлементСпискаПолучателей Из СписокПолучателей Цикл
		
		Если ТипЗнч(ЭлементСпискаПолучателей.Значение) = Тип("СправочникСсылка.Пользователи")
			И НЕ ЭлементСпискаПолучателей.Значение.Пустая() Тогда
			
			ПараметрыНапоминания = Новый Структура;
			ПараметрыНапоминания.Вставить("Пользователь", ЭлементСпискаПолучателей.Значение);
			ПараметрыНапоминания.Вставить("Описание", ТекстНапоминания);
			ПараметрыНапоминания.Вставить("Источник", ?(ЗначениеЗаполнено(Документ), Документ, Источник));
			ПараметрыНапоминания.Вставить("ВремяСобытия", ТекущаяДатаСеанса());
			ПараметрыНапоминания.Вставить("СрокНапоминания", ТекущаяДатаСеанса());
			
			НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   СоздатьДокументСОписаниемУведомленияОСозданииФинДокумента(ФинДокумент, Источник, Ошибки, СоздаватьФинДокументНеНужно = Ложь)
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	Если СоздаватьФинДокументНеНужно Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "По документу " + Источник
			+ " списаны средства с оперативного баланса без выставления счета на сумму " + Источник.СуммаДокумента,, Истина);
		
	ИначеЕсли ПустаяСтрока(Ошибки) Тогда
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Документом " + Источник 
			+ ?(ТипЗнч(ФинДокумент) = Тип("ДокументСсылка.СчетНаОплату_ат"), " создан ", " создана ") + ФинДокумент, Истина);
			
		//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " (");
		//ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, Документ, "ссылка", Ложь);
		//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, ")");
		//ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " (", Истина);
		
		ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, ФинДокумент, "веб-ссылка", Ложь);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, " / ", Истина);
		ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, ФинДокумент, "прямая ссылка", Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "):", Истина, Истина);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		МассивСсылка = Новый Массив;
		МассивСсылка.Добавить(ФинДокумент);
		
		ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, МассивСсылка, Ложь);
		ДобавитьПереводСтроки(ДокументHTML, ЭлементБлок);
		
		//Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Внутренняя ссылка: ");
		//ДобавитьНавигационнуюСсылкуВДокументHTML(ДокументHTML, ЭлементБлок, Документ, "ссылка", Истина);
		
	Иначе
		
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "По документу " + Источник + " не были созданы финансовые документы.",, Истина);
		Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, "Возникли следующие проблемы:",, Истина);
		
		МассивОшибок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ошибки, Символы.ПС);
		
		Для Каждого Ошибка Из МассивОшибок Цикл
			Взаимодействия.ДобавитьТекстовыйУзел(ЭлементБлок, Ошибка,, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

Процедура ЗаписатьСтатусОтправкиФинансовогоДокумента(Ссылка, Статус, Письмо)
	
	НаборЗаписей = РегистрыСведений.ОтправкаФинДокументовПоЭлектроПочте_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Статус.Установить(Статус);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Документ = Ссылка;
	Запись.Статус = Статус;
	Запись.Письмо = Письмо;
	Запись.Дата = ТекущаяДата();
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

//

Функция   ПолучитьЗначениеИндикатора(Текст, Индикатор, СтруктураОтвета = Неопределено) Экспорт
	
	НачалоИндикатора = СтрНайти(Текст, Индикатор);
	
	Если НачалоИндикатора = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СлужебнаяСтрока = Прав(Текст, СтрДлина(Текст) - (НачалоИндикатора + СтрДлина(Индикатор) - 1)); // Текст после индикатора
	
	КонецИндикатора = СтрНайти(СлужебнаяСтрока, "_");
	
	Если КонецИндикатора = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрЗаменить(Лев(СлужебнаяСтрока, КонецИндикатора - 1), "&nbsp", "");
	
КонецФункции

Процедура ЗаменитьПараметрыВТекстеПисьмаФинансовогоДокумента(Документ, Текст,
	КоличествоОтправляемых = 1, РазныеДоговоры = Ложь, ОдинаковыйПериод = Истина) Экспорт //!!! сравнить с ОМ.Финансы.ПолучитьСодержаниеНоменклатуры
	
	Если РазныеДоговоры Тогда
		
		Параметр = "&Договор";
		Текст = СтрЗаменить(Текст, Параметр, "");
		
		Параметр = "&ПоДоговору";
		Текст = СтрЗаменить(Текст, Параметр, "");
		
	Иначе
		
		Параметр = "&Договор";
		Если СтрНайти(Текст, Параметр) > 0 Тогда
			Текст = СтрЗаменить(Текст, Параметр, Документ.Договор);
		КонецЕсли;
		
		Параметр = "&ПоДоговору";
		Если СтрНайти(Текст, Параметр) > 0 Тогда
			Текст = СтрЗаменить(Текст, Параметр, "по " + Справочники.Договоры_ат.ПредставлениеДоговораВПадеже(Документ.Договор, Истина, "у"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОдинаковыйПериод Тогда
		
		Параметр = "&Период";
		Если СтрНайти(Текст, Параметр) > 0 Тогда
			
			Если ЗначениеЗаполнено(Документ.Период) Тогда
				Текст = СтрЗаменить(Текст, Параметр, Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Документ.Период));
			Иначе
				Текст = СтрЗаменить(Текст, Параметр, "");
			КонецЕсли;
			
		КонецЕсли;
		
		Параметр = "&ЗаПериод";
		Если СтрНайти(Текст, Параметр) > 0 Тогда
			
			Если ЗначениеЗаполнено(Документ.Период) Тогда
				Текст = СтрЗаменить(Текст, Параметр, "за " + Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Документ.Период));
			Иначе
				Текст = СтрЗаменить(Текст, Параметр, "");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Параметр = "&Период";
		Текст = СтрЗаменить(Текст, Параметр, "");
		Параметр = "&ЗаПериод";
		Текст = СтрЗаменить(Текст, Параметр, "");
		
	КонецЕсли;
	
	Текст = Строки_КлиентСервер_ат.ВернутьНормализованнуюСтроку(Текст, Истина);
	
КонецПроцедуры

Процедура ВставитьТекстHTMLВДокументИзИсточника(ДокументHTML, Элемент, Текст, Источник)
	
	ТекстВHTMLДокумент = РаботаСHTML_Сервер_ат.ПолучитьДокументHTMLСКартинкамиИзТекстаHTMLСИдентификаторами(Текст, Источник);
	
	Если ТекстВHTMLДокумент = Неопределено Тогда
		
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, Элемент,
			Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Текст));
		
	Иначе
		
		РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, Элемент, ТекстВHTMLДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТаблицуФинансовыхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, ФинансовыеДокументы,
	ВыводитьПодвал = Истина, ДатаПодписания = Ложь, ФактическиеСуммыДокументов = Неопределено)
	
	Если ФинансовыеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьОбщийМакет("ШаблонТаблицыОписанияФинансовыхДокументов_ат");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьШапка.Параметры.ПланируемаяДата = ?(ДатаПодписания, "План. дата подписания", "План. дата оплаты");
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьДокумент = Макет.ПолучитьОбласть("ОбластьДокумент");
	ОбластьОписание = Макет.ПолучитьОбласть("ОбластьОписание");
	
	ОбщаяСуммаДокумента = 0;
	ФактическаяСумма = 0;
	МинимальнаяДатаОплаты = '39991101';
	СуммаПросрочки = 0;
	
	Для Каждого Документ Из ФинансовыеДокументы Цикл
		
		ОбластьДокумент.Параметры.Договор = Документ.Договор;
		ОбластьДокумент.Параметры.Документ = Документ;
		ОбластьДокумент.Параметры.СуммаДокумента = Документ.СуммаДокумента;
		
		ТекущаяФактическаяДата = Финансы_ат.ПолучитьФактическуюДатуФинДокумента(Документ);
		Если НЕ ЗначениеЗаполнено(ТекущаяФактическаяДата) Тогда
			ТекущаяФактическаяДата = ТекущаяДатаСеанса();
		КонецЕсли;
		ПланируемаяДата = Финансы_ат.ПолучитьПланируемуюДатуФинДокумента(Документ);
		ОбластьДокумент.Параметры.ПДО = Формат(ПланируемаяДата, "ДФ='dd.MM.yyyy'; ДП=-");
		
		//ДнейПросрочки = ?(ЗначениеЗаполнено(ПланируемаяДата), Цел((НачалоДня(ТекущаяДатаСеанса()) - НачалоДня(ПланируемаяДата))/(24*60*60)), 0);
		ДнейПросрочки = ?(ЗначениеЗаполнено(ПланируемаяДата),
			ПродолжительностьПроцессов_Сервер_ат.ПолучитьРазностьДат(ПланируемаяДата, ТекущаяФактическаяДата),
			0);
		
		ОбластьДокумент.Параметры.ДПП = ?(ЗначениеЗаполнено(ПланируемаяДата),
			?(ДнейПросрочки > 0, Строка(ДнейПросрочки), "Осталось " + Строка(-ДнейПросрочки)), "-");
		
		ОбщаяСуммаДокумента = ОбщаяСуммаДокумента + Документ.СуммаДокумента;
		МинимальнаяДатаОплаты = ?(МинимальнаяДатаОплаты > ПланируемаяДата И ЗначениеЗаполнено(ПланируемаяДата), ПланируемаяДата, МинимальнаяДатаОплаты);
		
		СуммаПросрочки = СуммаПросрочки + ДнейПросрочки;
		
		Если ФактическиеСуммыДокументов <> Неопределено Тогда
			
			ОбластьДокумент.Параметры.Сумма = ФактическиеСуммыДокументов[Документ];
			ФактическаяСумма = ФактическаяСумма + ФактическиеСуммыДокументов[Документ];
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьДокумент);
		
		Описание = ПолучитьОписаниеФинансовогоДокумента(Документ);
		Для Каждого ЭлементОписания Из Описание Цикл
			
			ОбластьОписание.Параметры.Описание = ЭлементОписания;
			ТабличныйДокумент.Вывести(ОбластьОписание);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВыводитьПодвал И ФинансовыеДокументы.Количество() > 1 Тогда
		
		ОбластьПодвал =  Макет.ПолучитьОбласть("ОбластьПодвал");
		ОбластьПодвал.Параметры.ИтогоДокументов = "Всего документов: " + ФинансовыеДокументы.Количество();
		ОбластьПодвал.Параметры.ИтогоСуммаДокумента = "Общая сумма: " + ОбщаяСуммаДокумента;
		ОбластьПодвал.Параметры.МинимальнаяПДО = "Мин. план. дата оплаты: "
			+ ?(МинимальнаяДатаОплаты = '39991101', " - ", Формат(МинимальнаяДатаОплаты, "ДФ=dd.MM.yyyy; ДП=-"));
		
		СредняяПросрочка = ?(СуммаПросрочки < 0, 0, СуммаПросрочки / (ФинансовыеДокументы.Количество()));
		ОбластьПодвал.Параметры.СредняяПросрочка = ?(СредняяПросрочка <= 0, "-", "Средняя просрочка: " + Формат(СредняяПросрочка, "ЧДЦ="));
		
		Если ФактическиеСуммыДокументов <> Неопределено Тогда
			ОбластьПодвал.Параметры.ИтогоСумма = "Фактическая сумма: " + ФактическаяСумма;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
	ДобавитьТаблицуИзТабличногоДокументаВДокументHTML(ДокументHTML, ЭлементБлок, ТабличныйДокумент);
	
КонецПроцедуры

Процедура ДобавитьТаблицуОтчетныхДокументовВДокументHTML(ДокументHTML, ЭлементБлок, ОтчетныеДокументы, ВыводитьФинЧасть)
	
	Если ОтчетныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НужноВыводитьФинансы = НужноВыводитьФинансы(ОтчетныеДокументы); //!!!!!бредятина, всё переделать нормально
	ЕстьСогласования = ЕстьСогласования(ОтчетныеДокументы); //!!!!!бредятина, всё переделать нормально
	
	Макет = ПолучитьОбщийМакет("ШаблонТаблицыОписанияОтчетныхДокументов_ат");
	
	Если ВыводитьФинЧасть И НужноВыводитьФинансы Тогда
		
		Если ЕстьСогласования Тогда 
			Макет.УдалитьОбласть(Макет.Область("ОбластьДинамическийТарифныйПлан"), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		КонецЕсли;
		
		ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
		ОбластьШапка.Параметры.ЗаголовокОписание = "Номенклатура";
		ОбластьШапка.Параметры.ДоговорПроект = "Договор";
		
	Иначе
		
		Макет.УдалитьОбласть(Макет.Область("ОбластьФинансы"));
		
		ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
		ОбластьШапка.Параметры.ЗаголовокОписание = "Вид деятельности";
		ОбластьШапка.Параметры.ДоговорПроект = "Проект";
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	ОбластьДокумент = Макет.ПолучитьОбласть("ОбластьДокумент");
	ОбластьОписание = Макет.ПолучитьОбласть("ОбластьОписание");
	
	ОбщаяСумма = 0;
	СуммаПросрочки = 0;
	
	Для Каждого Документ Из ОтчетныеДокументы Цикл
		
		ОбластьДокумент.Параметры.Документ = Документ;
		
		Если ВыводитьФинЧасть И НужноВыводитьФинансы Тогда
			
			ОбластьДокумент.Параметры.ДоговорПроект = Документ.Договор;
			ОбластьДокумент.Параметры.Сумма = Документ.СуммаДокумента;
			ОбщаяСумма = ОбщаяСумма + Документ.СуммаДокумента;
			
		ИначеЕсли ЕстьСогласования Тогда
			
			ОбластьДокумент.Параметры.ДоговорПроект = Документ.Проект;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьДокумент);
		
		Описание = ПолучитьОписаниеОтчетногоДокумента(Документ, ВыводитьФинЧасть);
		
		Для Каждого СтрокаОписания Из Описание Цикл
			
			ОбластьОписание.Параметры.Заполнить(СтрокаОписания);
			ТабличныйДокумент.Вывести(ОбластьОписание);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОтчетныеДокументы.Количество() > 1 Тогда
		
		ОбластьПодвал =  Макет.ПолучитьОбласть("ОбластьПодвал");
		ОбластьПодвал.Параметры.ИтогоДокументов = "Всего документов: " + ОтчетныеДокументы.Количество();
		
		Если ВыводитьФинЧасть И НужноВыводитьФинансы Тогда
			ОбластьПодвал.Параметры.ИтогоСумма = "Общая сумма: " + ОбщаяСумма;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЕсли;
	
	ДобавитьТаблицуИзТабличногоДокументаВДокументHTML(ДокументHTML, ЭлементБлок, ТабличныйДокумент);
	
КонецПроцедуры

Процедура ВставитьТаблицуОстатковПоДоговорамВДокументHTML(ДокументHTML, ЭлементБлок, Клиент,
	Договоры = Неопределено, ВыводитьФактическийОстаток = Ложь, ТолькоСДолгами = Ложь, НаДату = Неопределено)
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Договоры_ат.ВидДоговора КАК ВидДоговора,
		|	ВЫБОР
		|		КОГДА Договоры_ат.Ссылка.Родитель = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|			ТОГДА Договоры_ат.Ссылка
		|		ИНАЧЕ Договоры_ат.Ссылка.Родитель
		|	КОНЕЦ КАК Договор,
		|	ЕСТЬNULL(Клиентский_атОстаткиФакт.СуммаОстаток, 0) КАК ОстатокФакт,
		|	ЕСТЬNULL(Клиентский_атОстатки.СуммаОстаток, 0) КАК ОстатокОпер,
		|	ВЫБОР
		|		КОГДА Договоры_ат.ПериодичностьСчетов = ЗНАЧЕНИЕ(Перечисление.ПериодичностиСчетов_ат.Отсутствует)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Периодический
		|ИЗ
		|	Справочник.Договоры_ат КАК Договоры_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Клиентский_ат.Остатки(&НаДату, Счет = &Счет,, ) КАК Клиентский_атОстатки
		|		ПО (Клиентский_атОстатки.Субконто1 = Договоры_ат.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Клиентский_ат.Остатки(&НаДату, Счет = &СчетФакт,, ) КАК Клиентский_атОстаткиФакт
		|		ПО Договоры_ат.Ссылка = Клиентский_атОстаткиФакт.Субконто1
		|ГДЕ
		|	Договоры_ат.Владелец = &Клиент
		|	И ВЫБОР
		|			КОГДА &ИспользуетсяОтборПоДоговорам
		|				ТОГДА Договоры_ат.Ссылка В (&Договоры)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ТолькоСДолгами
		|				ТОГДА Клиентский_атОстатки.СуммаОстаток < 0
		|						ИЛИ Клиентский_атОстаткиФакт.СуммаОстаток < 0
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДоговора,
		|	Договор");
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("ТолькоСДолгами", ТолькоСДолгами);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Клиентский_ат.Оперативный);
	Запрос.УстановитьПараметр("СчетФакт", ПланыСчетов.Клиентский_ат.Фактический);
	
	Если Договоры = Неопределено Тогда
		
		Запрос.УстановитьПараметр("ИспользуетсяОтборПоДоговорам", Ложь);
		Запрос.УстановитьПараметр("Договоры", Неопределено);
		
	Иначе
		
		Запрос.УстановитьПараметр("ИспользуетсяОтборПоДоговорам", Истина);
		
		Для Каждого Договор Из Договоры Цикл
			
			Если Договор.Родитель <> Справочники.Договоры_ат.ПустаяСсылка() Тогда
				Договор = Договор.Родитель;
			КонецЕсли; 
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Договоры", Договоры);
		
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Шаблон = ПолучитьОбщийМакет("ШаблонТаблицыОстатковПоДоговорам_ат");
	
	Если НЕ ВыводитьФактическийОстаток Тогда
		Шаблон.УдалитьОбласть(Шаблон.Область("ОбластьФактическийОстаток"));
	КонецЕсли;
	
	ТаблицаОстатков = Новый ТабличныйДокумент;
	
	ОбластьШапка = Шаблон.ПолучитьОбласть("ОбластьШапка");
	ТаблицаОстатков.Вывести(ОбластьШапка);
	
	ОбластьСтрока = Шаблон.ПолучитьОбласть("ОбластьСтрока");
	
	ВыводитьЗначениеВыбораТП = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.ВидДоговора = Выборка.ВидДоговора;
		ОбластьСтрока.Параметры.Договор = Выборка.Договор;
		ОбластьСтрока.Параметры.ОперативныйОстаток = Выборка.ОстатокОпер;
		
		Если ВыводитьФактическийОстаток Тогда
			ОбластьСтрока.Параметры.ФактическийОстаток = Выборка.ОстатокФакт;
		КонецЕсли;
		
		ОбластьСтрока.Параметры.ЗначениеВыбораТарифногоПлана = Финансы_ат.ПолучитьЗначениеОпределяющееТарифныйПланПоДоговору(Выборка.Договор, НаДату);
		
		Если НЕ ВыводитьЗначениеВыбораТП Тогда
			
			Т = Неопределено;
			ТП = "";
			НесколькоТП = Ложь;
			
			Финансы_ат.ПолучитьЦеныНоменклатур(НаДату,, Выборка.Договор.Организация, Выборка.Договор.ВидДоговора, Выборка.Договор.Владелец, Выборка.Договор,,
				ОбластьСтрока.Параметры.ЗначениеВыбораТарифногоПлана, Истина, Т, ТП, НесколькоТП);
			
			Если НесколькоТП Тогда
				ВыводитьЗначениеВыбораТП = Истина;
			КонецЕсли;
			
		КонецЕсли; 
		
		ТаблицаОстатков.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Если НЕ ВыводитьЗначениеВыбораТП Тогда
		
		ТаблицаОстатков.УдалитьОбласть(ТаблицаОстатков.Область(, Шаблон.Область("ОбластьЗначениеВыбораТП").Лево,, Шаблон.Область("ОбластьЗначениеВыбораТП").Право));
		Шаблон.УдалитьОбласть(Шаблон.Область("ОбластьЗначениеВыбораТП"));
		
	Иначе
		
		ОбластьПримечаниеКЗначениюВыбораТП = Шаблон.ПолучитьОбласть("ОбластьПримечаниеКЗначениюВыбораТП");
		ТаблицаОстатков.Вывести(ОбластьПримечаниеКЗначениюВыбораТП);
		
	КонецЕсли;
	
	ДобавитьТаблицуИзТабличногоДокументаВДокументHTML(ДокументHTML, ЭлементБлок, ТаблицаОстатков);
	
КонецПроцедуры

#КонецОбласти // ФинансовыеДокументы

#Область  УведомлениеОСерверах

// HARDCODED!! от Александра (ААМ), перед правкой просьба уведомить (в письменой форме, в трёх экземплярах, под роспись)

Функция   СписокПользователейИТекстУведомленийОсерверах(Сервер, ТаблицаАдресов, ТекстУведомлений, Критичность, Параметр) Экспорт
	
	Если Критичность = Истина тогда 
		Тема = "Критичное состояние сервера " + сервер + " " + Параметр;
	Иначе
		Тема = "Превышение порогового значения параметров сервера " + Сервер + " " + Параметр;
	КонецЕсли;
	
	ТекущийПользователь = Неопределено; // в регламенте нам все равно какой пользователь??
	//УведомляемыеИПричины = Новый Массив;
	
	//СписокАдресов = Новый ТаблицаЗначений;
	//Для каждого элемент из МассивПользователей цикл
	////	Для каждого из КонтактнаяИнформация цикл
	////		элемент.КонтактнаяИнформация
	//СписокАдресов.ЗагрузитьКолонку(элемент.КонтактнаяИнформация, "АдресЭП");
	
	//КонецЦикла;
	ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ТекстУведомлений); 
	СоздатьПисьмо(ДокументHTML, Сервер, Тема, ТаблицаАдресов,, Ложь,,, Перечисления.ТипыУведомлений_ат.ВнешнееТехническое);
	
//	ДобавитьУведомлениеМногим(МассивПользователей, Тема, УведомляемыеИПричины, ТекущийПользователь);
//	Результат = ХАК_ОтправкаЭлПисемУведомлений(УведомляемыеИПричины, ОбработатьДляHTML(ТекстУведомлений, Ложь));
	Возврат истина;
	
КонецФункции

Процедура ПроверитьОкончаниеДоговоров() Экспорт
	
	СрокПроверки = Константы.СрокУведомленийОбОкончанииДействияДоговоров_ат.Получить();
	
	Если СрокПроверки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Договоры_ат.Ссылка
		|ИЗ
		|	Справочник.Договоры_ат КАК Договоры_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДоговоров_ат.СрезПоследних КАК ДанныеДоговоров_атСрезПоследних
		|		ПО (ДанныеДоговоров_атСрезПоследних.Договор = Договоры_ат.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияДоговоров_ИТС_ат КАК СпецификацияДоговоров_ИТС_ат
		|		ПО (СпецификацияДоговоров_ИТС_ат.Договор = Договоры_ат.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияДоговоров_АрендаПрограммныхПродуктов_ат КАК СпецификацияДоговоров_АрендаПрограммныхПродуктов_ат
		|		ПО (СпецификацияДоговоров_АрендаПрограммныхПродуктов_ат.Договор = Договоры_ат.Ссылка)
		|ГДЕ
		|	(ДанныеДоговоров_атСрезПоследних.ДатаОкончания >= &ТекущаяДата
		|			ИЛИ ДанныеДоговоров_атСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|	И (ВЫБОР
		|				КОГДА Договоры_ат.Автопролонгация
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ДанныеДоговоров_атСрезПоследних.ДатаОкончания <= &ДатаПроверки
		|						И НЕ ДанныеДоговоров_атСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			КОНЕЦ
		|			ИЛИ НЕ СпецификацияДоговоров_ИТС_ат.Договор ЕСТЬ NULL 
		|				И СпецификацияДоговоров_ИТС_ат.ДатаОкончанияПодписки <= &ДатаПроверки
		|			ИЛИ НЕ СпецификацияДоговоров_АрендаПрограммныхПродуктов_ат.Договор ЕСТЬ NULL 
		|				И СпецификацияДоговоров_АрендаПрограммныхПродуктов_ат.ДатаОкончанияАренды <= &ДатаПроверки)
		|	И НЕ Договоры_ат.ПометкаУдаления");
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ДатаПроверки", НачалоДня(ДобавитьМесяц(ТекущаяДата, СрокПроверки)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокПользователей = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияФинансы_ат");
	
	Пока Выборка.Следующий() Цикл
		
		Договор = Выборка.Ссылка;
		Пользователь = Неопределено;
		ТекстНапоминания = "Срок действия договора <" + Договор + "> подходит к концу!";
		
		Для Каждого ЭлементСпискаПользователей Из СписокПользователей Цикл
			
			Если ТипЗнч(ЭлементСпискаПользователей.Значение) = Тип("СправочникСсылка.Пользователи")
				И НЕ ЭлементСпискаПользователей.Значение.Пустая() Тогда
				
				ПараметрыНапоминания = Новый Структура;
				ПараметрыНапоминания.Вставить("Пользователь", 	 ЭлементСпискаПользователей.Значение);
				ПараметрыНапоминания.Вставить("Описание", 		 ТекстНапоминания);
				ПараметрыНапоминания.Вставить("Источник", 		 Договор);
				ПараметрыНапоминания.Вставить("ВремяСобытия", 	 ТекущаяДата);
				ПараметрыНапоминания.Вставить("СрокНапоминания", ТекущаяДата);
				
				НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // УведомлениеОСерверах
