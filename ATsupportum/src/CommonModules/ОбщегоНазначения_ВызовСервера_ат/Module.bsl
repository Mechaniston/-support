
////////////////////////////////////////////////////////////////////////////////
// Получение макетов
 
// Так как на клиенте нельзя получать макеты, грузим их на сервере и передаем на клиент (или в массив макетов).
Функция   ПолучитьМакет(СтрокаПутиМакета) Экспорт
	
	ЧастиПутиМакета = Системный_КлиентСервер_Переопределяемый_ат.РазложитьСтрокуВМассивПодстрок(СтрокаПутиМакета, ".");
	
	ОбъектМетаданных = ЧастиПутиМакета[0];
	ИмяОбъектаМетаданных = ЧастиПутиМакета[1];
	ИмяМакета = ЧастиПутиМакета[3];
	
	//TODO: Допилить для остальных объектов.
	Если ОбъектМетаданных = "Обработка" Тогда
		Менеджер = Обработки;
	КонецЕсли;
	
	Возврат Менеджер[ИмяОбъектаМетаданных].ПолучитьМакет(ИмяМакета);
	
КонецФункции

// Так как на клиенте нельзя получать макеты, грузим их на сервере массивом и передаем на клиент.
//Имеет смысл для избежания множественных серверных вызовов.
Функция   ПолучитьМассивМакетов(МассивПутейМакетов) Экспорт
	
	ВозвратноеСоответствие = Новый Соответствие;
	
	Для Каждого ПутьМакета Из МассивПутейМакетов Цикл
		// Пропустим уже загруженные
		Если ВозвратноеСоответствие.Получить(ПутьМакета) <> Неопределено Тогда Продолжить; КонецЕсли;
		// Загрузим макет.
		ВозвратноеСоответствие.Вставить(ПутьМакета, ПолучитьМакет(ПутьМакета));
	КонецЦикла;
	
	Возврат ВозвратноеСоответствие;
	
КонецФункции

Функция   ВернутьОбщийМакет(ИмяМакета) Экспорт
	
	Возврат ПолучитьОбщийМакет(ИмяМакета);
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////

Процедура СкопироватьНастройкиНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательПриемник = ПараметрыСеанса.ТекущийПользователь;
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ПользовательПриемникИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательПриемник.ИдентификаторПользователяИБ);
	Если ПользовательПриемникИБ <> Неопределено Тогда
		
		ПользовательПриемникИмя = ПользовательПриемникИБ.Имя;
	Иначе 
		Сообщить ("Для пользователя"+ПользовательПриемник+" не найден поьзователь ИБ!"); 
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПереносаОформленияСписков.Ссылка,
		|	НастройкиПереносаОформленияСписков.ВерсияДанных,
		|	НастройкиПереносаОформленияСписков.ПометкаУдаления,
		|	НастройкиПереносаОформленияСписков.Код,
		|	НастройкиПереносаОформленияСписков.ПользовательИсточник,
		|	НастройкиПереносаОформленияСписков.Предопределенный,
		|	НастройкиПереносаОформленияСписков.ИмяПредопределенныхДанных,
		|	НастройкиПереносаОформленияСписков.Представление,
		|	НастройкиПереносаОформленияСписковНастройки.ИмяНастройки,
		|	НастройкиПереносаОформленияСписковНастройки.ПолноеИмяСписка,
		|	НастройкиПереносаОформленияСписков.ПользователиИтоговый.(
		|		Ссылка,
		|		НомерСтроки,
		|		Пользователь
		|	)
		|ИЗ
		|	Справочник.НастройкиПереносаОформленияСписков.Настройки КАК НастройкиПереносаОформленияСписковНастройки
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.НастройкиПереносаОформленияСписков КАК НастройкиПереносаОформленияСписков
		|		ПО НастройкиПереносаОформленияСписковНастройки.Ссылка = НастройкиПереносаОформленияСписков.Ссылка
		|ГДЕ
		|	НастройкиПереносаОформленияСписков.ПользователиИтоговый.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательПриемник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПользовательИсточникИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаДетальныеЗаписи.ПользовательИсточник.ИдентификаторПользователяИБ);
		Если ПользовательИсточникИБ <> Неопределено Тогда
			
			ПользовательИсточникИмя = ПользовательИсточникИБ.Имя;
		Иначе 
			Сообщить ("Для пользователя"+ВыборкаДетальныеЗаписи.ПользовательИсточник+" не найден поьзователь ИБ!");
			Возврат;
			
		КонецЕсли;
		ОтборНастроек= Новый Структура("Пользователь,КлючОбъекта,Представление",ПользовательИсточникИмя,
		ВыборкаДетальныеЗаписи.ПолноеИмяСписка,ВыборкаДетальныеЗаписи.ИмяНастройки);
		ВыборкаНастроек = ХранилищеПользовательскихНастроекДинамическихСписков.Выбрать(ОтборНастроек);
		Пока ВыборкаНастроек.Следующий() Цикл
			ОписаниеНастроек.Представление = ВыборкаНастроек.Представление;
			ХранилищеПользовательскихНастроекДинамическихСписков.Сохранить(ВыборкаНастроек.КлючОбъекта,
			ВыборкаНастроек.КлючНастроек, ВыборкаНастроек.Настройки, ОписаниеНастроек, ПользовательПриемникИмя); 
		КонецЦикла;

	КонецЦикла;
	
	

КонецПроцедуры

Функция   СформироватьЗаголовокСистемы() Экспорт
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы_ат.Получить();
	
	Если ПустаяСтрока(ЗаголовокСистемы) Тогда
		
		ЗаголовокСистемы = ?(ПустаяСтрока(Метаданные.Синоним), Метаданные.Имя, Метаданные.Синоним) + " " + Метаданные.Версия;
		
	ИначеЕсли НРег(ЗаголовокСистемы) = "%краткаяинфо%" ИЛИ НРег(ЗаголовокСистемы) = "%shortinfo%" Тогда
		
		ЗаголовокСистемы = Метаданные.КраткаяИнформация;
		
	Иначе
		
		ЗаголовокСистемы = СтрЗаменить(ЗаголовокСистемы, "%версия%", Метаданные.Версия); //TODO: написать свою функцию замены без учёта регистра
		ЗаголовокСистемы = СтрЗаменить(ЗаголовокСистемы, "%ВЕРСИЯ%", Метаданные.Версия);
		ЗаголовокСистемы = СтрЗаменить(ЗаголовокСистемы, "%ver%", Метаданные.Версия);
		ЗаголовокСистемы = СтрЗаменить(ЗаголовокСистемы, "%VER%", Метаданные.Версия);
		
	КонецЕсли;
	
	ЗаголовокСистемыОтБСП = Константы.ЗаголовокСистемы.Получить();
	
	ЗаголовокСистемы = ЗаголовокСистемы
		+ ?(ПустаяСтрока(ЗаголовокСистемыОтБСП), "", " / " + ЗаголовокСистемыОтБСП)
		+ " / " + Строка(Пользователи.АвторизованныйПользователь());
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации() Тогда
		ЗаголовокСистемы = ЗаголовокСистемы + " @ " + СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
	Возврат ЗаголовокСистемы;
	
КонецФункции

Функция   ПустоеСодержаниеФорматированногоДокумента(ФорматированныйДокумент) Экспорт
	
	Если НЕ ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст()) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстХТМЛ = "";
	СтруктураВложений = Новый Структура;
	ФорматированныйДокумент.ПолучитьHTML(ТекстХТМЛ, СтруктураВложений);
	
	Если СтруктураВложений.Количество() > 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстХТМЛ);
	
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Возврат ДокументHTML.Картинки.Количество() = 0;
	
КонецФункции

Функция   ПолучитьСсылкуИзНавигационной(НавСсылка) Экспорт
	
	ПерваяТочка = Найти(НавСсылка, "e1cib/data/");
	ВтораяТочка = Найти(НавСсылка, "?ref=");
	
	ПредставлениеТипа = Сред(НавСсылка, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НавСсылка, ВтораяТочка + 5));
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
КонецФункции
