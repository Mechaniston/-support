////////////////////////////////////////////////////////////////////////////////
// Подсистема "Метки"
// 
// Первый автор - Вячеслав 'Mechanist' А. Павлов (с) с 2008 г.
//
//////////////////////////////////////////////////////////////////////////////// 
// 
// В РегистреСведений.Теги_ат хранятся выбранные для Объектов значения и их тип,
// причем значения и их типы описываются через ПланВидовХарактеристикСсылка.Теги_ат.
// Соответственно, нижеследующие процедуры и функции часто используют в качестве
// параметров три этих ссылки.
//
// Так как значение и его тип неразрывно связаны видом характеристики, то существует
// возможность более удобного указания параметров: так в виде ТипаЗначенияВыбора
// может присутствовать не только сама ссылка на конкретный вид характеристики,
// но и либо описание типа значения - например: Тип("ПеречислениеСсылка.XXXX"), либо
// ссылка на само значение: Перечисления.XXXX.YYYY.
// В связи с последним появляется возможность вообще не указывать ТипЗначения
// (Неопределено), в таком случае будет использоваться тип собственно ЗначенияВыбора
// (если присутствует подобный параметр).
// Единственное, надо учитывать что все эти варианты приведут к подбору того вида
// характеристики, первый из который будет включать искомый тип значений, что не
// всегда корректно, например, если какой-то один тип используется в двух и более
// видах характеристик.
//
//////////////////////////////////////////////////////////////////////////////// 

// [Макс] 09,02,2015
// От ПВХ и регистра было решено отказаться. Отбор производится только по значениям реквизитов.

//////////////////////////////////////////////////////////////////////////////// 
// При внедрении в объектах необходимо добавить следующий код:
//	На форме объекта:
//		в событии ПриЗаписиНаСервере вызов процедуры ПолучитьКлючДляОтбораТеговПоСписку();
//		в событии ПриСозданииНаСервере РеквизитСписок = ПолучитьСписокЗначенийМеток().
//	На форме списка:
//		Создать реквизит формы СписокЗначенийОтбора с типом СписокЗначений
//		в событии ПриСозданииНаСервере СоздатьКнопкуНастройкиОтбора() и СписокЗначенийОтбора = ПолучитьПолныйСписокЗначенийОтбораИУстановитьНачальныеОтборы();
//		добавить следующую процедуру, указав необходимые значения параметров:
//			
//			&НаКлиенте
//			Процедура НастроитьОтборы(Команда)
//				
//				ПараметрыОткрытияФормы = Новый Структура;
//				ПараметрыОткрытияФормы.Вставить("ИмяОбъектаМетаданных", );
//				ПараметрыОткрытияФормы.Вставить("СписокЗначенийОтбора", СписокЗначенийОтбора);
//				ПараметрыОткрытияФормы.Вставить("ИмяРеквизитаОтбора",	);
//				ПараметрыОткрытияФормы.Вставить("ОтбиратьПоКлючу",		);
//				
//				ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьОтборыПослеНастройки", Метки_КлиентСервер_ат);
//				
//				ОткрытьФорму("ОбщаяФорма.ФормаНастройкиОтборовПоТегам_ат", ПараметрыОткрытияФормы, ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещенияОЗакрытии);
//				
//			КонецПроцедуры


Функция   ПолучитьСписокЗначенийМеток(СсылкаНаОбъект, ИмяОбъектаМетаданных, ТипЗначенийОбъекта, ТипЗначенийМеток, СписокЗначенийМеток = Неопределено) Экспорт
	
	МассивЭлементовОтбора = ПолучитьПолныйМассивЭлементовОтбора(ИмяОбъектаМетаданных);
	
	МассивВыбранныхЗначений = ПолучитьМассивВыбранныхЗначений(СсылкаНаОбъект, ТипЗначенийОбъекта, ТипЗначенийМеток);
	
	Если СписокЗначенийМеток = Неопределено Тогда
		СписокЗначенийМеток = Новый СписокЗначений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокЗначенийМеток) Тогда
		
		Для Каждого ЭлементСписка ИЗ СписокЗначенийМеток Цикл
			ЭлементСписка.Пометка = НЕ МассивВыбранныхЗначений.Найти(ЭлементСписка.Значение) = Неопределено;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементМассиваЭлементовОтбора Из МассивЭлементовОтбора Цикл
			СписокЗначенийМеток.Добавить(ЭлементМассиваЭлементовОтбора,, НЕ МассивВыбранныхЗначений.Найти(ЭлементМассиваЭлементовОтбора) = Неопределено);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокЗначенийМеток;
	
КонецФункции

Функция   ПолучитьМассивВыбранныхЗначений(СсылкаНаОбъект, ТипЗначенийОбъекта, ТипЗначенийМеток)
	
	ИмяРегистра = Метки_КлиентСервер_Переопределяемый.ПолучитьИмяРегистраМеток(ТипЗнч(СсылкаНаОбъект), ТипЗначенийМеток);
	
	Если ПустаяСтрока(ИмяРегистра) ТОгда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Метки.ЗначениеМетки
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК Метки
	|ГДЕ
	|	Метки.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗначениеМетки");
	
КонецФункции

Функция   ПолучитьСписокМетокПоМассивуОтборов(МассивЗначенийОтбора) Экспорт
	
	СписокТегов = Новый СписокЗначений;
	
	МассивКомбинаций = Коллекции_ат.ПолучитьМассивКомбинаций(МассивЗначенийОтбора);

	Для Каждого МассивКомбинации Из МассивКомбинаций Цикл
		СписокТегов.Добавить(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокодКоллекции(МассивКомбинации));
	КонецЦикла;
	
	Возврат СписокТегов;
	
КонецФункции

Функция   ПолучитьСписокМетокПоСпискуОтбора(СписокЗначенийОтбора, УчитыватьПометки = Ложь) Экспорт
	
	СписокТегов = Новый СписокЗначений;
	
	МассивКомбинаций = Коллекции_ат.ПолучитьМассивКомбинаций(СписокЗначенийОтбора.ВыгрузитьЗначения());
	ДобавлятьВСписокТегов = Истина;
	
	Для Каждого МассивКомбинации Из МассивКомбинаций Цикл
		
		Если УчитыватьПометки Тогда
			
			ДобавлятьВСписокТегов = Ложь;
			
			Для Каждого ЭлементМассиваКомбинации Из МассивКомбинации Цикл
				
				ЭлементСпискаЗначений = СписокЗначенийОтбора.НайтиПоЗначению(ЭлементМассиваКомбинации);
				
				Если НЕ ЭлементСпискаЗначений = Неопределено И ЭлементСпискаЗначений.Пометка Тогда
					
					ДобавлятьВСписокТегов = Истина;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ДобавлятьВСписокТегов Тогда
			
			СписокТегов.Добавить(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокодКоллекции(МассивКомбинации));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокТегов;
	
КонецФункции

Функция   ПолучитьПолныйМассивЭлементовОтбора(ИмяОбъектаМетаданных) Экспорт
	
	ТаблицаСсылок = ПолучитьТаблицуСсылокНаИсточникиЗначенийВыбора(ИмяОбъектаМетаданных);
	Если ТаблицаСсылок = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ТаблицаСсылок.ВыгрузитьКолонку(0);
	
КонецФункции

Функция   ПолучитьПолныйСписокЗначенийОтбораИУстановитьНачальныеОтборы(ОбъектФормыСписок,
	ИмяОбъектаМетаданных, ИмяЭлементаОтбора, СписокЗначенийНачальногоОтбора = Неопределено, ОтборПоКлючам = Ложь) Экспорт
	
	ПолныйСписокЗначенийОтбора = Новый СписокЗначений;
	ПолныйСписокЗначенийОтбора.ЗагрузитьЗначения(ПолучитьПолныйМассивЭлементовОтбора(ИмяОбъектаМетаданных));
	
	Если НЕ СписокЗначенийНачальногоОтбора = Неопределено
	   И ЗначениеЗаполнено(СписокЗначенийНачальногоОтбора) Тогда
	  			
		Для Каждого ЭлеменПолногоСпискаЗначенийОтбора Из ПолныйСписокЗначенийОтбора Цикл
			ЭлеменПолногоСпискаЗначенийОтбора.Пометка = НЕ СписокЗначенийНачальногоОтбора.НайтиПоЗначению(ЭлеменПолногоСпискаЗначенийОтбора.Значение) = Неопределено;
		КонецЦикла;
		
		Метки_КлиентСервер_ат.УстановитьОтборСпискаПоСпискуЗначений(ОбъектФормыСписок, ИмяЭлементаОтбора, ПолныйСписокЗначенийОтбора, ОтборПоКлючам);
		
	КонецЕсли;
	
	Возврат ПолныйСписокЗначенийОтбора;
	
КонецФункции

Функция   ПолучитьПолнуюТаблицуЗначенийОтбора(ИмяОбъектаМетаданных) Экспорт
	
	ПолнаяТаблицаЗначенийОтбора = Новый ТаблицаЗначений;
	ПолнаяТаблицаЗначенийОтбора.Колонки.Добавить("Значение");
	ПолнаяТаблицаЗначенийОтбора.Колонки.Добавить("ИспользоватьИ");
	ПолнаяТаблицаЗначенийОтбора.Колонки.Добавить("ИспользоватьИЛИ");
	ПолнаяТаблицаЗначенийОтбора.Колонки.Добавить("ИспользоватьНЕ");
	
	ПолныйМассивЭлементовОтбора = ПолучитьПолныйМассивЭлементовОтбора(ИмяОбъектаМетаданных);
	
	Для Каждого ЭлементОтбора Из ПолныйМассивЭлементовОтбора Цикл
		
		НоваяСтрока = ПолнаяТаблицаЗначенийОтбора.Добавить();
		НоваяСтрока.Значение = ЭлементОтбора;
		
	КонецЦикла;
	
	Возврат ПолнаяТаблицаЗначенийОтбора;
	
КонецФункции

Функция   ПолучитьПолныйСписокЗначенийОтбора(ИмяОбъектаМетаданных) Экспорт
	
	ПолныйСписокЗначенийОтбора = Новый СписокЗначений;
	ПолныйСписокЗначенийОтбора.ЗагрузитьЗначения(ПолучитьПолныйМассивЭлементовОтбора(ИмяОбъектаМетаданных));
	Возврат ПолныйСписокЗначенийОтбора;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОТБОРЫ ПО КЛЮЧАМ МЕТОК

Функция   ПолучитьКлючДляОтбораМетокПоСписку(ТипЗначенияМеток, СписокЗначенийМеток) Экспорт
	
	КлючОтбора = 0;
	
	Для Каждого ЭлементСпискаЗначенийМеток Из СписокЗначенийМеток Цикл
		
		Если ЭлементСпискаЗначенийМеток.Пометка Тогда
			
			ЗначениеМетки = ЭлементСпискаЗначенийМеток.Значение;
			КлючОтбора = КлючОтбора + ПолучитьЧислокодЗначенияМетки(ЗначениеМетки, ТипЗначенияМеток);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КлючОтбора;
	
КонецФункции

Функция   ПолучитьЧислокодЗначенияМетки(ЗначениеМетки, ТипЗначенияМеток)
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначенияМеток) Тогда
		
		ИмяРегистра = Метки_КлиентСервер_Переопределяемый.ПолучитьИмяРегистраКлючейМеток(ТипЗначенияМеток);
		
		Если ПустаяСтрока(ИмяРегистра) Тогда
			
			Сообщить("Не найден связанный регистр");
			Возврат 0;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ Первые 1
		|	РегистрКлючейМеток.Ключ
		|ИЗ
		|	РегистрСведений." + ИмяРегистра + " КАК РегистрКлючейМеток
		|ГДЕ
		|	РегистрКлючейМеток.Значение = &Значение";
		
		Запрос.УстановитьПараметр("Значение", ЗначениеМетки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(ЗначениеМетки);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Значение = ЗначениеМетки;
			
			Ключ = Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод(
				ЗначениеМетки.Метаданные().ЗначенияПеречисления.Найти(ЗначениеМетки).ПолноеИмя());
			
			Запись.Ключ = Ключ;
			
			НаборЗаписей.Записать();
			
			Возврат Ключ;
			
		Иначе
			
			Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ключ")[0];
			
		КонецЕсли;
		
		
	Иначе
		
		Возврат ЗначениеМетки.Ключ;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьЗначенияМетокВРегистр(СсылкаНаОбъект, СписокЗначенийМеток, ТипЗначенияМеток, ЭтоНовый = Ложь) Экспорт
	
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра = Метки_КлиентСервер_Переопределяемый.ПолучитьИмяРегистраМеток(ТипЗнч(СсылкаНаОбъект), ТипЗначенияМеток);
	
	ОтправитьУведомленияОбИзмененииМеток(СсылкаНаОбъект, ИмяРегистра, СписокЗначенийМеток);
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Очистить();
	
	Для Каждого ЭлементСпискаЗначенийМеток Из СписокЗначенийМеток Цикл
		
		Если ЭлементСпискаЗначенийМеток.Пометка Тогда
		
			Запись = НаборЗаписей.Добавить();
			Запись.Объект = СсылкаНаОбъект;
			Запись.ЗначениеМетки = ЭлементСпискаЗначенийМеток.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОТБОРЫ ЧЕРЕЗ ОБЩУЮ ФОРМУ

Процедура СоздатьКнопкуНастройкиОтбора(КоманднаяПанель, ИмяОбъектаМетаданных, ОбработчикКоманды, Форма, ТекстКнопки = " ", Подсказка = "Настройка отбора") Экспорт
		
	ИмяКоманды = "Отбор_" + Системный_КлиентСервер_Переопределяемый_ат.РазложитьСтрокуВМассивПодстрок(ИмяОбъектаМетаданных, ".")[1];
	
	ГруппаОтбораПоМеткам = Форма.Элементы.Добавить("ГруппаОтбораПоМеткам", Тип("ГруппаФормы"), КоманднаяПанель);
	ГруппаОтбораПоМеткам.Вид = ВидГруппыФормы.Подменю;
	ГруппаОтбораПоМеткам.Заголовок = "Отбор по меткам";
	ГруппаОтбораПоМеткам.Подсказка = "Нет отбора";
		
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, ГруппаОтбораПоМеткам, ИмяКоманды, БиблиотекаКартинок.НастройкаФильтра_ат, ТекстКнопки,
			?(ПустаяСтрока(ТекстКнопки), ОтображениеКнопки.Картинка,ОтображениеКнопки.КартинкаИТекст), ОбработчикКоманды, Подсказка);
			
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, ГруппаОтбораПоМеткам, ИмяКоманды + "_Текущий", БиблиотекаКартинок.ФильтрПоТекущему_ат, "По элементу",
			ОтображениеКнопки.Картинка, ОбработчикКоманды, "Отбор по меткам текущего элемента");
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, ГруппаОтбораПоМеткам, ИмяКоманды + "_ВыбратьСохраненный", БиблиотекаКартинок.ВосстановитьЗначения, "Выбрать сохраненный",
			ОтображениеКнопки.Картинка, ОбработчикКоманды, "Выбрать сохраненный");	
	
	ГруппаОтбораПоМеткам = Форма.Элементы.Добавить("ГруппаСнятияОтбора", Тип("ГруппаФормы"), ГруппаОтбораПоМеткам);
	ГруппаОтбораПоМеткам.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, ГруппаОтбораПоМеткам, ИмяКоманды + "_ОтключитьОтбор", БиблиотекаКартинок.Удалить, "Отключить отбор",
			ОтображениеКнопки.Картинка, ОбработчикКоманды, "Отключить отбор");
	
КонецПроцедуры

Функция   ПолучитьСписокКлючейДляОтбора(ИмяОбъектаМетаданных, СписокЗначенийОтбора, СписокАктивныхОтборов) Экспорт
	
	МассивКомбинаций = Коллекции_ат.ПолучитьМассивКомбинаций(СписокЗначенийОтбора.ВыгрузитьЗначения());
	
	СписокКлючей = Новый СписокЗначений;
	Для Каждого МассивКомбинации Из МассивКомбинаций Цикл
		
		Нашли = Ложь;
		Для Каждого ЭлементКомбинации Из МассивКомбинации Цикл
			Если СписокАктивныхОтборов.НайтиПоЗначению(ЭлементКомбинации) <> Неопределено Тогда
				Нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Нашли Тогда
			Продолжить;
		КонецЕсли;
		
		СписокКлючей.Добавить(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокодКоллекции(МассивКомбинации),, Истина);
	КонецЦикла;
	
	Возврат СписокКлючей;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
 
Функция   ПолучитьТекстЗапросаДляЗначенийВыбора(ИмяОбъектаМетаданных, ОбъектСИерархиейГруппИЭлементов = Ложь, ИспользоватьСтандартныйРеквизитПорядка = Истина)
	
	ТекстЗапроса = "";
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	ЭтоПеречисление = Метаданные.Перечисления.Содержит(ОбъектМетаданных);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка,
		|	" + ?(ЭтоПеречисление, "Порядок", "Ссылка.Родитель.Наименование") + " КАК Порядок,
		|	0 КАК НомерИсточника,
		|	";
	Если ЭтоПеречисление Тогда
		ТекстЗапроса = ТекстЗапроса + "ЛОЖЬ"
	Иначе
		ТекстЗапроса = ТекстЗапроса + "ПометкаУдаления"
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + " КАК ПометкаУдаления, ";
	
	ТекстЗапроса = ТекстЗапроса + ?(ОбъектСИерархиейГруппИЭлементов, "ЭтоГруппа", "Ложь") + " КАК ЭтоГруппа
	| Поместить ИсточникиЗначенийВыбора
	|ИЗ
	|	" + ОбъектМетаданных.ПолноеИмя();
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция   ПолучитьТекстЗапросаДляОтбораПоПроектам()
	
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ВложенныйЗапрос.Метка
	        |ИЗ
	        |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |		Метки_ат.Ссылка КАК Метка
	        |	ИЗ
	        |		Справочник.Метки_ат КАК Метки_ат
	        |	ГДЕ
	        |		НЕ Метки_ат.Ссылка В ИЕРАРХИИ
	        |			(ВЫБРАТЬ
	        |				Метки_ат.Ссылка КАК Ссылка
	        |			ИЗ
	        |				Справочник.Проекты_ат.ДоступныеМетки КАК Проекты_атДоступныеМетки
	        |					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Метки_ат КАК Метки_ат
	        |					ПО
	        |						Проекты_атДоступныеМетки.Метка = Метки_ат.Ссылка
	        |			ГДЕ
	        |				НЕ Метки_ат.Ссылка ЕСТЬ NULL
	        |			
	        |			ОБЪЕДИНИТЬ
	        |			
	        |			ВЫБРАТЬ
	        |				Продукты_атДоступныеМетки.Метка
	        |			ИЗ
	        |				Справочник.Продукты_ат.ДоступныеМетки КАК Продукты_атДоступныеМетки
	        |			
	        |			ОБЪЕДИНИТЬ
	        |			
	        |			ВЫБРАТЬ
	        |				ГруппыПродуктов_атДоступныеМетки.Метка
	        |			ИЗ
	        |				Справочник.ГруппыПродуктов_ат.ДоступныеМетки КАК ГруппыПродуктов_атДоступныеМетки)
	        |	
	        |	ОБЪЕДИНИТЬ
	        |	
	        |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |		Метки_ат.Ссылка
	        |	ИЗ
	        |		Справочник.Проекты_ат.ДоступныеМетки КАК Проекты_атДоступныеМетки
	        |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты_ат КАК Проекты_ат
	        |			ПО Проекты_атДоступныеМетки.Ссылка = Проекты_ат.Ссылка
	        |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Метки_ат КАК Метки_ат
	        |			ПО (ВЫБОР
	        |					КОГДА Проекты_атДоступныеМетки.Метка = ЗНАЧЕНИЕ(Справочник.Метки_ат.ПустаяСсылка)
	        |						ТОГДА Метки_ат.Родитель = ЗНАЧЕНИЕ(Справочник.Метки_ат.ПустаяСсылка)
	        |							И НЕ Метки_ат.ЭтоГруппа
	        |					ИНАЧЕ Проекты_атДоступныеМетки.Метка = Метки_ат.Ссылка
	        |				КОНЕЦ)
	        |	ГДЕ
	        |		Проекты_ат.Ссылка В(&Проекты)
	        |	
	        |	ОБЪЕДИНИТЬ
	        |	
	        |	ВЫБРАТЬ
	        |		Метки_ат.Ссылка
	        |	ИЗ
	        |		Справочник.Проекты_ат.Продукты КАК Проекты_атПродукты
	        |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты_ат.ДоступныеМетки КАК Продукты_атДоступныеМетки
	        |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Метки_ат КАК Метки_ат
	        |				ПО Продукты_атДоступныеМетки.Метка = Метки_ат.Ссылка
	        |			ПО Проекты_атПродукты.Продукт = Продукты_атДоступныеМетки.Ссылка
	        |	ГДЕ
	        |		Проекты_атПродукты.Ссылка В(&Проекты)
	        |	
	        |	ОБЪЕДИНИТЬ
	        |	
	        |	ВЫБРАТЬ
	        |		Метки_ат.Ссылка
	        |	ИЗ
	        |		Справочник.Проекты_ат.Продукты КАК Проекты_атПродукты
	        |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПродуктов_ат.ДоступныеМетки КАК ГруппыПродуктов_атДоступныеМетки
	        |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Метки_ат КАК Метки_ат
	        |				ПО ГруппыПродуктов_атДоступныеМетки.Метка = Метки_ат.Ссылка
	        |			ПО Проекты_атПродукты.Продукт = ГруппыПродуктов_атДоступныеМетки.Ссылка
	        |	ГДЕ
	        |		Проекты_атПродукты.Ссылка В(&Проекты)) КАК ВложенныйЗапрос
	        |ГДЕ
	        |	НЕ ВложенныйЗапрос.Метка = ЗНАЧЕНИЕ(Справочник.Метки_ат.ПустаяСсылка)";
		
	Возврат Текст;
	
КонецФункции

Функция   ПолучитьТаблицуСсылокНаИсточникиЗначенийВыбора(ИмяОбъектаМетаданных, БезПомеченныхНаУдаление = Истина,
	ПолучитьДерево = Ложь, Проекты = Неопределено) Экспорт
	
	МассивПодстрок	= Системный_КлиентСервер_Переопределяемый_ат.РазложитьСтрокуВМассивПодстрок(ИмяОбъектаМетаданных, ".");
	КлассОбъекта	= МассивПодстрок[0];
	ИмяОбъекта		= МассивПодстрок[1];
	
	УсловиеПоПроектам = "";
	Запрос = Новый Запрос;
	Если НЕ Проекты = Неопределено Тогда
		
		УсловиеПоПроектам =
		"И ИсточникиЗначенийВыбора.Ссылка В ИЕРАРХИИ (" + ПолучитьТекстЗапросаДляОтбораПоПроектам() + ")";
		
		Запрос.УстановитьПараметр("Проекты", Проекты);
		
	КонецЕсли;
	
	ОбъектСИерархией = Ложь;
	ИерархияЭлементов = Ложь;
	Если КлассОбъекта = "Справочник" Тогда
		
		ОбъектСИерархией = Метаданные.Справочники[ИмяОбъекта].Иерархический;
		ИерархияЭлементов = Метаданные.Справочники[ИмяОбъекта].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов;
		
	ИначеЕсли КлассОбъекта = "ПланВидовХарактеристик" Тогда
		
		ОбъектСИерархией = Метаданные.ПланыВидовХарактеристик[ИмяОбъекта].Иерархический;
		
	КонецЕсли;
	
	Если ОбъектСИерархией И ИерархияЭлементов Тогда
		Сообщить("Нельзя использовать справочники с иерархией элементов в качестве отбора");
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапросаДляЗначенийВыбора = ПолучитьТекстЗапросаДляЗначенийВыбора(ИмяОбъектаМетаданных, ОбъектСИерархией, КлассОбъекта = "Перечисление");
	
	Запрос.Текст = ТекстЗапросаДляЗначенийВыбора + ";
	|///////////////////////////////////////
	|ВЫБРАТЬ Разрешенные
	|	ИсточникиЗначенийВыбора.Ссылка КАК Значение,
	|	Ложь КАК Использовать,
	|	Ложь КАК ИспользоватьИ,
	|	Ложь КАК ИспользоватьИЛИ,
	|	Ложь КАК ИспользоватьНЕ,
	|	ИсточникиЗначенийВыбора.НомерИсточника,
	|	ИсточникиЗначенийВыбора.Порядок,
	|	" + ?(ОбъектСИерархией, "ИсточникиЗначенийВыбора.Ссылка.Наименование КАК Наименование,", "") + "
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ИсточникиЗначенийВыбора.Ссылка) КАК Представление
	|ИЗ
	|	ИсточникиЗначенийВыбора КАК ИсточникиЗначенийВыбора
	|ГДЕ " + ?(БезПомеченныхНаУдаление, "НЕ ИсточникиЗначенийВыбора.ПометкаУдаления", "ИСТИНА") + "
	|" + ?(ПолучитьДерево, "", "И НЕ ИсточникиЗначенийВыбора.ЭтоГруппа")  + "
	|" + ?(ПустаяСтрока(УсловиеПоПроектам), "", УсловиеПоПроектам) + "
	|УПОРЯДОЧИТЬ ПО
	|" + ?(ПолучитьДерево,
		?(ОбъектСИерархией, "Наименование ИЕРАРХИЯ", "ИсточникиЗначенийВыбора.НомерИсточника, ИсточникиЗначенийВыбора.Порядок
			|ИТОГИ ПО Значение ТОЛЬКО ИЕРАРХИЯ"),
		"ИсточникиЗначенийВыбора.НомерИсточника, ИсточникиЗначенийВыбора.Порядок");
	
	Возврат Запрос.Выполнить().Выгрузить(?(ПолучитьДерево, ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ОбходРезультатаЗапроса.Прямой));
	
КонецФункции

Функция   ПроверитьДоступностьМетки(Метка, Редактирование = Ложь) Экспорт
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Индикатор
	|ИЗ
	|	Справочник.Метки_ат КАК Метки_ат
	|ГДЕ
	|	Метки_ат.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ДоступностьМетокКлиентам_ат.ГруппаМеток
	|			ИЗ
	|				РегистрСведений.ДоступностьМетокКлиентам_ат КАК ДоступностьМетокКлиентам_ат
	|			ГДЕ
	|				ВЫБОР
	|					КОГДА &Редактирование
	|						ТОГДА ДоступностьМетокКлиентам_ат.Редактирование
	|					ИНАЧЕ ДоступностьМетокКлиентам_ат.Просмотр
	|				КОНЕЦ
	|				И ДоступностьМетокКлиентам_ат.ГруппаМеток В (&ГруппаМеток))
	|	И Метки_ат.Ссылка = &Ссылка
	|	И НЕ Метки_ат.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("ГруппаМеток", ПараметрыСеанса.ГруппыМетокПользователя_ат);
	Запрос.УстановитьПараметр("Редактирование", Редактирование);
	Запрос.УстановитьПараметр("Ссылка", Метка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// УВЕДОМЛЕНИЯ ОБ ИЗМЕНЕНИИ МЕТОК

Процедура ОтправитьУведомленияОбИзмененииМеток(Заявка, ИмяРегистра, ТекущийСписокЗначенийМеток) //!!!перенести в ОМ.Уведомления
	
	ТипЗначенияОбъекта = ТипЗнч(Заявка);
	Если НЕ ТипЗначенияОбъекта = Тип("ДокументСсылка.Заявка_ат")
		ИЛИ НЕ ЗначениеЗаполнено(Заявка.Ответственный)
		ИЛИ Планирование_Сервер_ат.ПолучитьТекущийСтатус(Заявка) = Перечисления.СтатусыЗаявок_ат.Черновик
		ИЛИ Заявка.Ответственный = Пользователи.ТекущийПользователь() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Установлены_ВРегистре = Ложь;
	Установлены_ВОбъекте = Ложь;
	
	МассивУстановленныхМеток = Новый Массив;
	МассивУдаленныхМеток = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегистрМеток.ЗначениеМетки
	|ИЗ
	|	&ИмяРегистра КАК РегистрМеток
	|ГДЕ
	|	РегистрМеток.Объект = &Объект";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", "РегистрСведений." + ИмяРегистра);
	
	Запрос.УстановитьПараметр("Объект", Заявка);
	
	МассивТекущихМеток = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗначениеМетки");
	
	Для Каждого ЭлементТекущегоСпискаЗначенийМеток Из ТекущийСписокЗначенийМеток Цикл
		
		Если ЭлементТекущегоСпискаЗначенийМеток.Пометка Тогда
			
			Если МассивТекущихМеток.Найти(ЭлементТекущегоСпискаЗначенийМеток.Значение) = Неопределено Тогда
				МассивУстановленныхМеток.Добавить(ЭлементТекущегоСпискаЗначенийМеток.Значение);
			КонецЕсли;
			
		Иначе
			
			Если НЕ МассивТекущихМеток.Найти(ЭлементТекущегоСпискаЗначенийМеток.Значение) = Неопределено Тогда
				МассивУдаленныхМеток.Добавить(ЭлементТекущегоСпискаЗначенийМеток.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивУстановленныхМеток.Количество() > 0 ИЛИ МассивУдаленныхМеток.Количество() > 0 Тогда
		
		ТемаПисьма = "Изменились метки Заявки по тикету #" + Заявка.Тикет;
		ТекстПисьма = "";
		Текст_Установленные = "";
		Текст_Удаленные = "";
		
		Для Каждого ЭлементМассиваУстановленныхМеток Из МассивУстановленныхМеток Цикл
			Текст_Установленные = Текст_Установленные + ?(ПустаяСтрока(Текст_Установленные), "", ", ")
				+ "<" + ЭлементМассиваУстановленныхМеток + ">";
		КонецЦикла;
		
		Для Каждого ЭлементМассиваУдаленныхМеток Из МассивУдаленныхМеток Цикл
			Текст_Удаленные = Текст_Удаленные + ?(ПустаяСтрока(Текст_Удаленные), "", ", ")
				+ "<" + ЭлементМассиваУдаленныхМеток + ">";
		КонецЦикла;
		
		ТекстПисьма = ?(ПустаяСтрока(Текст_Установленные), "", "Установленные метки: " + Текст_Установленные)
				+ ?(ПустаяСтрока(Текст_Установленные), "", ". ") + Символы.ПС
			+ ?(ПустаяСтрока(Текст_Удаленные), "", "Снятые метки: " + Текст_Удаленные
				+ ?(ПустаяСтрока(Текст_Удаленные), "", "."));
		ТекстПисьма = ТемаПисьма + " в " + Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy HH:mm:ss'")
			+ ". Автор изменений: " + Пользователи.ТекущийПользователь() + Символы.ПС + Символы.ПС + ТекстПисьма;
		HTMLТекстПисьма = РаботаСHTML_КлиентСервер_ат.ПреобразоватьОбычныйТекстВHTML(ТекстПисьма);
		
		ТаблицаАдресовУведомлений = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(
			Заявка.Ответственный, Истина);
			
		Если ТаблицаАдресовУведомлений.Количество() > 0 Тогда
			
			ДокументHTML = Уведомления_ат.СоздатьДокументHTMLСОписаниемЗаявки(Заявка, ТекстПисьма, Истина,
				Заявка.Ответственный);
			
			Уведомления_ат.СоздатьПисьмо(ДокументHTML,, ТемаПисьма, ТаблицаАдресовУведомлений,,,,, Перечисления.ТипыУведомлений_ат.ВнутреннееПоЗаявке);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМеткиВходящихПисемПоПредмету(МассивПисем) Экспорт
	
	Для Каждого Письмо Из МассивПисем Цикл
		
		Предмет = Письмо.Предмет;
		Если ЗначениеЗаполнено(Предмет) Тогда
			
			ТипЗначенияПредмета = ТипЗнч(Предмет);
			Если ТипЗначенияПредмета = Тип("ДокументСсылка.Заявка_ат")
				ИЛИ ТипЗначенияПредмета = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				ИЛИ ТипЗначенияПредмета = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
				СкопироватьМеткиПредмета(Письмо, Предмет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьМеткиПредмета(Письмо, Предмет)
	
	ТипЗначенияМеток = Метки_КлиентСервер_Переопределяемый.ПолучитьПолучитьТипОсновногоОбъектаМеток();
	СписокМеток = ПолучитьСписокЗначенийМеток(Предмет, Метки_КлиентСервер_Переопределяемый.ПолучитьОсновноеИмяОбъектаМеток(), ТипЗнч(Предмет),
		ТипЗначенияМеток);
	
	ЗаписатьЗначенияМетокВРегистр(Письмо, СписокМеток, ТипЗначенияМеток);
	
КонецПроцедуры

Функция   ПолучитьСписокДоступныхМеток(Объект, Пользователи = Неопределено) Экспорт
	
	СписокМеток = Новый СписокЗначений;
	
	СотрудникиОрганизации = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ПолучитьСписокПользователейПоНесколькимРолям("ОрганизацияСотрудник_ат,ПолныеПрава");
	
	Если Пользователи <> Неопределено Тогда
		МассивПользователей = Коллекции_ат.СкопироватьВМассив(Пользователи);
	Иначе
		МассивПользователей = Пользователи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	// хоть код выглядит красивее, но есть сомнения к корректности
	//"ВЫБРАТЬ
	//|	Пользователи.Ссылка КАК Пользователь,
	//|	ВЫБОР
	//|		КОГДА Пользователи.Ссылка В (&СотрудникиОрганизации)
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК СотрудникОрганизации
	//|ПОМЕСТИТЬ ВТПользователи
	//|ИЗ
	//|	Справочник.Пользователи КАК Пользователи
	//|ГДЕ
	//|	Пользователи.Ссылка В(&Пользователи)
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СпецификацияПользователей_ат.Контрагент КАК Контрагент,
	//|	ВТПользователи.Пользователь КАК Пользователь
	//|ПОМЕСТИТЬ ВТКонтрагентыПользователей
	//|ИЗ
	//|	ВТПользователи КАК ВТПользователи
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
	//|		ПО ВТПользователи.Пользователь = СпецификацияПользователей_ат.Пользователь
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Метки_ат.Ссылка КАК ГруппаМеток
	//|ПОМЕСТИТЬ ГруппыМеток
	//|ИЗ
	//|	Справочник.Метки_ат КАК Метки_ат
	//|ГДЕ
	//|	Метки_ат.Ссылка В ИЕРАРХИИ
	//|			(ВЫБРАТЬ
	//|				ДоступностьМетокКлиентам_ат.ГруппаМеток КАК Метка
	//|			ИЗ
	//|				ВТПользователи КАК ВТПользователи
	//|					ЛЕВОЕ СОЕДИНЕНИЕ ВТКонтрагентыПользователей КАК ВТКонтрагентыПользователей
	//|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьМетокКлиентам_ат КАК ДоступностьМетокКлиентам_ат
	//|						ПО
	//|							ИСТИНА
	//|					ПО
	//|						ВТПользователи.Пользователь = ВТКонтрагентыПользователей.Пользователь
	//|			ГДЕ
	//|				ВЫБОР
	//|					КОГДА ВТПользователи.СотрудникОрганизации
	//|						ТОГДА ИСТИНА
	//|					ИНАЧЕ ДоступностьМетокКлиентам_ат.Клиент В
	//|								(ВЫБРАТЬ
	//|									ВТКонтрагентыПользователей.Контрагент
	//|								ИЗ
	//|									ВТКонтрагентыПользователей)
	//|							ИЛИ ДоступностьМетокКлиентам_ат.Пользователь В
	//|								(ВЫБРАТЬ
	//|									ВТКонтрагентыПользователей.Пользователь
	//|								ИЗ
	//|									ВТКонтрагентыПользователей)
	//|				КОНЕЦ
	//|		
	//|			ОБЪЕДИНИТЬ ВСЕ
	//|		
	//|			ВЫБРАТЬ
	//|				Метки_ат.Ссылка
	//|			ИЗ
	//|				ВТПользователи КАК ВТПользователи
	//|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Метки_ат КАК Метки_ат
	//|					ПО
	//|						ВТПользователи.СотрудникОрганизации)
	//|	И Метки_ат.ЭтоГруппа
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	Метки_ат.Ссылка КАК Ссылка,
	//|	ВТПользователи.Пользователь КАК Пользователь
	//|ИЗ
	//|	ВТПользователи КАК ВТПользователи
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Метки_ат КАК Метки_ат
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Метки_Заявка_ат КАК Метки_Заявка_ат
	//|			ПО Метки_ат.Ссылка = Метки_Заявка_ат.ЗначениеМетки
	//|		ПО (ВЫБОР
	//|				КОГДА Метки_ат.Личная
	//|					ТОГДА ВТПользователи.Пользователь = Метки_ат.Пользователь
	//|				ИНАЧЕ ИСТИНА
	//|			КОНЕЦ)
	//|ГДЕ
	//|	ВЫБОР
	//|			КОГДА ВТПользователи.СотрудникОрганизации
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ Метки_ат.Родитель В ИЕРАРХИИ
	//|						(ВЫБРАТЬ
	//|							ГруппыМеток.ГруппаМеток
	//|						ИЗ
	//|							ГруппыМеток КАК ГруппыМеток)
	//|					ИЛИ Метки_ат.Ссылка В ИЕРАРХИИ
	//|						(ВЫБРАТЬ
	//|							ГруппыМеток.ГруппаМеток
	//|						ИЗ
	//|							ГруппыМеток КАК ГруппыМеток)
	//|					ИЛИ Метки_ат.Ссылка.Общая
	//|					ИЛИ Метки_ат.Родитель.Общая
	//|		КОНЕЦ
	//|	И НЕ Метки_ат.ЭтоГруппа
	//|	И Метки_Заявка_ат.Объект = &Объект
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Метки_ат.Родитель.Наименование,
	//|	Метки_ат.Наименование
	//|ИТОГИ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Пользователь)
	//|ПО
	//|	Ссылка
	//|";
	//
	//Запрос.УстановитьПараметр("СотрудникиОрганизации", СотрудникиОрганизации);
	//Запрос.УстановитьПараметр("Пользователи", Пользователи);
	//Запрос.УстановитьПараметр("Объект", Объект);
	//
	//ТолькоОбщие = Ложь;
	//Если ТипЗнч(Пользователи) = Тип("Массив") ИЛИ ТипЗнч(Пользователи) = Тип("СписокЗначений") Тогда
	//	
	//	КоличествоПользователей = Пользователи.Количество();
	//	
	//ИначеЕсли Пользователи = Неопределено Тогда
	//	
	//	КоличествоПользователей = -1;
	//	ТолькоОбщие = Истина;
	//	
	//Иначе
	//	
	//	КоличествоПользователей = 1;
	//	
	//КонецЕсли;
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//СписокМеток = Новый СписокЗначений;
	//
	//Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	Если Выборка.Пользователь = КоличествоПользователей ИЛИ ТолькоОбщие Тогда
	//		
	//		ВыборкаПоПользователю = Выборка.Выбрать();
	//		СписокМеток.Добавить(Выборка.Ссылка);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	"
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	ВЫБОР
	|		КОГДА Пользователи.Ссылка В(&СотрудникиОрганизации)
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК СотрудникОрганизации
	|ПОМЕСТИТЬ ВТПользователи
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&Пользователи)
	|	ИЛИ Пользователи.Ссылка В(&СотрудникиОрганизации)
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Метки_ат.Ссылка КАК ГруппаМеток,
	|	ВТПользователи.Пользователь
	|ПОМЕСТИТЬ ДоступныеПользователюГруппыМеток
	|ИЗ
	|	Справочник.Метки_ат КАК Метки_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступностьМетокКлиентам_ат КАК ДоступностьМетокКлиентам_ат
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПользователи
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
	|				ПО ВТПользователи.Пользователь = СпецификацияПользователей_ат.Пользователь
	|			ПО ДоступностьМетокКлиентам_ат.Клиент = СпецификацияПользователей_ат.Контрагент
	|				ИЛИ ДоступностьМетокКлиентам_ат.Пользователь = СпецификацияПользователей_ат.Пользователь
	|				ИЛИ ВТПользователи.СотрудникОрганизации
	|		ПО Метки_ат.Ссылка = ДоступностьМетокКлиентам_ат.ГруппаМеток // В ИЕРАРХИИ?
	|ГДЕ
	|	НЕ Метки_ат.ПометкаУдаления
	|	И Метки_ат.ЭтоГруппа
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Метки_ат.Ссылка КАК Метка,
	|	ВЫБОР
	|		КОГДА Метки_ат.Общая ИЛИ Метки_ат.Родитель.Общая
	|			ТОГДА NULL
	|		КОГДА (Метки_ат.Личная И Метки_ат.Пользователь В(&Пользователи))
	|			ТОГДА Метки_ат.Пользователь
	|		ИНАЧЕ ДоступныеПользователюГруппыМеток.Пользователь
	|		КОНЕЦ КАК Пользователь
	|ИЗ
	|	Справочник.Метки_ат КАК Метки_ат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Метки_Заявка_ат КАК Метки_Заявка_ат
	|			ПО Метки_ат.Ссылка = Метки_Заявка_ат.ЗначениеМетки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеПользователюГруппыМеток
	|			ПО Метки_ат.Родитель = ДоступныеПользователюГруппыМеток.ГруппаМеток // В ИЕРАРХИИ не точно даёт пользователя доступа
	|ГДЕ
	|	НЕ Метки_ат.ПометкаУдаления
	|	И НЕ Метки_ат.ЭтоГруппа
	|	И Метки_Заявка_ат.Объект = &Объект
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Метки_ат.Родитель.Наименование,
	|	Метки_ат.Наименование
	|";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Пользователи", МассивПользователей);
	Запрос.УстановитьПараметр("СотрудникиОрганизации", СотрудникиОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если МассивПользователей = Неопределено Тогда
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Пользователь = NULL И СписокМеток.НайтиПоЗначению(Выборка.Метка) = Неопределено Тогда
				СписокМеток.Добавить(Выборка.Метка);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Пользователь Из МассивПользователей Цикл
			
			Пока Выборка.Следующий() Цикл
				
				Если (Выборка.Пользователь = NULL ИЛИ Выборка.Пользователь = Пользователь)
					И СписокМеток.НайтиПоЗначению(Выборка.Метка) = Неопределено Тогда
					
					СписокМеток.Добавить(Выборка.Метка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Выборка.Сбросить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокМеток;
	
КонецФункции

Функция   ПолучитьСтрокуСоСпискомДоступныхМеток(Объект, Пользователи = Неопределено) Экспорт
	
	СписокМеток = ПолучитьСписокДоступныхМеток(Объект, Пользователи);
	
	Для Каждого Метка Из СписокМеток Цикл
		Метка.Представление = Метки_ВызовСервера_ат.ПолучитьПредставлениеМеткиРекурсивно(Метка.Значение);
	КонецЦикла;
	
	Возврат Строки_КлиентСервер_ат.ПреобразоватьВСтроку(СписокМеток,, Истина);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С МЕТКАМИ В ФОРМЕ

&НаСервере
Процедура ОбновитьМетки(Форма, Знач СписокИсточников, ОбновлятьВыбранныеМетки = Истина, ОтборПоПроектам = Ложь,
	ТекущийПроект = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(СписокИсточников) = Тип("СписокЗначений") Тогда
		
		Значение = СписокИсточников;
		СписокИсточников = Новый СписокЗначений;
		СписокИсточников.Добавить(Значение);
		
	КонецЕсли;
	
	Если ОбновлятьВыбранныеМетки Тогда
		Форма.ВыбранныеМетки.Очистить();
	КонецЕсли;
	
	Источники = СписокИсточников.ВыгрузитьЗначения();
	КоличествоИсточников = Источники.Количество();
	
	Форма.МаксимальноеЗначениеИспользования = ?(КоличествоИсточников = 1, 1, 2);
	
	Проекты = Новый Массив;
	
	Если КоличествоИсточников > 0 Тогда
		
		ТипЗначенияИсточников = ТипЗнч(Источники[0]);
		
		Если ТипЗначенияИсточников = Тип("ДокументСсылка.Заявка_ат") Тогда
			Проекты = ЗаполнитьПроектыПоИсточникам(Источники);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекущийПроект) Тогда
		Проекты.Добавить(ТекущийПроект);
	КонецЕсли;
	
	ИмяРегистраМеток = Метки_КлиентСервер_Переопределяемый.ПолучитьИмяРегистраМеток(ТипЗначенияИсточников, Тип("СправочникСсылка.Метки_ат"));
	
	Дерево = Метки_Сервер_ат.ПолучитьТаблицуСсылокНаИсточникиЗначенийВыбора("Справочник.Метки_ат",, Истина,
		?(ОтборПоПроектам, Проекты, Неопределено));
	
	Дерево.Колонки.Добавить("Частичная");
	Дерево.Колонки.Добавить("Сохраненная");
	
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоМеток");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//"ВЫБРАТЬ Разрешенные
	//|	ВЫБОР
	//|		КОГДА ВложенныйЗапрос.Количество = 0
	//|			ТОГДА 0
	//|		КОГДА ВложенныйЗапрос.Количество = &КоличествоИсточников
	//|			ТОГДА 1
	//|		ИНАЧЕ 2
	//|	КОНЕЦ КАК Флаг,
	//|	Метки_ат.Ссылка КАК Метка
	//|ИЗ
	//|	Справочник.Метки_ат КАК Метки_ат ЛЕВОЕ СОЕДИНЕНИЕ
	//|	(ВЫБРАТЬ
	//|		ЕСТЬNULL(КОЛИЧЕСТВО(МеткиИсточника.Объект), 0) КАК Количество,
	//|		Метки_ат.Ссылка КАК Метка
	//|	ИЗ
	//|		Справочник.Метки_ат КАК Метки_ат
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраМеток + " КАК МеткиИсточника
	//|			ПО (МеткиИсточника.ЗначениеМетки = Метки_ат.Ссылка)
	//|				И (МеткиИсточника.Объект В (&Источники))
	//|			
	//|	
	//|	СГРУППИРОВАТЬ ПО
	//|		Метки_ат.Ссылка) КАК ВложенныйЗапрос
	//|		По (Метки_ат.Ссылка = ВложенныйЗапрос.Метка)
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВложенныйЗапрос.Метка.Наименование";
	
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Метки_ат.Ссылка
		|ПОМЕСТИТЬ РазрешенныеМетки
		|ИЗ
		|	Справочник.Метки_ат КАК Метки_ат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.Количество = 0
		|			ТОГДА 0
		|		КОГДА ВложенныйЗапрос.Количество = &КоличествоИсточников
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Флаг,
		|	РазрешенныеМетки.Ссылка КАК Метка
		|ИЗ
		|	РазрешенныеМетки КАК РазрешенныеМетки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЕСТЬNULL(КОЛИЧЕСТВО(МеткиИсточника.Объект), 0) КАК Количество,
		|			РазрешенныеМетки.Ссылка КАК Метка
		|		ИЗ
		|			РазрешенныеМетки КАК РазрешенныеМетки
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистраМеток + " КАК МеткиИсточника
		|				ПО (МеткиИсточника.ЗначениеМетки = РазрешенныеМетки.Ссылка)
		|					И (МеткиИсточника.Объект В (&Источники))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РазрешенныеМетки.Ссылка) КАК ВложенныйЗапрос
		|		ПО РазрешенныеМетки.Ссылка = ВложенныйЗапрос.Метка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Метка.Наименование";
	
	Запрос.УстановитьПараметр("Источники", Источники);
	Запрос.УстановитьПараметр("КоличествоИсточников", КоличествоИсточников);
	
	ТаблицаМеток = Запрос.Выполнить().Выгрузить();
	
	Если ОбновлятьВыбранныеМетки Тогда
		
		Для Каждого СтрокаТаблицыМеток Из ТаблицаМеток Цикл
			
			Если СтрокаТаблицыМеток.Флаг > 0 Тогда
				
				НоваяСтрока = Форма.ВыбранныеМетки.Добавить();
				НоваяСтрока.Значение = СтрокаТаблицыМеток.Метка;
				НоваяСтрока.Использовать = СтрокаТаблицыМеток.Флаг;
				НоваяСтрока.Сохраненная = Истина;
				НоваяСтрока.Частичная = СтрокаТаблицыМеток.Флаг > 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПометкиДереваПоТаблицеРекурсивно(Форма.ДеревоМеток.ПолучитьЭлементы(), Форма.ВыбранныеМетки,,
		Форма.МаксимальноеЗначениеИспользования);
	
	Метки_КлиентСервер_ат.ОбновитьПредставленияВыбранныхМеток(Форма);
	
КонецПроцедуры

Функция   ЗаполнитьПроектыПоИсточникам(Источники)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Заявка_ат.Проект
	|ИЗ
	|	Документ.Заявка_ат КАК Заявка_ат
	|ГДЕ
	|	Заявка_ат.Ссылка В (&Источники)";
	
	Запрос.УстановитьПараметр("Источники", Источники);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	
КонецФункции

Процедура ЗаполнитьПометкиДереваПоТаблицеРекурсивно(СтрокиДерева, ВыбранныеМетки, Сохраненная = Истина, МаксимальноеЗначениеИспользования) Экспорт
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		НайденныеСтроки = ВыбранныеМетки.НайтиСтроки(Новый Структура("Значение", СтрокаДерева.Значение));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				СтрокаДерева.Использовать = ?(НайденнаяСтрока.Использовать > МаксимальноеЗначениеИспользования, МаксимальноеЗначениеИспользования, НайденнаяСтрока.Использовать);
				СтрокаДерева.Частичная = НайденнаяСтрока.Использовать > 1;
				СтрокаДерева.Сохраненная = Сохраненная И НайденнаяСтрока.Использовать > 0;
				НайденнаяСтрока.Сохраненная = Сохраненная;
				НайденнаяСтрока.Частичная = СтрокаДерева.Частичная;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьПометкиДереваПоТаблицеРекурсивно(СтрокаДерева.ПолучитьЭлементы(), ВыбранныеМетки,, МаксимальноеЗначениеИспользования)
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьМетки(Форма, Знач СписокИсточников) Экспорт
	
	Если НЕ ТипЗнч(СписокИсточников) = Тип("СписокЗначений") Тогда
		
		Значение = СписокИсточников;
		СписокИсточников = Новый СписокЗначений;
		СписокИсточников.Добавить(Значение); //см. странности в параметре ЗаписатьЗначенияМетокВРегистр - ,, ЭтоНовый); //ранее был параметр такой у этой процедуры, в который из формы Заявки передавался ЭтоНовый(). Зачем при этом не записывать метки решительно не понятно на текущий момент
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлементСпискаИсточников Из СписокИсточников Цикл
		
		Значение = ЭлементСпискаИсточников.Значение;
		
		СписокМеток = ПолучитьСписокЗначенийМеток(Значение, "Справочник.Метки_ат", ТипЗнч(Значение), Тип("СправочникСсылка.Метки_ат"));
			//СписокМеток); //!!! это ещё как инициализируемая переменная уже умудряется параметром выступить??
		
		Для Каждого СтрокаВыбранныхМеток Из Форма.ВыбранныеМетки Цикл
			
			Если СтрокаВыбранныхМеток.Использовать < 2 Тогда // 2 - не было изменений.
				
				НайденноеЗначение = СписокМеток.НайтиПоЗначению(СтрокаВыбранныхМеток.Значение);
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					НайденноеЗначение.Пометка = ?(СтрокаВыбранныхМеток.Использовать = 1, Истина, Ложь);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Метки_Сервер_ат.ЗаписатьЗначенияМетокВРегистр(Значение, СписокМеток, Тип("СправочникСсылка.Метки_ат"), ЭлементСпискаИсточников.Пометка); //!!! попробовать понять, зачем нужен последний параметр
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
