
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контроль данных"
// 
// Первый автор - Вячеслав 'Mechanist' А. Павлов (с) с 2009 г.
//
//////////////////////////////////////////////////////////////////////////////// 

#Область ПрограммныйИнтерфейс

Процедура СправочникиПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеИсточника = Источник.Метаданные();
	ПрефиксСообщения = "Попытка записи " + ПредставлениеЭлементаВРодительномПадеже(Источник, МетаданныеИсточника);
	
	ЗаполнениеОбщихОбязательныхПолей(Источник);
	ПроконтролироватьНаименование(Источник, МетаданныеИсточника, ПрефиксСообщения, Отказ);
	ПроконтролироватьЗаписьЭлементаСправочника(Источник, МетаданныеИсточника, ПрефиксСообщения, Отказ);
	
	КонтрольДанных_Переопределяемый_ат.СправочникиПередЗаписью(Источник, Отказ);
	
КонецПроцедуры

Процедура ДокументыПередЗаписью(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеОбщихОбязательныхПолей(Источник);
	
	ПроконтролироватьЗаписьДокумента(Источник, Отказ);
	
	КонтрольДанных_Переопределяемый_ат.ДокументыПередЗаписью(Источник, Отказ);
	
КонецПроцедуры

Процедура БизнесПроцессыИЗадачиПередЗаписью(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеОбщихОбязательныхПолей(Источник);
	
	ПроконтролироватьЗаписьБизнесПроцессаИлиЗадачи(Источник, Отказ);
	
	КонтрольДанных_Переопределяемый_ат.БизнесПроцессыИЗадачиПередЗаписью(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция   ИспользоватьПараметрКонтроля(Источник, ПараметрКонтроля)
	
	Возврат ПараметрКонтроля.Использовать И НЕ ИсточникИсключение(Источник, ПараметрКонтроля);
	
КонецФункции 

Функция   ИсточникИсключение(Источник, ПараметрКонтроля)
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПараметрыКонтроляДанных_ат") Тогда
		
		Возврат Истина;
		
	ИначеЕсли КонтрольДанных_Переопределяемый_ат.ИсточникИсключение(Источник, ПараметрКонтроля) Тогда
		
		Возврат Истина;
		
	Иначе
		
		ИмяДляПоиска = Источник.Метаданные().ПолноеИмя() + ";";
		
		Возврат Найти(ПараметрКонтроля.Исключения, ИмяДляПоиска) > 0;
		
	КонецЕсли;
	
КонецФункции 

Функция   ПредставлениеЭлементаВРодительномПадеже(Источник, МетаданныеИсточника)
	
	НормализованноеНаименование = Строки_КлиентСервер_ат.ВернутьНормализованнуюСтроку(Источник.Наименование, Ложь, Истина);
	
	Если Источник.ЭтоГруппа Тогда
		
		Представление = ?(Источник.Ссылка.Пустая(), "новой ", "") + "группы";
		
	Иначе	
		
		Представление = ?(Источник.Ссылка.Пустая(), "нового ", "") + "элемента";
		
	КонецЕсли;
	
	Представление = Представление + ?(ОбщегоНазначения_КлиентСервер_ат.ПустоеЗначение(Источник.Код), "", " #" + Источник.Код);
	Представление = Представление + ?(ПустаяСтрока(НормализованноеНаименование), "", " """ + НормализованноеНаименование + """");
	Представление = Представление + " Справочника <" + МетаданныеИсточника.Представление() + ">";
	
	Возврат Представление;
	
КонецФункции 

Процедура ЗаполнениеОбщихОбязательныхПолей(Источник)
	
	Если НЕ ИспользоватьПараметрКонтроля(Источник, Справочники.ПараметрыКонтроляДанных_ат.ЗаполнятьОбщиеОбязательныеПоля) Тогда
		Возврат;
	КонецЕсли;
	
	ТекПользователь = Системный_Сервер_Переопределяемый_ат.ТекущийПользователь();
	ТекДата = ТекущаяДатаСеанса();
	НовыйОбъект = Источник.Ссылка.Пустая();
	
	Если ТекПользователь <> Неопределено
		И Метаданные_ат.СуществуетРеквизит(Источник, "Автор")
		И (НЕ ЗначениеЗаполнено(Источник.Автор) ИЛИ НовыйОбъект)
		И НЕ КонтрольДанных_Переопределяемый_ат.РеквизитИсточникаИсключение(Источник, "Автор") Тогда
		
		Источник.Автор = ТекПользователь;
		
	КонецЕсли;
	
	Если Метаданные_ат.СуществуетРеквизит(Источник, "ДатаСоздания")
		И (НЕ ЗначениеЗаполнено(Источник.ДатаСоздания) ИЛИ НовыйОбъект)
		И НЕ КонтрольДанных_Переопределяемый_ат.РеквизитИсточникаИсключение(Источник, "ДатаСоздания") Тогда
		
		Источник.ДатаСоздания = ТекДата;
		
	ИначеЕсли Метаданные_ат.СуществуетРеквизит(Источник, "ДатаРегистрации")
		И (НЕ ЗначениеЗаполнено(Источник.ДатаРегистрации) ИЛИ НовыйОбъект)
		И НЕ КонтрольДанных_Переопределяемый_ат.РеквизитИсточникаИсключение(Источник, "ДатаРегистрации") Тогда
		
		Источник.ДатаРегистрации = ТекДата;
		
	КонецЕсли;
	
	Если ТекПользователь <> Неопределено
		И Метаданные_ат.СуществуетРеквизит(Источник, "Ответственный")
		И НЕ КонтрольДанных_Переопределяемый_ат.РеквизитИсточникаИсключение(Источник, "Ответственный")
		И НЕ РольДоступна("ПолныеПрава") Тогда
		
		Если (НовыйОбъект И Источник.Ответственный.Пустая()) // - устанавливаем для новых объектов
				ИЛИ (НЕ НовыйОбъект И НЕ Источник.Ссылка.Ответственный = ТекПользователь) // - и для существующих, с учетом возможности снять ответственность с себя
			Тогда
			
			Источник.Ответственный = ТекПользователь;
			
		КонецЕсли;
		
	ИначеЕсли ТекПользователь <> Неопределено
		И Метаданные_ат.СуществуетРеквизит(Источник, "АвторИзменений")
		И НЕ КонтрольДанных_Переопределяемый_ат.РеквизитИсточникаИсключение(Источник, "АвторИзменений")
		И НЕ РольДоступна("ПолныеПрава") Тогда
		
		Если (НовыйОбъект И Источник.АвторИзменений.Пустая()) // - устанавливаем для новых объектов
				ИЛИ (НЕ НовыйОбъект И НЕ Источник.Ссылка.АвторИзменений = ТекПользователь) // - и для существующих, с учетом возможности снять ответственность с себя
			Тогда
			
			Источник.АвторИзменений = ТекПользователь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Метаданные_ат.СуществуетРеквизит(Источник, "ДатаИзменений")
		И НЕ КонтрольДанных_Переопределяемый_ат.РеквизитИсточникаИсключение(Источник, "ДатаИзменений")
		И НЕ РольДоступна("ПолныеПрава") Тогда
		
		Источник.ДатаИзменений = ТекДата;
		
	КонецЕсли;
	
	КонтрольДанных_Переопределяемый_ат.ЗаполнениеОбщихОбязательныхПолей(Источник);
	
КонецПроцедуры

Процедура ПроконтролироватьНаименование(Источник, МетаданныеИсточника, ПрефиксСообщения, Отказ)
	
	Если Источник.ПометкаУдаления
		ИЛИ МетаданныеИсточника.ДлинаНаименования = 0
		ИЛИ НЕ ИспользоватьПараметрКонтроля(Источник, Справочники.ПараметрыКонтроляДанных_ат.КонтролироватьНаименованияВСправочниках) Тогда
		
		Возврат
	
	КонецЕсли;
	
	НормализованноеНаименование = Строки_КлиентСервер_ат.ВернутьНормализованнуюСтроку(Источник.Наименование, Ложь, Истина);
	
	Если ПустаяСтрока(НормализованноеНаименование) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ПрефиксСообщения + " с незаполненным наименованием!";
		Сообщение.Сообщить(); 
		
		Возврат;
		
	ИначеЕсли Источник.Наименование <> НормализованноеНаименование Тогда
		
		Источник.Наименование = НормализованноеНаименование;
		
	КонецЕсли;
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1 "
		+ ?(МетаданныеИсточника.ДлинаКода > 0, "Код", 1)
		+ " ИЗ " + МетаданныеИсточника.ПолноеИмя()
		+ " ГДЕ Наименование = &Наименование
		|	И НЕ ПометкаУдаления
		|	И НЕ Ссылка = &Ссылка");
		
	Запрос.УстановитьПараметр("Наименование", НормализованноеНаименование);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Если МетаданныеИсточника.Владельцы.Количество() > 0 Тогда // ограничиваем проверку владельцем, при его наличии
		
		Запрос.Текст = Запрос.Текст + " И Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Источник.Владелец);
		
	КонецЕсли;
	
	Если МетаданныеИсточника.Иерархический Тогда // ограничиваем проверку родителем, при наличии иерархии
		
		Запрос.Текст = Запрос.Текст + " И Родитель = &Родитель";
		Запрос.УстановитьПараметр("Родитель", Источник.Родитель);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ПрефиксСообщения + " с уже существующим наименованием!" 
			+ ?(МетаданныеИсточника.ДлинаКода > 0, Символы.ПС + "Дублирующий элемент - #" + СокрП(Выборка.Код), "");
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПроконтролироватьЗаписьЭлементаСправочника(Источник, МетаданныеИсточника, ПрефиксСообщения, Отказ)
	
	Если НЕ ИспользоватьПараметрКонтроля(Источник, Справочники.ПараметрыКонтроляДанных_ат.КонтролироватьЗаписьСправочников)	Тогда
		Возврат;
	КонецЕсли;
	
	Код = Источник.Код;
	
	Если МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
		
		Код = Строки_КлиентСервер_ат.ВернутьНормализованнуюСтроку(Код, Ложь);
		
	КонецЕсли;
	
	// Запрет редактирования предопределенных элементов +
	
	Если Источник.Предопределенный Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ПрефиксСообщения + " являющегося предопределенным!";
		Сообщение.Сообщить(); 
			
		Возврат;
			
	КонецЕсли;
		
	// Запрет редактирования предопределенных элементов -
	
	// Проверка корректности кода +
		
	Если МетаданныеИсточника.ДлинаКода > 0 И НЕ Источник.Ссылка.Пустая() Тогда
			
		Если ОбщегоНазначения_КлиентСервер_ат.ПустоеЗначение(Код) Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПрефиксСообщения + " с незаполненным кодом!";
			Сообщение.Сообщить(); 
				
		ИначеЕсли (МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка
					И НЕ СокрП(Источник.Код) = Код)
				ИЛИ (МетаданныеИсточника.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число
					И НЕ Источник.Код = Код) Тогда
			
			Источник.Код = Код;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка корректности кода -
	
КонецПроцедуры 

Процедура ПроконтролироватьЗаписьДокумента(Источник, Отказ)
	
	//Если НЕ ИспользоватьПараметрКонтроля(Источник, Справочники.ПараметрыКонтроляДанных_ат.КонтролироватьЗаписьДокументов) Тогда
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
КонецПроцедуры 

Процедура ПроконтролироватьЗаписьБизнесПроцессаИлиЗадачи(Источник, Отказ)
	
	//Если НЕ ИспользоватьПараметрКонтроля(Источник,Справочники.ПараметрыКонтроляДанных_ат.КонтролироватьЗаписьБизнесПроцессовИЗадач) Тогда
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти
