////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с финансовой частью конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

#Область  ПрограммныйИнтерфейс

Процедура СоздатьСписаниеСоСчетаКлиента(Реализация, ДатаСписания, Комментарий = "") Экспорт
	
	Списание = Документы.СписаниеСоСчетаКлиента_ат.СоздатьДокумент();
	Списание.Дата = ДатаСписания;
	Списание.Организация = Реализация.Организация;
	Списание.Клиент = Реализация.Клиент;
	
	НоваяРасшифровка = Списание.РасшифровкаПлатежа.Добавить();
	НоваяРасшифровка.Реализация = Реализация;
	НоваяРасшифровка.Сумма = Реализация.СуммаДокумента;
	
	НачатьТранзакцию();
	Попытка
		
		Списание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Сообщить("Создано " + Списание);
		ЗаписьЖурналаРегистрации("Автосоздание документов.Списание", УровеньЖурналаРегистрации.Информация,, Списание.Ссылка, "Основание: " + Реализация);
		
		Комментарии_ат.ДобавитьАвтокомментарийПоВиду(Списание.Ссылка, Комментарий);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Ошибка = ОписаниеОшибки();
		Сообщить("Ошибка автосоздания Списания по документу " + Реализация + ": " + Ошибка);
		ЗаписьЖурналаРегистрации("Автосоздание документов.Списание", УровеньЖурналаРегистрации.Ошибка,, Реализация.Ссылка, Ошибка);
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает остаток по договору на дату.
//
// Параметры:
//	Договор - СправочникСсылка.Договоры_ат - договор для которого будет получен остаток.
//	Дата - Дата, Неопределено - дата на которую будет получен остаток, если дата не передана,
//								срез будет получен на текущую дату.
//	ПолучатьОперативныйОстаток - Булево - если Истина, то будет возвращён оперативный остаток, если Ложь - фактический.
//
// Возвращаемое значение:
//  Число, остаток на счёте на переданную дату.
// 
Функция   ПолучитьОстатокНаСчетеКлиентаПоДоговоруНаДату(Договор, Дата = Неопределено, ПолучатьОперативныйОстаток = Истина) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Клиентский_атОстатки.СуммаОстаток КАК Остаток
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.Остатки(&Дата, Счет = &Счет,, Субконто1 = &Договор) КАК Клиентский_атОстатки");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Договор", ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель));
	
	Если ПолучатьОперативныйОстаток Тогда
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Клиентский_ат.Оперативный);
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Клиентский_ат.Фактический);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВыборкаРезультатов = Результат.Выбрать();
	ВыборкаРезультатов.Следующий();
	
	Возврат ВыборкаРезультатов.Остаток;
	
КонецФункции 

Функция   ПолучитьПериодическийСчетПоДоговору(Договор, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплату_ат.Ссылка
		|ИЗ
		|	Документ.СчетНаОплату_ат КАК СчетНаОплату_ат
		|ГДЕ
		|	СчетНаОплату_ат.Договор В ИЕРАРХИИ (&Договор)
		|	И СчетНаОплату_ат.Период = &Период
		|	И СчетНаОплату_ат.Проведен";
	
	Запрос.УстановитьПараметр("Договор", ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель));
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Период));
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьДоговорПоЗаявке(Заявка, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияПроектовДоговоров_атСрезПоследних.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.ИсторияПроектовДоговоров_ат.СрезПоследних(&Дата, ) КАК ИсторияПроектовДоговоров_атСрезПоследних
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДоговоров_ат.СрезПоследних(
		|			,
		|			НЕ ПометкаУдаления
		|				И Период <= &Дата) КАК ДанныеДоговоров_атСрезПоследних
		|		ПО ИсторияПроектовДоговоров_атСрезПоследних.Договор = ДанныеДоговоров_атСрезПоследних.Договор
		|ГДЕ
		|	ИсторияПроектовДоговоров_атСрезПоследних.Проект = &Проект
		|	И (ДанныеДоговоров_атСрезПоследних.ДатаОкончания > &Дата
		|		ИЛИ ДанныеДоговоров_атСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДоговоров_атСрезПоследних.ДатаОкончания УБЫВ,
		|	ДанныеДоговоров_атСрезПоследних.Период  ВОЗР
		|");
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Проект", Заявка.Проект);
	
	ВРЗ = Запрос.Выполнить().Выбрать();
	Если ВРЗ.Следующий() Тогда
		Возврат ВРЗ.Договор;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции 

Функция   ИмеетсяДоговорОпределённогоТипа(Контрагент, ТипДоговора, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Договоры_ат.Ссылка
		|ИЗ
		|	Справочник.Договоры_ат КАК Договоры_ат
		|ГДЕ
		|	Договоры_ат.Владелец = &Владелец
		|	И Договоры_ат.ВидДоговора.ТипДоговора = &ТипДоговора
		|	И НЕ Договоры_ат.ПометкаУдаления
		|	И НЕ Договоры_ат.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|	И Договоры_ат.ДатаНачала <= &Дата
		|	И ((НЕ Договоры_ат.Автопролонгация И
		|			((Договоры_ат.СрокДоговора >= &Дата) ИЛИ (Договоры_ат.СрокДоговора = ДАТАВРЕМЯ(1, 1, 1))))
		|		ИЛИ Договоры_ат.Автопролонгация)";
	
	Если Дата = Неопределено Тогда
		
		Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция   ПолучитьАктуальноеДСПоДоговору(Договор, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Договоры_ат.Ссылка
		|ИЗ
		|	Справочник.Договоры_ат КАК Договоры_ат
		|ГДЕ
		|	Договоры_ат.Родитель = &Родитель
		|	И НЕ Договоры_ат.ПометкаУдаления
		|	И НЕ Договоры_ат.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|	И Договоры_ат.ДатаНачала <= &Дата
		|	И ((НЕ Договоры_ат.Автопролонгация И
		|			((Договоры_ат.СрокДоговора >= &Дата) ИЛИ (Договоры_ат.СрокДоговора = ДАТАВРЕМЯ(1, 1, 1))))
		|		ИЛИ Договоры_ат.Автопролонгация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договоры_ат.ДатаНачала УБЫВ";
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Родитель", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Договор;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции 

Функция   ПолучитьЗначениеОпределяющееТарифныйПланПоДоговору(Договор, Дата = Неопределено) Экспорт
	
	Если НЕ ПустаяСтрока(Договор.ФормулаРасчетаТарифногоПлана) Тогда
		
		ФормулаРасчетаТарифногоПлана = Договор.ФормулаРасчетаТарифногоПлана;
		
	ИначеЕсли НЕ Договор.Родитель.Пустая() И НЕ ПустаяСтрока(Договор.Родитель.ФормулаРасчетаТарифногоПлана) Тогда
		
		ФормулаРасчетаТарифногоПлана = Договор.Родитель.ФормулаРасчетаТарифногоПлана;
		
	ИначеЕсли НЕ ПустаяСтрока(Договор.ВидДоговора.ФормулаРасчетаТарифногоПлана) Тогда
		
		ФормулаРасчетаТарифногоПлана = Договор.ФормулаРасчетаТарифногоПлана;
		
	Иначе
		
		ФормулаРасчетаТарифногоПлана = Константы.ФормулаРасчетаТарифногоПланаПоУмолчанию_ат.Получить();
		
	КонецЕсли;
	
	Если ПустаяСтрока(ФормулаРасчетаТарифногоПлана) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		ДатаАнализа = ТекущаяДатаСеанса();
	Иначе
		ДатаАнализа = Дата;
	КонецЕсли;
	
	Если НЕ Договор.ПериодДанныхДляОпределенияТарифногоПлана.Пустая() Тогда
		
		ПериодДанныхДляОпределенияТарифногоПлана = Договор.ПериодДанныхДляОпределенияТарифногоПлана;
		
	ИначеЕсли НЕ Договор.Родитель.Пустая()
		И НЕ Договор.Родитель.ПериодДанныхДляОпределенияТарифногоПлана.Пустая() Тогда
		
		ПериодДанныхДляОпределенияТарифногоПлана = Договор.Родитель.ПериодДанныхДляОпределенияТарифногоПлана;
		
	ИначеЕсли НЕ Договор.ВидДоговора.ПериодДанныхДляОпределенияТарифногоПлана.Пустая() Тогда
		
		ПериодДанныхДляОпределенияТарифногоПлана = Договор.ВидДоговора.ПериодДанныхДляОпределенияТарифногоПлана;
		
	Иначе
		
		ПериодДанныхДляОпределенияТарифногоПлана = Константы.ПериодДанныхДляОпределенияТарифногоПланаПоУмолчанию_ат.Получить();
		
	КонецЕсли;
	
	Если ПериодДанныхДляОпределенияТарифногоПлана.Пустая() Тогда
		ПериодДанныхДляОпределенияТарифногоПлана = Перечисления.ПериодДанныхДляОпределенияТарифногоПлана_ат.ЗаПредыдущийМесяц;
	КонецЕсли;
	
	Если ПериодДанныхДляОпределенияТарифногоПлана = Перечисления.ПериодДанныхДляОпределенияТарифногоПлана_ат.ЗаПоследние30Дней Тогда
		
		ДатаОстатков = НачалоДня(ДатаАнализа);
		ДатаОборотов = НачалоДня(ДатаАнализа - 30 * 24 * 60 * 60);
		
	ИначеЕсли ПериодДанныхДляОпределенияТарифногоПлана = Перечисления.ПериодДанныхДляОпределенияТарифногоПлана_ат.СНачалаМесяца Тогда
		
		ДатаОстатков = НачалоДня(ДатаАнализа);
		ДатаОборотов = НачалоМесяца(ДатаАнализа);
		
	ИначеЕсли ПериодДанныхДляОпределенияТарифногоПлана = Перечисления.ПериодДанныхДляОпределенияТарифногоПлана_ат.ЗаПредыдущийМесяц Тогда
		
		ДатаОстатков = НачалоМесяца(ДатаАнализа);
		ДатаОборотов = НачалоМесяца(ДобавитьМесяц(ДатаАнализа, -1));
		
	КонецЕсли;
	
	ОперативныйОстаток = 0;
	ФактическийОстаток = 0;
	ОперативныйОборот = 0;
	ФактическийОборот = 0;
	ОперативныеПоступления = 0;
	ФактическиеПоступления = 0;
	Поступления = 0;
	ОперативныеСписания = 0;
	ФактическиеСписания = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Клиентский_атОстаткиИОбороты.Счет КАК Счет,
		|	Клиентский_атОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
		|	Клиентский_атОстаткиИОбороты.СуммаОборотДт + Клиентский_атОстаткиИОбороты.СуммаОборотКт КАК СуммаОборот,
		|	Клиентский_атОстаткиИОбороты.СуммаОборотДт КАК СуммаПоступлений,
		|	Клиентский_атОстаткиИОбороты.СуммаОборотКт КАК СуммаСписаний
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,,, Субконто1 = &Договор) КАК Клиентский_атОстаткиИОбороты");
	Запрос.УстановитьПараметр("НачалоПериода", ДатаОборотов);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОстатков);
	Запрос.УстановитьПараметр("Договор", ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель));
	
	УказателиВыборкиФинДанных = Запрос.Выполнить().Выбрать();
	
	Пока УказателиВыборкиФинДанных.Следующий() Цикл
		
		Если УказателиВыборкиФинДанных.Счет = ПланыСчетов.Клиентский_ат.Оперативный Тогда
			
			ОперативныйОстаток = УказателиВыборкиФинДанных.СуммаКонечныйОстаток;
			ОперативныйОборот = УказателиВыборкиФинДанных.СуммаОборот;
			ОперативныеПоступления = УказателиВыборкиФинДанных.СуммаПоступлений;
			Поступления = УказателиВыборкиФинДанных.СуммаПоступлений;
			ОперативныеСписания = УказателиВыборкиФинДанных.СуммаСписаний;
			
		ИначеЕсли УказателиВыборкиФинДанных.Счет = ПланыСчетов.Клиентский_ат.Фактический Тогда
			
			ФактическийОстаток = УказателиВыборкиФинДанных.СуммаКонечныйОстаток;
			ФактическийОборот = УказателиВыборкиФинДанных.СуммаОборот;
			ФактическиеПоступления = УказателиВыборкиФинДанных.СуммаПоступлений;
			Поступления = УказателиВыборкиФинДанных.СуммаПоступлений;
			ФактическиеСписания = УказателиВыборкиФинДанных.СуммаСписаний;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Значение = 0;
	
	Попытка
		
		Выполнить(ФормулаРасчетаТарифногоПлана);
		Возврат Значение;
		
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции 

Функция   ПолучитьЦенуНоменклатуры(Дата, Номенклатура, Организация, ВидДоговора, Клиент, Договор, Проект,
	ЗначениеОпределяющееИнтервалТарифа = Неопределено, НайденныйТариф = Неопределено, НайденныйТарифныйПлан = "") Экспорт
	
	Номенклатуры = Новый Массив;
	Номенклатуры.Добавить(Номенклатура);
	
	ТаблицаСтоимостей = ПолучитьЦеныНоменклатур(Дата, Номенклатуры, Организация, ВидДоговора, Клиент, Договор, Проект,
			ЗначениеОпределяющееИнтервалТарифа,, НайденныйТариф, НайденныйТарифныйПлан);
	
	Возврат ТаблицаСтоимостей[0].Цена;
	
КонецФункции 

Функция   ПолучитьЦеныНоменклатур(Дата = Неопределено, Номенклатуры = Неопределено, Организация, ВидДоговора, Клиент, Договор, Проект,
	ЗначениеОпределяющееТарифныйПлан = Неопределено, ПолучитьВсеТарифныеПланы = Ложь,
	НайденныйТариф = Неопределено, НайденныйТарифныйПлан = Неопределено, ЕстьНесколькоТарифныхПланов = Ложь) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеОпределяющееТарифныйПлан = Неопределено Тогда
		ЗначениеОпределяющееТарифныйПлан = ПолучитьЗначениеОпределяющееТарифныйПланПоДоговору(Договор, Дата);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Тарифы_атСрезПоследних.Регистратор КАК Регистратор,
		|	Тарифы_атСрезПоследних.ЗначениеВыбора КАК ЗначениеВыбора,
		|	1 КАК Приоретет,
		|	Тарифы_атСрезПоследних.ТарифныйПлан КАК ТарифныйПлан,
		|	Тарифы_атСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.Тарифы_ат.СрезПоследних(
		|			&Дата,
		|			(ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОкончаниеДействия >= &Дата)
		|				И Организация = &Организация
		|				И ВидДоговора = &ВидДоговора
		|				И Клиент = &Клиент
		|				И Договор = &Договор
		|				И Проект = &Проект
		|				И ((ЗначениеВыбора > 0) И (ЗначениеВыбора <= &ЗначениеВыбора)
		|					ИЛИ (ЗначениеВыбора = 0))
		|		) КАК Тарифы_атСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Тарифы_атСрезПоследних.Регистратор,
		|	Тарифы_атСрезПоследних.ЗначениеВыбора,
		|	2,
		|	Тарифы_атСрезПоследних.ТарифныйПлан,
		|	Тарифы_атСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.Тарифы_ат.СрезПоследних(
		|			&Дата,
		|			(ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОкончаниеДействия >= &Дата)
		|				И Организация = &Организация
		|				И ВидДоговора = &ВидДоговора
		|				И Клиент = &Клиент
		|				И Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|				И Проект = &Проект
		|				И ((ЗначениеВыбора > 0) И (ЗначениеВыбора <= &ЗначениеВыбора)
		|					ИЛИ (ЗначениеВыбора = 0))
		|		) КАК Тарифы_атСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Тарифы_атСрезПоследних.Регистратор,
		|	Тарифы_атСрезПоследних.ЗначениеВыбора,
		|	3,
		|	Тарифы_атСрезПоследних.ТарифныйПлан,
		|	Тарифы_атСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.Тарифы_ат.СрезПоследних(
		|			&Дата,
		|			(ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОкончаниеДействия >= &Дата)
		|				И Организация = &Организация
		|				И ВидДоговора = &ВидДоговора
		|				И Клиент = &Клиент
		|				И Договор = &Договор
		|				И Проект = ЗНАЧЕНИЕ(Справочник.Проекты_ат.ПустаяСсылка)
		|				И ((ЗначениеВыбора > 0) И (ЗначениеВыбора <= &ЗначениеВыбора)
		|					ИЛИ (ЗначениеВыбора = 0))
		|		) КАК Тарифы_атСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Тарифы_атСрезПоследних.Регистратор,
		|	Тарифы_атСрезПоследних.ЗначениеВыбора,
		|	4,
		|	Тарифы_атСрезПоследних.ТарифныйПлан,
		|	Тарифы_атСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.Тарифы_ат.СрезПоследних(
		|			&Дата,
		|			(ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОкончаниеДействия >= &Дата)
		|				И Организация = &Организация
		|				И ВидДоговора = &ВидДоговора
		|				И Клиент = &Клиент
		|				И Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|				И Проект = ЗНАЧЕНИЕ(Справочник.Проекты_ат.ПустаяСсылка)
		|				И ((ЗначениеВыбора > 0) И (ЗначениеВыбора <= &ЗначениеВыбора)
		|					ИЛИ (ЗначениеВыбора = 0))
		|		) КАК Тарифы_атСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Тарифы_атСрезПоследних.Регистратор,
		|	Тарифы_атСрезПоследних.ЗначениеВыбора,
		|	5,
		|	Тарифы_атСрезПоследних.ТарифныйПлан,
		|	Тарифы_атСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.Тарифы_ат.СрезПоследних(
		|			&Дата,
		|			(ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОкончаниеДействия >= &Дата)
		|				И Организация = &Организация
		|				И ВидДоговора = &ВидДоговора
		|				И Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|				И Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|				И Проект = &Проект
		|				И ((ЗначениеВыбора > 0) И (ЗначениеВыбора <= &ЗначениеВыбора)
		|					ИЛИ (ЗначениеВыбора = 0))
		|		) КАК Тарифы_атСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Тарифы_атСрезПоследних.Регистратор,
		|	Тарифы_атСрезПоследних.ЗначениеВыбора,
		|	6,
		|	Тарифы_атСрезПоследних.ТарифныйПлан,
		|	Тарифы_атСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.Тарифы_ат.СрезПоследних(
		|			&Дата,
		|			(ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОкончаниеДействия >= &Дата)
		|				И Организация = &Организация
		|				И ВидДоговора = &ВидДоговора
		|				И Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|				И Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|				И Проект = ЗНАЧЕНИЕ(Справочник.Проекты_ат.ПустаяСсылка)
		|				И ((ЗначениеВыбора > 0) И (ЗначениеВыбора <= &ЗначениеВыбора)
		|					ИЛИ (ЗначениеВыбора = 0))
		|		) КАК Тарифы_атСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ.Регистратор КАК Тариф,
		|	ВТ.ЗначениеВыбора КАК ЗначениеВыбора,
		|	ВТ.ТарифныйПлан КАК ТарифныйПлан
		|ПОМЕСТИТЬ ПодходящиеТарифы
		|ИЗ
		|	ВТ КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ.Приоретет,
		|	ВТ.Период УБЫВ,
		|	ВТ.ЗначениеВыбора УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодходящиеТарифы.Тариф КАК Тариф,
		|	ПодходящиеТарифы.ЗначениеВыбора = ЕСТЬNULL(Тарифы_атСрезПоследних.ЗначениеВыбора, 0) КАК ПодходящийТарифныйПлан,
		|	ЕСТЬNULL(Тарифы_атСрезПоследних.ЗначениеВыбора, 0) КАК ЗначениеВыбора,
		|	ЕСТЬNULL(Тарифы_атСрезПоследних.ТарифныйПлан, """") КАК ТарифныйПлан,
		|	ЕСТЬNULL(Тарифы_атСрезПоследних.Стоимость, 0) КАК Цена,
		|	ЕСТЬNULL(Тарифы_атСрезПоследних.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура_ат.ПустаяСсылка)) КАК Номенклатура
		|ИЗ
		|	ПодходящиеТарифы КАК ПодходящиеТарифы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Тарифы_ат.СрезПоследних(
		|				&Дата,
		|				ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ОкончаниеДействия >= &Дата) КАК Тарифы_атСрезПоследних
		|		ПО ПодходящиеТарифы.Тариф = Тарифы_атСрезПоследних.Регистратор
		|			И (ВЫБОР
		|				КОГДА &ПолучитьВсеТарифныеПланы
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ПодходящиеТарифы.ЗначениеВыбора = Тарифы_атСрезПоследних.ЗначениеВыбора
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ВсяНоменклатура
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ Тарифы_атСрезПоследних.Номенклатура В (&Номенклатуры)
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПодходящиеТарифы";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ЗначениеВыбора", ?(ЗначениеОпределяющееТарифныйПлан < 0, 0, ЗначениеОпределяющееТарифныйПлан));
	Запрос.УстановитьПараметр("ПолучитьВсеТарифныеПланы", ПолучитьВсеТарифныеПланы);
	Запрос.УстановитьПараметр("Номенклатуры", Номенклатуры);
	Запрос.УстановитьПараметр("ВсяНоменклатура", (Номенклатуры = Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ЦеныНоменклатур = Новый ТаблицаЗначений;
		ЦеныНоменклатур.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура_ат"));
		ЦеныНоменклатур.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(13, 2, ДопустимыйЗнак.Неотрицательный)));
		ЦеныНоменклатур.Колонки.Добавить("ТарифныйПлан", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ЦеныНоменклатур.Колонки.Добавить("Тариф", Новый ОписаниеТипов("ДокументСсылка.ВводТарифов_ат"));
		ЦеныНоменклатур.Колонки.Добавить("ЗначениеВыбора", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 0, ДопустимыйЗнак.Неотрицательный)));
		ЦеныНоменклатур.Колонки.Добавить("ПодходящийТарифныйПлан", Новый ОписаниеТипов("Булево"));
		
	Иначе
		
		ЦеныНоменклатур = Результат.Выгрузить();
		
	КонецЕсли;
	
	Если Номенклатуры <> Неопределено Тогда
		
		ТарифныеПланы = ЦеныНоменклатур.Скопировать(, "ЗначениеВыбора, ПодходящийТарифныйПлан");
		ТарифныеПланы.Свернуть("ЗначениеВыбора, ПодходящийТарифныйПлан");
		
		СтруктураПоиска = Новый Структура;
		
		Для каждого ТарифныйПлан Из ТарифныеПланы Цикл
			
			СтруктураПоиска.Вставить("ЗначениеВыбора", ТарифныйПлан.ЗначениеВыбора);
			
			Для каждого Номенклатура Из Номенклатуры Цикл
				
				СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
				Если ЦеныНоменклатур.НайтиСтроки(СтруктураПоиска) = Неопределено Тогда
					
					НоваяЦена = ЦеныНоменклатур.Добавить();
					
					НоваяЦена.Номенклатура = Номенклатура;
					НоваяЦена.Цена = Неопределено;
					НоваяЦена.Тариф = Неопределено;
					НоваяЦена.ТарифныйПлан = "";
					НоваяЦена.ЗначениеВыбора = ТарифныйПлан.ЗначениеВыбора;
					НоваяЦена.ПодходящийТарифныйПлан = ТарифныйПлан.ПодходящийТарифныйПлан;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЦеныНоменклатур.Сортировать("Цена УБЫВ, ЗначениеВыбора ВОЗР, Номенклатура ВОЗР");
	
	Если ТипЗнч(НайденныйТарифныйПлан) = Тип("Строка") Тогда // т.е. ожидается возврат единственного
		
		Для Каждого ЦенаНоменклатуры Из ЦеныНоменклатур Цикл
			
			Если ЗначениеЗаполнено(ЦенаНоменклатуры.Тариф) И НЕ ЗначениеЗаполнено(НайденныйТариф) Тогда
				
				НайденныйТариф = ЦенаНоменклатуры.Тариф;
				НайденныйТарифныйПлан = ЦенаНоменклатуры.ТарифныйПлан;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НайденныйТариф) Тогда
			
			Позиция = ЦеныНоменклатур.Количество() - 1;
			Пока Позиция >= 0 Цикл
				
				Если ЗначениеЗаполнено(ЦеныНоменклатур[Позиция].Тариф)
					И ЦеныНоменклатур[Позиция].Тариф <> НайденныйТариф ИЛИ ЦеныНоменклатур[Позиция].ТарифныйПлан <> НайденныйТарифныйПлан Тогда
					
					ЦеныНоменклатур.Удалить(ЦеныНоменклатур[Позиция]);
					ЕстьНесколькоТарифныхПланов = Истина;
					
				КонецЕсли;
				
				Позиция = Позиция - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЦеныНоменклатур;
	
КонецФункции

Функция   ПолучитьСтруктуруСтоимостейЗаявки(Заявка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Согласование_атСодержаниеСогласования.Номенклатура КАК Номенклатура,
		|	Согласование_атСодержаниеСогласования.СодержаниеРабот КАК СодержаниеРабот,
		|	Согласование_атСодержаниеСогласования.Количество КАК Количество,
		|	Согласование_атСодержаниеСогласования.Сумма КАК Сумма,
		|	Согласование_атСодержаниеСогласования.Цена КАК Цена
		|ИЗ
		|	Документ.Согласование_ат.СодержаниеСогласования КАК Согласование_атСодержаниеСогласования
		|ГДЕ
		|	НЕ Согласование_атСодержаниеСогласования.Ссылка.ПометкаУдаления
		|	И Согласование_атСодержаниеСогласования.Ссылка.Заявка = &Заявка
		|	И Согласование_атСодержаниеСогласования.Ссылка.СтатусСогласования = &СтатусСогласования
		|	И Согласование_атСодержаниеСогласования.Сумма > 0";
	
		//"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	ЕСТЬNULL(ВременаРабот_атОбороты.СодержаниеРабот.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура_ат.ПустаяСсылка)) КАК Номенклатура,
		//|	ВременаРабот_атОбороты.ОтчетноеВремяОборот КАК ОтчетноеВремяВыполнения
		//|ИЗ
		//|	РегистрНакопления.ВременаРабот_ат.Обороты(, , , Заявка = &Заявка) КАК ВременаРабот_атОбороты";
		
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("СтатусСогласования", Перечисления.СтатусыСогласований_ат.Принято);
	
	ТаблицаЗатараченогоВремени = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗатараченогоВремени.Количество() = 0 Тогда
		
		Возврат Новый Структура;
		
	КонецЕсли;
	
	МассивНоменклатур = ТаблицаЗатараченогоВремени.ВыгрузитьКолонку("Номенклатура");
	
	//Договор = ПолучитьДоговорПоЗаявке(Заявка);
	//
	//Если НЕ ЗначениеЗаполнено(Договор) Тогда
	//	
	//	Возврат Новый Структура;
	//	
	//КонецЕсли;
	//
	//Организация = Договор.Организация;
	//ВидДоговора = Договор.ВидДоговора;
	//Клиент      = Договор.Владелец;
	//Проект      = Заявка.Проект;
	//
	//ТаблицаСтоимостейОбщийТариф =
	//	ПолучитьЦеныНоменклатур(ТекущаяДата, МассивНоменклатур, Организация, ВидДоговора, Неопределено, Договор, Проект);
	//ТаблицаСтоимостейТарифКлиента =
	//	ПолучитьЦеныНоменклатур(ТекущаяДата, МассивНоменклатур, Организация, ВидДоговора, Клиент, Договор, Проект);
	//
	СтоимостьТарифОбщий   = 0;
	//СтоимостьТарифКлиента = 0;
	ДетализацияСтоимостей = Новый Массив;
	
	Для Каждого СтрокаРабот Из ТаблицаЗатараченогоВремени Цикл
		
		//ТарифОбщий   = ТаблицаСтоимостейОбщийТариф.Найти(СтрокаРабот.Номенклатура, "Номенклатура").Цена;
		//ТарифКлиента = ТаблицаСтоимостейТарифКлиента.Найти(СтрокаРабот.Номенклатура, "Номенклатура").Цена;
		//ВремяДесятич = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
		//	СтрокаРабот.ОтчетноеВремяВыполнения);
		//
		СтруктураСтоимостей = ПолучитьСтруктуруСтоимостейНоменклатуры(СтрокаРабот.Номенклатура,
			СтрокаРабот.СодержаниеРабот,
			СтрокаРабот.Сумма);
			//ВремяДесятич, ТарифОбщий, ТарифКлиента); //!!!!! пока всё это не считаем и вообще думаем - нужно ли..
		
		ДетализацияСтоимостей.Добавить(СтруктураСтоимостей);
		
		СтоимостьТарифОбщий =
			СтоимостьТарифОбщий
			+ СтрокаРабот.Сумма;
			//+ ?(СтруктураСтоимостей.СтоимостьТарифОбщий = Неопределено, 0, СтруктураСтоимостей.СтоимостьТарифОбщий);
		//СтоимостьТарифКлиента =
		//	СтоимостьТарифКлиента + ?(СтруктураСтоимостей.СтоимостьТарифКлиента = Неопределено, 0, СтруктураСтоимостей.СтоимостьТарифКлиента);
		
	КонецЦикла;
	
	СтруктураСтоимостей = СоздатьСтруктуруСтоимостейНоменклатуры("ВСЕГО по Заявке",
		"", СтоимостьТарифОбщий);
		//, СтоимостьТарифКлиента);
	СтруктураСтоимостей.Вставить("ДетализацияСтоимостей", ДетализацияСтоимостей);
	
	Если СтоимостьТарифОбщий = 0 Тогда //ИЛИ СтоимостьТарифКлиента = 0 Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат СтруктураСтоимостей;
	
КонецФункции 

Функция   ПолучитьСодержаниеНоменклатурыДляСчета(Номенклатура, ПредставлениеДоговора,
	ПредставлениеПериода, Документ = Неопределено) Экспорт
	
	Возврат ПолучитьСодержаниеНоменклатуры(Номенклатура, Номенклатура.ШаблонСодержанияСчета, ПредставлениеДоговора,
		ПредставлениеПериода, Документ);
	
КонецФункции 

Функция   ПолучитьСодержаниеНоменклатурыДляРеализации(Номенклатура, ПредставлениеДоговора,
	ПредставлениеПериода, Документ = Неопределено) Экспорт
	
	Возврат ПолучитьСодержаниеНоменклатуры(Номенклатура, Номенклатура.ШаблонСодержанияРеализации, ПредставлениеДоговора,
		ПредставлениеПериода, Документ);
	
КонецФункции

Функция   ПолучитьФактическуюДатуПоступления(Поступление) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СинхронизацияПоступленийНаРасчетныйСчет.ДатаПоступления, ДокументПоступление.Дата) КАК ДатаПоступления
		|ИЗ
		|	Документ.ПоступлениеНаСчетКлиента_ат КАК ДокументПоступление
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияПоступленийНаРасчетныйСчет_ат КАК СинхронизацияПоступленийНаРасчетныйСчет
		|		ПО ДокументПоступление.Ссылка = СинхронизацияПоступленийНаРасчетныйСчет.Ссылка
		|ГДЕ
		|	ДокументПоступление.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Поступление);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоступления;
	Иначе
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьФактическуюДатуСписания(СогласованиеИлиСчет) Экспорт
	
	Возврат ?(ТипЗнч(СогласованиеИлиСчет) = Тип("ДокументСсылка.Согласование_ат"), СогласованиеИлиСчет.ДатаСогласования, СогласованиеИлиСчет.Дата);
	
КонецФункции

Функция   ПолучитьПланируемуюДатуФинДокумента(ФинДокумент) Экспорт
	
	ПланируемаяДата = '00010101';
	
	Если ТипЗнч(ФинДокумент) = Тип("ДокументСсылка.СчетНаОплату_ат") Тогда
		
		Если ЗначениеЗаполнено(ФинДокумент.ДатаОплатыПланируемая) Тогда
			
			ПланируемаяДата = ФинДокумент.ДатаОплатыПланируемая;
			
		Иначе
			
			ПланируемаяДата = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(
				ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ФинДокумент.Дата, 3));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ФинДокумент) = Тип("ДокументСсылка.Реализация_ат") Тогда
		
		СтатусНачалаОтсчета = Константы.СтатусНачалаОтсчетаДоСрокаПодписанияФинДокумента_ат.Получить();
		Если ЗначениеЗаполнено(СтатусНачалаОтсчета) Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВЫБОР
				|		КОГДА РеализацияДокумент.ДатаПодписанияПланируемая > 0
				|			ТОГДА РеализацияДокумент.ДатаПодписанияПланируемая
				|		КОГДА РеализацияДокумент.Договор.СрокПодписанияРеализации > 0
				|			ТОГДА РеализацияДокумент.Договор.СрокПодписанияРеализации
				|		КОГДА РеализацияДокумент.Договор.Родитель <> ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
				|				И РеализацияДокумент.Договор.Родитель.СрокПодписанияРеализации > 0
				|			ТОГДА РеализацияДокумент.Договор.Родитель.СрокПодписанияРеализации
				|			ИНАЧЕ 65
				|		КОНЕЦ КАК СрокПодписания,
				|	НАЧАЛОПЕРИОДА(ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период, ДЕНЬ) КАК ДатаНачалаОтсчета
				|ИЗ
				|	РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Реализация_ат КАК РеализацияДокумент
				|		ПО ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка = РеализацияДокумент.Ссылка
				|			И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус = &СтатусНачалаОтсчета
				|ГДЕ
				|	РеализацияДокумент.Ссылка = &Реализация");
			Запрос.УстановитьПараметр("Реализация", ФинДокумент);
			Запрос.УстановитьПараметр("СтатусНачалаОтсчета", Константы.СтатусНачалаОтсчетаДоСрокаПодписанияФинДокумента_ат.Получить());
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаРезультатов = РезультатЗапроса.Выбрать();
				ВыборкаРезультатов.Следующий();
				
				ПланируемаяДата = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(
					ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ВыборкаРезультатов.ДатаНачалаОтсчета,
						ВыборкаРезультатов.СрокПодписания));
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ФинДокумент.ДатаПодписанияПланируемая) Тогда
				Возврат ФинДокумент.ДатаПодписанияПланируемая;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФинДокумент.Договор.СрокПодписанияРеализации) Тогда
				
				СрокПодписанияРеализации = ФинДокумент.Договор.СрокПодписанияРеализации;
				
			ИначеЕсли НЕ ФинДокумент.Договор.Родитель.Пустая() И ЗначениеЗаполнено(ФинДокумент.Договор.Родитель.СрокПодписанияРеализации) Тогда
				
				СрокПодписанияРеализации = ФинДокумент.Договор.Родитель.СрокПодписанияРеализации;
				
			Иначе
				
				СрокПодписанияРеализации = 65; // что бы точно прошло два месяца для договоров с периодом определения значения выбора Т/П "За прошлый месяц"
				
			КонецЕсли;
			
			ПланируемаяДата = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(
				ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ФинДокумент.Дата,
					СрокПодписанияРеализации));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПланируемаяДата;
	
КонецФункции

Функция   ПолучитьФактическуюДатуФинДокумента(ФинДокумент) Экспорт
	
	ФактическаяДата = '00010101';
	
	Если ТипЗнч(ФинДокумент) = Тип("ДокументСсылка.СчетНаОплату_ат") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЕСТЬNULL(СинхронизацияПоступленийНаРасчетныйСчет.ДатаПоступления, ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.Ссылка.Дата)) КАК ДатаОплаты
			|ИЗ
			|	Документ.СчетНаОплату_ат КАК СчетНаОплатуДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчетКлиента_ат.РасшифровкаПлатежа КАК ПоступлениеНаСчетКлиентаРасшифровкаПлатежа
			|		ПО СчетНаОплатуДокумент.Ссылка = ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.СчетНаОплату
			|			И ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.Ссылка.Проведен
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияПоступленийНаРасчетныйСчет_ат КАК СинхронизацияПоступленийНаРасчетныйСчет
			|		ПО ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.Ссылка = СинхронизацияПоступленийНаРасчетныйСчет.Ссылка
			|ГДЕ
			|	СчетНаОплатуДокумент.Ссылка = &Ссылка
			|СГРУППИРОВАТЬ ПО
			|	СчетНаОплатуДокумент.Ссылка,
			|	СчетНаОплатуДокумент.СуммаДокумента
			|ИМЕЮЩИЕ
			|	СУММА(ЕСТЬNULL(ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.Сумма, 0)) >= СчетНаОплатуДокумент.СуммаДокумента
			|");
		Запрос.УстановитьПараметр("Ссылка", ФинДокумент);
		
		ВыборкаРезультатов = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатов.Следующий() Тогда
			ФактическаяДата = ВыборкаРезультатов.ДатаОплаты;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ФинДокумент) = Тип("ДокументСсылка.Реализация_ат") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(СписаниеСоСчетаКлиентаРасшифровкаПлатежа.Ссылка.Дата) КАК ДатаСписания
			|ИЗ
			|	Документ.СписаниеСоСчетаКлиента_ат.РасшифровкаПлатежа КАК СписаниеСоСчетаКлиентаРасшифровкаПлатежа
			|ГДЕ
			|	СписаниеСоСчетаКлиентаРасшифровкаПлатежа.Ссылка.Проведен
			|	И СписаниеСоСчетаКлиентаРасшифровкаПлатежа.Реализация = &Реализация");
		Запрос.УстановитьПараметр("Реализация", ФинДокумент);
		
		ВыборкаРезультатов = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатов.Следующий() Тогда
			ФактическаяДата = ВыборкаРезультатов.ДатаСписания;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФактическаяДата;
	
КонецФункции

Функция   ПолучитьСтатусОплатыСчета(Счет) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтатусыСчетовНаОплату_ат.Статус
		|ИЗ
		|	РегистрСведений.СтатусыСчетовНаОплату_ат КАК СтатусыСчетовНаОплату_ат
		|ГДЕ
		|	СтатусыСчетовНаОплату_ат.Счет = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Счет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ИзменитьСтатусОплатыСчета(СчетСсылка, Статус) Экспорт
	
	ЗаписьСтатусаСчета = РегистрыСведений.СтатусыСчетовНаОплату_ат.СоздатьМенеджерЗаписи();
	ЗаписьСтатусаСчета.Счет = СчетСсылка;
	ЗаписьСтатусаСчета.Прочитать();
	
	Если НЕ ЗаписьСтатусаСчета.Выбран() Тогда
		ЗаписьСтатусаСчета.Счет = СчетСсылка;
	КонецЕсли;
	
	ЗаписьСтатусаСчета.Статус = Статус;
	ЗаписьСтатусаСчета.Записать();
	
КонецПроцедуры

Процедура ПересчитатьСтатусыОплатыСчетов(Счета) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СчетНаОплатуДокумент.Ссылка КАК Ссылка,
		|	СчетНаОплатуДокумент.СуммаДокумента КАК СуммаДокумента,
		|	СтатусыСчетовНаОплату.Статус КАК Статус,
		|	СУММА(ЕСТЬNULL(ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.Сумма, 0)) КАК СуммаПоступления
		|ИЗ
		|	Документ.СчетНаОплату_ат КАК СчетНаОплатуДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчетКлиента_ат.РасшифровкаПлатежа КАК ПоступлениеНаСчетКлиентаРасшифровкаПлатежа
		|		ПО СчетНаОплатуДокумент.Ссылка = ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.СчетНаОплату
		|			И ПоступлениеНаСчетКлиентаРасшифровкаПлатежа.Ссылка.Проведен
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыСчетовНаОплату_ат КАК СтатусыСчетовНаОплату
		|		ПО СчетНаОплатуДокумент.Ссылка = СтатусыСчетовНаОплату.Счет
		|ГДЕ
		|	СчетНаОплатуДокумент.Ссылка В(&Ссылки)
		|	И (НЕ СтатусыСчетовНаОплату.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОплатыСчетов_ат.Отменен)
		|		ИЛИ СтатусыСчетовНаОплату.Статус ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетНаОплатуДокумент.Ссылка,
		|	СтатусыСчетовНаОплату.Статус,
		|	СчетНаОплату.СуммаДокумента");
	Запрос.УстановитьПараметр("Ссылки", Счета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		АктуальныйСтатус = ОпределитьСтатусОплаты(Выборка.СуммаДокумента, Выборка.СуммаПоступления);
		
		Если АктуальныйСтатус <> Выборка.Статус Тогда
			ИзменитьСтатусОплатыСчета(Выборка.Ссылка, АктуальныйСтатус);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиФинДокумента(ФинДокумент, Статус, Комментарий = "", Период = Неопределено) Экспорт
	
	Если Период = Неопределено ИЛИ Период = Дата(1, 1, 1) Тогда
		Период_ = ТекущаяДатаСеанса();
	Иначе
		Период_ = Период;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Период_);
	НаборЗаписей.Отбор.Ссылка.Установить(ФинДокумент);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.Период = Период_; // Добавить рекв.ДатаИзменения = ТДС()
	НоваяЗапись.Ссылка = ФинДокумент;
	НоваяЗапись.Статус = Статус;
	НоваяЗапись.Комментарий = Комментарий;
	НоваяЗапись.АвторЗаписи = Пользователи.ТекущийПользователь();
	
	НаборЗаписей.Записать(Истина);
	
	Если ТипЗнч(ФинДокумент) = Тип("ДокументСсылка.Реализация_ат") //!!!вынуть в отдельную процедеру (точнее изменить вызов ЗаписатьСтатусОтправки
		// на УстановитьСтатусОтправки, где вызывать именно ЗаписатьСтатусОтправки и отдельно - вот этот код)
		И Статус.ТипСтатуса = Перечисления.ТипыСтатусовОтправкиФинДокументов_ат.ФинальныйПоложительный Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СписаниеСоСчетаКлиентаРасшифровкаПлатежа.Ссылка
			|ИЗ
			|	Документ.СписаниеСоСчетаКлиента_ат.РасшифровкаПлатежа КАК СписаниеСоСчетаКлиентаРасшифровкаПлатежа
			|ГДЕ
			|	СписаниеСоСчетаКлиентаРасшифровкаПлатежа.Ссылка.Проведен
			|	И СписаниеСоСчетаКлиентаРасшифровкаПлатежа.Реализация = &Реализация");
		Запрос.УстановитьПараметр("Реализация", ФинДокумент);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			СоздатьСписаниеСоСчетаКлиента(ФинДокумент,
				?(Период = Неопределено ИЛИ Период = Дата(1, 1, 1), ФинДокумент.Дата, Период_),
				"Автоматическое создание Списания при установке статуса """
				+ Статус + """ Реализации " + Строка(Число(ФинДокумент.Номер)) + " от " + Формат(ФинДокумент.Дата, "ДФ=dd.MM.yyyy"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьДанныеТекущегоСтатусаОтправкиФинДокумента(ФинДокумент) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура("Статус, ДатаСтатуса, Комментарий");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус,
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период КАК ДатаСтатуса,
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних(, Ссылка = &Ссылка) КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних");
	Запрос.УстановитьПараметр("Ссылка", ФинДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемаяСтруктура.Вставить("Статус", Выборка.Статус);
		ВозвращаемаяСтруктура.Вставить("ДатаСтатуса", Выборка.ДатаСтатуса);
		ВозвращаемаяСтруктура.Вставить("Комментарий", Выборка.Комментарий);
		
	КонецЕсли;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

Процедура ИзменитьСтатусыОтправкиПриПечатиФинДокументов(ОбъектыПечати) Экспорт
	
	Статус = Константы.СтатусПечатиФинДокумента_ат.Получить();
	Комментарий = "Статус установлен автоматически при печати";
	ДатаСтатуса = ТекущаяДатаСеанса();
	
	Если Статус = Справочники.СтатусыОтправкиФинДокументов_ат.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			
			Если ТипЗнч(ОбъектПечати.Значение) = Тип("ДокументСсылка.СчетНаОплату_ат")
				ИЛИ ТипЗнч(ОбъектПечати.Значение) = Тип("ДокументСсылка.Реализация_ат") Тогда
				
				ЗаписатьСтатусОтправкиФинДокумента(ОбъектПечати.Значение, Статус, Комментарий, ДатаСтатуса);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("Автоустановка статуса фин.документа", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры 

// МассивОбъектов - Счета или Реализации. Недопустимо указывать в одном массиве разные типы!
Процедура ПечатьФинДокумента(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	ИспользоватьДляОтправки = ПараметрыПечати.ИспользоватьДляОтправки;
	
	Если ПараметрыПечати.Свойство("РегистрСинхронизации") Тогда
		
		ПервыйДокумент = Истина;
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ИмяМакета = КоллекцияПечатныхФорм[0].ИмяМакета;
		
		Если ИспользоватьДляОтправки Тогда
			СоответствиеДокументовПечатнымФормам = Новый Соответствие;
		КонецЕсли;
		
		Для Сч = 0 По МассивОбъектов.Количество() - 1 Цикл
			
			Документ = МассивОбъектов[Сч];
			
			Результат = СинхронизацияСБП_ат.ПолучитьСинхронизированнуюПечатнуюФорму(Документ, XMLСтрока(ПараметрыПечати.РегистрСинхронизации),
				ИмяМакета, ПараметрыПечати.ВнешняяПечатнаяФорма);
				
			Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
				
				Сообщить(Результат.ТекстОшибки);
				
			Иначе
				
				Если ИспользоватьДляОтправки Тогда
					
					СоответствиеДокументовПечатнымФормам.Вставить(Документ,
						Новый Структура("ТабличныйДокумент,ЭДО", Результат.ТабличныйДокумент, Результат.ЭДО));
					
				КонецЕсли;
				
				ОбъектыПечати.Добавить(Документ, Строка(Документ));
				НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
				Если ПервыйДокумент Тогда
					ПервыйДокумент = Ложь;
				Иначе
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(Результат.ТабличныйДокумент);
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИспользоватьДляОтправки Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, "Финдокумент", ТабличныйДокумент);
		
		// отправка типовым методом из БСП не используется
		//СписокАдресовПолучателя = Новый СписокЗначений;
		//
		//Если Документ.Клиент <> Неопределено Тогда
		//	
		//	АдресаПолучателя = УправлениеКонтактнойИнформацией.ЗначенияКонтактнойИнформацииОбъекта(
		//		Документ.Клиент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		//	
		//	Для Каждого АдресПолучателя Из АдресаПолучателя Цикл
		//		СписокАдресовПолучателя.Добавить(АдресПолучателя.Значение, Документ.Клиент.Наименование);
		//	КонецЦикла;
		//	
		//КонецЕсли;
		//
		//ПараметрыВывода.ПараметрыОтправки.Тема = ?(ОбъектыПечати.Количество() = 1, Результат.ПредставлениеДокумента, "Финдокумент");
		//ПараметрыВывода.ПараметрыОтправки.Текст = "Типа текст";
		//ПараметрыВывода.ПараметрыОтправки.Получатель = СписокАдресовПолучателя;
		
		Если ИспользоватьДляОтправки Тогда
			Уведомления_ат.ОтправитьФинансовыеДокументы(СоответствиеДокументовПечатнымФормам, ПараметрыПечати);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьРеализациюПоОснованиям(Объект, ИзФормы = Ложь) Экспорт //!!!TODO: переписать, перенести в док.Реализация_ат.МО + сделать сделать подобным и/с док.СчетНаОплату_ат.ЗаполнитьСчетПоОснованиям
	
	СуммаВключаетНДС = Ложь;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ФиксацияРабот_атУслуги.Ссылка.Договор КАК Договор,
		|	ФиксацияРабот_атУслуги.Номенклатура,
		|	ФиксацияРабот_атУслуги.Цена,
		|	ФиксацияРабот_атУслуги.Сумма,
		|	ФиксацияРабот_атУслуги.ОтчетноеВремя КАК Количество
		|ИЗ
		|	Документ.ФиксацияРабот_ат.Услуги КАК ФиксацияРабот_атУслуги
		|ГДЕ
		|	ФиксацияРабот_атУслуги.Ссылка В (&Закрытия)
		|	И ФиксацияРабот_атУслуги.Ссылка.Проведен
		|	И ФиксацияРабот_атУслуги.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура_ат.ПустаяСсылка)
		|	И ФиксацияРабот_атУслуги.Цена > 0
		|	И ФиксацияРабот_атУслуги.ОтчетноеВремя > 0
		|	И НЕ ФиксацияРабот_атУслуги.Ссылка В
		|		(ВЫБРАТЬ
		|			Основание
		|		ИЗ
		|			Документ.Реализация_ат.Основания
		|		ГДЕ
		|			Ссылка.Проведен)
		|");
	
	Если ИзФормы Тогда
		Закрытия = Объект.Основания.Выгрузить().ВыгрузитьКолонку("Основание");
	Иначе
		Закрытия = Объект.Основания.ВыгрузитьКолонку("Основание");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Закрытия", Закрытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			
			Объект.Договор = Выборка.Договор;
			Объект.Организация = Объект.Договор.Организация;
			Объект.Клиент = Объект.Договор.Владелец;
			
		ИначеЕсли Объект.Договор <> Выборка.Договор Тогда
			
			ВызватьИсключение "Не допустимо комплексное актирование по Закрытиям с различными Договорами!";
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Номенклатура,Цена", Выборка.Номенклатура, Выборка.Цена);
		
		НайденныеСтроки = Объект.Услуги.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаУслуг = Объект.Услуги.Добавить();
			СтрокаУслуг.Номенклатура 	= Выборка.Номенклатура;
			СтрокаУслуг.Цена 			= Выборка.Цена;
			СтрокаУслуг.Количество 		= ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
				Выборка.Количество);
			СтрокаУслуг.Сумма 			= Выборка.Сумма;
			
		Иначе
			
			СтрокаУслуг = НайденныеСтроки[0];
			СтрокаУслуг.Количество 		= СтрокаУслуг.Количество + ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
				Выборка.Количество);
			СтрокаУслуг.Сумма 			= СтрокаУслуг.Сумма + Выборка.Сумма;
			
			Если ИзФормы Тогда
				СтрокаУслуг.Всего 		= СтрокаУслуг.Всего + Выборка.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаУслуг.СтавкаНДС 			= Перечисления.СтавкиНДС_ат.БезНДС;
		СтрокаУслуг.СуммаНДС 			= 0;
		
	КонецЦикла;
	
	//Для Каждого СтрокаОснования Из Объект.Основания Цикл
	//	
	//	Основание = СтрокаОснования.Основание;
	//	
	//	Для Каждого СтрокаУслугФиксации Из Основание.Услуги Цикл
	//		
	//		// Контроля по договору достаточно. Он содержит и клиента, и организацию
	//		Если НЕ Объект.Договор = СтрокаУслугФиксации.Договор.Родитель
	//			И НЕ Объект.Договор = СтрокаУслугФиксации.Договор Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		Если СтрокаУслугФиксации.ОтчетноеВремя = 0 ИЛИ СтрокаУслугФиксации.ОтчетнаяСтоимость = 0 Тогда //!!!!!HOTFIX
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ИмитацияСтроки = Новый Структура;
	//		
	//		ИмитацияСтроки.Вставить("Номенклатура", СтрокаУслугФиксации.Номенклатура);
	//		ИмитацияСтроки.Вставить("Содержание", ПолучитьСодержаниеНоменклатурыДляРеализации(СтрокаУслугФиксации.Номенклатура,
	//			Объект.Договор, Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Объект.Период),
	//			СтрокаУслугФиксации.Согласование, Объект));
	//		ИмитацияСтроки.Вставить("Количество",
	//			ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
	//				СтрокаУслугФиксации.ОтчетноеВремя));
	//		
	//		ИмитацияСтроки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС_ат.БезНДС);
	//		ИмитацияСтроки.Вставить("СуммаНДС", 0);
	//		ИмитацияСтроки.Вставить("Сумма", СтрокаУслугФиксации.ОтчетнаяСтоимость);
	//		ИмитацияСтроки.Вставить("Всего", СтрокаУслугФиксации.ОтчетнаяСтоимость);
	//		
	//		Цена = СтрокаУслугФиксации.ОтчетнаяСтоимость / ИмитацияСтроки.Количество;
	//		
	//		ИмитацияСтроки.Вставить("Цена", Цена);
	//		
	//		Финансы_КлиентСервер_ат.ПересчитатьСумму(ИмитацияСтроки, СуммаВключаетНДС);
	//		
	//		//СтрокаУслуг = Объект.Услуги.Найти(ИмитацияСтроки.Номенклатура, "Номенклатура");
	//		
	//		СтруктураОтбора = Новый Структура("Номенклатура,Цена", ИмитацияСтроки.Номенклатура, ИмитацияСтроки.Цена);
	//		
	//		НайденныеСтроки = Объект.Услуги.НайтиСтроки(СтруктураОтбора);
	//		
	//		Если НайденныеСтроки.Количество() = 0 Тогда
	//			
	//			СтрокаУслуг = Объект.Услуги.Добавить();
	//			
	//		Иначе
	//			
	//			Для Каждого СтрокаУслуг Из НайденныеСтроки Цикл
	//				
	//				ИмитацияСтроки.Количество	= ИмитацияСтроки.Количество + СтрокаУслуг.Количество;
	//				ИмитацияСтроки.Сумма		= ИмитацияСтроки.Сумма + СтрокаУслуг.Сумма;
	//				
	//				Если ИзФормы Тогда
	//					ИмитацияСтроки.Всего	= ИмитацияСтроки.Всего + СтрокаУслуг.Всего;
	//				КонецЕсли;
	//				
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//		
	//		ЗаполнитьЗначенияСвойств(СтрокаУслуг, ИмитацияСтроки);
	//		
	//	КонецЦикла;
	//	
	//	СчетаПоснованию = ПолучитьСчетаПоОснованию(Основание);
	//	
	//	Для Каждого СчетПоОснованию Из СчетаПоснованию Цикл
	//		
	//		Если Объект.СчетаНаОплату.НайтиСтроки(Новый Структура("СчетНаОплату", СчетПоОснованию)).Количество() = 0 Тогда //!!!!!HOTFIX
	//			
	//			НоваяСтрока = Объект.СчетаНаОплату.Добавить();
	//			НоваяСтрока.СчетНаОплату = СчетПоОснованию;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	//
	
	ПредставлениеПериода = Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Объект.Период);
	
	Для Каждого Строка Из Объект.Услуги Цикл
		
		Строка.Содержание = ПолучитьСодержаниеНоменклатурыДляРеализации(Строка.Номенклатура, Объект.Договор,
			ПредставлениеПериода, Объект.Ссылка);
		
	КонецЦикла;
	
	//
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КосвенныеСвязиЗаданий_ат.Задание КАК Задание,
		|	КосвенныеСвязиЗаданий_ат.Заявка КАК Заявка,
		|	КосвенныеСвязиЗаданий_ат.Счет КАК Счет
		|ИЗ
		|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
		|ГДЕ
		|	КосвенныеСвязиЗаданий_ат.ФиксацияРабот В(&Закрытия)
		|");
	Запрос.УстановитьПараметр("Закрытия", Закрытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Объект.КосвенныеСвязиЗаданий.НайтиСтроки(Новый Структура("Заявка,Задание", Выборка.Заявка, Выборка.Задание)).Количество() = 0 Тогда
			
			НоваяСтрока = Объект.КосвенныеСвязиЗаданий.Добавить();
			НоваяСтрока.Заявка = Выборка.Заявка;
			НоваяСтрока.Задание = Выборка.Задание;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Счет)
			И Объект.СчетаНаОплату.НайтиСтроки(Новый Структура("СчетНаОплату", Выборка.Счет)).Количество() = 0 Тогда
			
			НоваяСтрока = Объект.СчетаНаОплату.Добавить();
			НоваяСтрока.СчетНаОплату = Выборка.Счет;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область  АвтоматическиеСписанияПоРеализациям

Процедура АвтоматическиеСписанияПоРеализациям() Экспорт

	ДатаСписания = ТекущаяДатаСеанса();
	
	Если НачалоДня(ДатаСписания) <> ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(ДатаСписания) Тогда // делаем это только по рабочим дням
		Возврат;
	КонецЕсли;
	
	ТаблицаРеализаций = ПолучитьТаблицуРеализацийДляАвтоматическихСписаний(ДатаСписания, Истина);
	
	Для Каждого Строка Из ТаблицаРеализаций Цикл
		
		Попытка
			
			Реализация = Строка.Ссылка;
			СоздатьСписаниеСоСчетаКлиента(Реализация,
				//ДатаСписания,
				//Реализация.Дата
				Строка.КрайнийСрокПодписания, //???????????? опционально? или выяснить - что правильнее
				"Автоматическое Списание по достижении крайнего срока подписания Реализации №"
					+ Строка(Число(Строка.Номер)) + " от " + Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
			
		Исключение
			
			Ошибка = ОписаниеОшибки();
			Сообщить(Ошибка);
			ЗаписьЖурналаРегистрации("Автоматическое создание Списания по Реализации",
				УровеньЖурналаРегистрации.Ошибка,, Ошибка);
			
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьТаблицуРеализацийДляАвтоматическихСписаний(Дата, ТолькоКВыставлениюНаДату = Ложь) Экспорт
	
	СтатусНачалаОтсчета = Константы.СтатусНачалаОтсчетаДоСрокаПодписанияФинДокумента_ат.Получить();
	
	Если НЕ ЗначениеЗаполнено(СтатусНачалаОтсчета) Тогда
		
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.Реализация_ат"));
		ПустаяТаблица.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
		ПустаяТаблица.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		ПустаяТаблица.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.Договоры_ат"));
		ПустаяТаблица.Колонки.Добавить("Клиент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты_ат"));
		ПустаяТаблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		ПустаяТаблица.Колонки.Добавить("КрайнийСрокПодписания", Новый ОписаниеТипов("Дата"));
		ПустаяТаблица.Колонки.Добавить("ДнейПросрочки", Новый ОписаниеТипов("Число"));
		
		Возврат ПустаяТаблица;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА РеализацияДокумент.ДатаПодписанияПланируемая > 0
		|			ТОГДА РеализацияДокумент.ДатаПодписанияПланируемая
		|		КОГДА РеализацияДокумент.Договор.СрокПодписанияРеализации > 0
		|			ТОГДА РеализацияДокумент.Договор.СрокПодписанияРеализации
		|		КОГДА РеализацияДокумент.Договор.Родитель <> ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|				И РеализацияДокумент.Договор.Родитель.СрокПодписанияРеализации > 0
		|			ТОГДА РеализацияДокумент.Договор.Родитель.СрокПодписанияРеализации
		|			ИНАЧЕ 68
		|		КОНЕЦ КАК СрокПодписания,
		|	НАЧАЛОПЕРИОДА(ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период, ДЕНЬ) КАК ДатаНачалаОтсчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК КрайнийСрокПодписания,
		|	0 КАК ДнейПросрочки
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних(
		|			&Дата,
		|			Ссылка ССЫЛКА Документ.Реализация_ат
		|				И Статус = &СтатусНачалаОтсчета) КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Реализация_ат КАК РеализацияДокумент
		|			ПО ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка = РеализацияДокумент.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСоСчетаКлиента_ат.РасшифровкаПлатежа КАК СписаниеСоСчетаКлиента_Расшифровка
		|			ПО РеализацияДокумент.Ссылка = СписаниеСоСчетаКлиента_Расшифровка.Реализация
		|				И (СписаниеСоСчетаКлиента_Расшифровка.Ссылка.Проведен)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА РеализацияДокумент.Договор.Родитель = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|			ТОГДА РеализацияДокумент.Договор.СрокПодписанияРеализации
		|			ИНАЧЕ РеализацияДокумент.Договор.Родитель.СрокПодписанияРеализации
		|		КОНЕЦ > 0
		|	И СписаниеСоСчетаКлиента_Расшифровка.Ссылка ЕСТЬ NULL";
	// 68 - что бы точно прошло два месяца для договоров с периодом определения значения выбора Т/П "За прошлый месяц"
	Запрос.УстановитьПараметр("СтатусНачалаОтсчета", СтатусНачалаОтсчета);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ТаблицаДат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТаблицаДат Цикл
		
		Строка.КрайнийСрокПодписания = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(
			ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(Строка.ДатаНачалаОтсчета, Строка.СрокПодписания + 2)); // + 2 т.к. не учитываем день начала отсчёта и день списания
		
		Строка.ДнейПросрочки = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРазностьДат(Строка.КрайнийСрокПодписания, Дата);
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка КАК Ссылка,
		|	НАЧАЛОПЕРИОДА(ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Период, ДЕНЬ) КАК ДатаСтатуса,
		|	ВЫБОР
		|		КОГДА ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка.Договор.Родитель = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|			ТОГДА ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка.Договор.СрокПодписанияРеализации
		|		ИНАЧЕ ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка.Договор.Родитель.СрокПодписанияРеализации
		|	КОНЕЦ КАК СрокПодписания,
		|	ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка.СуммаДокумента КАК Сумма
		|ПОМЕСТИТЬ Реализации
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовОтправкиФинДокументов_ат.СрезПоследних(
		|			&Дата,
		|			Ссылка ССЫЛКА Документ.Реализация_ат
		|				И (Статус = &СтатусНачалаОтсчета
		|					ИЛИ Статус.ТипСтатуса = ЗНАЧЕНИЕ(Перечисление.ТипыСтатусовОтправкиФинДокументов_ат.ФинальныйПоложительный)
		|					//ИЛИ Статус.ТипСтатуса = ЗНАЧЕНИЕ(Перечисление.ТипыСтатусовОтправкиФинДокументов_ат.ФинальныйОтрицательный)
		|					)
		|			) КАК ИсторияСтатусовОтправкиФинДокументовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСоСчетаКлиента_ат КАК СписаниеСоСчетаКлиента
		|		ПО ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка = СписаниеСоСчетаКлиента.Ссылка
		|			И (СписаниеСоСчетаКлиента.Проведен)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка.Договор.Родитель = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|				ТОГДА ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка.Договор.СрокПодписанияРеализации
		|			ИНАЧЕ ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Ссылка.Договор.Родитель.СрокПодписанияРеализации
		|		КОНЕЦ > 0
		|	И ИсторияСтатусовОтправкиФинДокументовСрезПоследних.Статус = &СтатусНачалаОтсчета
		|	И СписаниеСоСчетаКлиента.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДат.ДатаНачалаОтсчета КАК ДатаНачалаОтсчета,
		|	ТаблицаДат.СрокПодписания КАК СрокПодписания,
		|	ТаблицаДат.КрайнийСрокПодписания КАК КрайнийСрокПодписания,
		|	ТаблицаДат.ДнейПросрочки
		|ПОМЕСТИТЬ ТаблицаДат
		|ИЗ
		|	&ТаблицаДат КАК ТаблицаДат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Реализации.Ссылка,
		|	Реализация_ат.Номер,
		|	Реализация_ат.Дата,
		|	Реализация_ат.Договор,
		|	Реализации.Ссылка.Клиент КАК Клиент,
		|	Реализации.Сумма,
		|	ТаблицаДата.КрайнийСрокПодписания,
		|	ТаблицаДата.ДнейПросрочки
		|ИЗ
		|	Реализации КАК Реализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДат КАК ТаблицаДата
		|		ПО Реализации.ДатаСтатуса = ТаблицаДата.ДатаНачалаОтсчета
		|			И Реализации.СрокПодписания = ТаблицаДата.СрокПодписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Реализация_ат КАК Реализация_ат
		|		ПО Реализации.Ссылка = Реализация_ат.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоКВыставлениюНаДату
		|				ТОГДА ТаблицаДата.КрайнийСрокПодписания = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|			ИНАЧЕ ТаблицаДата.КрайнийСрокПодписания <= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Реализация_ат.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Реализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаДат";
		
	Запрос.УстановитьПараметр("СтатусНачалаОтсчета", СтатусНачалаОтсчета);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	Запрос.УстановитьПараметр("ТолькоКВыставлениюНаДату", ТолькоКВыставлениюНаДату);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

#КонецОбласти

Функция   ПолучитьИлиСоздатьСчетПоСогласованию(Согласование, УведомлятьВнешних = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СчетНаОплату_ат.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетНаОплату_ат КАК СчетНаОплату_ат
		|ГДЕ
		|	НЕ СчетНаОплату_ат.ПометкаУдаления
		|	И СчетНаОплату_ат.Основания.Основание = &Основание
		|
		|УПОРЯДОЧИТЬ ПО
		|	СчетНаОплату_ат.Дата УБЫВ");
	Запрос.УстановитьПараметр("Основание", Согласование);
	
	ВыборкаРезультатов = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультатов.Следующий() Тогда
		Возврат ВыборкаРезультатов.Ссылка;
	КонецЕсли;
	
	Если Согласование.Договор.ИспользоватьПостоплату Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОперОстаток = ПолучитьОстатокНаСчетеКлиентаПоДоговоруНаДату(Согласование.Договор, Согласование.ДатаСогласования + 1);
	Если ОперОстаток >= 0 Тогда
		
		Сообщить("Создание счёта не требуется - оперативный остаток (" + ОперОстаток + ") достаточен.");
		Возврат Неопределено;
		
	КонецЕсли; 
	
	Счет = Документы.СчетНаОплату_ат.СоздатьДокумент();
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Основание", Согласование);
	СтруктураЗаполнения.Вставить("Договор", Согласование.Договор);
	
	Счет.Заполнить(СтруктураЗаполнения);
	Счет.Дата = ТекущаяДатаСеанса();
	Счет.ДополнительныеСвойства.Вставить("УведомлятьВнешних", УведомлятьВнешних); //!!! пока не используется
	
	Попытка
		
		Счет.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Сообщить("Создан " + Счет);
		ЗаписьЖурналаРегистрации("Автосоздание документов.Счет", УровеньЖурналаРегистрации.Информация,, Счет.Ссылка, "Основание: " + Согласование);
		Уведомления_ат.УведомитьОСозданииФинансовогоДокумента(Счет.Ссылка, Согласование);
		
	Исключение
		
		Ошибка = ОписаниеОшибки();
		Сообщить("Ошибка автосоздания Счета по документу " + Согласование + ": " + Ошибка);
		ЗаписьЖурналаРегистрации("Автосоздание документов.Счет", УровеньЖурналаРегистрации.Ошибка,, Согласование.Ссылка, Ошибка);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	//TODO!!!!! - отправить счёт
	
	Возврат Счет.Ссылка;
	
КонецФункции

#Область  ФинансовыеСтатусыЗаявок

Процедура УстановитьФинансовыйСтатусЗаявкиПриЗаписи(Источник, Отказ) Экспорт
	
	Заявки = Новый Массив;
	
	Ссылка = Источник.Ссылка;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") Тогда
		Заявки.Добавить(Ссылка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задание_ат") Тогда
		Заявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Ссылка);
	Иначе
		Заявки = ПолучитьЗаявкиПоДокументу(Ссылка);
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТаблицаСтатусов = ОпределитьФинансовыеСтатусыЗаявок(Заявки);
	
	Для Каждого Заявка Из Заявки Цикл
		
		НаборЗаписей = РегистрыСведений.ФинансовыеСтатусыРабот_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Заявка);
		НаборЗаписей.Прочитать();
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		
		НовыеДанные = Ложь;
		
		Для Каждого СтрокаТаблицыСтатусов Из ТаблицаСтатусов Цикл
			
			Если СтрокаТаблицыСтатусов.Заявка = Заявка Тогда
				
				Если ТаблицаЗаписей.Найти(СтрокаТаблицыСтатусов.ФинансовыйСтатус, "Статус") = Неопределено Тогда
					
					Запись = НаборЗаписей.Добавить();
					Запись.Период = ТекущаяДата;
					Запись.Ссылка = Заявка;
					Запись.Статус = СтрокаТаблицыСтатусов.ФинансовыйСтатус;
					Запись.Автор = Пользователи.ТекущийПользователь(); //!!!!!TODO: добавить ДатуУстановки
					
					НовыеДанные = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НовыеДанные Тогда
			НаборЗаписей.Записать();
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Функция   ПолучитьФинансовыйСтатусЗаявки(Ссылка, ТолькоСтатус = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФинансовыеСтатусыРабот_атСрезПоследних.Статус,
	|	ФинансовыеСтатусыРабот_атСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.ФинансовыеСтатусыРабот_ат.СрезПоследних КАК ФинансовыеСтатусыРабот_атСрезПоследних
	|ГДЕ
	|	ФинансовыеСтатусыРабот_атСрезПоследних.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ТолькоСтатус Тогда
			Возврат Выборка.Статус;
		Иначе
			Возврат Новый Структура("Статус,Дата", Выборка.Статус, Выборка.Период);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

Функция   ОпределитьСтатусОплаты(СуммаСчета, СуммаПоступлений)
	
	Если СуммаПоступлений <= 0 Тогда
		
		Возврат Перечисления.СтатусыОплатыСчетов_ат.НеОплачен;
		
	ИначеЕсли СуммаПоступлений >= СуммаСчета Тогда
		
		Возврат Перечисления.СтатусыОплатыСчетов_ат.Оплачен;
		
	Иначе
		
		Возврат Перечисления.СтатусыОплатыСчетов_ат.ОплаченЧастично;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьСчетаПоОснованию(Основание)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КосвенныеСвязиЗаданий_ат.Счет
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	КосвенныеСвязиЗаданий_ат.Заявка В(&Заявка)
	|	И НЕ КосвенныеСвязиЗаданий_ат.Счет = ЗНАЧЕНИЕ(Документ.СчетНаОплату_ат.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Заявка", Основание.Заявки.ВыгрузитьКолонку("Заявка"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Счет");
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьСтруктуруСтоимостейНоменклатуры(Номенклатура,
	СодержаниеРабот, Сумма)
	//Количество, ТарифОбщий, ТарифКлиента)
	
	//СтоимостьТарифОбщий = ?(ТарифОбщий = Неопределено, Неопределено, Количество * ТарифОбщий); 
	//СтоимостьТарифКлиента = ?(ТарифКлиента = Неопределено, Неопределено, Количество * ТарифКлиента);
	
	Возврат СоздатьСтруктуруСтоимостейНоменклатуры(Номенклатура, 
		СодержаниеРабот, Сумма);
		//СтоимостьТарифОбщий, СтоимостьТарифКлиента);
	
КонецФункции 

Функция   СоздатьСтруктуруСтоимостейНоменклатуры(Номенклатура,
	СодержаниеРабот, Сумма)
	//СтоимостьТарифОбщий, СтоимостьТарифКлиента)
	
	//Если СтоимостьТарифОбщий = Неопределено ИЛИ СтоимостьТарифКлиента = Неопределено ИЛИ СтоимостьТарифОбщий < СтоимостьТарифКлиента Тогда
	//	
	//	СкидкаСумма = 0; 
	//	СкидкаПроцент = 0;
	//	
	//Иначе
	//	
	//	СкидкаСумма = СтоимостьТарифОбщий - СтоимостьТарифКлиента; 
	//	
	//	Если СтоимостьТарифОбщий = 0 Тогда
	//		
	//		СкидкаПроцент = 0;
	//		
	//	Иначе
	//		
	//		СкидкаПроцент = Окр(100 - СтоимостьТарифКлиента / СтоимостьТарифОбщий * 100);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	СтруктураСтоимостей = Новый Структура;
	СтруктураСтоимостей.Вставить("Номенклатура", Номенклатура);
	СтруктураСтоимостей.Вставить("СодержаниеРабот", СодержаниеРабот);
	//СтруктураСтоимостей.Вставить("СтоимостьТарифОбщий", СтоимостьТарифОбщий);
	СтруктураСтоимостей.Вставить("СтоимостьТарифКлиента", Сумма); //СтоимостьТарифКлиента);
	//СтруктураСтоимостей.Вставить("СкидкаСумма", СкидкаСумма);
	//СтруктураСтоимостей.Вставить("СкидкаПроцент", СкидкаПроцент);
	
	Возврат СтруктураСтоимостей;
	
КонецФункции 

#Область  СодержаниеНоменклатуры

Функция   ПолучитьСодержаниеНоменклатуры(Номенклатура, Знач Шаблон,
	Договор, ПредставлениеПериода, Документ = Неопределено) //!!! сравнить с ОМ.Уведмоления.ЗаменитьПараметрыВТекстеПисьмаФинансовогоДокумента
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		
		ЗаменитьПараметрВШаблоне(Шаблон, "%Договор%", ПолучитьЗначениеПараметраШаблона("%Договор%", Договор));
		ЗаменитьПараметрВШаблоне(Шаблон, "%ПоДоговору%", ПолучитьЗначениеПараметраШаблона("%Договор%", Договор));
		ЗаменитьПараметрВШаблоне(Шаблон, "%Период%", ПредставлениеПериода);
		ЗаменитьПараметрВШаблоне(Шаблон, "%ЗаПериод%", "за " + ПредставлениеПериода);
		
		Возврат Строки_КлиентСервер_ат.ВернутьНормализованнуюСтроку(Шаблон, Ложь, Ложь);
		
	ИначеЕсли ЗначениеЗаполнено(Номенклатура.НаименованиеПолное) Тогда
		
		Возврат Номенклатура.НаименованиеПолное;
		
	Иначе
		
		Возврат Номенклатура.Наименование;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаменитьПараметрВШаблоне(Шаблон, Параметр, СтрокаЗамены)
	
	Шаблон = СтрЗаменить(Шаблон, Параметр, СтрокаЗамены);
	
КонецПроцедуры 

Функция   ПолучитьЗначениеПараметраШаблона(Параметр, Источник)
	
	Шаблон = "";
	
	ПолноеИмя = Источник.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиСодержанийНоменклатур.Шаблон,
	|	НастройкиСодержанийНоменклатур.УсловиеОтбора
	|ИЗ
	|	Справочник.НастройкиСодержанийНоменклатур_ат КАК НастройкиСодержанийНоменклатур
	|ГДЕ
	|	НастройкиСодержанийНоменклатур.Параметр = &Параметр
	|	И НастройкиСодержанийНоменклатур.ПолноеИмяОбъектаИсточника = &ПолноеИмяОбъектаИсточника";
	
	Запрос.УстановитьПараметр("Параметр", Параметр);
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаИсточника", ПолноеИмя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Шаблон = Выборка.Шаблон;
			УсловиеОтбора = Выборка.УсловиеОтбора;
			
			ПодходитПоУсловию = Истина;
			
			Если НЕ ПустаяСтрока(УсловиеОтбора) Тогда
				Выполнить("ПодходитПоУсловию = Источник." + УсловиеОтбора + ";");
			КонецЕсли;
			
			Если ПодходитПоУсловию Тогда
				ЗаполнитьШаблонИзИсточника(Шаблон, Источник);
			Иначе
				Продолжить;
			КонецЕсли;
			
			Возврат Шаблон;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Шаблон) Тогда
		Возврат Строка(Источник);
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьШаблонИзИсточника(Шаблон, Источник)
	
	Параметры = Новый Соответствие;
	
	ПараметрыШаблона = ПолучитьПараметрыШаблона(Шаблон);
	
	Для Каждого ПараметрШаблона Из ПараметрыШаблона Цикл
		
		ПоложениеТочки = СтрНайти(ПараметрШаблона, ".");
		Если ПоложениеТочки > 0 Тогда
			
			ИмяОсновногоРеквизита = Лев(ПараметрШаблона, ПоложениеТочки - 1);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяОсновногоРеквизита) Тогда
				
				ИмяВложенногоРеквизита = СтрЗаменить(ПараметрШаблона, ИмяОсновногоРеквизита + ".", "");
				Параметры.Вставить(ПараметрШаблона, Источник[ИмяОсновногоРеквизита][ИмяВложенногоРеквизита]);
				
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ПараметрШаблона) Тогда
				Параметры.Вставить(ПараметрШаблона, Источник[ПараметрШаблона]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Шаблон = ЗаполнитьПараметрыВШаблоне(Шаблон, Параметры);
	
КонецПроцедуры

Функция   ПолучитьПараметрыШаблона(Знач Шаблон)
	
	ПараметрыШаблона = Новый Массив;
	
	ЗаполнитьПараметрыШаблонаРекурсивно(Шаблон, ПараметрыШаблона);
	
	Возврат ПараметрыШаблона;
	
КонецФункции

Процедура ЗаполнитьПараметрыШаблонаРекурсивно(Шаблон, ПараметрыШаблона)
	
	Процент = "%";
	ПозицияПроцента = СтрНайти(Шаблон, Процент);
	Если ПозицияПроцента > 0 Тогда
		
		ТехническаяСтрока = Прав(Шаблон, СтрДлина(Шаблон) - ПозицияПроцента);
		ПозицияПроцента = СтрНайти(ТехническаяСтрока, Процент);
		
		Если ПозицияПроцента > 0 Тогда
			
			Параметр = Лев(ТехническаяСтрока, ПозицияПроцента - 1);
			ПараметрыШаблона.Добавить(Параметр);
			ТехническаяСтрока = Прав(ТехническаяСтрока, СтрДлина(ТехническаяСтрока) - ПозицияПроцента);
			ЗаполнитьПараметрыШаблонаРекурсивно(ТехническаяСтрока, ПараметрыШаблона);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ЗаполнитьПараметрыВШаблоне(Знач Шаблон, Параметры)
	
	Для Каждого Параметр Из Параметры Цикл
		
		ИмяПараметра = "%" + Параметр.Ключ + "%";
		ЗначениеПараметра = Строка(Параметр.Значение);
		
		ПозицияПараметра = СтрНайти(Шаблон, ИмяПараметра);
		
		Если ПозицияПараметра > 0 Тогда
			Шаблон = СтрЗаменить(Шаблон, ИмяПараметра, ?(ПустаяСтрока(ЗначениеПараметра), "-", ЗначениеПараметра));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#Область  ФинансовыеСтатусыЗаявок

Функция   ПолучитьЗаявкиПоДокументу(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КосвенныеСвязиЗаданий_ат.Заявка
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	&УсловиеПоДокументу";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетНаОплату_ат") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоДокументу", "КосвенныеСвязиЗаданий_ат.Счет = &Ссылка");
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеНаСчетКлиента_ат") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоДокументу", "КосвенныеСвязиЗаданий_ат.Поступление = &Ссылка");
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заявка");
	
КонецФункции

Функция   ОпределитьФинансовыеСтатусыЗаявок(Заявки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СуммаПоступлений.СуммаДокумента, 0) >= ЕСТЬNULL(СуммаСчетов.СуммаДокумента, 0)
	|				И ЕСТЬNULL(СуммаПоступлений.СуммаДокумента, 0) > 0
	|				И ЕСТЬNULL(СуммаСчетов.СуммаДокумента, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ФинансовыеСтатусыЗаявок_ат.Оплачена)
	|		КОГДА ЕСТЬNULL(СуммаСчетов.СуммаДокумента, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ФинансовыеСтатусыЗаявок_ат.ОжидаетОплаты)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФинансовыйСтатус,
	|	Заявка_ат.Ссылка КАК Заявка
	|ИЗ
	|	Документ.Заявка_ат КАК Заявка_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СУММА(СчетНаОплату_ат.СуммаДокумента) КАК СуммаДокумента,
	|			КосвенныеСвязиЗаданий_ат.Заявка КАК Заявка
	|		ИЗ
	|			РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплату_ат КАК СчетНаОплату_ат
	|				ПО КосвенныеСвязиЗаданий_ат.Счет = СчетНаОплату_ат.Ссылка
	|		ГДЕ
	|			КосвенныеСвязиЗаданий_ат.Заявка В(&Заявки)
	|			И НЕ СчетНаОплату_ат.Ссылка ЕСТЬ NULL 
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КосвенныеСвязиЗаданий_ат.Заявка) КАК СуммаСчетов
	|		ПО (СуммаСчетов.Заявка = Заявка_ат.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СУММА(ПоступлениеНаСчетКлиента_ат.СуммаДокумента) КАК СуммаДокумента,
	|			КосвенныеСвязиЗаданий_ат.Заявка КАК Заявка
	|		ИЗ
	|			РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаСчетКлиента_ат КАК ПоступлениеНаСчетКлиента_ат
	|				ПО КосвенныеСвязиЗаданий_ат.Поступление = ПоступлениеНаСчетКлиента_ат.Ссылка
	|		ГДЕ
	|			КосвенныеСвязиЗаданий_ат.Заявка В(&Заявки)
	|			И НЕ ПоступлениеНаСчетКлиента_ат.Ссылка ЕСТЬ NULL 
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КосвенныеСвязиЗаданий_ат.Заявка) КАК СуммаПоступлений
	|		ПО Заявка_ат.Ссылка = СуммаПоступлений.Заявка
	|ГДЕ
	|	Заявка_ат.Ссылка В(&Заявки)";
	
	Запрос.УстановитьПараметр("Заявки", Заявки);
	
	ФинансовыеСтатусы = Новый ТаблицаЗначений;
	ФинансовыеСтатусы.Колонки.Добавить("Заявка");
	ФинансовыеСтатусы.Колонки.Добавить("ФинансовыйСтатус");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ФинансовыйСтатус = Выборка.ФинансовыйСтатус;
		Заявка = Выборка.Заявка;
		
		Если ФинансовыйСтатус = Неопределено Тогда
			
			Если ЗаявкаТребуетОплаты(Заявка) Тогда
				ФинансовыйСтатус = Перечисления.ФинансовыеСтатусыЗаявок_ат.НеОплачена;
			Иначе
				ФинансовыйСтатус = Перечисления.ФинансовыеСтатусыЗаявок_ат.НеТребуетОплаты;
			КонецЕсли;
			
			ТекущийСтатус = ПолучитьФинансовыйСтатусЗаявки(Заявка);
			
			Если НЕ ФинансовыйСтатус = ТекущийСтатус Тогда
				
				НоваяСтрока = ФинансовыеСтатусы.Добавить();
				НоваяСтрока.Заявка = Заявка;
				НоваяСтрока.ФинансовыйСтатус = ФинансовыйСтатус;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = ФинансовыеСтатусы.Добавить();
			НоваяСтрока.Заявка = Заявка;
			НоваяСтрока.ФинансовыйСтатус = ФинансовыйСтатус;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ФинансовыеСтатусы;
	
КонецФункции

Функция   ЗаявкаТребуетОплаты(Заявка) //!!!!! написана чушь, переписать
	
	Если НЕ Согласование_ат.ЗаявкуНужноСогласовывать(Заявка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Задания = Планирование_Сервер_ат.ПолучитьДочерниеЗадания(Заявка);
	
	Для Каждого Задание Из Задания Цикл
		
		Если Согласование_ат.ЗаданиеНужноСогласовывать(Задание) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
