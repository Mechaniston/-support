///////////////////////////////////////////////////////////////////////////////////////////////////////////
// автор сего: Андреев А.М.

#область VZ
&НаСервере
Процедура  ПолучениеСтатистикиVZ() Экспорт
	ВыборкаДетальныеЗаписи = ПолучениеСпискаСерверов(Перечисления.ТипыРесурсов_ат.СборСтатистикиVZ);
	
	Параметры = новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Параметры.Найти(ВыборкаДетальныеЗаписи.Сервер.Родитель) = Неопределено  Тогда
			Параметры.Добавить(ВыборкаДетальныеЗаписи.Сервер.Родитель);
			//ФоновыеЗадания.Выполнить("СерверныеКоманды_ат.ЗапросСтатистикиWMI", Параметры, Новый УникальныйИдентификатор, "Запрос статистики WMI для " +  ВыборкаДетальныеЗаписи.Сервер.ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого родитель Из Параметры цикл
		
		ОбработкаСтатистики(родитель);
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура VZНаСервере(Данные, nameHost, ПаразитныеСтроки = 1) Экспорт
	ТекущаяДатаИВремя = ТекущаяДата();
	
	// ПаразитныеСтроки - кол-во паразитных строки с ненужными данными
	// которые идут перед непосредственно данными, но их  не меньше 1
	// МассивСтрок - нужен только для отладки	
	// Название нужно поменять!!! //HARDCODE
	// таблицы значений можно обрабатывать только на Сервере
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ =  РаботаССерверамиСлужебный_ат.Парсинг(Данные, ТЗ);
	// КолСтр=	ТЗ.Количество();
	// отладочная инфа
	// Сообщить("кол-во строк было в полученой таблице = " + ТЗ.Количество());
	// удаляем Из вывода данных пустые строки
	//	ТЗ.удалить(КолСтр - 1); //т.к. начало индекса с нуля
	// Удаляем пустые колонки Из оставшихся данных
	// ТЗ.Колонки.удалить(0);
	
	i = 0;
	Пока i < ПаразитныеСтроки-1 Цикл
		ТЗ.удалить(0);
		i = i +1;
		// это убирает лишние строки! в разных обработках их по разному
	КонецЦикла;
	
	ТЗ2 = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ТЗ[0] цикл
		ТЗ2.Колонки.Добавить(СтрЗаменить(Колонка,".","_"));  // создаем колонки
		// мы заодно сменили . на _ так как они в названии они некорректны.
	КонецЦикла;
	
	// заполняем строки
	//Для i = 1 по ТЗ.Количество() - 1 цикл   // -1 так как индекс начинается с нуля
	Для i = 0 по ТЗ.Количество() - 1 цикл  	
		ТЗ2.Добавить();						// создали в новой таблице строки	
		
	КонецЦикла;
	// перегружаем через массив значения Из ТЗ в ТЗ2
	// с заменой . в названиях на _
	// попутно составляем названия колонок
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		ИндексКол =	ТЗ.колонки.индекс(Колонка);
		МассивКолонка = ТЗ.ВыгрузитьКолонку(Колонка);
		ИмяКолонки =  СтрЗаменить(МассивКолонка.получить(0),".", "_");
		Если  ИмяКолонки <>  "" Тогда 
			ТЗ2.ЗагрузитьКолонку(МассивКолонка, ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
	ТЗ2.Удалить(0); // удалили строки с названиями колонок, названия у нас в ТЗ2 уже есть.
	ТЗ2.Удалить(ТЗ2.Количество()-1);
	
	// ??? 	
	//	Движения.Нагрузка_ат.Записать = Истина;
	//	Движения.Резерв_ат.Записать = Истина;
	МенЗапНагрузка = РегистрыСведений.СтатистикаНагрузкиСерверов_ат.СоздатьНаборЗаписей();
	МенЗапРезерв   = РегистрыСведений.РезервРесурсовСерверов_ат.СоздатьНаборЗаписей();
	МенЗапНагрузка.Записывать = Истина;
	МенЗапРезерв.Записывать = Истина;
	//НаборЗаписей = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей(); 
	//НаборЗаписей.Отбор.Объект.Установить(ПолеВводаНоменклатура);
	
	Дата = ТекущаяДата();
	МенЗапНагрузка.Отбор.Период.Установить(Дата);
	МенЗапРезерв.Отбор.Период.Установить(Дата);
	
	ОбщиеСведения = новый Структура;

	Для Каждого строкиТЗ2 Из ТЗ2 цикл
		СерверКонтейнер = ПолучитьСсылкуНаСерверПоVEID(строкиТЗ2.VEID);
		
		Если  СерверКонтейнер = Неопределено Тогда
			Сообщить("Во время сбора статистики, не удалось составить пару контейнер-Сервер для контейнера " + строкиТЗ2.VEID +" ("+
			строкиТЗ2.HOSTNAME + ")!");
			
		Иначе
			Если строкиТЗ2.STATUS = "running" Тогда
				
				ПараметрыУведомлений = ПолучениеПараметровУведомленийДляСервера(СерверКонтейнер) ;
				СерверРодитель = ОпределениеСервера(nameHost);
				
				ОбщиеСведения.Вставить("Server", СерверКонтейнер);
				PercentProcessorTime =	(Число(строкиТЗ2.CPUS));
				// строка выше не верна, ибо показывает число процессоров в контейнере, а не их нагрузку!!! 
				// HARDCODED!!!            задача запилить местных попугаев...к процентам и вывести нормальный параметр
				ОбщиеСведения.Вставить("PercentProcessorTime",	PercentProcessorTime);
				Если НЕ Число(строкиТЗ2.VPRVMEM_B) = 0 Тогда
					PercentMEMUsing  = Число(строкиТЗ2.VPRVMEM)*100/Число(строкиТЗ2.VPRVMEM_B) ;
					AvailableMBytes	= (Число(строкиТЗ2.VPRVMEM_B) - Число(строкиТЗ2.VPRVMEM))      ;
				Иначе 
					PercentMEMUsing	= -1;
					AvailableMBytes	= -1;
				КонецЕсли;
				ОбщиеСведения.Вставить("PercentMEMUsing", 		PercentMEMUsing);
				ОбщиеСведения.Вставить("FreePhysicalMemory", 	AvailableMBytes);
				
				Если НЕ Число(строкиТЗ2.DQBLOCKS_H) = 0 Тогда
					PercenAvaliableHDD =		 Число(строкиТЗ2.DQBLOCKS)*100/Число(строкиТЗ2.DQBLOCKS_H)	;
					FreeHDD =  				(Число(строкиТЗ2.DQBLOCKS_H) - Число(строкиТЗ2.DQBLOCKS))/1024/1024 	;
				Иначе
					PercenAvaliableHDD = -1;
					FreeHDD =                -1;
				КонецЕсли;
				ОбщиеСведения.Вставить("PercenAvaliableHDD",	PercenAvaliableHDD);
				ОбщиеСведения.Вставить("FreeMegabytesHDD",	FreeHDD);
				
				NumberOfProcesses =  Число(строкиТЗ2.NPROC)	;
				ОбщиеСведения.Вставить("NumberOfProcesses", 	NumberOfProcesses);
				
				//Если строкиТЗ2.STATUS = "running" Тогда
				
				ЗаполнениеСтатистики(ОбщиеСведения, ПараметрыУведомлений, Дата);
		
			Иначе 
	
				Если (	ПараметрыУведомлений.Свойство("УведомлятьОбОтсутствииСвязи") и 
					ПараметрыУведомлений.Свойство("ПериодичностьУведомленийОбОтсутствииСвязиССервером")) Тогда
					
					Если (ПараметрыУведомлений.УведомлятьОбОтсутствииСвязи = Истина) Тогда
						
						Сообщить("на Сервере "+СерверКонтейнер.Hostname + " возникла ошибка" + " Сервер отключен");
						//сообщать имеет смысл, только пользователю при ручной проверке
						
					//	ЗаписьВСписокСлужебныхСообщений(СерверКонтейнер,	ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.FactConnection, 
						//ложь,	Истина, ПараметрыУведомлений.ПериодичностьУведомленийОбОтсутствииСвязиССервером); 
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		//ОбщиеСведения.Вставить("Server",                   	ПолучитьСсылкуНаСерверПоVEID(строкиТЗ2.VEID));                                                         		
		//ОбщиеСведения.Вставить("PercentProcessorTime",	PercentProcessorTime);
		//ОбщиеСведения.Вставить("PercentMEMUsing", 		PercentMEMUsing);
		//ОбщиеСведения.Вставить("PercenAvaliableHDD",	PercenAvaliableHDD);
		//ОбщиеСведения.Вставить("FreeMegabytesHDD",	FreeHDD);
		//ОбщиеСведения.Вставить("FreePhysicalMemory", 	AvailableMBytes);
		//ОбщиеСведения.Вставить("NumberOfProcesses", 	NumberOfProcesses);
		
		////ОбщиеСведения.Вставить("AvgDiskQueueLength",  AvgDiskQueueLength);
		////ОбщиеСведения.Вставить("DiskBytesPersec",		DiskBytesPersec);
		////ОбщиеСведения.Вставить("PercentFreeHDD",		PercentFreeHDD);

		//Если 		стр.Ключ 	= "PercentProcessorTime"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
		//ИначеЕсли стр.Ключ	= "PercentMEMUsing"		Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.RAM_proc;
		//ИначеЕсли стр.Ключ	= "PercenAvaliableHDD" 	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.HDD_proc;
		//ИначеЕсли стр.Ключ	= "FreeMegabytesHDD"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FreeMegabytesHDD;
		//ИначеЕсли стр.Ключ	= "FreePhysicalMemory"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FreePhysicalMemory;
		//ИначеЕсли стр.Ключ	= "NumberOfProcesses"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Processes;
		
		Данные =  Новый Структура;
		//Данные.Вставить("CPUS",строкиТЗ2.CPUS);
		Данные.Вставить("CPUS",строкиТЗ2.CPUS);
		Данные.Вставить("DQBLOCKS",строкиТЗ2.DQBLOCKS);
		Данные.Вставить("DQBLOCKS_H",строкиТЗ2.DQBLOCKS_H);
		Данные.Вставить("VPRVMEM",строкиТЗ2.VPRVMEM);
		Данные.Вставить("VPRVMEM_B",строкиТЗ2.VPRVMEM_B);
		
		Для Каждого ПараметрVZ Из Данные Цикл
				
				Если строкиТЗ2.STATUS = "running" Тогда
					
					Если ПараметрVZ.Ключ = "CPUS"  Тогда   // CPUS отключен - пишем 0!
						Резерв_ат = МенЗапРезерв.Добавить();
						Резерв_ат.Период = Дата;
						//Резерв_ат.Сервер = nameHost;
						//Резерв_ат.Сервер = ОпределениеСервера(nameHost);
						
						//Резерв_ат.VZКонтейнер = строкиТЗ2.VEID;
						//	Резерв_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Резерв_ат.Сервер = СерверРодитель;
						Резерв_ат.VZКонтейнер = СерверКонтейнер;
						Резерв_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.Частота;
						Резерв_ат.ЗначениеРесурса = 0; //HARDCODE
						//Попытка 
						//	Резерв_ат.ЗначениеРесурса  = Число(ПараметрVZ.Значение);
						//Исключение
						//	Резерв_ат.ЗначениеРесурса = 0;
						//КонецПопытки;
						
					ИначеЕсли  ПараметрVZ.Ключ = "DQBLOCKS_H" Тогда
						Резерв_ат = МенЗапРезерв.Добавить();
						Резерв_ат.Период = Дата;
						//Резерв_ат.Сервер = nameHost;
						//Резерв_ат.Сервер = ОпределениеСервера(nameHost);
						//Резерв_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Резерв_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Резерв_ат.Сервер = СерверРодитель;
						Резерв_ат.VZКонтейнер = СерверКонтейнер;
						Резерв_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.HDD_ат;
						//Резерв_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение) /1048576;
						Попытка 
							Резерв_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение)/1048576;
						Исключение
							Резерв_ат.ЗначениеРесурса = 0;
						КонецПопытки;
						
						
					ИначеЕсли  ПараметрVZ.Ключ = "VPRVMEM_B" Тогда
						Резерв_ат = МенЗапРезерв.Добавить();
						Резерв_ат.Период = Дата;
						//Резерв_ат.Сервер = nameHost;
						//Резерв_ат.Сервер = ОпределениеСервера(nameHost);
						//Резерв_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Резерв_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Резерв_ат.Сервер = СерверРодитель;
						Резерв_ат.VZКонтейнер = СерверКонтейнер;
						Резерв_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.RAM;
						//Резерв_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение) /1024;
						Попытка 
							Резерв_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение)/1024;
						Исключение
							Резерв_ат.ЗначениеРесурса = 0;
						КонецПопытки;
						
						
					ИначеЕсли  ПараметрVZ.Ключ = "DQBLOCKS" Тогда
						Нагрузка_ат = МенЗапНагрузка.Добавить();
						Нагрузка_ат.Период = Дата;
						//Нагрузка_ат.Сервер = nameHost;
						//Нагрузка_ат.Сервер = ОпределениеСервера(nameHost);
						//Нагрузка_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Нагрузка_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Нагрузка_ат.Сервер = СерверРодитель;
						Нагрузка_ат.VZКонтейнер = СерверКонтейнер;
						Нагрузка_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.HDD_ат;
						//Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение) /1048576;
						Попытка 
							Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение)/1048576;
						Исключение
							Нагрузка_ат.ЗначениеРесурса = 0;
						КонецПопытки;
						
						
					ИначеЕсли  ПараметрVZ.Ключ = "VPRVMEM" Тогда
						Нагрузка_ат = МенЗапНагрузка.Добавить();
						Нагрузка_ат.Период = Дата;
						//Нагрузка_ат.Сервер = nameHost;
						//Нагрузка_ат.Сервер = ОпределениеСервера(nameHost);
						//Нагрузка_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Нагрузка_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Нагрузка_ат.Сервер = СерверРодитель;
						Нагрузка_ат.VZКонтейнер = СерверКонтейнер;
						Нагрузка_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.RAM;
						//Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение) /1024;
						Попытка 
							Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение)/1024;
						Исключение
							Нагрузка_ат.ЗначениеРесурса = 0;
						КонецПопытки;
						
					КонецЕсли;
					
				Иначе	
					Если ПараметрVZ.Ключ = "CPUS"  Тогда   // CPUS отключен - пишем 0!
						Резерв_ат = МенЗапРезерв.Добавить();
						Резерв_ат.Период = Дата;
						//Резерв_ат.Сервер = nameHost;
						Резерв_ат.Сервер = СерверРодитель;
						//Резерв_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Резерв_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Резерв_ат.VZКонтейнер =  СерверКонтейнер;
						Резерв_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.Частота;
						Резерв_ат.ЗначениеРесурса = 0; //HARDCODE
						//Попытка 
						//	Резерв_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение);
						//Исключение
						//	Резерв_ат.ЗначениеРесурса = 0;
						//КонецПопытки;
						
						
					ИначеЕсли  ПараметрVZ.Ключ = "DQBLOCKS_H" Тогда
						Резерв_ат = МенЗапРезерв.Добавить();
						Резерв_ат.Период = Дата;
						//Резерв_ат.Сервер = nameHost;
						//Резерв_ат.Сервер = ОпределениеСервера(nameHost);
						//Резерв_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Резерв_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Резерв_ат.Сервер = СерверРодитель;
						Резерв_ат.VZКонтейнер = СерверКонтейнер;
						Резерв_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.HDD_ат;
						//Резерв_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение) /1048576;
						Попытка 
							Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение)/1048576;
						Исключение
							Нагрузка_ат.ЗначениеРесурса = 0;
						КонецПопытки;
						
						
					ИначеЕсли  ПараметрVZ.Ключ = "VPRVMEM_B" Тогда
						Резерв_ат = МенЗапРезерв.Добавить();
						Резерв_ат.Период = Дата;
						//Резерв_ат.Сервер = nameHost;
						//Резерв_ат.Сервер = ОпределениеСервера(nameHost);
						//Резерв_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Резерв_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Резерв_ат.Сервер = СерверРодитель;
						Резерв_ат.VZКонтейнер = СерверКонтейнер;
						Резерв_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.RAM;
						//Резерв_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение) /1024;
						Попытка 
							Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение);
						Исключение
							Нагрузка_ат.ЗначениеРесурса = 0;
						КонецПопытки;
						
						
					ИначеЕсли  ПараметрVZ.Ключ = "DQBLOCKS" Тогда
						Нагрузка_ат = МенЗапНагрузка.Добавить();
						Нагрузка_ат.Период = Дата;
						Нагрузка_ат.Сервер = СерверРодитель;
						Нагрузка_ат.VZКонтейнер = СерверКонтейнер;
						//Нагрузка_ат.Сервер = nameHost;
						//Нагрузка_ат.Сервер = ОпределениеСервера(nameHost);					
						//Нагрузка_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Нагрузка_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Нагрузка_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.HDD_ат;
						Нагрузка_ат.ЗначениеРесурса = 0;
						//Попытка 
						//	Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение) /1048576;
						//Исключение
						//	Нагрузка_ат.ЗначениеРесурса = 0;
						//КонецПопытки;
						
					ИначеЕсли  ПараметрVZ.Ключ = "VPRVMEM" Тогда
						Нагрузка_ат = МенЗапНагрузка.Добавить();
						Нагрузка_ат.Период = Дата;
						//Нагрузка_ат.Сервер = nameHost;
						//Нагрузка_ат.Сервер = ОпределениеСервера(nameHost);
						//Нагрузка_ат.VZКонтейнер = строкиТЗ2.VEID;
						//Нагрузка_ат.VZКонтейнер = ОпределениеКонтейнера(строкиТЗ2.VEID);
						Нагрузка_ат.Сервер = СерверРодитель;
						Нагрузка_ат.VZКонтейнер = ПолучитьСсылкуНаСерверПоVEID(строкиТЗ2.VEID);
						Нагрузка_ат.НаименованиеРесурса = Перечисления.ТипыРесурсов_ат.RAM;
						Нагрузка_ат.ЗначениеРесурса = 0;
						//Попытка 
						//	Нагрузка_ат.ЗначениеРесурса = Число(ПараметрVZ.Значение)/1024;
						//Исключение
						//	Нагрузка_ат.ЗначениеРесурса = 0;
						//КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;
	
	КонецЦикла;
	
	МенЗапНагрузка.Записать(Истина);
	МенЗапРезерв.Записать(Истина);
	
	//coming soon
КонецПроцедуры	

&НаСервере
Функция   ОпределениеСервера(HostName)
	// нужен чтобы Из текстового поля с именем получить ссылку на элемент справочника с этим-же именем
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Серверы_ат.Ссылка
	|Из
	|	Справочник.Серверы_ат КАК Серверы_ат
	|ГДЕ
	|	Серверы_ат.Наименование = &HostName";
	
	Запрос.УстановитьПараметр("HostName", HostName);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если РезультатЗапроса.Пустой() Тогда
		// если Сервер с этим именем не найден, нужно что-то вернуть, 
		// чтобы хоть как-то записать в базу...
		Возврат  HostName;
		
	Иначе	
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ОпределениеКонтейнера(VEID)
	
	//	// нужен чтобы получить ссылку на контейнер вместо наименования  
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВыделенныеСерверы_ат.Ссылка
	//	|Из
	//	|	Справочник.ВыделенныеСерверы_ат КАК ВыделенныеСерверы_ат
	//	|ГДЕ
	//	|	ВыделенныеСерверы_ат.VEID = &VEID";
	//	
	//	Запрос.УстановитьПараметр("VEID", число(VEID));
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	Если РезультатЗапроса.Пустой() Тогда
	//		Возврат  VEID;
	//	Иначе
	//		
	//		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	//			Возврат ВыборкаДетальныеЗаписи.ссылка; 	
	//		КонецЕсли;
	//	КонецЕсли;
	
	Сообщить("Функция 'ОпределениеКонтейнера(VEID)' отключена! и более не доступна!") ;
	
КонецФункции

&НаСервере
Функция   ОбъёмДисковойСистемы(Количество,  HDD_ат,Raid) Экспорт
	Если Raid = Перечисления.ТипыRAID_ат.Jbod или Raid = Перечисления.ТипыRAID_ат.RAID0 Тогда
		Возврат Количество * HDD_ат.Размер;
	ИначеЕсли Raid = Перечисления.ТипыRAID_ат.RAID1 Тогда
		Если Количество >= 2 и (Количество /2) = (Цел(Количество /2)) Тогда 
			Возврат Количество * HDD_ат.Размер /2;
		Иначе 
			Возврат -1;
			//		 Сообщить(" в Raid1 должно быть четным и содержать не менее 2 дисков!")
		КонецЕсли;	
	ИначеЕсли Raid = Перечисления.ТипыRAID_ат.RAID10 Тогда
		Если Количество >= 4 и (Количество /2) = (Цел(Количество /2)) Тогда 
			Возврат (Количество /2)* HDD_ат.Размер;
		Иначе 
			Возврат -1;
			//		 Сообщить(" в Raid10 должно быть четным и содержать не менее 4 дисков!")
		КонецЕсли;	 
	ИначеЕсли Raid = Перечисления.ТипыRAID_ат.RAID50 Тогда
		Если Количество >= 6 и (Количество /2) = (Цел(Количество /2)) Тогда 
			Возврат (Количество - 2)* HDD_ат.Размер;
		Иначе 
			Возврат -1;
			//		 Сообщить(" в Raid50 должно быть четным и содержать не менее 6 дисков!")
		КонецЕсли;
	ИначеЕсли Raid = Перечисления.ТипыRAID_ат.RAID6 Тогда
		Если Количество >= 4 Тогда
			Возврат (Количество -2)* HDD_ат.Размер;
		Иначе 
			Возврат -1;
			//		 Сообщить(" в Raid6 должно быть не менее 4 дисков")
		КонецЕсли;	 
	ИначеЕсли Raid = Перечисления.ТипыRAID_ат.RAID5 Тогда
		Если Количество >= 3 Тогда
			Возврат (Количество -1)* HDD_ат.Размер;
		Иначе
			Возврат -1;
			//		Сообщить(" в Raid5 должно быть не менее 3 дисков");
		КонецЕсли;	
	ИначеЕсли Raid = Перечисления.ТипыRAID_ат.Spare Тогда
		Возврат 0;
		
	КонецЕсли;
КонецФункции

&НаСервере
Функция   ПроверкаРолиVZ() Экспорт
	Если РольДоступна("ОрганизацияАдминистраторСерверов_ат") Тогда
		Если ПараметрыСеанса.ТекущийПользователь = Константы.ПользовательVZScrypt_ат.Получить() Тогда
			Возврат Истина;//ОбщиеКоманды_ат.Virtuozzo();	
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция   ПолучитьПараметрыЖелеза(группа) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	// Hardcode!!!
	ПараметрыОтбора.Вставить("Родитель", справочники.ПараметрыОборудования_ат.НайтиПоНаименованию(группа));
	ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);
	
	Возврат ПараметрыОтбора;	
КонецФункции

&НаСервере
Функция   ПолучитьСтатистикуСервераVirtuozzo(Сервер) Экспорт
	
	ИмяСкрипта = 		Константы.ПутьКТемпVZ_ат.Получить() + Сервер.Наименование + ".bat"; 
	ИмяВывода =  			Константы.ПутьКТемпVZ_ат.Получить() + Сервер.Наименование + ".rez";
	СтартСкриптФайл = 	Константы.ПутьКТемпVZ_ат.Получить() + "StartInfo.bat";
	СтрокиДанных = "";
	
	Файло = Новый Файл(ИмяСкрипта);	
	Если Файло.Существует() Тогда	
		Сообщить("Файл " + ИмяСкрипта + " уже существует!",СтатусСообщения.Важное);
		Возврат 1; 
	Иначе
		///ЛогинИПароль = ПолучитьПарольСервера(Сервер);
		Доступ = Справочники.Доступы_ат.ПолучитьАдминистративныеДоступыКОССервера(Сервер);
		
		Если Доступ = Неопределено Тогда
			Сообщить("У Сервера" + Сервер +" не указаны параметры доступа!", СтатусСообщения.ОченьВажное);
			Возврат -1;
		Иначе
			Если ЗначениеЗаполнено(Сервер.ipv4) Тогда
				
			Иначе
				Сообщить("У Сервера не указан главный IP! ", СтатусСообщения.ОченьВажное);
				Возврат -1;		
			КонецЕсли;
			
		КонецЕсли;
		
		ЧислоОсновнойIP = Сервер.ОсновнойIP.IP;
		ТекстIP = РаботаССерверамиСлужебный_ат.ПреобразоватьЧислоВТекстовыйIP(ЧислоОсновнойIP,".");
		
		Команда = """cmd.exe"" ""/C cls| vzlist -a -o veid,hostname,ip,status,numproc,numproc.b,numsessions,numsessions.b,diskspace,diskspace.h,cpus,vprvmem,vprvmem.b,gateway,nameserver""";
		Строка =  Константы.ПутьКPSTools_ат.Получить() + "PsExec.exe \\" +  СтрЗаменить(ТекстIP, " ","") + " -u " + Доступ.Логин + " -p " + Доступ.Пароль + " " + Команда;
		
		//Файло.ДобавитьСтроку(строка);	
		
		док = новый ТекстовыйДокумент();
		док.ДобавитьСтроку(Строка);
		
		//док.ДобавитьСтроку("EXIT");
		
		док.Записать(ИмяСкрипта,"windows-1252");
		команда = ИмяСкрипта + " " + Символ(КодСимвола(">")) + " " +ИмяВывода;
		
		// запуск команды
		// почему-то не ЗапуститьПриложение ??? 
		Шелл = Новый COMОбъект("WScript.Shell");
		Вывод = Шелл.Run(команда,,-1);
		
		Попытка
			УдалитьФайлы(Константы.ПутьКТемпVZ_ат.Получить(), Файло.Имя);
			Сообщить("файлик с командой очищен!");
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат ОписаниеОшибки();
		КонецПопытки;
		
		Возврат ИмяВывода;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработкаСтатистики(Сервер) Экспорт
	
	Файло = Новый Файл(ПолучитьСтатистикуСервераVirtuozzo(Сервер));
	Если Файло.Существует() Тогда
		Текст = Новый ЧтениеТекста(Файло.ПолноеИмя); 	
		СырыеДанные = Текст.Прочитать();
		Текст.Закрыть();
	Иначе
		Сообщить("Фаил статистики не получен!");
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(Константы.ПутьКТемпVZ_ат.Получить(), Файло.Имя);
		Сообщить("файлик со статистикой очищен!");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	VZНаСервере(СырыеДанные,Сервер,4);
	
КонецПроцедуры

Функция   ОпределениеДоговораПользователя(Клиент, ТипДоговора) Экспорт 
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ПометкаУдаления = ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договоры_ат.Ссылка,
	|	Договоры_ат.ВидДоговора.ТипДоговора,
	|	Договоры_ат.Родитель
	|Из
	|	Справочник.Договоры_ат КАК Договоры_ат
	|ГДЕ
	|	Договоры_ат.ПометкаУдаления = &ПометкаУдаления
	|	И Договоры_ат.Владелец = &Контрагент";
	
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("Контрагент", Клиент);
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат РезультатЗапроса;
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецФункции

&НаСервере
// возвращает или Сервер или Неопределено
Функция ПроверкаНаличияРесурсовДляВыделенногоСервера(ЗаявкаНаАрендуВыделенногоСервера) Экспорт
	заявка = ЗаявкаНаАрендуВыделенногоСервера;
	Запрос = Новый Запрос;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетРесурсовОстатки.Сервер.Ссылка,
	|	УчетРесурсовОстатки.НаименованиеРесурса,
	|	УчетРесурсовОстатки.ЗначениеРесурсаОстаток
	|ПОМЕСТИТЬ ТБ_Остатки_CPU
	|Из
	|	РегистрНакопления.УчетРесурсовСерверов_ат.Остатки КАК УчетРесурсовОстатки
	|ГДЕ
	|	УчетРесурсовОстатки.НаименованиеРесурса = &CPU_ат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетРесурсовОстатки.Сервер.Ссылка,
	|	УчетРесурсовОстатки.НаименованиеРесурса,
	|	УчетРесурсовОстатки.ЗначениеРесурсаОстаток
	|ПОМЕСТИТЬ ТБ_Остатки_RAM
	|Из
	|	РегистрНакопления.УчетРесурсовСерверов_ат.Остатки КАК УчетРесурсовОстатки
	|ГДЕ
	|	УчетРесурсовОстатки.НаименованиеРесурса = &RAM
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетРесурсовОстатки.Сервер,
	|	УчетРесурсовОстатки.НаименованиеРесурса КАК Ресурса,
	|	УчетРесурсовОстатки.ЗначениеРесурсаОстаток КАК Остаток
	|ПОМЕСТИТЬ Остатки_HDD_ПрСерверы
	|Из
	|	РегистрНакопления.УчетРесурсовСерверов_ат.Остатки КАК УчетРесурсовОстатки
	|ГДЕ
	|	УчетРесурсовОстатки.НаименованиеРесурса = &HDD_ат
	|	И УчетРесурсовОстатки.Сервер.Лезвие = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетРесурсовОстатки.Сервер.Ссылка,
	|	СерверыСХД.СХД_ат
	|ПОМЕСТИТЬ Сервера_СХД
	|Из
	|	РегистрНакопления.УчетРесурсовСерверов_ат.Остатки(
	|			,
	|			ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(Сервер.Ссылка) = ТИП(Справочник.Серверы_ат)
	|					ТОГДА Сервер.Лезвие = ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК УчетРесурсовОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Серверы_ат.СХД_ат КАК СерверыСХД
	|		ПО УчетРесурсовОстатки.Сервер = СерверыСХД.Ссылка
	|			И (СерверыСХД.НомерСтроки = 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сервера_Хранилища.СерверСсылка КАК Сервер,
	|	УчетРесурсовОстатки.НаименованиеРесурса КАК Ресурса,
	|	УчетРесурсовОстатки.ЗначениеРесурсаОстаток КАК Остаток
	|ПОМЕСТИТЬ Остатки_HDD_ЛеСерверы
	|Из
	|	Сервера_СХД КАК Сервера_Хранилища
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетРесурсовСерверов_ат.Остатки КАК УчетРесурсовОстатки
	|		ПО Сервера_Хранилища.СХД_ат = УчетРесурсовОстатки.Сервер
	|ГДЕ
	|	УчетРесурсовОстатки.НаименованиеРесурса = &HDD_ат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки_HDD_ЛеСерверы.Сервер,
	|	Остатки_HDD_ЛеСерверы.Остаток
	|ПОМЕСТИТЬ ТБ_Остатки_HDD
	|Из
	|	Остатки_HDD_ЛеСерверы КАК Остатки_HDD_ЛеСерверы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки_HDD_ПрСерверы.Сервер,
	|	Остатки_HDD_ПрСерверы.Остаток
	|Из
	|	Остатки_HDD_ПрСерверы КАК Остатки_HDD_ПрСерверы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТБ_Остатки_CPU.СерверСсылка КАК Сервер,
	|	ТБ_Остатки_CPU.ЗначениеРесурсаОстаток КАК ОстатокCPU,
	|	ТБ_Остатки_RAM.ЗначениеРесурсаОстаток КАК ОстатокRAM,
	|	ТБ_Остатки_HDD.Остаток КАК ОстатокHDD
	|Из
	|	ТБ_Остатки_CPU КАК ТБ_Остатки_CPU
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТБ_Остатки_RAM КАК ТБ_Остатки_RAM
	|		ПО ТБ_Остатки_CPU.СерверСсылка = ТБ_Остатки_RAM.СерверСсылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТБ_Остатки_HDD КАК ТБ_Остатки_HDD
	|		ПО ТБ_Остатки_CPU.СерверСсылка = ТБ_Остатки_HDD.Сервер
	|ГДЕ
	|	ТБ_Остатки_CPU.ЗначениеРесурсаОстаток > &ОстатокCPU
	|	И ТБ_Остатки_HDD.Остаток > &ОстатокHDD
	|	И ТБ_Остатки_RAM.ЗначениеРесурсаОстаток > &ОстатокRAM";
	
	Запрос.УстановитьПараметр("RAM", Перечисления.ТипыРесурсов_ат.RAM);
	Запрос.УстановитьПараметр("ОстатокRAM", заявка.ОбъемПамяти);
	Запрос.УстановитьПараметр("HDD_ат", Перечисления.ТипыРесурсов_ат.HDD_ат);
	Запрос.УстановитьПараметр("ОстатокHDD", заявка.ОбъемHDD);
	Запрос.УстановитьПараметр("CPU_ат", Перечисления.ТипыРесурсов_ат.Core);
	Запрос.УстановитьПараметр("ОстатокCPU", заявка.ВыделениеCPU);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		выборка = РезультатЗапроса.Выбрать();
		если выборка.Следующий() Тогда			
			Возврат выборка.Сервер;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПолучитьПоследнийVEID() Экспорт
	
	//получаем последний VEID
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВыделенныеСерверы_ат.VEID) КАК VEID
	|Из
	|	Справочник.ВыделенныеСерверы_ат КАК ВыделенныеСерверы_ат";
	
	РезультатЗапроса 		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.VEID;
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьСсылкуНаСерверПоVEID(VEID) Экспорт
	
	Попытка	
		VEID2 = Число(VEID);
	Исключение 
		Сообщить("Ошибка: полченные данные не являются числом, проверьте входящие данные!");
		Сообщить("Переданный VEID = " + VEID);
		Возврат Неопределено;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Серверы_ат.Ссылка
	//	|Из
	//	|	РегистрСведений.СведенияОСерверахПоWMI_ат.СрезПоследних КАК СведенияОСерверахПоWMI_атСрезПоследних
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Серверы_ат КАК Серверы_ат
	//	|		ПО СведенияОСерверахПоWMI_атСрезПоследних.Сервер = Серверы_ат.Ссылка
	//	|ГДЕ
	//	|	СведенияОСерверахПоWMI_атСрезПоследних.ТипРесурса = &ТипРесурса
	//	|	И СведенияОСерверахПоWMI_атСрезПоследних.Значение = &Значение";
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РесурсыИПараметрыСерверов_ат.Сервер,
	|	РесурсыИПараметрыСерверов_ат.Значение
	|Из
	|	РегистрСведений.РесурсыИПараметрыСерверов_ат КАК РесурсыИПараметрыСерверов_ат
	|ГДЕ
	|	РесурсыИПараметрыСерверов_ат.Параметр = &Параметр
	|	И РесурсыИПараметрыСерверов_ат.Значение = &Значение";
	
	
	Запрос.УстановитьПараметр("Значение", VEID2);
	Запрос.УстановитьПараметр("Параметр", Перечисления.ТипыРесурсов_ат.VEID);
	//Запрос.УстановитьПараметр("ТипРесурса", Перечисления.ТипыРесурсов_ат.VEID);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.Сервер;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область  WMI

//Процедура ПроверкаУведомленийWMI() Экспорт
//	
//	//ПроверкаСообщенийИОтправкаУведомлений(Истина);
//	//ПроверкаСообщенийИОтправкаУведомлений(ложь);
//	
//КонецПроцедуры

&НаСервере
Функция  ПолучениеСпискаСерверов(ТипРесурса) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РесурсыИПараметрыСерверов_ат.Сервер
	|Из
	|	РегистрСведений.РесурсыИПараметрыСерверов_ат КАК РесурсыИПараметрыСерверов_ат
	|ГДЕ
	|	РесурсыИПараметрыСерверов_ат.Значение = &Значение
	|	И РесурсыИПараметрыСерверов_ат.Параметр = &Параметр";
	
	Запрос.УстановитьПараметр("Значение", Истина);
	Запрос.УстановитьПараметр("Параметр", ТипРесурса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат   ВыборкаДетальныеЗаписи;
	
КонецФункции

// Старт общего Регламентного задания по получению всех видов статистики 
&НаСервере         
Процедура ПолучениеСтатистики() Экспорт
	
//	СписокСерверовДляСбораСтатистикиПоWMI	=  ПолучениеСпискаСерверов(Перечисления.ТипыРесурсов_ат.СборСтатистикиWMI);
//	СписокСерверовДляСбораСтатистикиСVZ		=  ПолучениеСпискаСерверов(Перечисления.ТипыРесурсов_ат.СборСтатистикиVZ);
	
//	Если СписокСерверовДляСбораСтатистикиПоWMI.Количество() > 0 Тогда
//		ПолучениеСтатистикиWMI_at(СписокСерверовДляСбораСтатистикиПоWMI);	
//	КонецЕсли;
	
КонецПроцедуры

// старт фонового задание на получение статистики  WMI  для Сервера
&НаСервере
Процедура ПолучениеСтатистикиWMI_at(СписокСерверовДляСбораСтатистикиПоWMI) Экспорт
	

	Пока СписокСерверовДляСбораСтатистикиПоWMI.Следующий() Цикл
		
		Параметры = новый Массив;
		Параметры.Добавить(СписокСерверовДляСбораСтатистикиПоWMI.Сервер.ссылка);
	
		ФоновыеЗадания.Выполнить("РаботаССерверами_ат.ОбрабатываемСтатистикуWMI", Параметры,
			Новый УникальныйИдентификатор, "Обрабатываем Статистику WMI для " +  СписокСерверовДляСбораСтатистикиПоWMI.Сервер.ссылка);
	
	КонецЦикла;
	
КонецПроцедуры

 
&НаСервере
// Параметры:
//  Сервер  - Справочники.Сервер_ат.ссылка - Сервер для которого выполняется запрос статистики
//  ОбщиеСведения  - Структура - содержит ключи и значения полученных в результате запроса данных
//                 в случае ошибок содержит ключ "ошибка" и значение "кода ошибки", который так-же возвращается как результат функции 
//
// Возвращаемое значение:
//   Число   - Возвращает числовое значение кода ошибки
//
Функция   ЗапросСтатистикиWMI(Сервер, ОбщиеСведения) Экспорт
	
	ПараметрыПодключения	= Неопределено;
	Локальный 				= ложь; 
	РезультатПроверкиПараметровПодключения = ПроверкаПараметровПодключения(Сервер, ПараметрыПодключения, Локальный);
	Ошибка 					= РезультатПроверкиПараметровПодключения;
	ОбщиеСведения 			= Новый Структура;
	
	ОбщиеСведения.Вставить("Server",                   	Сервер); 
	
	Если НЕ Ошибка = 0 Тогда
		ОбщиеСведения.Вставить("Ошибка", Ошибка);
     	Возврат Ошибка;
	Иначе 
		
	    	
		Попытка
			#Область ПопыткаПолученияДанных
			СокетСоединения			= Неопределено;
			РезультатСоединения		= СоздатьПодключениеКWMI(ПараметрыПодключения, СокетСоединения, Локальный);
			Ошибка					= РезультатСоединения;
			Если Не Ошибка = 0 Тогда
				ОбщиеСведения.Вставить("Ошибка", Ошибка);
				Возврат Ошибка;
			Иначе
				
				#Область PercentMEMUsing
				Win32_OperatingSystem = СокетСоединения.ExecQuery("SELECT"
				+" TotalVisibleMemorySize"
				+ ", FreePhysicalMemory"
				+ ", NumberOfProcesses" 
				+ " FROM Win32_OperatingSystem");
				
				Для Каждого param Из Win32_OperatingSystem Цикл
					TotalMem 	    	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "TotalVisibleMemorySize"));
					FreeМЕМ 			= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "FreePhysicalMemory"));
					NumberOfProcesses 	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "NumberOfProcesses"));
				КонецЦикла;
				
				AvailableMBytes =   FreeМЕМ / 1024;
				Если не TotalMem = 0 Тогда
					PercentMEMUsing = 100 - FreeМЕМ*100/TotalMem; 
				Иначе
					PercentMEMUsing  = -1;
				КонецЕсли;
				
				#КонецОбласти
				
				#Область 	PercentFreeHdd			
				
				Win32_LogicalDisk 			= СокетСоединения.ExecQuery( "SELECT"
				+ " Name"
				+ ", Size"
				+ ", FreeSpace"
				+ ", DriveType"
				//	+ " *"
				+ " 	FROM Win32_LogicalDisk");
				
				FullSize = 0;
				FullFreeSpace = 0;
				
				Для Каждого param Из Win32_LogicalDisk Цикл
					//	Name		= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "Name"));
					Size		= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "Size"));
					FreeSpace	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "FreeSpace"));
					DriveType	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "DriveType"));				
					
					Если DriveType = 3 Тогда
						FullSize = FullSize + Size;
						FullFreeSpace = FullFreeSpace +  FreeSpace;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ FullSize = 0 Тогда
					PercentFreeHdd 		= FullFreeSpace*100/FullSize;
					PercenAvaliableHDD 	= 100 - PercentFreeHdd;
					FreeHDD 			= FullFreeSpace/1024/1024;
				Иначе
					PercentFreeHdd 		= -1;
					PercenAvaliableHDD 	= -1;
					FreeHDD 			= -1;
				КонецЕсли;
				
				#КонецОбласти
				
				#Область 	PercentProcessorTime	
				//нагрузка на Реальный(?) CPU суммарно по ядрам
				Win32_Processor 			= СокетСоединения.ExecQuery( "SELECT"
				+ " SocketDesignation"
				+ ", LoadPercentage"
				+ " 	FROM Win32_Processor"); 
				
				СуммарноПроцентИспользования = 0;
				Итератор = 0;	
				Для Каждого param Из Win32_Processor Цикл
					СуммарноПроцентИспользования = СуммарноПроцентИспользования + ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "LoadPercentage"));
					итератор= итератор+1;
				КонецЦикла;
				
				Если (НЕ итератор = 0) Тогда

					PercentProcessorTime = СуммарноПроцентИспользования / итератор;
				Иначе
					PercentProcessorTime = -1;
				КонецЕсли;
				
				
				#КонецОбласти
				
				#Область MSSQLSTATS
				
				ЕстьMSSQL = УчетПродуктов_ат.ЕстьПродуктЭтогоТипаНаСервере(Сервер, Перечисления.ТипыПродуктов_ат.СерверMSSQL);
				
				Если ЕстьMSSQL Тогда
					// все Из раздела PerfFormattedData работает глючно, и может не работать совсем, но других  вариантов получить данные по MSSQL нет... 
					SQLServerSQLStatistics = СокетСоединения.ExecQuery("SELECT "
					+ " SQLCompilationsPersec"
					+ ", SQLReCompilationsPersec"
					+ " FROM Win32_PerfFormattedData_MSSQLSERVER_SQLServerSQLStatistics");
					Для Каждого param Из SQLServerSQLStatistics Цикл
						Static_SQLCompilations_sec 		= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "SQLCompilationsPersec"));
						StaticSQL_ReCompilations_sec 	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "SQLReCompilationsPersec"));
					КонецЦикла;
					
					SQLServerBufferManage		= СокетСоединения.ExecQuery("SELECT "
					+ " Pagelifeexpectancy"
					+ ", Buffercachehitratio"
					+ ", PagereadsPersec"
					+ ", LazywritesPersec"
					+ " FROM Win32_PerfFormattedData_MSSQLSERVER_SQLServerBufferManager");
					Для Каждого param Из SQLServerBufferManage Цикл
						Pagelifeexpectancy 				= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "Pagelifeexpectancy"));
						Buffercachehitratio 			= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "Buffercachehitratio"));
						PagereadsPersec			 		= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "PagereadsPersec"));
						LazywritesPersec			 	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "LazywritesPersec"));
					КонецЦикла;
					
					SQLServerAccessMethods		= СокетСоединения.ExecQuery("SELECT "																
					+ " IndexSearchesPersec"
					//									+ ", FullScansPersec"
					+ " FROM Win32_PerfFormattedData_MSSQLSERVER_SQLServerAccessMethods");
					Для Каждого param Из SQLServerAccessMethods Цикл
						IndexSearchesPersec 			= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "IndexSearchesPersec"));
						//	FullScansPersec 				= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "FullScansPersec"));
					КонецЦикла;
					
					SQLServerDatabases 			= СокетСоединения.ExecQuery("SELECT "					
					+ " LogFlushWaitTime"                                                                             //* множество значений!
					+ ", LogFlushWaitsPersec"                                                                          //* множество значений!
					+ " FROM Win32_PerfFormattedData_MSSQLSERVER_SQLServerDatabases");
					Для Каждого param Из SQLServerDatabases Цикл
						LogFlushWaitTime 			= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "LogFlushWaitTime"));
						LogFlushWaitsPersec 			= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "LogFlushWaitsPersec"));
					КонецЦикла;
					
					SQLServerPlanCache			 = СокетСоединения.ExecQuery("SELECT "				
					+ "CachePages"                                                                                //* множество значений!
					+ ", CacheHitRatio"	                                                                       //* множество значений!
					+ " FROM Win32_PerfFormattedData_MSSQLSERVER_SQLServerPlanCache");
					Для Каждого param Из SQLServerPlanCache Цикл
						CachePages 					= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "CachePages"));
						CacheHitRatio 					= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(param, "CacheHitRatio"));
					КонецЦикла;
					
				КонецЕсли;
				
				#КонецОбласти
    		
				ОбщиеСведения.Вставить("PercentProcessorTime",	PercentProcessorTime);
				ОбщиеСведения.Вставить("PercentMEMUsing", 		PercentMEMUsing);
				ОбщиеСведения.Вставить("PercenAvaliableHDD",	PercenAvaliableHDD);
				ОбщиеСведения.Вставить("FreeMegabytesHDD",	FreeHDD);
				ОбщиеСведения.Вставить("FreePhysicalMemory", 	AvailableMBytes);
				ОбщиеСведения.Вставить("NumberOfProcesses", 	NumberOfProcesses);
				
				Если ЕстьMSSQL Тогда
					
					ОбщиеСведения.Вставить("Static_SQLCompilations_sec", 		Static_SQLCompilations_sec);
					ОбщиеСведения.Вставить("StaticSQL_ReCompilations_sec", 	StaticSQL_ReCompilations_sec);
					ОбщиеСведения.Вставить("Pagelifeexpectancy", 				Pagelifeexpectancy);
					ОбщиеСведения.Вставить("Buffercachehitratio", 				Buffercachehitratio);
					ОбщиеСведения.Вставить("PagereadsPersec", 					PagereadsPersec);
					ОбщиеСведения.Вставить("LazywritesPersec", 					LazywritesPersec);
					ОбщиеСведения.Вставить("IndexSearchesPersec", 				IndexSearchesPersec);
					ОбщиеСведения.Вставить("LogFlushWaitTime", 					LogFlushWaitTime);
					ОбщиеСведения.Вставить("LogFlushWaitsPersec", 				LogFlushWaitsPersec);
					ОбщиеСведения.Вставить("CachePages", 						CachePages);
					ОбщиеСведения.Вставить("CacheHitRatio", 						CacheHitRatio);
					
				КонецЕсли;
				
			КонецЕсли;
			
	#КонецОбласти	
		Исключение
			Ошибка =  -8;  // произошла ошибка во время получения данных
			
		КонецПопытки;
		
		Если НЕ Ошибка = 0 Тогда
			
			ОбщиеСведения.Вставить("Ошибка", Ошибка);
			
		КонецЕсли;
		Возврат Ошибка;
		
	 КонецЕсли;

 КонецФункции

#Область ТестовыйПример
	//			
	//			Если (Сервер.УведомлятьОКритическойНагрузке = Истина) Тогда
	//				Если (PercentProcessorTime  >= Сервер.ДостижениеКритическогоНАПриПроц) Тогда 
	//					//ЗаписьВСписокСообщений = константы.СообщенияПользователямОПроблемахСерверов_ат.Получить().Получить();
	//					ЗаписьВСписокСлужебныхСообщений(Сервер, Истина , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.CPU_proc, PercentProcessorTime);
	//				КонецЕсли;
	//				
	//				Если (PercentMEMUsing >= Сервер.ДостижениеКритическогоНАПриПроц) Тогда
	//					ЗаписьВСписокСлужебныхСообщений(Сервер, Истина , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.RAM_proc, PercentMEMUsing);
	//				КонецЕсли;
	//				
	//				Если (PercenAvaliableHDD >= Сервер.ДостижениеКритическогоНАПриПроц) Тогда
	//				//Если (PercentFreeHdd >= Сервер.ДостижениеКритическогоНАПриПроц) Тогда
	
	//					ЗаписьВСписокСлужебныхСообщений(Сервер, Истина , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.HDD_proc, PercenAvaliableHDD);
	//					//ЗаписьВСписокСлужебныхСообщений(Сервер, Истина , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.HDD_proc, PercentFreeHdd);
	
	//				КонецЕсли;
	//			КонецЕсли;	
	//			
	//			Если  (Сервер.УведомлятьОВысокойНагрузке = Истина) Тогда
	//				Если ((PercentProcessorTime  < Сервер.ДостижениеКритическогоНАПриПроц) 
	//					И  (PercentProcessorTime  >= Сервер.ДостижениеНАПриПроц))Тогда 
	//					//ЗаписьВСписокСообщений = константы.СообщенияПользователямОПроблемахСерверов_ат.Получить().Получить();
	//					ЗаписьВСписокСлужебныхСообщений(Сервер, ложь , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.CPU_proc, PercentProcessorTime);
	//				КонецЕсли;
	//				
	//				Если  ((PercentMEMUsing  < Сервер.ДостижениеКритическогоНАПриПроц) 
	//					И  (PercentMEMUsing  >= Сервер.ДостижениеНАПриПроц)) Тогда 
	//					ЗаписьВСписокСлужебныхСообщений(Сервер, ложь , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.RAM_proc, PercentMEMUsing);
	//				КонецЕсли;
	//				
	//				Если ((PercenAvaliableHDD  < Сервер.ДостижениеКритическогоНАПриПроц) 
	////				Если ((PercentFreeHdd < Сервер.ДостижениеКритическогоНАПриПроц) 
	//					И  (PercenAvaliableHDD  >= Сервер.ДостижениеНАПриПроц)) Тогда 
	//			//		И  (PercentFreeHdd  >= Сервер.ДостижениеНАПриПроц)) Тогда 
	//				
	//					ЗаписьВСписокСлужебныхСообщений(Сервер, ложь , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.HDD_proc, PercenAvaliableHDD);
	//					//ЗаписьВСписокСлужебныхСообщений(Сервер, ложь , ТекущаяДатаИВремя, Перечисления.ТипыРесурсовWMI_ат.HDD_proc, PercentFreeHdd);
	
	//				КонецЕсли;
	//			КонецЕсли;
	
	//	
	//	// HARDCODED!
	// WINInfo = Новый ТаблицаЗначений;
	//	//WINInfo.Колонки.Добавить("BootDevice");
	//	//WINInfo.Колонки.Добавить("BuildNumber");
	//	//WINInfo.Колонки.Добавить("BuildType");
	//	//WINInfo.Колонки.Добавить("Caption");
	//	//WINInfo.Колонки.Добавить("CodeSet");
	//	//WINInfo.Колонки.Добавить("CountryCode");
	//	//WINInfo.Колонки.Добавить("CreationClassName");
	//	//WINInfo.Колонки.Добавить("CSCreationClassName");
	//	//WINInfo.Колонки.Добавить("CSDVersion");
	//	//WINInfo.Колонки.Добавить("CSName");
	//	//WINInfo.Колонки.Добавить("CurrentTimeZone");
	//	//WINInfo.Колонки.Добавить("DataExecutionPrevention_32BitApplications");
	//	//WINInfo.Колонки.Добавить("DataExecutionPrevention_Available");
	//	//WINInfo.Колонки.Добавить("DataExecutionPrevention_Drivers");
	//	//WINInfo.Колонки.Добавить("DataExecutionPrevention_SupportPolicy");
	//	//WINInfo.Колонки.Добавить("Debug");
	//	//WINInfo.Колонки.Добавить("Description");
	//	//WINInfo.Колонки.Добавить("Distributed");
	//	//WINInfo.Колонки.Добавить("EncryptionLevel");
	//	//WINInfo.Колонки.Добавить("ForegroundApplicationBoost");
	//	WINInfo.Колонки.Добавить("FreePhysicalMemory");
	//	//WINInfo.Колонки.Добавить("FreeSpaceInPagingFiles");
	//	WINInfo.Колонки.Добавить("FreeVirtualMemory");
	//	//WINInfo.Колонки.Добавить("InstallDate");
	//	//WINInfo.Колонки.Добавить("LargeSystemCache");
	//	//WINInfo.Колонки.Добавить("LastBootUpTime");
	//	//WINInfo.Колонки.Добавить("LocalDateTime");
	//	//WINInfo.Колонки.Добавить("Locale");
	//	//WINInfo.Колонки.Добавить("Manufacturer");
	//	WINInfo.Колонки.Добавить("MaxNumberOfProcesses");
	//	WINInfo.Колонки.Добавить("MaxProcessMemorySize");
	//	//WINInfo.Колонки.Добавить("MUILanguages");
	//	//WINInfo.Колонки.Добавить("Name");
	//	//WINInfo.Колонки.Добавить("NumberOfLicensedUsers");
	//	WINInfo.Колонки.Добавить("NumberOfProcesses");
	//	//WINInfo.Колонки.Добавить("NumberOfUsers");
	//	//WINInfo.Колонки.Добавить("OperatingSystemSKU");
	//	//WINInfo.Колонки.Добавить("Organization");
	//	//WINInfo.Колонки.Добавить("OSArchitecture");
	//	//WINInfo.Колонки.Добавить("OSLanguage");
	//	//WINInfo.Колонки.Добавить("OSProductSuite");
	//	//WINInfo.Колонки.Добавить("OSType");
	//	//WINInfo.Колонки.Добавить("OtherTypeDescription");
	//	//WINInfo.Колонки.Добавить("PAEEnabled");
	//	//WINInfo.Колонки.Добавить("PlusProductID");
	//	//WINInfo.Колонки.Добавить("PlusVersionNumber");
	//	//WINInfo.Колонки.Добавить("Primary");
	//	//WINInfo.Колонки.Добавить("ProductType");
	//	//WINInfo.Колонки.Добавить("RegisteredUser");
	//	//WINInfo.Колонки.Добавить("ProductID");	// При считывании - SerialNumber.
	//	//WINInfo.Колонки.Добавить("ServicePackMajorVersion");
	//	//WINInfo.Колонки.Добавить("ServicePackMinorVersion");
	//	//WINInfo.Колонки.Добавить("SizeStoredInPagingFiles");
	//	//WINInfo.Колонки.Добавить("Status");
	//	//WINInfo.Колонки.Добавить("SuiteMask");
	//	//WINInfo.Колонки.Добавить("SystemDevice");
	//	//WINInfo.Колонки.Добавить("SystemDirectory");
	//	//WINInfo.Колонки.Добавить("SystemDrive");
	//	WINInfo.Колонки.Добавить("TotalSwapSpaceSize");
	//	WINInfo.Колонки.Добавить("TotalVirtualMemorySize");
	//	WINInfo.Колонки.Добавить("TotalVisibleMemorySize");
	//	WINInfo.Колонки.Добавить("Version");
	//	//WINInfo.Колонки.Добавить("WindowsDirectory");
	//						   
	// Для Каждого OperatingSystem Из Win32_OperatingSystem Цикл
	//		WINInfoOS = WINInfo.Добавить();
	//		//WINInfoOS.BootDevice			= ПолучитьЗначениеВПопытке(OperatingSystem, "BootDevice");
	//		//WINInfoOS.BuildNumber			= ПолучитьЗначениеВПопытке(OperatingSystem, "BuildNumber");
	//		//WINInfoOS.BuildType				= ПолучитьЗначениеВПопытке(OperatingSystem, "BuildType");
	//		//WINInfoOS.Caption				= ПолучитьЗначениеВПопытке(OperatingSystem, "Caption");
	//		//WINInfoOS.CodeSet				= ПолучитьЗначениеВПопытке(OperatingSystem, "CodeSet");
	//		//WINInfoOS.CountryCode			= ПолучитьЗначениеВПопытке(OperatingSystem, "CountryCode");
	//		//WINInfoOS.CreationClassName		= ПолучитьЗначениеВПопытке(OperatingSystem, "CreationClassName");
	//		//WINInfoOS.CSCreationClassName	= ПолучитьЗначениеВПопытке(OperatingSystem, "CSCreationClassName");
	//		//WINInfoOS.CSDVersion			= ПолучитьЗначениеВПопытке(OperatingSystem, "CSDVersion");
	//		//WINInfoOS.CSName				= ПолучитьЗначениеВПопытке(OperatingSystem, "CSName");
	//		//WINInfoOS.CurrentTimeZone		= ПолучитьЗначениеВПопытке(OperatingSystem, "CurrentTimeZone");
	//		//WINInfoOS.DataExecutionPrevention_32BitApplications	= ПолучитьЗначениеВПопытке(OperatingSystem, "DataExecutionPrevention_32BitApplications");
	//		//WINInfoOS.DataExecutionPrevention_Available			= ПолучитьЗначениеВПопытке(OperatingSystem, "DataExecutionPrevention_Available");
	//		//WINInfoOS.DataExecutionPrevention_Drivers			= ПолучитьЗначениеВПопытке(OperatingSystem, "DataExecutionPrevention_Drivers");
	//		//WINInfoOS.DataExecutionPrevention_SupportPolicy		= ПолучитьЗначениеВПопытке(OperatingSystem, "DataExecutionPrevention_SupportPolicy");
	//		//WINInfoOS.Debug					= ПолучитьЗначениеВПопытке(OperatingSystem, "Debug");
	//		//WINInfoOS.Description			= ПолучитьЗначениеВПопытке(OperatingSystem, "Description");
	//		//WINInfoOS.Distributed			= ПолучитьЗначениеВПопытке(OperatingSystem, "Distributed");
	//		//WINInfoOS.EncryptionLevel		= ПолучитьЗначениеВПопытке(OperatingSystem, "EncryptionLevel");
	//		//WINInfoOS.ForegroundApplicationBoost	= ПолучитьЗначениеВПопытке(OperatingSystem, "ForegroundApplicationBoost");
	//		WINInfoOS.FreePhysicalMemory	= ПолучитьЗначениеВПопытке(OperatingSystem, "FreePhysicalMemory");
	//		//WINInfoOS.FreeSpaceInPagingFiles= ПолучитьЗначениеВПопытке(OperatingSystem, "FreeSpaceInPagingFiles");
	//		WINInfoOS.FreeVirtualMemory		= ПолучитьЗначениеВПопытке(OperatingSystem, "FreeVirtualMemory");
	//		//WINInfoOS.InstallDate 			= ПреобразоватьЗначениеВДатуВремя(ПолучитьЗначениеВПопытке(OperatingSystem, "InstallDate"));	// Дата установки Windows.
	//		//WINInfoOS.LargeSystemCache		= ПолучитьЗначениеВПопытке(OperatingSystem, "LargeSystemCache");
	//		//WINInfoOS.LastBootUpTime		= ПреобразоватьЗначениеВДатуВремя(ПолучитьЗначениеВПопытке(OperatingSystem, "LastBootUpTime"));
	//		//WINInfoOS.LocalDateTime			= ПреобразоватьЗначениеВДатуВремя(ПолучитьЗначениеВПопытке(OperatingSystem, "LocalDateTime"));
	//		//WINInfoOS.Locale				= ПолучитьЗначениеВПопытке(OperatingSystem, "Locale");
	//		//WINInfoOS.Manufacturer			= ПолучитьЗначениеВПопытке(OperatingSystem, "Manufacturer");
	//		WINInfoOS.MaxNumberOfProcesses	= ПолучитьЗначениеВПопытке(OperatingSystem, "MaxNumberOfProcesses");
	//		//WINInfoOS.MaxProcessMemorySize	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(OperatingSystem, "MaxProcessMemorySize"));
	//		//MUILanguagesARRAY					= ПолучитьЗначениеВПопытке(OperatingSystem, "MUILanguages");
	//		//MUILanguages = Неопределено;
	//		//Попытка
	//		//	Для Каждого ит Из MUILanguagesARRAY Цикл
	//		//		MUILanguages = ит;
	//		//	КонецЦикла;
	//		//Исключение
	//		//КонецПопытки;
	//		//WINInfoOS.MUILanguages			= MUILanguages;
	//		//WINInfoOS.Name					= ПолучитьЗначениеВПопытке(OperatingSystem, "Name");
	//		//WINInfoOS.NumberOfLicensedUsers	= ПолучитьЗначениеВПопытке(OperatingSystem, "NumberOfLicensedUsers");
	//		WINInfoOS.NumberOfProcesses		= ПолучитьЗначениеВПопытке(OperatingSystem, "NumberOfProcesses");
	//		//WINInfoOS.NumberOfUsers			= ПолучитьЗначениеВПопытке(OperatingSystem, "NumberOfUsers");
	//		//WINInfoOS.OperatingSystemSKU	= ПолучитьЗначениеВПопытке(OperatingSystem, "OperatingSystemSKU");
	//		//WINInfoOS.Organization			= ПолучитьЗначениеВПопытке(OperatingSystem, "Organization");
	//		//WINInfoOS.OSArchitecture		= ПолучитьЗначениеВПопытке(OperatingSystem, "OSArchitecture");
	//		//WINInfoOS.OSLanguage			= ПолучитьЗначениеВПопытке(OperatingSystem, "OSLanguage");
	//		//WINInfoOS.OSProductSuite		= ПолучитьЗначениеВПопытке(OperatingSystem, "OSProductSuite");
	//		//WINInfoOS.OSType				= ПолучитьЗначениеВПопытке(OperatingSystem, "OSType");
	//		//WINInfoOS.OtherTypeDescription	= ПолучитьЗначениеВПопытке(OperatingSystem, "OtherTypeDescription");
	//		//WINInfoOS.PAEEnabled			= ПолучитьЗначениеВПопытке(OperatingSystem, "PAEEnabled");
	//		//WINInfoOS.PlusProductID			= ПолучитьЗначениеВПопытке(OperatingSystem, "PlusProductID");
	//		//WINInfoOS.PlusVersionNumber		= ПолучитьЗначениеВПопытке(OperatingSystem, "PlusVersionNumber");
	//		//WINInfoOS.Primary				= ПолучитьЗначениеВПопытке(OperatingSystem, "Primary");
	//		//WINInfoOS.ProductType			= ПолучитьЗначениеВПопытке(OperatingSystem, "ProductType");
	//		//WINInfoOS.RegisteredUser		= ПолучитьЗначениеВПопытке(OperatingSystem, "RegisteredUser");
	//		//WINInfoOS.ProductID				= ПолучитьЗначениеВПопытке(OperatingSystem, "SerialNumber");
	//		//WINInfoOS.ServicePackMajorVersion	= ПолучитьЗначениеВПопытке(OperatingSystem, "ServicePackMajorVersion");
	//		//WINInfoOS.ServicePackMinorVersion	= ПолучитьЗначениеВПопытке(OperatingSystem, "ServicePackMinorVersion");
	//		//WINInfoOS.SizeStoredInPagingFiles	= ПолучитьЗначениеВПопытке(OperatingSystem, "SizeStoredInPagingFiles");
	//		//WINInfoOS.Status				= ПолучитьЗначениеВПопытке(OperatingSystem, "Status");
	//		//WINInfoOS.SuiteMask				= ПолучитьЗначениеВПопытке(OperatingSystem, "SuiteMask");
	//		//WINInfoOS.SystemDevice			= ПолучитьЗначениеВПопытке(OperatingSystem, "SystemDevice");
	//		//WINInfoOS.SystemDirectory		= ПолучитьЗначениеВПопытке(OperatingSystem, "SystemDirectory");
	//		//WINInfoOS.SystemDrive			= ПолучитьЗначениеВПопытке(OperatingSystem, "SystemDrive");
	//		WINInfoOS.TotalSwapSpaceSize	= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(OperatingSystem, "TotalSwapSpaceSize"));
	//		WINInfoOS.TotalVirtualMemorySize= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(OperatingSystem, "TotalVirtualMemorySize"));
	//		WINInfoOS.TotalVisibleMemorySize= ПреобразоватьЗначениеВЧисло(ПолучитьЗначениеВПопытке(OperatingSystem, "TotalVisibleMemorySize"));
	//		WINInfoOS.Version				= ПолучитьЗначениеВПопытке(OperatingSystem, "Version");
	//		//WINInfoOS.WindowsDirectory		= ПолучитьЗначениеВПопытке(OperatingSystem, "WindowsDirectory");
	//КонецЦикла;
	//
	
	//команда = "winmgmts:\\.\root\cimv2";
	//WinMGMT = ПолучитьCOMОбъект(команда); 
	//	Win32_OperatingSystem 	= WinMGMT.ExecQuery("SELECT * FROM Win32_OperatingSystem");
	//	Win32_PerfOS_Processor 	= WinMGMT.ExecQuery("SELECT * FROM Win32_PerfFormattedData_PerfOS_Processor");
	//	Win32_PerfOS_HDD			= WinMGMT.ExecQuery("SELECT * FROM Win32_PerfFormattedData_PerfDisk_LogicalDisk");
	//	Win32_PerfOS_PDD			= WinMGMT.ExecQuery("SELECT * FROM Win32_PerfFormattedData_PerfDisk_PhysicalDisk");
	//	Win32_PerfOS_MEM			= WinMGMT.ExecQuery("SELECT * FROM Win32_PerfFormattedData_PerfOS_Memory");
	
		
	////			Возврат 0;
	////			
	////		Иначе
	////			Сообщить("У Сервера не указан главный IP! ");
	////			Возврат -1;	
	////		КонецЕсли;
	////		
	////		
	////	КонецЕсли;
	////	
	////Иначе
	////	Сообщить("необходимо указать Сервер с которого вы хотите получить данные!");
	////	
	////	Возврат -1;
	////	
	////КонецЕсли;
	//
	////Если Константы.ВключитьРассылкуОПредельныхИКритическихЗначенияхСерверов = Истина Тогда
	////ПроверкаСообщенийИОтправкаУведомлений(Истина);
	////ПроверкаСообщенийИОтправкаУведомлений(ложь);
	////Иначе
	//
	////КонецЕсли;
#КонецОбласти

// фоновое задание
&НаСервере
Функция   ОбрабатываемСтатистикуWMI(Сервер, Данные = Неопределено) Экспорт
	
	ТекущаяДатаИВремя				= ТекущаяДата();
	ПараметрыУведомлений			= ПолучениеПараметровУведомленийДляСервера(Сервер);
	
	// получение статистики
	КодОшибки = ЗапросСтатистикиWMI(Сервер, Данные);
	ТаблицаСтатистики 	= 				Новый ТаблицаЗначений;
	ПараметрыНаКонтроле = 				Новый ТаблицаЗначений;
    ТаблицаОтправкиУведомлений = 	Новый ТаблицаЗначений;
	

	ЗадатьПараметрыТаблиц(ТаблицаСтатистики, ПараметрыНаКонтроле, ТаблицаОтправкиУведомлений);
	                     
	Уведомлять = ПроверкаПараметровУведомлений(ПараметрыУведомлений, Сервер, ТекущаяДатаИВремя);
	ЗаписьВТаблицыСтатистикиИОтправкиУведомлений(Данные, ТекущаяДатаИВремя, Уведомлять, ТаблицаСтатистики, ПараметрыНаКонтроле);
	
		ЗаписьВРегистрСведенияОСерверахПоWMI = РегистрыСведений.СведенияОСерверахПоWMI_ат.СоздатьНаборЗаписей();
		ЗаписьВРегистрСведенияОСерверахПоWMI.Загрузить(ТаблицаСтатистики);
		ЗаписьВРегистрСведенияОСерверахПоWMI.Записать(ложь);
		
	ПроверкаПараметровНаКонтроле(ПараметрыНаКонтроле,ТаблицаОтправкиУведомлений,ПараметрыУведомлений,Уведомлять);
		
		
	Если ТаблицаОтправкиУведомлений.Количество() >0 Тогда
		ЗаписьВРегистрСписокСерверныхУведомлений = РегистрыСведений.СписокСерверныхУведомлений_ат.СоздатьНаборЗаписей();
		ЗаписьВРегистрСписокСерверныхУведомлений.Загрузить(ТаблицаОтправкиУведомлений);
	
		Для Каждого СтрокаТаблицыУведомлений Из ТаблицаОтправкиУведомлений цикл
			Если СтрокаТаблицыУведомлений.Пользователь = Неопределено Тогда
				РезультатОтправки = ложь;
			Иначе
				
				РезультатОтправки = ОтправкаУведомлений(ТекущаяДатаИВремя, СтрокаТаблицыУведомлений);	
				Если РезультатОтправки Тогда 
					
				Иначе 
					КодОшибки = -14;       // есть ошибки на этапе отправки уведомления
					ЗаписьОшибки = ЗаписьВРегистрСписокСерверныхУведомлений.Добавить();
					ЗаписьОшибки.Сервер	 =		СтрокаТаблицыУведомлений.Сервер;
					ЗаписьОшибки.Пользователь =	СтрокаТаблицыУведомлений.Пользователь;
					ЗаписьОшибки.Тригер		=	Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи;
					ЗаписьОшибки.Период		= 	ТекущаяДатаИВремя;
					ЗаписьОшибки.ЗначениеТригера =  КодОшибки;
					
				КонецЕсли;
			КонецЕсли
		КонецЦикла;
		
		ЗаписьВРегистрСписокСерверныхУведомлений.Записать(ложь);

			
	Иначе
		Возврат 0;
		
	КонецЕсли;
		
	Возврат КодОшибки;

КонецФункции

Функция   ПроверкаПараметровУведомлений(ПараметрыУведомлений, Сервер, ТекущаяДатаИВремя)
	
	Если ПараметрыУведомлений.Количество() > 0 Тогда
		Если ПараметрыУведомлений.Свойство("ПериодичностьУведомленийГлобальная") Тогда
			Если ПараметрыУведомлений.ПериодичностьУведомленийГлобальная > 0 Тогда
				Возврат 0;
			иначе
				Возврат -13;
			КонецЕсли;
			
		Иначе
			
			Возврат -12;
			
		КонецЕсли;
	иначе
		Возврат -11;
	КонецЕсли;
	
КонецФункции

Функция   ПроверкаПараметровНаКонтроле(ПараметрыНаКонтроле, ТаблицаОтправкиУведомлений, ПараметрыУведомлений, Уведомлять, СписокУведомленийНаОтправку= Неопределено)
	
	//Если ПараметрыНаКонтроле.Количество() = 0 и Уведомлять < 0 Тогда
	Если ПараметрыНаКонтроле.Количество() = 0  Тогда
		Возврат ложь;
	Иначе
		
		Для Каждого Параметр Из ПараметрыНаКонтроле цикл
			Сервер = Параметр.Сервер;
			Значение = Параметр.Значение;
			ТекущаяДатаИВремя = Параметр.Период;
			Если 		Параметр.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.HDD_proc Тогда
				
				Если	ПараметрыУведомлений.Свойство("УведомлятьОПороговомЗаполненииДисковойПодсистемы") и 
						ПараметрыУведомлений.Свойство("ПороговаяЗагрузкаДисковойПодсистемы") и
						ПараметрыУведомлений.Свойство("КритичнаяЗагрузкаДисковойПодсистемы") 	Тогда
					
					Если	Значение >=	ПараметрыУведомлений.ПороговаяЗагрузкаДисковойПодсистемы
						И	Значение <	ПараметрыУведомлений.КритичнаяЗагрузкаДисковойПодсистемы Тогда
						
								ПричинаУведомления	= Перечисления.ПараметрыСерверов_ат.УведомлятьОПороговомЗаполненииДисковойПодсистемы;
						          РезультатПроверки	= ПроверкаСообщенийИПолучениеСпискаУведомлений(Сервер, ТекущаяДатаИВремя, ПараметрыУведомлений,
											СписокУведомленийНаОтправку, ПричинаУведомления, Неопределено, Значение);
						
								ДобавитьЗаписьВТаблицуУведомлений(Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,
											ТаблицаОтправкиУведомлений, ПричинаУведомления,Значение);
						
					
					КонецЕсли;
				КонецЕсли;
				Если	ПараметрыУведомлений.Свойство("УведомлятьОКритическомЗаполенииДискокойПодсистемы") и 
						ПараметрыУведомлений.Свойство("КритичнаяЗагрузкаДисковойПодсистемы") 	Тогда
					
					Если	Значение >	ПараметрыУведомлений.КритичнаяЗагрузкаДисковойПодсистемы Тогда
								ПричинаУведомления	= Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическомЗаполненииДискокойПодсистемы;
								РезультатПроверки	= ПроверкаСообщенийИПолучениеСпискаУведомлений(Сервер, ТекущаяДатаИВремя, ПараметрыУведомлений,
											СписокУведомленийНаОтправку, ПричинаУведомления, Неопределено, Значение);
								
								ДобавитьЗаписьВТаблицуУведомлений(Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,
											ТаблицаОтправкиУведомлений, ПричинаУведомления,Значение);
								
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли	Параметр.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.CPU_proc Тогда
				
				Если	ПараметрыУведомлений.Свойство("УведомлятьОПредельнойЗагрузкеПроцессора") и 
					ПараметрыУведомлений.Свойство("ПороговаяЗагрузкаПроцессора") и
					ПараметрыУведомлений.Свойство("КритичнаяЗагрузкаПроцессора") 	Тогда
					
					Если	Значение >=	ПараметрыУведомлений.ПороговаяЗагрузкаПроцессора
						И	Значение <	ПараметрыУведомлений.КритичнаяЗагрузкаПроцессора Тогда
						          ПричинаУведомления	= Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПроцессора;
								РезультатПроверки	= ПроверкаСообщенийИПолучениеСпискаУведомлений(Сервер, ТекущаяДатаИВремя, ПараметрыУведомлений,
											СписокУведомленийНаОтправку, ПричинаУведомления, Неопределено, Значение);
								
								ДобавитьЗаписьВТаблицуУведомлений(Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,
											ТаблицаОтправкиУведомлений, ПричинаУведомления,Значение);
					
					КонецЕсли;
				КонецЕсли;
				Если	ПараметрыУведомлений.Свойство("УведомлятьОКритическойЗагрузкеПроцессора") и 
					ПараметрыУведомлений.Свойство("КритичнаяЗагрузкаПроцессора") 	Тогда
					
					Если	Значение >	ПараметрыУведомлений.КритичнаяЗагрузкаПроцессора Тогда
								ПричинаУведомления	= Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПроцессора;
								РезультатПроверки	= ПроверкаСообщенийИПолучениеСпискаУведомлений(Сервер, ТекущаяДатаИВремя, ПараметрыУведомлений,
											СписокУведомленийНаОтправку, ПричинаУведомления, Неопределено, Значение);
								
								ДобавитьЗаписьВТаблицуУведомлений(Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,
											ТаблицаОтправкиУведомлений, ПричинаУведомления,Значение);
						
					КонецЕсли
					
				КонецЕсли;
				
			ИначеЕсли	Параметр.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.RAM_proc Тогда
				
				Если	ПараметрыУведомлений.Свойство("УведомлятьОПредельнойЗагрузкеПамяти") и 
					ПараметрыУведомлений.Свойство("ПороговаяЗагрузкаПамяти") и
					ПараметрыУведомлений.Свойство("КритичнаяЗагрузкаПамяти") 	Тогда
					
					Если	Значение >=	ПараметрыУведомлений.ПороговаяЗагрузкаПамяти
						И	Значение <	ПараметрыУведомлений.КритичнаяЗагрузкаПроцессора Тогда
								ПричинаУведомления	= Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПамяти;
								РезультатПроверки	= ПроверкаСообщенийИПолучениеСпискаУведомлений(Сервер, ТекущаяДатаИВремя, ПараметрыУведомлений,
											СписокУведомленийНаОтправку, ПричинаУведомления, Неопределено, Значение);
								
								ДобавитьЗаписьВТаблицуУведомлений(Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,
											ТаблицаОтправкиУведомлений, ПричинаУведомления,Значение);
						
					КонецЕсли;
				КонецЕсли;
				Если	ПараметрыУведомлений.Свойство("УведомлятьОКритическойЗагрузкеПамяти") и 
						ПараметрыУведомлений.Свойство("КритичнаяЗагрузкаПамяти") 	Тогда
					
					Если	Значение >	ПараметрыУведомлений.КритичнаяЗагрузкаПамяти Тогда
								ПричинаУведомления	= Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПамяти;
								РезультатПроверки	= ПроверкаСообщенийИПолучениеСпискаУведомлений(Сервер, ТекущаяДатаИВремя, ПараметрыУведомлений,
											СписокУведомленийНаОтправку, ПричинаУведомления, Неопределено, Значение);
								
								ДобавитьЗаписьВТаблицуУведомлений(Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,
											ТаблицаОтправкиУведомлений, ПричинаУведомления,Значение);
						
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли	Параметр.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FactConnection 
				или 		Параметр.ТипРесурса = Перечисления.ТипыРесурсовZabbix_at.AgentPing Тогда
				
							ПричинаУведомления	= Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи;
							РезультатПроверки	= ПроверкаСообщенийИПолучениеСпискаУведомлений(
											Сервер, ТекущаяДатаИВремя, ПараметрыУведомлений,
											СписокУведомленийНаОтправку, ПричинаУведомления, Значение, Значение);
								
							ДобавитьЗаписьВТаблицуУведомлений(
											Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,
											ТаблицаОтправкиУведомлений, ПричинаУведомления,Значение);
							
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
КонецФункции // ПроверкаПараметровНаКонтроле()

&НаСервере
Функция   ЗаписьВТаблицыСтатистикиИОтправкиУведомлений(Данные, ТекущаяДатаИВремя, уведомление, ТаблицаСтатистики, ПараметрыНаКонтроле)
	
	Если Данные.Свойство("Server") Тогда 
		Сервер =  Данные.Server;
	КонецЕсли;
	


	Для Каждого КлючИЗначение Из  Данные цикл
		
		Если	КлючИЗначение.ключ = ("FreeMegabytesHDD")	then
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить() ;
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FreeMegabytesHDD;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("PercentProcessorTime")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
			Если Уведомление =0 Тогда
			 
				СтрокаПараметрыНаКонтроле = ПараметрыНаКонтроле.Добавить();
				СтрокаПараметрыНаКонтроле.Сервер = Сервер;
				СтрокаПараметрыНаКонтроле.Период = ТекущаяДатаИВремя;
				СтрокаПараметрыНаКонтроле.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
				СтрокаПараметрыНаКонтроле.Значение = КлючИЗначение.Значение;
			 
			КонецЕсли;

		

			
		ИначеЕсли КлючИЗначение.ключ = ("NumberOfProcesses")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Processes;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("PercentAvaliableHDD")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.HDD_proc;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;

			Если Уведомление =0 Тогда
			 
				СтрокаПараметрыНаКонтроле = ПараметрыНаКонтроле.Добавить();
				СтрокаПараметрыНаКонтроле.Сервер = Сервер;
				СтрокаПараметрыНаКонтроле.Период = ТекущаяДатаИВремя;
				СтрокаПараметрыНаКонтроле.ТипРесурса =  Перечисления.ТипыРесурсовWMI_ат.HDD_proc;
				СтрокаПараметрыНаКонтроле.Значение = КлючИЗначение.Значение;
			 
			КонецЕсли;
			
		ИначеЕсли КлючИЗначение.ключ = ("PercentMEMUsing")		then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.RAM_proc;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
			Если Уведомление =0 Тогда
			 
				СтрокаПараметрыНаКонтроле = ПараметрыНаКонтроле.Добавить();
				СтрокаПараметрыНаКонтроле.Сервер = Сервер;
				СтрокаПараметрыНаКонтроле.Период = ТекущаяДатаИВремя;
				СтрокаПараметрыНаКонтроле.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.RAM_proc;
				СтрокаПараметрыНаКонтроле.Значение = КлючИЗначение.Значение;
			 
			КонецЕсли;


			
		ИначеЕсли КлючИЗначение.ключ = ("FreePhysicalMemory") then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FreePhysicalMemory;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("FreeMegabytesHDD")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FreeMegabytesHDD;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		# Область	SQL
			// SQL		
		ИначеЕсли КлючИЗначение.ключ = ("Static_SQLCompilations_sec")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Static_SQLCompilations_sec;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("StaticSQL_ReCompilations_sec")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.StaticSQL_ReCompilations_sec;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("Pagelifeexpectancy")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Pagelifeexpectancy;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("Buffercachehitratio")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Buffercachehitratio;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("PagereadsPersec")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.PagereadsPersec;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("LazywritesPersec")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.LazywritesPersec;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("IndexSearchesPersec")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.IndexSearchesPersec;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("LogFlushWaitTime")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.LogFlushWaitTime;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("LogFlushWaitsPersec")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.LogFlushWaitsPersec;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("CachePages")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.PlanCache_CachePages;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		ИначеЕсли КлючИЗначение.ключ = ("CacheHitRatio")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.PlanCache_percentSQLPlanCacheHitRation;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
		# КонецОбласти 	
		ИначеЕсли КлючИЗначение.ключ = ("Ошибка")	then 
			
			СтрокаТаблицы = ТаблицаСтатистики.Добавить();
			СтрокаТаблицы.Сервер = Сервер;
			СтрокаТаблицы.Период = ТекущаяДатаИВремя;
			СтрокаТаблицы.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FactConnection;
			СтрокаТаблицы.Значение = КлючИЗначение.Значение;
			
			Если Уведомление =0 Тогда
			 
				СтрокаПараметрыНаКонтроле = ПараметрыНаКонтроле.Добавить();
				СтрокаПараметрыНаКонтроле.Сервер = Сервер;
				СтрокаПараметрыНаКонтроле.Период = ТекущаяДатаИВремя;
				СтрокаПараметрыНаКонтроле.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FactConnection;
				СтрокаПараметрыНаКонтроле.Значение = КлючИЗначение.Значение;
			 
			КонецЕсли;

		КонецЕсли	;
		
	КонецЦикла;
	
КонецФункции

Функция   ДобавитьЗаписьВТаблицуУведомлений(Сервер, РезультатПроверки, СписокУведомленийНаОтправку,ТекущаяДатаИВремя,ТаблицаОтправкиУведомлений,ПричинаУведомления, Значение)
	
	Если РезультатПроверки и СписокУведомленийНаОтправку.Количество() > 0 Тогда
		
		Для Каждого сообщения Из СписокУведомленийНаОтправку цикл
			
			СтрокаТаблицыУведомлений						= ТаблицаОтправкиУведомлений.Добавить();
			СтрокаТаблицыУведомлений.Сервер 			= Сервер;
			СтрокаТаблицыУведомлений.Пользователь 	= сообщения.Пользователь;
			СтрокаТаблицыУведомлений.Тригер 			= ПричинаУведомления;
			СтрокаТаблицыУведомлений.ДатаУведомления= ТекущаяДатаИВремя;
			СтрокаТаблицыУведомлений.ЗначениеТригера	= Значение;
		КонецЦикла;
		
	Иначе	
			// ПричинаУведомления 							= Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи;
			//СтрокаТаблицыУведомлений						= ТаблицаОтправкиУведомлений.Добавить();
			//СтрокаТаблицыУведомлений.Сервер 			= Сервер;
			//СтрокаТаблицыУведомлений.Пользователь		= Неопределено;
			//СтрокаТаблицыУведомлений.Тригер				= ПричинаУведомления;
			//СтрокаТаблицыУведомлений.ДатаУведомления= ТекущаяДатаИВремя;
			//СтрокаТаблицыУведомлений.Период			= ТекущаяДатаИВремя;
			//СтрокаТаблицыУведомлений.ЗначениеТригера = Значение;

	КонецЕсли;
		


КонецФункции // ДобавитьЗаписьВТаблицуУведомлений()

Функция   ПолучениеСпискаУведомляемыхОСостоянииСервера(Сервер, ПричинаУведомления)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	СписокУведомляемыхОСтатусахСерверов_ат.Сервер,
		//|	СписокУведомляемыхОСтатусахСерверов_ат.Пользователь,
		//|	СписокУведомляемыхОСтатусахСерверов_ат.Параметр,
		|	СписокУведомляемыхОСтатусахСерверов_ат.Пользователь
		|Из
		|	РегистрСведений.СписокУведомляемыхОСтатусахСерверов_ат КАК СписокУведомляемыхОСтатусахСерверов_ат
		|ГДЕ
		|	(СписокУведомляемыхОСтатусахСерверов_ат.Сервер = &Сервер
		|			ИЛИ СписокУведомляемыхОСтатусахСерверов_ат.Сервер.Родитель = &Сервер)
		|	И СписокУведомляемыхОСтатусахСерверов_ат.Параметр = &Параметр";
	
	Запрос.УстановитьПараметр("Параметр", ПричинаУведомления);
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат  РезультатЗапроса.Выгрузить();
	
КонецФункции // ПолучениеСпискаУведомляемыхОСостоянииСервера()

&НаСервере
Функция   ПолучениеТекстаОписанияОшибки(Ошибка, Сервер)
	
	Если Ошибка 			= -1 Тогда
		ОписаниеОшибки = "Не в обработку СтатистикуWMI вместо ссылки на Сервер пришло не правильное значение ";
	ИначеЕсли Ошибка	= -2 Тогда
		ОписаниеОшибки = "не удалось получить параметры доступа к Серверу "+ Сервер.Наименование + " (логин и\или пароль)";
	ИначеЕсли Ошибка	= -3 Тогда
		ОписаниеОшибки = "У Сервера "+ Сервер.Наименование + " не указаны параметры сети! (не выбран основной IP)";
	ИначеЕсли Ошибка	= -4 Тогда
		ОписаниеОшибки = "У Сервера "+ Сервер.Наименование + " задан ОсновнойIP, но данные IP не верны!";
	ИначеЕсли Ошибка	= -5 Тогда
		ОписаниеОшибки = "У Сервера "+ Сервер.Наименование + " Логин и\или пароль указаны не полностью!";
	ИначеЕсли Ошибка	= -6 Тогда
		ОписаниеОшибки = "не удалось выполнить локальное подключение к Серверу "+ Сервер.Наименование + "!  ";
	ИначеЕсли Ошибка	= -7 Тогда
		ОписаниеОшибки = "не удалось выполнить сетевое подключение к Серверу "+ Сервер.Наименование + "!  ";
	ИначеЕсли Ошибка	= -8 Тогда
		ОписаниеОшибки = "При подключении к Серверу  "+ Сервер.Наименование + ", произошла ошибка во время получения данных!";
	ИначеЕсли Ошибка	= -9 Тогда
		ОписаниеОшибки = "не удалось выполнить сетевое подключение к Серверу "+ Сервер.Наименование + "!  ";
	ИначеЕсли Ошибка	= -10 Тогда
		ОписаниеОшибки = "отправка уведомлений глобально запрещена!";
	ИначеЕсли Ошибка	= -11 Тогда
		ОписаниеОшибки = "Для Сервера "+ Сервер.Наименование +" Параметры уведомлений не заполнены!";
	ИначеЕсли Ошибка	= -12 Тогда
		ОписаниеОшибки =  "У Сервера "+ Сервер.Наименование + " неправильно заполнен глобальный период уведомлений!"; 
	ИначеЕсли Ошибка	= -13 Тогда
		ОписаниеОшибки =  "У Сервера "+ Сервер.Наименование + " неправильно заполнен глобальный период уведомлений!";
	ИначеЕсли Ошибка	= -14 Тогда
		ОписаниеОшибки =  "У Сервера "+ Сервер.Наименование + " есть ошибки на этапе отправки уведомления!";
	ИначеЕсли Ошибка	= -15 Тогда
		ОписаниеОшибки =  "Ошибка связи с Сервером "+ Сервер.Наименование + " (запрос через zabbix)";
	ИначеЕсли Ошибка	= -16 Тогда
		ОписаниеОшибки =  "Нет данных о Сервере: "+ Сервер.Наименование + " (zabbix не собирает статистику для этого Сервера?)";
	ИначеЕсли Ошибка	= -17 Тогда
		ОписаниеОшибки =  "Данные не найден "+ " (zabbix не собирает статистику?, нет данных?)";

 


	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

&НаСервере
Функция   ПолучаемТемуПисьма(ПричинаУведомления, Сервер)
	
	Если 			ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи Тогда
		Тема = "Состояние вашего Сервера: Ошибка связи с Сервером " + Сервер.Hostname ;
	ИначеЕсли 	ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПроцессора Тогда
		Тема = "Состояние вашего Сервера: Критическая загрузка ПРОЦЕССОРА на Сервере: " + Сервер.Hostname ;
	ИначеЕсли 	ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПамяти Тогда
		Тема = "Состояние вашего Сервера: Критическая загрузка ПАМЯТИ на Сервере: " + Сервер.Hostname ;
	ИначеЕсли 	ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическомЗаполненииДискокойПодсистемы Тогда
		Тема = "Состояние вашего Сервера: Недостаточно места на ДИСКАХ на Сервере: " + Сервер.Hostname ;
	ИначеЕсли 	ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПроцессора Тогда
		Тема = "Состояние вашего Сервера: Высокая загрузка ПРОЦЕССОРА на Сервере: " + Сервер.Hostname ;
	ИначеЕсли 	ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПамяти Тогда
		Тема = "Состояние вашего Сервера: ПАМЯТЬ загружена больше порогового занения на Сервере: " + Сервер.Hostname ;
	ИначеЕсли 	ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОПороговомЗаполненииДисковойПодсистемы Тогда
		Тема = "Состояние вашего Сервера: Осталось мало свободного пространства на ДИСКАХ на Сервере: " + Сервер.Hostname ;
	КонецЕсли;
	
Возврат Тема;		
	
КонецФункции

&НаСервере
Функция   ПроверкаСообщенийИПолучениеСпискаУведомлений(Сервер, ДатаИВремя,
						ПараметрыУведомленийСервера, СписокУведомленийНаОтправку, 
						ПричинаУведомления, Ошибка = Неопределено, 
						ЗначениеПараметра = Неопределено)  Экспорт
																		
	// 																	
	Уведомлять = Константы.ВключитьРассылкуОПредельныхИКритическихЗначенияхСерверов.Получить();
	Если Уведомлять = Истина Тогда
		
		Если НЕ Ошибка = Неопределено Тогда 
			ТекстСообщения = ПолучениеТекстаОписанияОшибки(Ошибка,  Сервер);
		Иначе
			ТекстСообщения = "";
		КонецЕсли;
		СписокПользователей = ПолучениеСпискаУведомляемыхОСостоянииСервера(Сервер, ПричинаУведомления);
		
		Если СписокПользователей.Количество() > 0 Тогда
			
			ПериодичностьУведомлений = ПараметрыУведомленийСервера.ПериодичностьУведомленийГлобальная;
			
			СписокУведомленийНаОтправку = Новый Массив;
			
			Для Каждого строка Из СписокПользователей цикл
				
				СписокУведомлений = новый Структура;
				Запрос = Новый Запрос;
				
				Если ПричинаУведомления =  Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи Тогда
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СписокСерверныхУведомлений_ат.ДатаУведомления,
					|	СписокСерверныхУведомлений_ат.Тригер,
					|	СписокСерверныхУведомлений_ат.Пользователь,
					|	СписокСерверныхУведомлений_ат.Сервер,
					|	СписокСерверныхУведомлений_ат.ЗначениеТригера
					|Из
					|	РегистрСведений.СписокСерверныхУведомлений_ат КАК СписокСерверныхУведомлений_ат
					|ГДЕ
					|	СписокСерверныхУведомлений_ат.Пользователь = &Пользователь
					|	И СписокСерверныхУведомлений_ат.Тригер = &Тригер
					|	И СписокСерверныхУведомлений_ат.Сервер = &Сервер
					|	И СписокСерверныхУведомлений_ат.ДатаУведомления МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаИВремя, ЧАС, -&ПериодичностьУведомлений) И &ДатаИВремя
					|	И СписокСерверныхУведомлений_ат.ЗначениеТригера = &ЗначениеТригера";
					
					Запрос.УстановитьПараметр("ДатаИВремя", ДатаИВремя);
					Запрос.УстановитьПараметр("ПериодичностьУведомлений", ПериодичностьУведомлений);
					Запрос.УстановитьПараметр("Пользователь", Строка.Пользователь);
					Запрос.УстановитьПараметр("ЗначениеТригера", ЗначениеПараметра);
					Запрос.УстановитьПараметр("Сервер", Сервер);
					Запрос.УстановитьПараметр("Тригер", ПричинаУведомления);
					
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ РезультатЗапроса.Пустой() Тогда 
						
					Иначе 
						СписокУведомлений.Вставить("Сервер", Сервер);
						СписокУведомлений.Вставить("ДатаИВремя", ДатаИВремя);
						СписокУведомлений.Вставить("Пользователь", Строка.Пользователь);
						СписокУведомлений.Вставить("ПричинаУведомления", ПричинаУведомления);
						СписокУведомлений.Вставить("ТекстСообщения", ТекстСообщения);
						СписокУведомлений.Вставить("ЗначениеТригера", ЗначениеПараметра);
						СписокУведомленийНаОтправку.Добавить(СписокУведомлений);
					КонецЕсли;
					
				Иначе
					// не проверяем значение тригера 
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СписокСерверныхУведомлений_ат.ДатаУведомления,
					|	СписокСерверныхУведомлений_ат.Тригер,
					|	СписокСерверныхУведомлений_ат.Пользователь,
					|	СписокСерверныхУведомлений_ат.Сервер,
					|	СписокСерверныхУведомлений_ат.ЗначениеТригера
					|Из
					|	РегистрСведений.СписокСерверныхУведомлений_ат КАК СписокСерверныхУведомлений_ат
					|ГДЕ
					|	СписокСерверныхУведомлений_ат.Пользователь = &Пользователь
					|	И СписокСерверныхУведомлений_ат.Тригер = &Тригер
					|	И СписокСерверныхУведомлений_ат.Сервер = &Сервер
					|	И СписокСерверныхУведомлений_ат.ДатаУведомления МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаИВремя, ЧАС, -&ПериодичностьУведомлений) И &ДатаИВремя
					|	И СписокСерверныхУведомлений_ат.ЗначениеТригера >= &ЗначениеТригера";
					
					Запрос.УстановитьПараметр("ДатаИВремя", ДатаИВремя);
					Запрос.УстановитьПараметр("ПериодичностьУведомлений", ПериодичностьУведомлений);
					Запрос.УстановитьПараметр("Пользователь", Строка.Пользователь);
					
					Запрос.УстановитьПараметр("ЗначениеТригера", ЗначениеПараметра);
					
					Запрос.УстановитьПараметр("Сервер", Сервер);
					Запрос.УстановитьПараметр("Тригер", ПричинаУведомления);
					
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ РезультатЗапроса.Пустой() Тогда 
						
						//СписокУведомлений.Вставить("Сервер", Сервер);
						//СписокУведомлений.Вставить("ДатаИВремя", ДатаИВремя);
						//СписокУведомлений.Вставить("Пользователь", Строка.Пользователь);
						//СписокУведомлений.Вставить("ПричинаУведомления", ПричинаУведомления);
						//СписокУведомлений.Вставить("ТекстСообщения", ТекстСообщения);
						//СписокУведомлений.Вставить("ЗначениеТригера", ЗначениеПараметра);
						//СписокУведомленийНаОтправку.Добавить(СписокУведомлений);
						
					Иначе
						
						СписокУведомлений.Вставить("Сервер", Сервер);
						СписокУведомлений.Вставить("ДатаИВремя", ДатаИВремя);
						СписокУведомлений.Вставить("Пользователь", Строка.Пользователь);
						СписокУведомлений.Вставить("ПричинаУведомления", ПричинаУведомления);
						СписокУведомлений.Вставить("ТекстСообщения", ТекстСообщения);
						СписокУведомлений.Вставить("ЗначениеТригера", ЗначениеПараметра);
						СписокУведомленийНаОтправку.Добавить(СписокУведомлений);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		иначе
			Ошибка = -9;    //нет пользователей для отправки уведомлений
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Ошибка = -10;   	// отправка уведомлений глобально запрещена!
		Возврат ложь;
	КонецЕсли;
	Если СписокУведомлений.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;

	
КонецФункции

&НаСервере
Функция   ОтправкаУведомлений(ТекущаяДатаИВремя, Уведомление);
	
	ТемаПисьма = ПолучаемТемуПисьма(Уведомление.Тригер, Уведомление.Сервер);
	ТекстОшибки = "";
	
	Если Уведомление.Тригер = Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи Тогда 
		ТекстОшибки = ПолучениеТекстаОписанияОшибки(Уведомление.ЗначениеТригера, Уведомление.Сервер);
	КонецЕсли;
	
	ТекстПисьма = ПолучаемПолныйТекстУведомленияОСервере(
		ТекущаяДатаИВремя,
		Уведомление.Тригер,
		Уведомление.Сервер,
		Уведомление.ЗначениеТригера,
		ТекстОшибки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиКонтактнаяИнформация.АдресЭП КАК Адрес,
		|	ПользователиКонтактнаяИнформация.Представление
		|Из
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Пользователь
		|	И ПользователиКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователяДляУведомлений);
	Запрос.УстановитьПараметр("Пользователь", Уведомление.Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Ложь;
	Иначе
		ТаблицаАдресов = РезультатЗапроса.Выгрузить();
		//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументHTML = Взаимодействия.ПолучитьДокументHTMLИзОбычногоТекста(ТекстПисьма); 
		//ТаблицаАдресов = ПолучитьEmailПользователяДляУведомлений(Уведомление.Пользователь);
		
		СсылкаНаПисьмо = Уведомления_ат.СоздатьПисьмо(ДокументHTML, Уведомление.Сервер, ТемаПисьма, ТаблицаАдресов,,
			Ложь,,, Перечисления.ТипыУведомлений_ат.ВнутреннееТехническое);
		
		//КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПолучитьEmailПользователяДляУведомлений(Пользователь)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПользователиКонтактнаяИнформация.АдресЭП
		|Из
		|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|ГДЕ
		|	ПользователиКонтактнаяИнформация.Ссылка = &Пользователь
		|	И ПользователиКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailПользователяДляУведомлений);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат 	РезультатЗапроса.Выгрузить();
	КонецЕсли;
	

КонецФункции // ()

&НаСервере
Функция   ПолучаемПолныйТекстУведомленияОСервере(Дата, ПричинаУведомления, Сервер, ЗначениеПараметра, ДопТекстУведомлений) 
	
	Если ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи Тогда
		
		НеформатСообщение = ПредопределенноеЗначение("Справочник.СообщенияКонтроляСерверов_ат.СерверНеОтвечает").ТекстСлужебногоСообщения;
														
	ИначеЕсли  ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПроцессора Тогда
							
		НеформатСообщение = ПредопределенноеЗначение("Справочник.СообщенияКонтроляСерверов_ат.КритическаяНагрузкаCPU").ТекстСлужебногоСообщения;
							
	ИначеЕсли  ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПамяти Тогда
		
		НеформатСообщение = ПредопределенноеЗначение("Справочник.СообщенияКонтроляСерверов_ат.КритическаяНагрузкаRAM").ТекстСлужебногоСообщения;
							
	ИначеЕсли  ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическомЗаполненииДискокойПодсистемы Тогда
		
		НеформатСообщение = ПредопределенноеЗначение("Справочник.СообщенияКонтроляСерверов_ат.КритическаяНагрузкаHDD").ТекстСлужебногоСообщения;
							
	ИначеЕсли  ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПроцессора Тогда
		
		НеформатСообщение = ПредопределенноеЗначение("Справочник.СообщенияКонтроляСерверов_ат.ВысокаяНагрузкаCPU").ТекстСлужебногоСообщения;
							
	ИначеЕсли  ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПамяти Тогда
		
		НеформатСообщение = ПредопределенноеЗначение("Справочник.СообщенияКонтроляСерверов_ат.ВысокаяНагрузкаRAM").ТекстСлужебногоСообщения;
							
	ИначеЕсли  ПричинаУведомления = Перечисления.ПараметрыСерверов_ат.УведомлятьОПороговомЗаполненииДисковойПодсистемы Тогда

		НеформатСообщение = ПредопределенноеЗначение("Справочник.СообщенияКонтроляСерверов_ат.ВысокаяНагрузкаHDD").ТекстСлужебногоСообщения;
			
	КонецЕсли;
	ТекстУведомления1 = " данные актуальны на: " + Дата + Символы.ПС ;
	ТекстУведомления2 	= СтрЗаменить(СтрЗаменить(НеформатСообщение,"<&proc>", Строка( ЗначениеПараметра) + "%"),"<&Сервер>",  Сервер) + Символы.ПС;
	ТекстПисьма = ТекстУведомления1 + ТекстУведомления2 + ДопТекстУведомлений;
	Возврат ТекстПисьма;
			
КонецФункции

// на удаление  //
&НаСервере
Функция   ЗаполнениеСтатистики(Данные, ПараметрыУведомлений,ТекущаяДатаИВремя = Неопределено);
	Если ТекущаяДатаИВремя = Неопределено Тогда
		ТекущаяДатаИВремя = ТекущаяДата();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СведенияОСерверахПоWMI_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаИВремя);
	Сервер = Данные.Server;	
	
	Для Каждого Стр Из Данные цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись.Сервер = Сервер;
		Запись.Период = ТекущаяДатаИВремя;
		Если 		стр.Ключ 	= "PercentProcessorTime"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
		ИначеЕсли стр.Ключ	= "PercentMEMUsing"		Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.RAM_proc;
			//ИначеЕсли стр.Ключ	= "AvgDiskQueueLength"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.AvgDiskQueueLength;
			//ИначеЕсли стр.Ключ	= "DiskBytesPersec"		Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.DiskBytesPersec;
			//ИначеЕсли стр.Ключ	= "PercentFreeHDD" 		Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.HDD_proc;
		ИначеЕсли стр.Ключ	= "PercenAvaliableHDD" 		Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.HDD_proc;
		ИначеЕсли стр.Ключ	= "FreeMegabytesHDD"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FreeMegabytesHDD;
		ИначеЕсли стр.Ключ	= "FreePhysicalMemory"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FreePhysicalMemory;
		ИначеЕсли стр.Ключ	= "NumberOfProcesses"	Тогда Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Processes;
			
			// актуально только для статистки SQL-Серверов	
		ИначеЕсли стр.Ключ	= "Static_SQLCompilations_sec"		Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Static_SQLCompilations_sec;
		ИначеЕсли стр.Ключ	= "StaticSQL_ReCompilations_sec"	Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.StaticSQL_ReCompilations_sec;
		ИначеЕсли стр.Ключ	= "Pagelifeexpectancy"				Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Pagelifeexpectancy;
		ИначеЕсли стр.Ключ	= "Buffercachehitratio"				Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.Buffercachehitratio;
		ИначеЕсли стр.Ключ	= "PagereadsPersec"					Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.PagereadsPersec;
		ИначеЕсли стр.Ключ	= "LazywritesPersec"					Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.LazywritesPersec;
		ИначеЕсли стр.Ключ	= "IndexSearchesPersec"				Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.IndexSearchesPersec;
			//		ИначеЕсли стр.Ключ	= "FullScansPersec"					Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.FullScansPersec;
		ИначеЕсли стр.Ключ	= "LogFlushWaitTime"					Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.LogFlushWaitTime;
		ИначеЕсли стр.Ключ	= "LogFlushWaitsPersec"				Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.LogFlushWaitsPersec;
		ИначеЕсли стр.Ключ	= "CachePages"						Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.PlanCache_CachePages;
		ИначеЕсли стр.Ключ	= "CacheHitRatio"						Тогда  Запись.ТипРесурса = Перечисления.ТипыРесурсовWMI_ат.PlanCache_percentSQLPlanCacheHitRation;
		КонецЕсли;
		
		
		
		Запись.Значение = Стр.Значение;
	КонецЦикла;
	
	НаборЗаписей.Записать(ложь);
	
	
КонецФункции

// на удаление
&НаСервере
Функция   ЗаписьВСписокСлужебныхСообщений(Сервер,  Дата, Параметр, Значение, Критичность,Периодичность = 24) 
	Если Периодичность = 0 Тогда
		Сообщить(" не верно указан период уведомлений для Сервера " + Сервер, СтатусСообщения.ОченьВажное);
		Возврат -1;
	КонецЕсли;

КонецФункции

#КонецОбласти

&НаСервере

Функция   ПолучитьТекущийСервер()  Экспорт 
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСоединенияИнформационнойБазы(),";") ;
	Имя = Неопределено;
	
	Для Каждого строка Из МассивСтрок цикл
		
		если СтрНайти(Строка, "Srvr=", НаправлениеПоиска.СНачала) Тогда
			Имя =СтрЗаменить( СтрЗаменить(Строка,  "Srvr=", ""), Символ(34), "");
		КонецЕсли;
		
	КонецЦикла;
	Если НЕ Имя = Неопределено Тогда
		
		Сообщить(" ищем Сервер с HostName =  " + Имя);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Серверы_ат.Ссылка
		|Из
		|	Справочник.Серверы_ат КАК Серверы_ат
		|ГДЕ
		|	Серверы_ат.Hostname = &Hostname
		|	И Серверы_ат.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Hostname", Имя);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
				Возврат  ВыборкаДетальныеЗаписи.Ссылка;
				
			КонецЦикла;
			
		КонецЕсли;	
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область Вспомогательное

функция   ПолучениеПараметровУведомленийДляСервера(Сервер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыУведомленийОСерверах_ат.Сервер,
	|	ПараметрыУведомленийОСерверах_ат.Параметр,
	|	ПараметрыУведомленийОСерверах_ат.Значение
	|Из
	|	РегистрСведений.ПараметрыУведомленийОСерверах_ат КАК ПараметрыУведомленийОСерверах_ат
	|ГДЕ
	|	ПараметрыУведомленийОСерверах_ат.Сервер = &Сервер";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	СтруктураПараметров = новый Структура;
	//ПараметрыСервера = СтруктураНараметров.Вставить(
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Если ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи 
			Тогда СтруктураПараметров.Вставить("УведомлятьОбОтсутствииСвязи", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПроцессора 
			Тогда СтруктураПараметров.Вставить("УведомлятьОПредельнойЗагрузкеПроцессора", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПамяти 
			Тогда СтруктураПараметров.Вставить("УведомлятьОПредельнойЗагрузкеПамяти", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПороговомЗаполненииДисковойПодсистемы 
			Тогда СтруктураПараметров.Вставить("УведомлятьОПороговомЗаполненииДисковойПодсистемы", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПроцессора 
			Тогда СтруктураПараметров.Вставить("УведомлятьОКритическойЗагрузкеПроцессора", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПамяти 
			Тогда СтруктураПараметров.Вставить("УведомлятьОКритическойЗагрузкеПамяти", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическомЗаполненииДискокойПодсистемы
			Тогда СтруктураПараметров.Вставить("УведомлятьОКритическомЗаполенииДискокойПодсистемы", ВыборкаДетальныеЗаписи.Значение);
			
		//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОбОтсутствииСвязиССервером 
		//	Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийОбОтсутствииСвязиССервером", ВыборкаДетальныеЗаписи.Значение);
		//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеПроцессора 
		//	Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийОПредельнойЗагрузкеПроцессора", ВыборкаДетальныеЗаписи.Значение);
		//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеПамяти 
		//	Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийОПредельнойЗагрузкеПамяти", ВыборкаДетальныеЗаписи.Значение);
		//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеДиска 
		//	Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийОПредельнойЗагрузкеДиска ", ВыборкаДетальныеЗаписи.Значение); 
		//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеПроцессора 
		//	Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийОКретичнойЗагрузкеПроцессора", ВыборкаДетальныеЗаписи.Значение);
		//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеПамяти 
		//	Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийОКретичнойЗагрузкеПамяти", ВыборкаДетальныеЗаписи.Значение);
		//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеДисковойПодсистемы  
		//	Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийОКретичнойЗагрузкеДисковойПодсистемы ", ВыборкаДетальныеЗаписи.Значение);
		
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийГлобальная 
			Тогда СтруктураПараметров.Вставить("ПериодичностьУведомленийГлобальная", ВыборкаДетальныеЗаписи.Значение);

			
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаПроцессора 
			Тогда СтруктураПараметров.Вставить("ПороговаяЗагрузкаПроцессора", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаПамяти 
			Тогда СтруктураПараметров.Вставить("ПороговаяЗагрузкаПамяти", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаДисковойПодсистемы 
			Тогда СтруктураПараметров.Вставить("ПороговаяЗагрузкаДисковойПодсистемы", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПроцессора 
			Тогда СтруктураПараметров.Вставить("КритичнаяЗагрузкаПроцессора", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПамяти 
			Тогда СтруктураПараметров.Вставить("КритичнаяЗагрузкаПамяти", ВыборкаДетальныеЗаписи.Значение);
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаДисковойПодсистемы 
			Тогда СтруктураПараметров.Вставить("КритичнаяЗагрузкаДисковойПодсистемы", ВыборкаДетальныеЗаписи.Значение);
		КонецЕсли;
		
		// Предельная = Пороговая!!!
		// Пороговая
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
конецФункции

функция   ПроверкаПараметровПодключения(Сервер, ПараметрыПодключения, Локальный = Ложь)
	
	// проверяем является ли Сервер исполнения запроса текущим Сервером 1с
	
	// TODO: думается, не будет работать, если фоновое задание выполняется на удалённом Сервере кластера,
	// отличном от главного Сервера. Надо rphost искать, по уму..
	
	ИмяКластера = "";
	СтрСоединения = СтрокаСоединенияИнформационнойБазы();
	Если Лев(СтрСоединения, 5) = "Srvr=" Тогда
		ПозицияРазделителя = СтрНайти(СтрСоединения, ";");
        ИмяКластера = Сред(СтрокаСоединенияИнформационнойБазы(), 7, ПозицияРазделителя-8);
	КонецЕсли;
	
	Если ИмяКластера = Сервер Тогда
		Локальный = Истина;
	Иначе
		// если Сервере не является Сервером 1с Тогда проверяем все параметры
		
		///Доступ = ПолучитьПарольСервера(Сервер);
		Доступ = Справочники.Доступы_ат.ПолучитьАдминистративныеДоступыКОССервера(Сервер);
		
		Если Доступ = Неопределено Тогда
			
			Возврат -2; // не удалось получить параметры доступа к Серверу (логин и пароль)

		Иначе
			// проверяем указано ли для Сервера его адрес  
			Если НЕ ЗначениеЗаполнено(Сервер.ОсновнойIP) Тогда
				
				Возврат -3;    //"У Сервера не указаны параметры сети! ";
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(Сервер.ОсновнойIP.IP)  Тогда
					
					Возврат -4; // "критические параметры сети не запонены - IP"  
					
				Иначе
					Если НЕ ЗначениеЗаполнено(Доступ.Логин)
					 ИЛИ НЕ ЗначениеЗаполнено(Доступ.Пароль) Тогда
						
						Возврат -5; // Логин и пароль заполнены не полностью
						
					Иначе
						
						ПараметрыПодключения = Новый Структура;
						ПараметрыПодключения.Вставить("Сервер", Сервер);
						ПараметрыПодключения.Вставить("IP", 	Сервер.ОсновнойIP.IP);
						ПараметрыПодключения.Вставить("логин", 	Доступ.Логин);
						ПараметрыПодключения.Вставить("Пароль", Доступ.Пароль);
						
						Возврат 0;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция   ПолучитьЗначениеВПопытке(хОбъект, хРеквизит)
	
	Попытка
		Возврат хОбъект[хРеквизит]
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Функция   ПреобразоватьЗначениеВЧисло(Знач Значение)
	
	Попытка
		Возврат Число(Значение);
	Исключение
		Если ТипЗнч(Значение) = Тип("Null") Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат Значение;
	КонецПопытки;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция   ПолучитьРазмерЛокальнойПапки(ИмяПапки)
	//= Неопределено,					// папка на сетевом ресурсе, или полный путь к локальной папке
	//Сетевой = ложь,                               		// булево - сетевая или файловая
	////СерверРасположение = Неопределено, 	// Сервер с сетевым ресурсом 
	////ИмяСетевогоРесурса  = Неопределено     // Сетевой ресурс на Сервере
	//диск = неопределено							// 						
	//) Экспорт
	
//Если Сетевой = ложь Тогда
	FSO = Новый COMОбъект("Scripting.FileSystemObject");
	Folder = FSO.GetFolder(ИмяПапки);
	
	Сообщить("Имя папки: "		+Folder.Name);
	Сообщить("Тип папки: "		+Folder.Type);
	Сообщить("Папка "			+?(Folder.IsRootFolder=-1,"корневая","не корневая"));
	Сообщить("Расположена на диске: "	+Folder.Drive.Path);
	Сообщить("Родительская папка: "		+Folder.ParentFolder.Name);
	Сообщить("Полный путь до папки: "		+Folder.Path);
	Сообщить("Короткое имя папки: "		+Folder.ShortName);
	Сообщить("Короткий путь до папки: "	+Folder.ShortPath);
	Сообщить("Размер папки: "				+Формат(Folder.Size,"Ч( )15.2")+" байт");
	Сообщить("Дата создания папки: "		+Folder.DateCreated);
	Сообщить("Дата последнего доступа к папке: " + Folder.DateLastAccessed);
	Сообщить("Дата последнего изменения папки: " + Folder.DateLastModified);
	
	Возврат Folder.Size;
	
КонецФункции

	//Иначе
	// адская хрень - искать диск бесполезно, ибо Из-за какого-то кеширования диски накапливаются в 1с независимо от 
	// реального положения в системе - причина не ясна.
	// disk 	= ИщемСвободныйДиск(Неопределено);
	// временное решение - хардкодим букву диска
	
	//Если СерверРасположение = Неопределено Тогда
	//	Сообщить("не указан СреверРасположения, невозможно определить местоположение папки",СтатусСообщения.ОченьВажное);
	//	Возврат -1;
	//Иначе
	//	Если ИмяСетевогоРесурса = Неопределено Тогда
	//		Сообщить("не указан сетевой ресурс, невозможно определить местоположение папки",СтатусСообщения.ОченьВажное);
	//		Возврат -2;
		//Иначе
			
			//disk = "B:";
			//// в функцию передаем неопределено, так как ищем диски на Сервере 1с, а не Сервере с папкой диска
			//Доступ = ПолучитьПарольСервера(
			//					СерверРасположение,
			//					Перечисления.ВидыДоступа_ат.Администратор,
			//					Перечисления.ТипыПродуктов_ат.СерверMSWindows);
			//					
			////нужно если что-то пошло не так и диск оказался подмонтирован
			//ОтключитьСетевойДиск(disk);
			//
			//
			//АдресСервера = ОбщиеКоманды_ат.ПреобразоватьЧислоВТекстовыйIP(СерверРасположение.ОсновнойIP.IP);
			//СетевойДиск	= ПодключениеДиска(disk, ИмяСетевогоРесурса, доступ, АдресСервера);
			//
			//неуверен что это нужно ?
			
			#Область примеры2
			
			//Если ИмяПапки = Неопределено Тогда 
			//	ИмяПапки = "";	
			//КонецЕсли;
			
			// Метод 1) - стандартными средствами
			// обработка ниже вызывает падение серера!!! причина не ясна
			//FSO = Новый COMОбъект("Scripting.FileSystemObject");
			//Folder = FSO.GetFolder(disk);
			//Размер = Folder.Size;
			
			// Метод 2) - непосредственно через 1с-COMОбъект 		
			// обработка ниже вызывает падение серера!!! причина - ошибка 0x80070002
			// Предпологаю, что это таймер задержки  
			//Шелл		= Новый COMОбъект("WScript.Shell");
			//Команда    = "Set objFSO = CreateObject("+Символ(32)+ "Scripting.FileSystemObject"+Символ(32)+")" + Символы.ПС
			//			+ "Set objFolder = objFSO.GetFolder("+Символ(32)+ disk+Символ(32)+")"  + Символы.ПС
			//			+ "Wscript.Echo objFolder.Size";
			//				
			//Вывод		= Шелл.Run(команда,,-1);
			//Шелл		= Новый COMОбъект("WScript.Shell");  

			//ПутьКСкрипту	= Константы.ПутьКТемпVZ_ат.Получить();
			//ИмяСкрипта	= ПутьКСкрипту	+"ScriptSizeOfFolder_"+СтрЗаменить(диск,":","")+".vbs";
			//ИмяВывода	= ПутьКСкрипту	+"SizeOfFolder_"		+СтрЗаменить(диск,":","")+".txt";

			//стр1 = "Set objShell = CreateObject("+Символ(34)+ "Shell.Application"+Символ(34)+ ")";
			//стр2 = "Set objFSO = CreateObject("+Символ(34)+ "Scripting.FileSystemObject"+Символ(34)+")" ;
			//стр3 = "Set objFolder = objFSO.GetFolder("+Символ(34)+ диск+"\"+ИмяПапки+Символ(34)+")";
			//стр4 = "Wscript.Echo objFolder.Size";
			//стр5 = "Wscript.Quit";
			////Команда =		   стр1 + Символы.ПС
			////				+ стр2 + Символы.ПС
			////				+ стр3 + Символы.ПС
			////				+стр4;
			////Вывод		= Шелл.Run(команда,,-1);
			//
			//
			//
			//
			//// Метод 3) - через формирование файла скрипта и запуск через COM
			//	док 			= новый ТекстовыйДокумент();
			//	док.ДобавитьСтроку(стр1);
			//	док.ДобавитьСтроку(стр2);
			//	док.ДобавитьСтроку(стр3);
			//	док.ДобавитьСтроку(стр4);
			//	док.ДобавитьСтроку(стр5);
			//	док.Записать(ИмяСкрипта,"windows-1252");
			
			
		//	команда 		= ИмяСкрипта + " " + Символ(КодСимвола(">")) + " " +ИмяВывода;
		//	команда 		= "Cscript.exe " +Символ(34)+   ИмяСкрипта  + " " + Символ(КодСимвола(">")) + " " +ИмяВывода +Символ(34);
		//	команда 		= "Cscript.exe " + ИмяСкрипта  + " " + Символ(КодСимвола(">")) + " " +ИмяВывода;
			//Размер = Folder.Size ;
			//Попытка
			//	УдалитьФайлы(ПутьКСкрипту, док.ИспользуемоеИмяФайла);
			//	Сообщить("файлик с командой очищен!");
			//Исключение
			//	Сообщить(ОписаниеОшибки());
			//	Возврат ОписаниеОшибки();
			//КонецПопытки;
			
			//док = новый ТекстовыйДокумент();
			//док.ДобавитьСтроку("Set objFSO = CreateObject("+Символ(32)+ "Scripting.FileSystemObject"+Символ(32)+")");
			//док.ДобавитьСтроку("Set objFolder = objFSO.GetFolder("+Символ(32)+ disk+Символ(32)+")");
			
			//
			//Set objFSO = CreateObject("Scripting.FileSystemObject")
			//Set objFolder 	= objFSO.GetFolder("A:")
			////док.ДобавитьСтроку("EXIT");
			//
			//док.Записать(ИмяСкрипта,"windows-1252");
			//команда = ИмяСкрипта + " " + Символ(КодСимвола(">")) + " " +ИмяВывода;
			//
			
			//	СписокФайлов = НайтиФайлы(Путь, "*", Истина);
			//Шелл = Новый COMОбъект("WScript.Shell");
			//Вывод = Шелл.Run(команда,,-1);
			
			//Возврат Size;
			
			//логин 			= Неопределено;
			//пароль 			= Неопределено;
			//СтрокаСоздание	= "net use " + disk + ": " + Путь + " /user:"  + логин + " " + Символ(34)+ пароль + Символ(34);
			//СтрокаУдаления	= "net use " + disk + ": /delete /y";
			//
			////		док = новый ТекстовыйДокумент();
			////		док.ДобавитьСтроку(СтрокаСоздание);
			////		
			////		//док.ДобавитьСтроку("EXIT");
			////		
			////		док.Записать(ИмяСкрипта,"windows-1252");
			////		//команда = ИмяСкрипта + " " + Символ(КодСимвола(">")) + " " +ИмяВывода;
			////		
			////		// запуск команды
			////		// почему-то не ЗапуститьПриложение ??? 
			////		Шелл 	= Новый COMОбъект("WScript.Shell");
			//////		Вывод = Шелл.Run(команда,,-1);
			////		
			////		//Диск 	= ИщемСвободныйДиск(Сервер)
			
			
			//ОтключитьСетевойДиск(disk);

	
		//команда 		= "Cscript.exe " + ИмяСкрипта + " //nologo";

		//	Шелл			= Новый COMОбъект("WScript.Shell");
		//	Вывод			= Шелл.Exec(команда);
		//	СтрокиДанных = "";
		//		Пока Не Вывод.StdOut.AtEndOfStream Цикл
		//		СтрокиДанных = СтрокиДанных + Вывод.StdOut.Read(1);
		//		КонецЦикла;
		//	
		//	//FSO = Новый COMОбъект("Scripting.FileSystemObject");
		//	//Folder = FSO.GetFolder(ИмяПапки);
		//	
		//	Размер = Число(СтрокиДанных)/1024/1024;
		//	
		//	Попытка

		//	    УдалитьФайлы(ИмяСкрипта); 

		//	Исключение

		//	    Сообщить(ОписаниеОшибки());

		//	КонецПопытки;  
		//	Возврат Размер;
			
			
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
//КонецЕсли;
//

#КонецОбласти

функция   ИщемСвободныйДиск(Сервер);
	
	// здесь должен быть WMI запрос к Серверу 1с для поиска свободного диска
	
	//Данные = ПолучитьПарольСервера(Сервер, 
		//Перечисления.ТипыДоступа_ат.Администратор,
		//Перечисления.ТипыПродуктов_ат.СерверMSWindows);
	Доступ = Справочники.Доступы_ат.ПолучитьАдминистративныеДоступыКОССервера(Сервер);
	
	Если Доступ = Неопределено Тогда
		
		Возврат "";
		
	Иначе
		
		Serv = СоздатьПодключениеКWMI(Сервер, Доступ);
		
		Win32_Caption = Serv.ExecQuery("SELECT Caption FROM Win32_LogicalDisk");
		
		мДисков = Новый Массив;
		Для Каждого Значение Из Win32_Caption Цикл
			
			Caption = ПолучитьЗначениеВПопытке(значение, "Caption");
			мДисков.Добавить(Caption);
			
		КонецЦикла;
		
		СимволЧисло = КодСимвола(СтрЗаменить(мДисков[мДисков.Количество()-1], ":", ""));
		
		Возврат Символ(СимволЧисло+1) + ":";
		
	КонецЕсли;
	
КонецФункции

Функция   ОпределяемРазмерДанныхНаДиске(Сервер, Диск);
	
	// здесь должен быть WMI запрос к Серверу 1с для поиска свободного диска
	
	//Данные = ПолучитьПарольСервера(Сервер, 
		//Перечисления.ТипыДоступа_ат.Администратор,
		//Перечисления.ТипыПродуктов_ат.СерверMSWindows);
	Доступ = Справочники.Доступы_ат.ПолучитьАдминистративныеДоступыКОССервера(Сервер);
	
	Если Доступ = Неопределено Тогда
		
		Возврат -1;
		
	Иначе
		
		Serv = СоздатьПодключениеКWMI(Сервер, Доступ);
		
		Win32_Caption_size = Serv.ExecQuery("SELECT Caption, Size FROM Win32_LogicalDisk");
			
		мДисков = Новый Массив;
		Для Каждого Значение Из Win32_Caption_size Цикл
			
			Caption = ПолучитьЗначениеВПопытке(Значение, "Caption");
			Size = ПолучитьЗначениеВПопытке(Значение, "Size");
			
			Если Caption = Диск Тогда 
				Прервать;
			Иначе
				Size = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Size;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСИБ

&НаСервере
Процедура ОпределениеОбъемаИБ() Экспорт
	
	перем Ответ;
	
	СБиП = ПолучаемСписокБазИПараметры(); 
	
	SQLProvider = Неопределено;
	
	//ТаблицаБазИРазмеров = Новый ТаблицаЗначений;
	//ТаблицаБазИРазмеров.Колонки.Добавить("База",					,"База");
	//ТаблицаБазИРазмеров.Колонки.Добавить("СерверРазмещения",	,"СерверРазмещения");
	//ТаблицаБазИРазмеров.Колонки.Добавить("Размер",				,"Размер");
	//ТаблицаБазИРазмеров.Колонки.Добавить("КонтрагентВладелец",	,"КонтрагентВладелец");
	
	НаборЗаписей = РегистрыСведений.ОбъёмИБ_ат.СоздатьНаборЗаписей();
	
	Для Каждого Строка Из СБиП цикл
		
		Если Строка.ТипРоли = Перечисления.ТипыРолейСерверов_ат.Сервер1С Тогда
			
			ИмяБазы 			= Строка.ИмяИБНаSQL;
			СерверРазмещения	= Строка.СерверБД.СерверРазмещения.Ссылка;
			
			//ЛогинПароль = РаботаССерверами_ат.ПолучитьПарольСервера(
			//	СерверРазмещения,
			//	Перечисления.ТипыДоступа_ат.АдминистраторБД ,
			//	Перечисления.ТипыРолейСерверов_ат.СерверБД);
			Доступ = Справочники.Доступы_ат.ПолучитьДоступыКЭП(Строка.СерверБД, Перечисления.ТипыДоступа_ат.АдминистраторБД);
				
			Если Строка.СерверБД.ТекущийПродукт.ТипПродукта = Перечисления.ТипыПродуктов_ат.СерверMSSQL Тогда 
				
				SQLProvider = "SQLOLEDB";
				
				ТекстЗапроса = "SELECT
					//  |LTRIM(STR((CONVERT (dec (15,2),dbsize) + CONVERT(dec (15,2),logsize)) * 8192 / 1048576, 15, 2) + ' MB') РазмерБазы
						|LTRIM(STR((CONVERT (dec (15,2),dbsize) + CONVERT(dec (15,2),logsize)) * 8192 / 1048576, 15, 2) ) РазмерБазы
						|FROM
						|(
						|SELECT SUM(CONVERT(BIGINT,CASE WHEN status & 64 = 0 THEN size ELSE 0 END)) dbsize
						| , SUM(CONVERT(BIGINT,CASE WHEN status & 64 <> 0 THEN size ELSE 0 END)) logsize
						| FROM dbo.sysfiles
						|) big";
						
				//ЧислоОсновнойIP = Сервер.ОсновнойIP.IP;
				//ТекстIP 			= ОбщиеКоманды_ат.ПреобразоватьЧислоВТекстовыйIP(ЧислоОсновнойIP,".");
					
			ИначеЕсли Строка.СерверБД.ТекущийПродукт.ТипПродукта = Перечисления.ТипыПродуктов_ат.СерверPostgreSQL Тогда
				
				//ЧислоОсновнойIP = Сервер.ОсновнойIP.IP;
				//ТекстIP 			= ОбщиеКоманды_ат.ПреобразоватьЧислоВТекстовыйIP(ЧислоОсновнойIP,".");
				//Прервать;
				Продолжить;
				
			ИначеЕсли Строка.СерверБД.ТекущийПродукт.ТипПродукта = Перечисления.ТипыПродуктов_ат.СерверIBMDB2 Тогда
				
				Продолжить;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			//НоваяСтрока =  ТаблицаБазИРазмеров.Добавить();
			Если Доступ = Неопределено Тогда
				
				Продолжить;
				
			Иначе
				
				РезультатЗапросаКБазе = ВыполнитьЗапросКБД(
						ТекстЗапроса,		//собственно запрос на поиск размера базы
						СерверРазмещения,
						ИмяБазы,
						Доступ.Логин,
						Доступ.Пароль, 
						Ответ, 
						SQLProvider);
										
				//заполняем таблицу баз	
				НоваяСтрока = НаборЗаписей.Добавить();
				//НоваяСтрока.База 					= ИмяБазы;
				//НоваяСтрока.СерверРазмещения 		= СерверРазмещения;
				//НоваяСтрока.Размер 				= Ответ[0][0];
				//НоваяСтрока.КонтрагентВладелец 	= Строка.КлиентАрендатор;
				НоваяСтрока.Период 					= ТекущаяДата();
				НоваяСтрока.ЭкземплярПродукта		= Строка.Ссылка;
				//НоваяСтрока.СерверРазмещения 		= СерверРазмещения;
				
				Если Ответ = Неопределено Тогда
					НоваяСтрока.Объём 				= -1;
				Иначе
					НоваяСтрока.Объём 				= Число(Ответ[0][0]);
					Ответ = Неопределено;
					//НоваяСтрока.КонтрагентВладелец 	= Строка.КлиентАрендатор;
				КонецЕсли;
				
				//ЧислоОсновнойIP 	= СерверРазмещения.ОсновнойIP.IP;
				//ТекстIP 			= ОбщиеКоманды_ат.ПреобразоватьЧислоВТекстовыйIP(ЧислоОсновнойIP,".");
				//
				//НастройкиПодключения_SQL = SQL_at.sql_CreateConnection(ТекстIP, ИмяБазы, false, логин, пароль, SQLProvider);
				//ПодключениеК_SQL = SQL_at.sql_Connect(НастройкиПодключения_SQL);
				
			 КонецЕсли;
		Иначе
			
			ИмяБазы = Строка.ФайловыйКаталог; //!!!!!HOTFIX 
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(); 
	
КонецПроцедуры

Функция   ПолучаемСписокБазИПараметры() //!!!!!HOTFIX Экспорт
	
	ТипыРолиСервера = Новый Массив;
	ТипыРолиСервера.Добавить(Перечисления.ТипыРолейСерверов_ат.Сервер1С);
	ТипыРолиСервера.Добавить(Перечисления.ТипыРолейСерверов_ат.СерверФайловый);
	
	ТипПродукта = Перечисления.ТипыПродуктов_ат.Конфигурация1С;
	Запрос = Новый Запрос;
	Запрос.Текст = //!!!!!HOTFIX
		"ВЫБРАТЬ
		|	ЭкземплярыПродуктов_ат.Ссылка КАК Ссылка,
		|	ЭкземплярыПродуктов_ат.РольСервераРазмещения.ВидРолиСервера.ТипРолиСервера КАК ТипРоли,
		|	СпецификацияЭП_Конфигурация1С_ат.ДоступКСерверуБД КАК ДоступКСерверуБД,
		|	СпецификацияЭП_Конфигурация1С_ат.СерверБД КАК СерверБД,
		|	СпецификацияЭП_Конфигурация1С_ат.ИмяИБНаSQL КАК ИмяИБНаSQL,
		|	СпецификацияЭП_Конфигурация1С_ат.ФайловыйКаталог КАК ФайловыйКаталог
		|ИЗ
		|	Справочник.ЭкземплярыПродуктов_ат КАК ЭкземплярыПродуктов_ат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияЭП_Конфигурация1С_ат КАК СпецификацияЭП_Конфигурация1С_ат
		|		ПО ЭкземплярыПродуктов_ат.Ссылка = СпецификацияЭП_Конфигурация1С_ат.ЭкземплярПродукта
		|ГДЕ
		|	ЭкземплярыПродуктов_ат.ТекущийПродукт.ТипПродукта = &ТипПродукта
		|	И ЭкземплярыПродуктов_ат.РольСервераРазмещения.ВидРолиСервера.ТипРолиСервера В(&ТипыРолиСервера)";
		
	Запрос.УстановитьПараметр("ТипПродукта", ТипПродукта);
	Запрос.УстановитьПараметр("ТипыРолиСервера", ТипыРолиСервера);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВДЗ = РезультатЗапроса.Выбрать();
	//
	//Пока ВДЗ.Следующий() Цикл
	//	
	//	Если		 ВДЗ.ТипРоли = Перечисления.ТипыРолейСерверов_ат.Сервер1С Тогда
	//		
	//		Если ЗначениеЗаполнено(ВДЗ.ДоступКСерверуБД) Тогда
	//			
	//			
	//		Иначе
	//						
	//		КонецЕсли;
	//		
	//	ИначеЕсли ВДЗ.ТипРоли =  Перечисления.ТипыРолейСерверов_ат.СерверФайловый Тогда
	//		
	//		
	//		
	//	Иначе
	//		
	//	КонецЕсли;
	//	
	//		
	//	
	//КонецЦикла;
	//
	Возврат ВДЗ;
	
КонецФункции // ПолучаемСписокБазИПараметры()

&НаСервере
Функция   ВыполнитьЗапросКБД(ТекстЗапроса, СерверРазмещения, ИмяБазы, Логин, Пароль, Ответ, sqlProvider) Экспорт
	
	Перем РезультатСоединения;
	Перем ВиртуальнаяТаблица;	
	
	IPtext = РаботаССерверамиСлужебный_ат.ПреобразоватьЧислоВТекстовыйIP(СерверРазмещения.ОсновнойIP.IP);
	РезультатСоединения = SQL_ат.sql_CreateConnection(IPtext, ИмяБазы, ложь, Логин, Пароль, sqlProvider);
	СтатусСоединения = SQL_ат.sql_Connect(РезультатСоединения);
	
	
	//СтатусСоединения	= ПодключениеКБД(СерверРазмещения,ИмяБазы,Логин,Пароль,РезультатСоединения);
	//
	//Если Ответ = Неопределено Тогда
	//Иначе
	//	Ответ.Очистить();
	//КонецЕсли;
	
	
	Если  СтатусСоединения Тогда
		Сообщить("соединение с базой "+ ИмяБазы+" установлено!" );
		
		//РезультатВыполненияЗапроса 	= SQL_at.sql_Execute(РезультатСоединения,ТекстЗапроса,false);
		РезультатВыполненияЗапроса = SQL_ат.sql_GetQueryResult(РезультатСоединения,ТекстЗапроса,Ответ);
		
		Сообщить("запрос выполнен");
		
		
		Если РезультатВыполненияЗапроса Тогда
			//SQL_at.sql_QueryProcessing(РезультатСоединения,
			
			РезультатЗакрытияСоединения 	= SQL_ат.sql_Close(РезультатСоединения);
			Сообщить("соединение с базой закрыто!");
		КонецЕсли;
		
	Иначе
		Сообщить("не удалось установить соединение с базой!");
		РезультатЗапроса = Неопределено;
	КонецЕсли;
	
	//Возврат ВиртуальнаяТаблица[0][0];	
	 Возврат РезультатВыполненияЗапроса;
КонецФункции // ВыполнитьЗапросКБД()

// Подключает сетевую "шару" как диск, задача выполняется в фоне и долго (от 2-х до 30 сек).
// так-что после нее должна быть некая задержка
//
// Параметры:
//  БукваДиска  - строка - строка Из нескольких символов с именем диска и двоеточием
//                 пример: "B:" 
//
//  СетевойРесурс  - строка - ИмяСетевойШары, НЕ ПАПКИ!!!
//  
//  СерверРасположение - ссылка на Сервер
//
//  IP - текст - строка с ip-адресом
//				пример: "192.168.0.1"
// Возвращаемое значение:
//   булево  - Возврат ошибки параметров, если параметры заполнены - Истина, иначе ложь
//				однако, наличие всех параметров не гарантирует результат, после оперсции требуется проверка. 
// 				с учетом задержки. (WMI обновляется раз в 30 сек - и ВРЕТ безмерно)
&НаСервере
Функция   ПодключениеДиска(БукваДиска, СетевойРесурс, СерверРасположение, Доступ, IP) Экспорт
	
	Если СерверРасположение =  Неопределено или БукваДиска =  Неопределено или СетевойРесурс =  Неопределено или IP = неопределено Тогда
		
		Возврат ложь;
		
	Иначе
		
		//Доступ = ПолучитьПарольСервера(
		//	СерверРасположение,
		//	Перечисления.ВидыДоступа_ат.Администратор,
		//	Перечисления.ТипыПродуктов_ат.СерверMSWindows);
		
		ПутьКПапке 	= "\\" + ip + "\"+ СетевойРесурс;
		Логин 	= Доступ.Логин;
		Пароль 	= Доступ.Пароль;
		//WshNetwork 	= Новый COMОбъект("WScript.Network");
		//
		//СетевойДиск = WshNetwork.MapNetworkDrive(БукваДиска, ПутьКПапке, Ложь, Логин, Пароль);
		команда = "Net use " + БукваДиска + " "+ ПутьКПапке + " " + "/user:"+Логин + " " + Символ(34) + Пароль + Символ(34) ; 
		//Шелл = Новый COMОбъект("WScript.Shell");
		//Вывод = Шелл.Run(команда,,-1);
		//Сообщить(Вывод);
		//
		//net = Новый COMОбъект("WScript.Network");
		net = Новый COMОбъект("WScript.Shell");
		
		Попытка
			//Вывод = net.MapNetworkDrive(БукваДиска, ПутьКПапке, Истина, Логин, Пароль);
			Вывод = net.Run(Команда,, -1);
		Исключение 
		     Возврат ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция   ОтключитьСетевойДиск(БукваДиска) Экспорт
	Попытка
		//Команда = "cmd " + Символ(47)+ "C cls|" + "Net use " + БукваДиска + " /delete /yes > " + Константы.ПутьКТемпVZ_ат.Получить() + "dizable.txt";
		//Шелл = Новый COMОбъект("WScript.Shell");
		
		//Вывод = Шелл.Run(команда,0,-1);
		Net = новый COMОбъект("WScript.Network");
		вывод = Net.RemoveNetworkDrive(БукваДиска,Истина);
	Исключение
	КонецПопытки;
	
	Возврат   Вывод;
КонецФункции

&НаСервере
Функция   СоздатьПодключениеКWMI(ПараметрыПодключения, Сокет = Неопределено, Локальный = ложь)
	
	Попытка 	
		Если Локальный Тогда
			
			команда 			= "winmgmts:\\.\root\cimv2";
			Ошибка			=  -6; // ошибка локального подключения
			Сокет	 			=  ПолучитьCOMОбъект(команда); 
			
		Иначе
			
			Ошибка			= -7; // ошибка сетевого подключения	
			WinMGMT 			= новый COMОбъект("WBemScripting.SWbemLocator");
			ЧислоОсновнойIP = ПараметрыПодключения.IP;
			ТекстIP 			= РаботаССерверамиСлужебный_ат.ПреобразоватьЧислоВТекстовыйIP(ЧислоОсновнойIP,".");
			Сокет 				= WinMGMT.ConnectServer( СтрЗаменить(ТекстIP, " ", ""),"root\cimv2",ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль);
				
		КонецЕсли;
		
	Исключение
		Возврат Ошибка;
		
	КонецПопытки;
	
Возврат 	0;

КонецФункции // СоздатьПодключениеКWMI()

&НаСервере
Функция   ПолучитьСписокВсехСетевыхДисков(Сервер) Экспорт
	
	СписокДисков = Новый Массив;
	
	Если Сервер = Неопределено Тогда 
		
		FSO = Новый COMОбъект("Scripting.FileSystemObject"); 
		
		Для Каждого Диск Из FSO.Drives Цикл
			// Диск.DriveLetter - буква диска
			Стр = Диск.DriveLetter;
			// Диск.DriveType = 1 - Flash накопитель
			// Диск.DriveType = 2 - Локальный жесткий диск
			// Диск.DriveType = 3 - Сетевой диск
			// Диск.DriveType = 4 - CD/DVD дисковод
			
			Если Диск.DriveType = 3 Тогда  // если это сетевой диск, то укажем сетевой путь
				
				Стр = Стр + " - " + Диск.ShareName;
				
				Если Диск.IsReady Тогда
					Стр = Стр + " - " + Диск.VolumeName;
				Иначе
					Стр = Стр + " - [Диск не найден]";
				КонецЕсли;
				
				СписокДисков.Добавить(Стр);
				
			КонецЕсли;
			
		КонецЦикла;  
		
		
	Иначе	
		
		//Данные = ПолучитьПарольСервера(Сервер, 
			//Перечисления.ТипыДоступа_ат.Администратор,
			//Перечисления.ТипыПродуктов_ат.СерверMSWindows);
		Доступ = Справочники.Доступы_ат.ПолучитьАдминистративныеДоступыКОССервера(Сервер);
		
		Если Доступ <> Неопределено Тогда
			
			Serv = СоздатьПодключениеКWMI(Сервер, Доступ);
			
			Win32_Caption = Serv.ExecQuery( "SELECT"
			+ " Caption,"
			+ " DriveType"
			+ " 	FROM Win32_LogicalDisk");
			СписокДисков = Новый Массив;
			Для Каждого элемент Из Win32_Caption Цикл 
				
				Диск 		= ПолучитьЗначениеВПопытке(элемент, "Caption");
				ТипДиска 	= ПолучитьЗначениеВПопытке(элемент, "DriveType");
				
				Если Число(ТипДиска) = 4 Тогда               //у сетевых дисков тип 4, у обычных 3, у съемных 5
					СписокДисков.Добавить(Диск);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат  СписокДисков;
	
КонецФункции // ПолучитьСписокВсехСетевыхДисков()

//&НаСервере
//функция ЗаписываемСоединениеВХранилище(РезультатСоединения, УИД)  Экспорт 

//	АдресВХранилище = ПоместитьВоВременноеХранилище(РезультатСоединения);	
//	Возврат АдресВХранилище;
//	
//КонецФункции

//&НаСервере
//Функция ПодключениеКБД(СерверРазмещения,ИмяБазы,Логин,Пароль, РезультатСоединения) Экспорт
//	
//	IPtext 						=  ОбщиеКоманды_ат.ПреобразоватьЧислоВТекстовыйIP(СерверРазмещения.ОсновнойIP.IP);
//	РезультатСоединения		= SQL_at.sql_CreateConnection(IPtext,ИмяБазы, ложь, Логин,Пароль);
//	СтатусСоединения 		= SQL_at.sql_Connect(РезультатСоединения);
//	
//	
//	//Если СтатусСоединения Тогда
//	//	
//	//	АдресВХранилище = ПоместитьВоВременноеХранилище(РезультатСоединения);

//	//КонецЕсли;
//	
//	Возврат СтатусСоединения;
//	
//КонецФункции //ПодключениеКБД

//&НаСервере
//Функция ЗакрытьСоединениеКИБ(РезультатСоединения)

//	SQL_at.sql_Close(РезультатСоединения);

//КонецФункции // ЗакрытьСоединениеКИБ()

#КонецОбласти

&НаСервере
Процедура ЗаполнениеРегистраОбъёмФайловыхПапок() Экспорт
	
	Диск = "T:";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФайловыеКаталоги_ат.Ссылка КАК Каталог,
	|	ФайловыеКаталоги_ат.Сервер,
	|	ФайловыеКаталоги_ат.ОтносительныйПуть,
	|	ФайловыеКаталоги_ат.ПометкаУдаления,
	|	ФайловыеКаталоги_ат.СетеваяПапка
	|Из
	|	Справочник.ФайловыеКаталоги_ат КАК ФайловыеКаталоги_ат
	|ГДЕ
	|	НЕ ФайловыеКаталоги_ат.ПометкаУдаления
	|	И ФайловыеКаталоги_ат.ВидФайловогоКаталога.ТипФайловогоКаталога В(&ТипФайловогоКаталога)
	|	И НЕ ФайловыеКаталоги_ат.Сервер.ПометкаУдаления
	|	И НЕ ФайловыеКаталоги_ат.Сервер.Чужой";
	
	СписокТиповКаталога = новый Массив;
	СписокТиповКаталога.Добавить(Перечисления.ТипыФайловогоКаталога_ат.ДокументыПользователей);
	СписокТиповКаталога.Добавить(Перечисления.ТипыФайловогоКаталога_ат.ИнформационныеБазы1С);
	Запрос.УстановитьПараметр("ТипФайловогоКаталога", СписокТиповКаталога);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	НаборЗаписей = РегистрыСведений.ОбъёмФайловыхКаталогов_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//НаборЗаписей.Отбор.Сервер.Установить(ВыборкаДетальныеЗаписи.Сервер);
		//НаборЗаписей.Отбор.СетевойКаталог.Установить(ВыборкаДетальныеЗаписи.Каталог);
		//НаборЗаписей.Отбор.ОтносительныйПуть.Установить(ВыборкаДетальныеЗаписи.ОтносительныйПуть);
		
		//Доступ = ПолучитьПарольСервера(
			//	ВыборкаДетальныеЗаписи.Сервер,
			//	Перечисления.ТипыДоступа_ат.Администратор,
			//	Перечисления.ТипыРолейСерверов_ат.СерверФайловый);
		Доступ = Справочники.Доступы_ат.ПолучитьАдминистративныеДоступыКОССервера(ВыборкаДетальныеЗаписи.Сервер);
		
		Если Доступ = Неопределено Тогда
				
			ДанныеДляЗаписи = НаборЗаписей.Добавить();
			ДанныеДляЗаписи.Сервер = ВыборкаДетальныеЗаписи.Сервер;
			ДанныеДляЗаписи.СетевойКаталог = ВыборкаДетальныеЗаписи.Каталог;
			//ДанныеДляЗаписи.ОтносительныйПуть = ВыборкаДетальныеЗаписи.ОтносительныйПуть;
			ДанныеДляЗаписи.Период = ТекущаяДата();
			ДанныеДляЗаписи.Размер = -1;
			ДанныеДляЗаписи.Ошибка = "Не найдена запись с сответствующим Доступом к Серверу";
			
		Иначе 
			ОтключитьСетевойДиск(Диск);
			
			РезПД = ПодключениеДиска(
				Диск,
				ВыборкаДетальныеЗаписи.СетеваяПапка, 
				ВыборкаДетальныеЗаписи.Сервер,
				Доступ,
				РаботаССерверамиСлужебный_ат.ПреобразоватьЧислоВТекстовыйIP(ВыборкаДетальныеЗаписи.Сервер.ОсновнойIP.IP));
				
			Если НЕ РезПД Тогда
					
				ДанныеДляЗаписи = НаборЗаписей.Добавить();
				ДанныеДляЗаписи.Сервер = ВыборкаДетальныеЗаписи.Сервер;
				ДанныеДляЗаписи.СетевойКаталог = ВыборкаДетальныеЗаписи.Каталог;
				//ДанныеДляЗаписи.ОтносительныйПуть = ВыборкаДетальныеЗаписи.ОтносительныйПуть;
				ДанныеДляЗаписи.Период = ТекущаяДата();
				ДанныеДляЗаписи.размер = -2;
				ДанныеДляЗаписи.Ошибка = "Не удалось подключиться к сетевой папке";
				
			Иначе
				
				ВремяОжидания = ТекущаяДата() + 5; // 5 секунд
				Пока ТекущаяДата() < ВремяОжидания Цикл
					// ждемссс....
				КонецЦикла;
				
				РазмерПапки = ПолучитьРазмерСетевойПапки(Диск, ВыборкаДетальныеЗаписи.ОтносительныйПуть);
				//РазмерПапки = ПолучитьРазмерЛокальнойПапки(Диск+"\"+ВыборкаДетальныеЗаписи.ОтносительныйПуть);
				//РазмерПапки = Неопределено;
				ОтключитьСетевойДиск(Диск);
				
				ДанныеДляЗаписи = НаборЗаписей.Добавить();
				ДанныеДляЗаписи.Сервер = ВыборкаДетальныеЗаписи.Сервер;
				ДанныеДляЗаписи.СетевойКаталог = ВыборкаДетальныеЗаписи.Каталог;
				//ДанныеДляЗаписи.ОтносительныйПуть = ВыборкаДетальныеЗаписи.ОтносительныйПуть;
				ДанныеДляЗаписи.Период = ТекущаяДата();
				Если РазмерПапки=Неопределено Тогда
					ДанныеДляЗаписи.размер = -3;
					ДанныеДляЗаписи.Ошибка = "не удалось получить размер папки";
				Иначе
					ДанныеДляЗаписи.размер = РазмерПапки;
					ДанныеДляЗаписи.Ошибка = "";
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция   ПолучитьРазмерСетевойПапки(Диск,ОтносительныйПуть) Экспорт
	// формируем скрипт для получения размера папки
	ПутьКСкрипту	= Константы.ПутьКТемпVZ_ат.Получить();
	ИмяСкрипта	= ПутьКСкрипту	+"ScriptSizeOfFolder_"+СтрЗаменить(диск,":","")+".bat";
	ИмяВывода	= ПутьКСкрипту	+"SizeOfFolder_"		+СтрЗаменить(диск,":","")+".txt";
# Область old 	
	//стр1 = "Set objShell  = CreateObject("		+Символ(34)+ "Shell.Application"					+Символ(34)+")";
	//стр2 = "Set objFSO   = CreateObject("		+Символ(34)+ "Scripting.FileSystemObject"		+Символ(34)+")" ;
	//стр3 = "Set objFolder = objFSO.GetFolder("	+Символ(34)+ диск+"\"+ОтносительныйПуть	+Символ(34)+")";

	//
	//	//	Set fso = CreateObject("Scripting.FileSystemObject") 
	//	//	Set Outfile = fso.OpenTextFile("C:\TEST\test.txt", 2, true)
	//стр6 = "Set fso = CreateObject("  			+Символ(34)+	"Scripting.FileSystemObject"		+Символ(34)+")";
	//стр7 = "Set Outfile = fso.OpenTextFile("		+Символ(34)+	ИмяВывода	+Символ(34)		+ ", 2, true)";
	//	//	1 - файл открывается только для чтения;
	//	//	2 - файл открывается для записи. Причем, все содержимое файла, которое было до этого, уничтожится;
	//	//	8 - файл открывается для добавления данных. Все, что вы запишите, будет добавлено в конец файла. Довольно удобно для ведения различных логов.
	//	
	//	// пример записи
	//	// file.Write("Hello, World!");
	//	// file.WriteBlankLines(2);
	//	// file.WriteLine("Hello");
	//
	////стр4 = "Wscript.Echo objFolder.Size";      // вывод на экран отменяем
	//стр8 = "Outfile.WriteLine(objFolder.Size)";
	//стр9 = "Outfile.Close";
	//стр5 = "Wscript.Quit";
# КонецОбласти
стр1 = "@Echo Off";
стр2 = "SetLocal enabledelayedexpansion";
стр3 = "Set DirProg="+ Диск+"\" + ОтносительныйПуть;
стр4 = "For /F " + Символ(34) + "skip=4 tokens=1-3" + Символ(34) + " %%a IN ('Dir "  + Символ(34) + 
		"%DirProg%"  + Символ(34) + " /-C /S /A:-D^|find /I "  + Символ(34) + "файлов"  + Символ(34) + 
		"') Do (";
стр5 = "	If !flag!==1 Set dirsize=%%c";
стр6 = "    If "  + Символ(34) + "%%b"  + Символ(34) + "=="  + Символ(34) + "файлов:"  + Символ(34) + " (Set flag=1) Else (Set flag=0)";
стр7 = "    set filecnt=%%a )" ;
стр8 = "Echo Размер папки      = !dirsize!";
стр9 = "Echo Количество файлов = !filecnt!";            //нужно для контроля, если будут расхождения

	док = новый ТекстовыйДокумент();
	док.ДобавитьСтроку(стр1);
	док.ДобавитьСтроку(стр2);
	док.ДобавитьСтроку(стр3);
	док.ДобавитьСтроку(стр4);
	док.ДобавитьСтроку(стр5);
	док.ДобавитьСтроку(стр6);
	док.ДобавитьСтроку(стр7);
	док.ДобавитьСтроку(стр8);
	док.ДобавитьСтроку(стр9);

	//док.Записать(ИмяСкрипта,"windows-1252");
	док.Записать(ИмяСкрипта, КодировкаТекста.OEM);
	
//	команда0		= "Cscript.exe " + ИмяСкрипта + " //nologo";
//	команда1 		= "cmd.exe "+ символ(47) + "С cls| "+команда0;		
	//команда 		= "cmd.exe "+ символ(47) + "С cls| "+ИмяСкрипта + " > " + ИмяВывода;
	команда 		= ИмяСкрипта + " > " + ИмяВывода;

	КодОшибки 	= Неопределено;
//	Шелл			= Новый COMОбъект("WScript.Shell");
	ЗапуститьПриложение(команда, ,Истина, КодОшибки);	
//	Вывод 			= Шелл.Run(команда,,-1);
//	Вывод			= Шелл.Exec(команда1);
//	Вывод			= Шелл.Exec(команда0);
//	Вывод			= Шелл.Exec(ИмяСкрипта);
//	Вывод 			= Шелл.Run(ИмяСкрипта,,-1);


	//СтрокиДанных = "";
	//Пока Не Вывод.StdOut.AtEndOfStream Цикл
	//	СтрокиДанных = СтрокиДанных + Вывод.StdOut.Read(1);
	//КонецЦикла;
	
	//Попытка
	//	Размер =Число(СтрокиДанных)/1024/1024;  //переводим размер из байт в Мегабайты
	//Исключение
	//	Размер = Неопределено;
	//КонецПопытки;

	Попытка
		УдалитьФайлы(ИмяСкрипта); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	
	Если не КодОшибки = 0 Тогда
	
		Возврат Неопределено;
	Иначе
		
		ТекДок	= Новый ТекстовыйДокумент;
		ТекДок.Прочитать(ИмяВывода,КодировкаТекста.OEM, Символы.ПС);
		КолСтрок	= ТекДок.КоличествоСтрок();
		ТекстДокумента = ТекДок.ПолучитьСтроку(1);
		МассивСтроки = РаботаССерверамиСлужебный_ат.РазложитьСтрокуВМассивПодстрок(ТекстДокумента, "=");
		Попытка 
			RAWРазмер = число(МассивСтроки[1]);
			Размер = Окр(RAWРазмер /1024/1024,2,РежимОкругления.Окр15как20);	
		Исключение
		     Размер = Неопределено;
		КонецПопытки;
		 
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяВывода); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	Возврат Размер;
КонецФункции

Процедура ЗадатьПараметрыТаблиц(ТаблицаСтатистики, ПараметрыНаКонтроле, ТаблицаОтправкиУведомлений)
	
	КЧ = Новый КвалификаторыЧисла(12,2);
	КС = Новый КвалификаторыСтроки(256,ДопустимаяДлина.Переменная);
    МассивТиповДанных = Новый Массив;
	МассивТиповДанных.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(МассивТиповДанных, , ,КЧ);
	МассивТиповДанных = Новый Массив;
	МассивТиповДанных.Добавить(Тип("Строка"));
	МассивТиповДанных.Добавить(Тип("Число"));

	ОписаниеТиповСЧ = Новый ОписаниеТипов(МассивТиповДанных,,,КЧ,КС);
	
	ТаблицаСтатистики 	= 				Новый ТаблицаЗначений;
	ПараметрыНаКонтроле = 				Новый ТаблицаЗначений;
    ТаблицаОтправкиУведомлений = 	Новый ТаблицаЗначений;
	
	
	ТаблицаСтатистики = Новый ТаблицаЗначений;
	ТаблицаСтатистики.Колонки.Добавить("Сервер", 		,"Сервер");
	ТаблицаСтатистики.Колонки.Добавить("ТипРесурса", ,"Тип Ресурса");
	ТаблицаСтатистики.Колонки.Добавить("Значение",ОписаниеТиповСЧ,"Значение Ресурса");
	ТаблицаСтатистики.Колонки.Добавить("Период", 		,"ДатаИВремя");
	ТаблицаСтатистики.Колонки.Добавить("Дополнительно", 		,"Дополнительно");

	ПараметрыНаКонтроле = Новый ТаблицаЗначений;
	ПараметрыНаКонтроле.Колонки.Добавить("Сервер", 		,"Сервер");
	ПараметрыНаКонтроле.Колонки.Добавить("ТипРесурса", ,"Тип Ресурса");
	ПараметрыНаКонтроле.Колонки.Добавить("Значение", ОписаниеТиповЧ	,"Значение Ресурса");
	ПараметрыНаКонтроле.Колонки.Добавить("Период", 		,"ДатаИВремя");
	ПараметрыНаКонтроле.Колонки.Добавить("Дополнительно", 		,"Дополнительно");

	
	ТаблицаОтправкиУведомлений = Новый ТаблицаЗначений;
	ТаблицаОтправкиУведомлений.Колонки.Добавить("Сервер",				,"Сервер");
	ТаблицаОтправкиУведомлений.Колонки.Добавить("Пользователь", 		,"Пользователь");
	ТаблицаОтправкиУведомлений.Колонки.Добавить("Тригер",				,"Тригер");
	ТаблицаОтправкиУведомлений.Колонки.Добавить("ДатаУведомления",	,"ДатаУведомления");
	ТаблицаОтправкиУведомлений.Колонки.Добавить("ЗначениеТригера",ОписаниеТиповЧ	,"ЗначениеТригера");
	ТаблицаОтправкиУведомлений.Колонки.Добавить("Период", 		,"ДатаУведомления");
	ТаблицаОтправкиУведомлений.Колонки.Добавить("Дополнительно", 		,"Дополнительно");
	
	
КонецПроцедуры

#Область zabbix

&НаСервере
Функция   ПолнаяОчисткаРегистра(ВремяХраненияДанныхВДнях = 30) Экспорт
	
	СуммарноеКоичествоОбработанныхЗаписей = 0 ;
	
	КоличествоОбработанныхЗаписейЗаРаз = ОчисткаРегистров(ВремяХраненияДанныхВДнях);
	СуммарноеКоичествоОбработанныхЗаписей = КоличествоОбработанныхЗаписейЗаРаз;
	Пока 	 КоличествоОбработанныхЗаписейЗаРаз > 0 Цикл 
		
		КоличествоОбработанныхЗаписейЗаРаз = ОчисткаРегистров(ВремяХраненияДанныхВДнях);
		СуммарноеКоичествоОбработанныхЗаписей = СуммарноеКоичествоОбработанныхЗаписей + КоличествоОбработанныхЗаписейЗаРаз;
			
	КонецЦикла;
	
	Возврат СуммарноеКоичествоОбработанныхЗаписей;
	
КонецФункции

Функция   ОчисткаРегистров(ВремяХраненияДанныхВДнях = 30) Экспорт
	
	Период = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СведенияОСерверахПоZabbix_at.Период
		|ИЗ
		|	РегистрСведений.СведенияОСерверахПоZabbix_at КАК СведенияОСерверахПоZabbix_at
		|ГДЕ
		|	СведенияОСерверахПоZabbix_at.Период < ДОБАВИТЬКДАТЕ(&Период, ДЕНЬ, -&СрокХраненияДанных)";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("СрокХраненияДанных", ВремяХраненияДанныхВДнях);
	
	РезультатЗапроса	= Запрос.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();
	Ответ = ВДЗ.Количество();

Пока ВДЗ.Следующий() Цикл
	
	НаборЗаписей 		= РегистрыСведений.СведенияОСерверахПоZabbix_at.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ВДЗ.Период);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	
КонецЦикла;

Возврат Ответ;


КонецФункции

Функция   ПолучитьКоличествоЗаписейВРегистре() Экспорт
	
	     	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СведенияОСерверахПоZabbix_at.Период) КАК Количество
		|ИЗ
		|	РегистрСведений.СведенияОСерверахПоZabbix_at КАК СведенияОСерверахПоZabbix_at";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
КонецФункции

&НаСервере
Процедура ПолучениеСтатистикиZabbix(ЗаВремяВчасах = 1) Экспорт
	
	//	ЧасПояс						=	ЧасовойПояс();
	ДатаНалаОтсчета			= '19700101';
	ЧасовойПоясВСекундах	= 3*60*60;
	ВремяЗапросаВСекундах	= ЗаВремяВЧасах*60*60;
	ТекущаяДатаИВремя		= ТекущаяДата();	
	НачалоПериода				= ПолучаемВремяЗапроса(ЧасовойПоясВСекундах, ВремяЗапросаВСекундах);
	КонецПериода					= НачалоПериода + ЗаВремяВЧасах*60*60; // +1 час
	
	СписокСерверов = ПолучитьСписокСерверовДляПолученияСтатистикиЧерезZabbix();
	
	//ЗадатьПараметрыТаблиц(ТаблицаСтатистики, ПараметрыНаКонтроле, ТаблицаОтправкиУведомлений);
	
	Ответ = ПолучениеСтатистикиЧерезZabbix(НачалоПериода, КонецПериода); 
	Если Ответ.Количество() > 0 Тогда
		
		//Данные 
		ЧистыйОтвет = УбираемДубликатыСтрокИзТабЗнач(Ответ);
		КДубликатов = Ответ.Количество() - ЧистыйОтвет.Количество();
		Если КДубликатов > 0 Тогда
			СБЩ = новый СообщениеПользователю;
			СБЩ.Текст = "найдено " + КДубликатов + " дубликатов";
			СБЩ.Сообщить();
		КонецЕсли;
		УведомлениеОНенайденныхСерверах	= "Сервера не найденные: ";
		УведомлениеОНайденныхСерверах		= "Найденные Сервера: ";
		Для Каждого Сервер Из СписокСерверов Цикл
			ПараметрыУведомлений = ПолучениеПараметровУведомленийДляСервера(Сервер.Сервер);
			Уведомлять = ПроверкаПараметровУведомлений(ПараметрыУведомлений, Сервер.Сервер, ТекущаяДатаИВремя);
			
			Отбор = Новый Структура;
			Отбор.Вставить("Hostname",Сервер.Сервер.hostname);
			СтрокиСервера = ЧистыйОтвет.НайтиСтроки(Отбор);
			Если СтрокиСервера.Количество() > 0 Тогда
				
				ТаблицаСтатистики 	= 				Новый ТаблицаЗначений;
				ПараметрыНаКонтроле	= 				Новый ТаблицаЗначений;
				ТаблицаОтправкиУведомлений = 	Новый ТаблицаЗначений;
				ЗадатьПараметрыТаблиц(ТаблицаСтатистики, ПараметрыНаКонтроле, ТаблицаОтправкиУведомлений);
				
				ПарсингОтвета(СтрокиСервера, ЧасовойПояс(), ДатаНалаОтсчета,Сервер.Сервер);
				УведомлениеОНайденныхСерверах = УведомлениеОНайденныхСерверах + " "+ Сервер.Сервер.Hostname;
				ПоследниеДанные = ПолучитьСрезПоследнихДанныеОСерверахПоZabbix(Сервер.Сервер,НачалоПериода);
				
				Данные = Новый Структура; 
				Данные.Вставить("Server",Сервер.Сервер);
				
				Если ПоследниеДанные = Неопределено Тогда
					Данные.Вставить("Ошибка", -16);
					УведомлениеОНенайденныхСерверах = УведомлениеОНенайденныхСерверах + " " + Сервер.Сервер.Hostname;			
				Иначе
					
					TotalMemory				= Неопределено;
					FreeMemory  				= Неопределено;
					ProFreeMemory			= Неопределено;
					PercentAvaliableHDD	= Неопределено;
					ProcessorTime				= Неопределено;
					ProcessorPerfomance	= Неопределено;
					Ошибка						= Неопределено;
					ИтераторДиска			= 0;
					ИтераторПроцессора 	= 0;
					ДатаСравнения			= ПреобразованиеДатыИЗUnixDataВДатуНормальную(НачалоПериода, ДатаНалаОтсчета,ЧасовойПояс()) ;
					ВДЗ = ПоследниеДанные.Выбрать();

					
					Пока ВДЗ.Следующий() цикл
						
						Если	ВДЗ.Параметр	= Перечисления.ТипыРесурсовZabbix_at.AgentPing
							И			ВДЗ.Значение	= 0 Тогда
							// отсутсвует связь с Сервером? 			
							Данные.Вставить("Ошибка", -15);
							
						ИначеЕсли	ВДЗ.Параметр = Перечисления.ТипыРесурсовZabbix_at.FreeDiskSpace_Percentage 
							И			ВДЗ.Период > ДатаСравнения Тогда 			
							// (берём максимальное значение! не очень корректно, зато срабатывать будет только Тогда когда нужно)
							Если PercentAvaliableHDD = Неопределено Тогда
								PercentAvaliableHDD = 0 ;
							КонецЕсли;
							PercentAvaliableHDD = Макс(PercentAvaliableHDD, 100 - ВДЗ.Значение);
							ИтераторДиска = ИтераторДиска +1;
							
						ИначеЕсли 	ВДЗ.Параметр = Перечисления.ТипыРесурсовZabbix_at.CPU_time 
							И			ВДЗ.Период > ДатаСравнения Тогда
							// (берем по среднему)      
							Если ProcessorTime = Неопределено Тогда
								ProcessorTime = 0 ;
							КонецЕсли;
							Если СтрНайти(ВДЗ.Ключ, "idle") > 0 Тогда 
								ProcessorTime = ProcessorTime +(100 -  ВДЗ.Значение) ;
								ИтераторПроцессора = ИтераторПроцессора + 1;
							КонецЕсли;
							
						ИначеЕсли	ВДЗ.Параметр = Перечисления.ТипыРесурсовZabbix_at.FreeMemory 
							И			ВДЗ.Период > ДатаСравнения Тогда
							FreeMemory  = ВДЗ.Значение;
							
						ИначеЕсли 	ВДЗ.Параметр = Перечисления.ТипыРесурсовZabbix_at.TotalMemory Тогда
							TotalMemory = ВДЗ.Значение;
							
						ИначеЕсли 	ВДЗ.Параметр = Перечисления.ТипыРесурсовZabbix_at.ProcessorPerfomance 	
							И			ВДЗ.Период > ДатаСравнения Тогда	
							// (берем по среднему)
							Если ProcessorPerfomance = Неопределено Тогда
								ProcessorPerfomance = 0;
							КонецЕсли;
							ProcessorPerfomance = ProcessorPerfomance + ВДЗ.Значение;
							ИтераторПроцессора = ИтераторПроцессора + 1;
							
						КонецЕсли;
						
					КонецЦикла;
					
					
					
					//расчет процента памяти
					Если НЕ TotalMemory = Неопределено и НЕ FreeMemory = Неопределено и НЕ TotalMemory = 0 Тогда
						ProFreeMemory = FreeMemory * 100 / TotalMemory;
						Данные.Вставить("PercentMEMUsing",100 - ProFreeMemory);
					КонецЕсли;
					
					// расчет процента диска
					Если НЕ 	ИтераторДиска	= 0 и НЕ PercentAvaliableHDD = Неопределено Тогда
						Данные.Вставить("PercentAvaliableHDD",PercentAvaliableHDD);
					КонецЕсли;
					
					// расчет процента CPU    
					// ProcessorPerfomance и  ProcessorTime одновременно для одного Сервера существовать не могут
					Если НЕ ИтераторПроцессора = 0 и НЕ ProcessorPerfomance = Неопределено Тогда
						Данные.Вставить("PercentProcessorTime", ProcessorPerfomance/ИтераторПроцессора);	
					КонецЕсли;
					Если НЕ ИтераторПроцессора = 0 и НЕ ProcessorTime = Неопределено Тогда
						Данные.Вставить("PercentProcessorTime", ProcessorTime/ИтераторПроцессора);
					КонецЕсли;
					
					Если Данные.Количество() <= 1 Тогда
						Данные.Вставить("Ошибка", -15);
					КонецЕсли;
					
					ЗаписьВТаблицыСтатистикиИОтправкиУведомлений(Данные, ТекущаяДатаИВремя, Уведомлять,ТаблицаСтатистики, ПараметрыНаКонтроле);
					ПроверкаПараметровНаКонтроле(ПараметрыНаКонтроле,ТаблицаОтправкиУведомлений,ПараметрыУведомлений,Уведомлять);
					ИтогЗаписиВРегистрУведомлений = ЗаписатьВРегистрСписокСерверныхУведомлений(ТаблицаОтправкиУведомлений, ТекущаяДатаИВремя);
					
					
					//Сообщить("Сервер " + Сервер.Сервер.Hostname  + " Данные есть" );
				КонецЕсли;
				
			Иначе
				
				ЗадатьПараметрыТаблиц(ТаблицаСтатистики, ПараметрыНаКонтроле, ТаблицаОтправкиУведомлений);
				Данные = Новый Структура;
				Данные.Вставить("Ошибка", -17);
				УведомлениеОНенайденныхСерверах = УведомлениеОНенайденныхСерверах + " " + Сервер.Сервер.Hostname;		
				ЗаписьВТаблицыСтатистикиИОтправкиУведомлений(Данные, ТекущаяДатаИВремя, Уведомлять,ТаблицаСтатистики, ПараметрыНаКонтроле);
				ПроверкаПараметровНаКонтроле(ПараметрыНаКонтроле,ТаблицаОтправкиУведомлений,ПараметрыУведомлений,Уведомлять);
				ИтогЗаписиВРегистрУведомлений = ЗаписатьВРегистрСписокСерверныхУведомлений(ТаблицаОтправкиУведомлений, ТекущаяДатаИВремя);
				
			КонецЕсли;
			
		КонецЦикла;
		СБЩ = Новый СообщениеПользователю;
		СБЩ.Текст = УведомлениеОНайденныхСерверах + Символы.ПС +УведомлениеОНенайденныхСерверах;
		СБЩ.Сообщить();
		
		
		
	КонецЕсли;
	//	 ПарсингОтвета(Ответ, ЧасовойПояс(), ДатаНалаОтсчета,Сервер);

КонецПроцедуры

&НаСервере
Функция   ЗаписатьВРегистрСписокСерверныхУведомлений(ТаблицаОтправкиУведомлений, ТекущаяДатаИВремя) Экспорт
	
	Если ТаблицаОтправкиУведомлений.Количество() >0 Тогда
		ЗаписьВРегистрСписокСерверныхУведомлений = РегистрыСведений.СписокСерверныхУведомлений_ат.СоздатьНаборЗаписей();
		ЗаписьВРегистрСписокСерверныхУведомлений.Загрузить(ТаблицаОтправкиУведомлений);
	
		Для Каждого СтрокаТаблицыУведомлений Из ТаблицаОтправкиУведомлений цикл
			Если СтрокаТаблицыУведомлений.Пользователь = Неопределено Тогда
				РезультатОтправки = ложь;
			Иначе
				
				РезультатОтправки = ОтправкаУведомлений(ТекущаяДатаИВремя, СтрокаТаблицыУведомлений);	
				Если РезультатОтправки Тогда 
					
				Иначе 
					
					КодОшибки									= -14;       // есть ошибки на этапе отправки уведомления
					ЗаписьОшибки							= ЗаписьВРегистрСписокСерверныхУведомлений.Добавить();
					ЗаписьОшибки.Сервер		 			= СтрокаТаблицыУведомлений.Сервер;
					ЗаписьОшибки.Пользователь			= СтрокаТаблицыУведомлений.Пользователь;
					ЗаписьОшибки.Тригер					= Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи;
					ЗаписьОшибки.Период					= ТекущаяДатаИВремя;
					ЗаписьОшибки.ЗначениеТригера 	= КодОшибки;
					
				КонецЕсли;
			КонецЕсли
		КонецЦикла;
		
		ЗаписьВРегистрСписокСерверныхУведомлений.Записать(ложь);
		
	Иначе
		Возврат 0;
		
	КонецЕсли;

КонецФункции

&НаСервере
Функция   ПолучитьСрезПоследнихДанныеОСерверахПоZabbix(Сервер, НачалоПериода)
	

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	СведенияОСерверахПоZabbix_atСрезПоследних.Период,
               |	СведенияОСерверахПоZabbix_atСрезПоследних.Сервер,
               |	СведенияОСерверахПоZabbix_atСрезПоследних.Параметр,
               |	СведенияОСерверахПоZabbix_atСрезПоследних.Ключ,
               |	СведенияОСерверахПоZabbix_atСрезПоследних.Значение,
               |	СведенияОСерверахПоZabbix_atСрезПоследних.ДатаЗаписи
               |Из
               |	РегистрСведений.СведенияОСерверахПоZabbix_at.СрезПоследних КАК СведенияОСерверахПоZabbix_atСрезПоследних
               |ГДЕ
               |	СведенияОСерверахПоZabbix_atСрезПоследних.Сервер = &Сервер";
			   
Запрос.УстановитьПараметр("Сервер", Сервер);

РезультаЗапроса = Запрос.Выполнить();
	Если РезультаЗапроса.Пустой() Тогда 
		Возврат Неопределено; 
	Иначе 
		Возврат РезультаЗапроса;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПолучитьСписокСерверовДляПолученияСтатистикиЧерезZabbix() Экспорт
	
	Параметр = Перечисления.ТипыРесурсов_ат.СборСтатистикиZabbix;
	Значение = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РесурсыИПараметрыСерверов_ат.Сервер
		|Из
		|	РегистрСведений.РесурсыИПараметрыСерверов_ат КАК РесурсыИПараметрыСерверов_ат
		|ГДЕ
		|	РесурсыИПараметрыСерверов_ат.Параметр = &Параметр
		|	И РесурсыИПараметрыСерверов_ат.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", Значение);
	Запрос.УстановитьПараметр("Параметр", Параметр);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	// Вставить обработку выборки ВыборкаДетальныеЗаписи
	//КонецЦикла;
	Возврат 	РезультатЗапроса;
	
КонецФункции

&НаСервере
Функция   ПолучениеСтатистикиЧерезZabbix(НачалоПериода, КонецПериода) Экспорт
	
	// параметры MySQL         //HARDCODED!!!
	ИмяБД							= "zabbix";
	ЛогинИБ							= "zabbix";
	ПарольИБ						= "Ia4kQ8qG3OvTBht";
	СерверZabbix 					= Константы.СерверZabbix_ат.Получить();
	IPZabbix							= РаботаССерверамиСлужебный_ат.ПреобразоватьЧислоВТекстовыйIP(СерверZabbix.ОсновнойIP.IP);
	Driver							= "MySQL ODBC 5.1 Driver"; // для MySQL Hardcoded!!!
	СписокТаблиц					= Новый СписокЗначений;
	СписокТаблиц.Добавить("history");
	СписокТаблиц.Добавить("history_log");
	СписокТаблиц.Добавить("history_str");
	СписокТаблиц.Добавить("history_text");
	СписокТаблиц.Добавить("history_uint");
	//	СписокТаблиц.Добавить("proxy_history"); // нужен при наличии подчиненных Серверов zabbix
	
	СтрокуСоединения			= ФормируемСтрокуСоединения(Driver, IPZabbix, ИмяБД, ЛогинИБ, ПарольИБ);
	
	Сокет							= Неопределено;
	РезультатСоединения		= Connect_MySQL(СтрокуСоединения, Сокет);
	//	Сокет						= SQL_at.sql_CreateConnection(IPZabbix, ИмяБД, ложь,ЛогинИБ, ПарольИБ , "MSDASQL"??, 15,90);
	//	РезультатСоединения	= SQL_at.sql_Connect(Сокет);//
	Ответ = новый ТаблицаЗначений;
	
	ТекстСообщения			= "Запрос обработан для следующих таблиц: ";
	ТекстСообщения2 		= "!!!соединение уже разорванно, для следующих таблиц: ";
	ТекстСообщения3		= "запрос НЕ завершен для следующих таблиц: ";
	
	Если РезультатСоединения Тогда
	Для Каждого ТЗ Из СписокТаблиц цикл
		
		ОтветЗапроса				= Неопределено;
	    ТекстЗапроса				= ФормируемТекстЗапросаСтатистикиZabbix(НачалоПериода, КонецПериода, ТЗ, 80000);

		Если РезультатСоединения  Тогда
			Если Сокет.state Тогда
				Сообщить("MySQL база подключена!!!");
				GetQueryResult_MySQL(Сокет, ТекстЗапроса, ОтветЗапроса) ;
				

			Иначе 
				Сокет							= Неопределено;
				РезультатСоединения		= Connect_MySQL(СтрокуСоединения, Сокет);
				Если Сокет.state Тогда 
					GetQueryResult_MySQL(Сокет, ТекстЗапроса, ОтветЗапроса) ;
					
				Иначе 
					РезультатСоединения = ложь;
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			Сообщить("Не могу подключиться к базе!!! ");
		КонецЕсли;
		
		РезультатЗакрытия 			= CloseSocet_MySQL(Сокет);
		Если РезультатЗакрытия Тогда
			ТекстСообщения = ТекстСообщения +" "+  ТЗ +" ";
			//Сообщить("Обработка завершена в "+ТекущаяДата());
		Иначе
			ТекстСообщения2 = ТекстСообщения2 + ТЗ+ " ";
			//Сообщить("закрытие не требуется!!!, соединение уже разорванно ");   			
		КонецЕсли;
		
		ЗаполнитьОбщуюТаблицуОтветов(Ответ, ОтветЗапроса);
		
		
	КонецЦикла;
	
Иначе
	// сообщить("не удалось подключиться к Серверу статистики");
	ТекстСообщения3 = "не удалось подключиться к Серверу статистики ";
	
КонецЕсли;

	СБЩ = новый СообщениеПользователю;
	СбЩ.Текст = ТекстСообщения +  ТекущаяДата() + Символы.ПС + ТекстСообщения2 + Символы.ПС + ТекстСообщения3;
	СБЩ.Сообщить();
	
	Возврат Ответ;

	
КонецФункции // ПолучениеСтатистикиЧерезZabbix()

Процедура ЗаполнитьОбщуюТаблицуОтветов(ОбщаяТаблицаОтветов, ТекущаяТаблицаОтветов)
	
	//ОбщаяТаблицаОтветов 		= Новый ТаблицаЗначений;
	//ТекущаяТаблицаОтветов 	= Новый ТаблицаЗначений;
	
	Если ОбщаяТаблицаОтветов.Колонки.Количество() = 0 и Не ТекущаяТаблицаОтветов = неопределено Тогда
		Если ТекущаяТаблицаОтветов.Колонки.Количество() > 0 Тогда
			
			Для i=0 по ТекущаяТаблицаОтветов.Колонки.Количество() -1 цикл
				Если	ТекущаяТаблицаОтветов.Колонки[i].Имя = "Hostname" 
				или	ТекущаяТаблицаОтветов.Колонки[i].Имя = "NameItem" 
				или	ТекущаяТаблицаОтветов.Колонки[i].Имя = "key_" 
				Тогда 
					Массив = Новый Массив;
					Массив.Добавить(Тип("Строка"));
					КС = Новый КвалификаторыСтроки(80);                            // см. регистр СведенияОСерверахПоZabbix_at
					ОписаниеТипов =  Новый ОписаниеТипов(Массив,,,,КС);
				ИначеЕсли 
						ТекущаяТаблицаОтветов.Колонки[i].Имя = "clock" 
				//или	ТекущаяТаблицаОтветов.Колонки[i].Имя = "value"
				Тогда
					Массив = Новый Массив;
					Массив.Добавить(Тип("Число"));
					КЧ = Новый КвалификаторыЧисла(20,2);
					ОписаниеТипов =  Новый ОписаниеТипов(Массив,,,КЧ);  // см. регистр СведенияОСерверахПоZabbix_at
					
				ИначеЕсли ТекущаяТаблицаОтветов.Колонки[i].Имя = "value" 
				тогда
					
						// value = "число" или "строка"
					Массив	= Новый Массив;
					Массив.Добавить(Тип("Число"));
					КЧ 		= Новый КвалификаторыЧисла(20,2);
					КС 		= Новый КвалификаторыСтроки(80); 
					ОписаниеТипов =  Новый ОписаниеТипов(Массив,,,КЧ,КС);  // см. регистр СведенияОСерверахПоZabbix_at
					
				КонецЕсли;
				ОбщаяТаблицаОтветов.Колонки.Добавить(ТекущаяТаблицаОтветов.Колонки[i].Имя,ОписаниеТипов);	
			КонецЦикла
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТекущаяТаблицаОтветов = Неопределено Тогда
		Если ТекущаяТаблицаОтветов.Количество() > 0  Тогда
			
			Для Каждого Строка Из ТекущаяТаблицаОтветов цикл
				НоваяСтрока = ОбщаяТаблицаОтветов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Функция ФормируемТекстЗапросаСтатистикиZabbix(Сервер, ВременноеОграничение, ТаблицаЗапроса)
Функция   ФормируемТекстЗапросаСтатистикиZabbix(ВременноеОграничениеНачало,ВременноеОграничениеКонец  , ТаблицаЗапроса, ЛимитКоличестваЗначений = 80000)

	Строка1 = "select h.name AS Hostname, i.name AS NameItem, i.key_ , hs.clock, hs.value";
	Строка2 = "from    hosts h";    
	Строка3 = "join items i on h.hostid = i.hostid ";
	Строка4 = "join "+ ТаблицаЗапроса + " hs on i.itemid = hs.itemid  ";
	
	Строка5 = "where hs.clock > "	+ СтрЗаменить(ВременноеОграничениеНачало,	Символы.НПП,"");
	Строка6 = " and hs.clock < "		+ СтрЗаменить(ВременноеОграничениеКонец,		Символы.НПП,"");

	Строка7 = "  limit "					+ СтрЗаменить(ЛимитКоличестваЗначений,			Символы.НПП,"");
	
	Текст =	Строка1 + Символы.ПС + Строка2 +Символы.ПС +Строка3 + Символы.ПС
			+	Строка4 + Символы.ПС + Строка5 +Символы.ПС + Строка6 +Символы.ПС
			+	Строка7;
	Возврат Текст;
	
КонецФункции

&НаСервере
//Функция ПолучаемВремяЗапросаПоСерверу(Сервер, ЧасовойПоясВСекундах, ВремяСмещенияВСекундах, 	ДатаНалаОтсчета = неопределено)
Функция   ПолучаемВремяЗапроса(ЧасовойПоясВСекундах, ВремяСмещенияВСекундах, 	ДатаНалаОтсчета = Неопределено)

	Если ДатаНалаОтсчета	= Неопределено Тогда 
		ДатаНалаОтсчета	= '19700101';
	Иначе
		
	КонецЕсли;
		
	
	// определяем unixtime для текущей даты за минусом времени смещения
	Дата 								= ТекущаяДата();
	ВремяСдвига 					= ВремяСмещенияВСекундах + ЧасовойПоясВСекундах ; 
	ВремяСравнения				= UnixTime(Дата,ДатаНалаОтсчета,ВремяСдвига);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОСерверахПоZabbix_atСрезПоследних.Период,
		|	СведенияОСерверахПоZabbix_atСрезПоследних.Сервер,
		|	СведенияОСерверахПоZabbix_atСрезПоследних.ДатаЗаписи
		|Из
		|	РегистрСведений.СведенияОСерверахПоZabbix_at.СрезПоследних КАК СведенияОСерверахПоZabbix_atСрезПоследних
	//	|ГДЕ
	//	|	СведенияОСерверахПоZabbix_atСрезПоследних.Сервер = &Сервер
		|";
	//
	//Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Время1 =  UnixTime(ВыборкаДетальныеЗаписи.Период, ДатаНалаОтсчета, ВремяСдвига)  ;
		КонецЦикла;
	Иначе
		Возврат	ВремяСравнения
	КонецЕсли;
	
	
	Если Время1 > ВремяСравнения  Тогда 
		Возврат Время1;
	Иначе
		Возврат ВремяСравнения;
		
	КонецЕсли;
	
КонецФункции

//Unix time stamp - UNIX-время или POSIX-время (англ. Unix time) — система описания моментов во времени, 
//принятая в UNIX и других POSIX-совместимых операционных системах.
//Моментом начала отсчёта считается полночь (по UTC) с 31 декабря 1969 года на 1 января 1970 года
//Время UNIX согласуется с UTC, в частности, при объявлении високосных секунд UTC соответствующие номера секунд повторяются.
// Параметры:
//  ТекущаяДатаИВремя  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  ВремяСмещенияUnix  - Число - кол-во секунд сдвиг к дате начала системы отчета
//					Поумолчанию равно Дата(1970,1,1,0,0,0,0)                 
//  СдвигЧасовогоПояся - Число - сдвига часового пояса, часы и минуты выраженные в секундах
//					Значение состоит только Из времени (без даты). 
//					
// Возвращаемое значение:
//   Число   - Кол-во секунд с момента начала отсчета
//
&НаСервере
Функция   UnixTime(ТекущаяДатаИВремя, ВремяСмещенияUnix = Неопределено, СдвигЧасовогоПояся = Неопределено) Экспорт
	
	Если СдвигЧасовогоПояся = Неопределено Тогда
		
		СдвигЧасовогоПояся = 0;
		
	КонецЕсли;
	
	Если ВремяСмещенияUnix = Неопределено Тогда
		
		ВремяСмещенияUnix = Дата(1970, 1, 1, 0, 0, 0) ;
		
	КонецЕсли;
	
	Секунды = ТекущаяДатаИВремя - ВремяСмещенияUnix - СдвигЧасовогоПояся;
	
	Возврат Секунды;
	
КонецФункции // UnixTime()

Функция   УбираемДубликатыСтрокИзТабЗнач(Ответ)
	
	МВТ 		= Новый МенеджерВременныхТаблиц;
	ТЗ 		= Новый ТаблицаЗначений;
	Массив	= Новый Массив;
	Массив.Добавить(Тип("Строка"));
	КС 		= Новый КвалификаторыСтроки(80);                            // см. регистр СведенияОСерверахПоZabbix_at
	ОписаниеТиповСтр =  Новый ОписаниеТипов(Массив,,,,КС);
	Массив	= Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ 		= Новый КвалификаторыЧисла(20,2);
	ОписаниеТиповЧисла =  Новый ОписаниеТипов(Массив,,,КЧ);  // см. регистр СведенияОСерверахПоZabbix_at
	
	// value = "число" или "строка"
	Массив	= Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ 		= Новый КвалификаторыЧисла(20,2);
	КС 		= Новый КвалификаторыСтроки(80); 
	ОписаниеТиповСмешаный =  Новый ОписаниеТипов(Массив,,,КЧ,КС);  // см. регистр СведенияОСерверахПоZabbix_at

	
	
	ТЗ.Колонки.Добавить("Hostname",	ОписаниеТиповСтр);
	ТЗ.Колонки.Добавить("NameItem",	ОписаниеТиповСтр);
	ТЗ.Колонки.Добавить("key_",		ОписаниеТиповСтр);
	ТЗ.Колонки.Добавить("clock",		ОписаниеТиповЧисла);
	ТЗ.Колонки.Добавить("value",		ОписаниеТиповСмешаный);

	
	Запрос				= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	МенеджерВТ 		= Запрос.МенеджерВременныхТаблиц;	
	
	Текст = "Выбрать
	|*
	|ПОМЕСТИТЬ ТЗ_ТЗ
	|Из
	|&ТЗ КАК ТЗ";
	Запрос.Текст = Текст;  //запрос редактировать только кодом, ибо конструктор так не работает... 
	Запрос.УстановитьПараметр("ТЗ", Ответ);
	Запрос.Выполнить();
	
	ЗапросВТ = Новый Запрос;
	ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросВТ.Текст = "Выбрать Различные
	|ТЗ.*
	|Из
	|ТЗ_ТЗ как ТЗ";
	РезультатЗапроса = ЗапросВТ.Выполнить();
	ВДЗ = РезультатЗапроса.Выбрать();	
	Пока ВДЗ.Следующий() Цикл 
		Если ЗначениеЗаполнено(ВДЗ.Hostname) Тогда
			Строка = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,ВДЗ);
			//Строка.Hostname	= ВДЗ.Hostname;
			//Строка.Nameitem	= ВДЗ.Nameitem;
			//Строка.clock			= ВДЗ.clock; 	
			//Строка.key_ 		= ВДЗ.key_;
			//Строка.value		= ВДЗ.value;
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат ТЗ;
		
КонецФункции

&НаСервере
Процедура ПарсингОтвета(Ответ, ЧасовойПоясВСекундах, ДатаНачалаОтсчета, Сервер)
	
	НаборЗаписей		= РегистрыСведений.СведенияОСерверахПоZabbix_at.СоздатьНаборЗаписей();
	ДатаЗаписи		= ТекущаяДата();
	Для Каждого Строка Из Ответ цикл

		Ключ 			= Строка.key_;
		Значение		= Строка.Value;
		Параметр		= ПолучениеТипаРесурсаПоZabbix(Строка.NameItem, Значение, Ключ);
		ДатаИВремя	= ПреобразованиеДатыИЗUnixDataВДатуНормальную(Строка.Clock,ДатаНачалаОтсчета,ЧасовойПоясВСекундах);  
		Если Параметр = неопределено Тогда
			Продолжить;
		Иначе
			НаборЗаписей.Отбор.Сервер.Установить(Сервер);
			НаборЗаписей.Отбор.Параметр.Установить(Параметр);
			НаборЗаписей.Отбор.Ключ.Установить(Ключ);
			НаборЗаписей.Отбор.Период.Установить(ДатаИВремя);
		
			НоваяЗапись 					= НаборЗаписей.Добавить();
			НоваяЗапись.ДатаЗаписи = ДатаЗаписи;
			НоваяЗапись.Значение		= Значение;
			НоваяЗапись.Параметр		= Параметр;
			НоваяЗапись.Сервер		= Сервер;
			НоваяЗапись.Период		= ДатаИВремя;
			НоваяЗапись.Ключ			= Ключ;
			
			НаборЗаписей.Записать(Истина);
			НаборЗаписей.Очистить();

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПараметрВСписке	- СписокЗначений, структура, Перечисление.ТипыРесурсовZabbix_at - список параметов,
//                  по которому осуществляется отбор
//  Сервер					- СправочникиСсылка.Серверы_ат - Ссылка на Сервер, 
//                 для которого ведется сбор данных.
//  НачалоПериода		- Дата - Начальная дата от которой ведется отчет
//                 
//  КонецПериода		- Дата - конечная дата от которой ведется отчет
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция   ПолучитьТаблицуПоНагрузкеНаСерверПоZabbix(ПараметрВСписке,Сервер, НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = ТекущаяДата() - 3*60*60; // за 4-ре часа ранее до текущего момента времени
	КонецЕсли;
	Если КонецПериода = Неопределено Тогда
		КонецПериода = ТекущаяДата() ; // текущя дата и время
	 КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОСерверахПоZabbix_at.Период КАК Период,
		|	СведенияОСерверахПоZabbix_at.Параметр КАК Параметр,
		|	СведенияОСерверахПоZabbix_at.Ключ КАК Ключ,
		|	ВЫРАЗИТЬ(СведенияОСерверахПоZabbix_at.Значение КАК ЧИСЛО) КАК ЗначениеПараметра,
		|	СведенияОСерверахПоZabbix_at.ДатаЗаписи,
		|	НАЧАЛОПЕРИОДА(СведенияОСерверахПоZabbix_at.Период, МИНУТА) КАК ДатаВМинутах,
		|	СведенияОСерверахПоZabbix_at.Сервер
		|Из
		|	РегистрСведений.СведенияОСерверахПоZabbix_at КАК СведенияОСерверахПоZabbix_at
		|ГДЕ
		|	СведенияОСерверахПоZabbix_at.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И СведенияОСерверахПоZabbix_at.Сервер = &Сервер
		|	И СведенияОСерверахПоZabbix_at.Параметр В(&Параметр)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(ЗначениеПараметра)
		|ПО
		|	ДатаВМинутах,
		|	Параметр,
		|	Ключ";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Параметр", ПараметрВСписке);
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
	Иначе
		
		Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		//Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции // ПолучитьОтчетПоНагрузкеНаСерверПоZabbix()

&НаСервере
Функция   ПреобразованиеДатыИЗUnixDataВДатуНормальную(UnixTime, ДатаНалаОтсчета = Неопределено, ЧасовойПояс) Экспорт  
	
	Если	ДатаНалаОтсчета = Неопределено Тогда
		ДатаНалаОтсчета = '19700101';
	КонецЕсли;
	Возврат МестноеВремя('19700101' + UnixTime,ЧасовойПояс); 
		
КонецФункции

Функция   ПолучениеТипаРесурсаПоZabbix(NameItem, Значение, Ключ)
	
	ТипПараметра = Неопределено;
	Если  NameItem	= "File write bytes per second" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.FileWriteBytesPerSecond;
		Значение		=	Значение; //переводим в килобайты?
	КонецЕсли;
	
	Если  NameItem	= "File read bytes per second" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.FileReadBytesPerSecond;
		Значение		=	Значение; //переводим в килобайты?
	КонецЕсли;
	
	Если  NameItem	= "Free disk space on $1 (percentage)" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.FreeDiskSpace_Percentage;
		Значение		=	Значение; // значение указано в процентах
	КонецЕсли;
	
	Если  NameItem	= "Average disk write queue length" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.AverageDiskWriteQueueLength;
		Значение		=	Значение; // значение указано в процентах   ?
	КонецЕсли;
	
	Если  NameItem	= "Average disk read queue length" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.AverageDiskReadQueueLength;
		Значение		=	Значение; // значение указано в процентах   ?
	КонецЕсли;
	
	Если  NameItem	= "Processor Perfomance" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.ProcessorPerfomance;
		Значение		=	Значение; // значение указано в процентах
	КонецЕсли;
	
	Если  NameItem	= "Agent ping" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.AgentPing;
		Значение		=	Значение; 
	КонецЕсли;
	
	Если  NameItem	= "Number of processes" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.NumberOfProcesses;
		Значение		=	Значение; 
	КонецЕсли;
	
	Если  NameItem	= "Free memory" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.FreeMemory;
		Значение		=	Значение; 
	КонецЕсли;
	
	Если  NameItem	= "Used disk space on $1" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.UsedDiskSpaceOn;
		Значение		=	Значение; 
	КонецЕсли;
	
	Если  NameItem	= "Free disk space on $1" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.FreeDiskSpaceOn;
		Значение		=	Значение; 
	КонецЕсли;

	Если  NameItem	= "Total disk space on $1" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.TotalDiskSpaceOn;
		Значение		=	Значение; 
	КонецЕсли;

   	Если  NameItem	= "Outgoing network traffic on $1" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.OutgoingNetworkTrafficOn;
		Значение		=	Значение; 
	КонецЕсли;
	
	Если  NameItem	= "Incoming network traffic on $1" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.IncomingNetworkTrafficOn;
		Значение		=	Значение; 
	КонецЕсли;
	
	Если  NameItem	= "Total memory" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.TotalMemory;
		Значение		=	Значение; 
	КонецЕсли;
	
   	Если  NameItem	= "Number of logged in users" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.NumberOfLoggedInUsers;
		Значение		=	Значение; 
	КонецЕсли;
	
   	Если  NameItem	= "CPU $2 time" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.CPU_time;
		Значение		=	Значение; 
	КонецЕсли;
	
	Если	NameItem	= "ICMP response time" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.ICMPResponseTime;
		Значение		= Значение;
	КонецЕсли;

	Если	NameItem	= "Version of zabbix_agent(d) running" Тогда
		ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.AgentVersion;
		Значение		= Значение;
	КонецЕсли;
	
	Если NameItem	= "TermUsersCount" Тогда 
		Если ключ		= "TermUser.Count[0]" тогда
			ТипПараметра	= Перечисления.ТипыРесурсовZabbix_at.TermUsersCount;
			Значение		= Значение; 
		КонецЕсли;

	КонецЕсли;
	
	
Возврат 	ТипПараметра;
КонецФункции

#КонецОбласти

#Область MySQL

&НаСервере
function   ФормируемСтрокуСоединения(Driver, serverIP, database, UserID, Password) экспорт
	
//	Строка1 = "DRIVER={"		+ Driver			+ "}; "	;//+ Символы.ПС;
	Строка1 = "DRIVER="		+ Driver			+ "; "		;//+ Символы.ПС;
	Строка2 = "SERVER="		+ serverIP		+ "; "		;//+ Символы.ПС;
	Строка3 = "DATABASE="	+ database		+ "; "		;//+ Символы.ПС;
	Строка4 = "UID="				+ UserID		+ "; "	 	;//+ Символы.ПС;
	Строка5 = "PWD="			+ Password		+ "; "	 	;//+ Символы.ПС;
	Строка6 = Строка1 + Строка2 + Строка3 + Строка4 +Строка5 ;
	Возврат Строка6;
	
endfunction

&НаСервере
function   Connect_MySQL(СтрокаСоединенияСMySQL, Соединение = Неопределено) Экспорт
	
	// перед работой с базой проверьте следующее:
	// 1) - MySQL работает в сети (ибо по дефолту он висит только на локальном интерфейсе
	// 2) - firewall настроен правильно и разрешает Из-вне коннект к Серверу MySQL (по дефолту на порт 3306)
	// 3) - пользователь БД имеет разрешение подключаться к базе не только локально! 
	
	Попытка
		
		Соединение = Новый COMОбъект("ADODB.Connection");
		
	Исключение
		
		ВызватьИсключение ОписаниеОшибки();
		Возврат Ложь;
		
	КонецПопытки;
  
	  Если Число(Соединение.Version) < 6.1 Тогда           //для совместимости с windows 2003 + драйвер должен быть установлен
		  СтрокаСоединенияСMySQL = СтрЗаменить(СтрокаСоединенияСMySQL, "MySQL ODBC 5.1 Driver", "{MySQL ODBC 3.51 Driver}");
		  Соединение.Provider="MSDASQL.1";
	  КонецЕсли;
	  
	  Соединение.ConnectionString = (СтрокаСоединенияСMySQL);
   
	  Попытка
		  Соединение.Open();	 
		  Возврат Истина;
	  Исключение
		  ВызватьИсключение ОписаниеОшибки();
		  Возврат Ложь;
	  КонецПопытки;
	
endfunction

&НаСервере
function   Execute_MySQL(Сокет, СтрокаЗапроса) Экспорт
// Выполняем запрос! (но не получает данные)
	
	Соединение = Сокет;
	Попытка
		Соединение.Execute(СтрокаЗапроса);
		Сообщить("Запрос Выполнен");
		Возврат Истина;
	Исключение
		Сообщить("Что то пошло не так :( ");
		Возврат ложь;
	КонецПопытки;	
	
endfunction

&НаСервере
function   GetQueryResult_MySQL(Сокет, ТекстЗапроса, Ответ) Экспорт // выполняем запрос с получением результата
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet"); 
	НаборЗаписей.ActiveConnection = Сокет;
	НаборЗаписей.Open(ТекстЗапроса);
	
	// создаем таблицу значений для сохранения ответа
	Если Ответ = Неопределено Тогда
		Ответ = Новый ТаблицаЗначений;
	Иначе
		Ответ.Очистить();    
		// таблица будет пуста, но в ней будут колонки... (нужно ли это?)
	КонецЕсли;
	
	Если Ответ.Колонки.Количество() = 0 Тогда 											// предварительно формируем колонки ???
		Для  i = 0 по НаборЗаписей.Fields.Count -1  Цикл
			Ответ.Колонки.Добавить(НаборЗаписей.Fields(i).name);					// ??? спорный момент
			
			
		КонецЦикла;
	КонецЕсли;
	
		
	
	Пока не НаборЗаписей.Eof() Цикл
		
		НоваяСтрокаОтвета =  Ответ.Добавить();
		Для j =0 по Min(Ответ.Колонки.Количество(), НаборЗаписей.Fields.Count) -1 цикл       
			// ??? почему выбираем меньшее?  мы же точно знаем сколько у нас колонок? -> привет от SQL_at???
						
			НоваяСтрокаОтвета[j] = НаборЗаписей.Fields(j).Value;
			
		КонецЦикла;

		НаборЗаписей.MoveNext();
	КонецЦикла;
	НаборЗаписей.Close();
	
endfunction

&НаСервере
function   CloseSocet_MySQL(Сокет) Экспорт
	
	Если  Сокет.State() Тогда
		
		Сокет.Close();
	    Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
endfunction

#КонецОбласти
