
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗаполнитьПараметрыДляВывода(Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.НачатьВывод();
	
	ЭлементРезультата = ПроцессорКомпоновки.Следующий();
	
	Пока ЭлементРезультата <> Неопределено Цикл
		
		Если ЭлементРезультата.ЗначенияПараметров.Количество() = 1
			И ЭлементРезультата.ЗначенияПараметров[0].Значение = "РазрывСтраницы"
			Тогда
			
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
		Иначе	
			
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыДляВывода(Знач Настройки)
	
    ДоговорДляОтображения = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДоговорДляОтображения"));
	
	Если ДоговорДляОтображения <> Неопределено Тогда
		
		ДоговорДляОтображения.Использование = Истина;
		ДоговорДляОтображения.Значение =
			?(ЗначениеЗаполнено(Договор.НаименованиеПолное), Договор.НаименованиеПолное, Договор.Наименование);
		
	КонецЕсли;
	
	КлиентДляОтображения = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КлиентДляОтображения"));
	
	Если КлиентДляОтображения <> Неопределено Тогда
		
		КлиентДляОтображения.Использование = Истина;
		КлиентДляОтображения.Значение =
			?(ЗначениеЗаполнено(Клиент.НаименованиеПолное), Клиент.НаименованиеПолное, Клиент.Наименование);
		
	КонецЕсли;
	
	Период = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	
	Если Период.Использование Тогда
		
		ПредставлениеПериода = ПредставлениеПериода(Период.Значение.ДатаНачала, Период.Значение.ДатаОкончания);
		
	Иначе
		
		ПредставлениеПериода = "";
		
	КонецЕсли;
	
	ПериодДляОтображения = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодДляОтображения"));
	
	Если ПериодДляОтображения <> Неопределено Тогда
		
		ПериодДляОтображения.Значение = ?(ПредставлениеПериода = "", "всё время", ПредставлениеПериода);
		ПериодДляОтображения.Использование = Истина;
		
	КонецЕсли;

	ОрганизацияДляОтображения = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОрганизацияДляОтображения"));
	
	Если ОрганизацияДляОтображения <> Неопределено Тогда
		
		ОрганизацияДляОтображения.Значение = ВнутреннегоИспользования_ВызовСервера_ат.ПолучитьНаименованиеОрганизацииДляОтображения(Организация);
		ОрганизацияДляОтображения.Использование = Истина;
		
	КонецЕсли;
	
	//!!!!!HOTFIX {
	ПараметрВыводитьОтмененныеЗаявки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтмененныеЗаявки"));
	Если ПараметрВыводитьОтмененныеЗаявки <> Неопределено Тогда
		
		ПараметрВыводитьОтмененныеЗаявки.Значение = ВыводитьОтмененныеЗаявки;
		ПараметрВыводитьОтмененныеЗаявки.Использование = Истина;
		
	КонецЕсли;
	//!!!!!HOTFIX }
	
КонецПроцедуры
