
#Область  ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Счет") Тогда
			
			ЗаполнитьИзСчета(ДанныеЗаполнения.Счет); 
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Договор") Тогда
			
			Договор = ДанныеЗаполнения.Договор;
			Организация = Договор.Организация;
			Клиент = Договор.Владелец;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ОсновнойДоговор") Тогда
			
			Договор = ДанныеЗаполнения.ОсновнойДоговор;
			Организация = Договор.Организация;
			Клиент = Договор.Владелец;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Дата") Тогда
			Дата = ДанныеЗаполнения.Дата;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Основание")
			И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ФиксацияРабот_ат") Тогда
			
			НоваяСтрока = Основания.Добавить();
			НоваяСтрока.Основание = ДанныеЗаполнения.Основание;
			Финансы_ат.ЗаполнитьРеализациюПоОснованиям(ЭтотОбъект);
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Основания") Тогда
			
			Основания.ЗагрузитьКолонку(ДанныеЗаполнения.Основания, "Основание"); //!!!!!!почему-то не работает
			Для Каждого Закрытие Из ДанныеЗаполнения.Основания Цикл
				
				Основание = Основания.Добавить();
				Основание.Основание = Закрытие;
				
			КонецЦикла;
			Финансы_ат.ЗаполнитьРеализациюПоОснованиям(ЭтотОбъект);
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Основание") Тогда
			
			НоваяСтрока = Основания.Добавить();
			НоваяСтрока.Основание = ДанныеЗаполнения.Основание;
			Финансы_ат.ЗаполнитьРеализациюПоОснованиям(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплату_ат") Тогда
		
		ЗаполнитьИзСчета(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ФиксацияРабот_ат") Тогда
		
		//ЗаполнитьНаОснованииФиксации(ДанныеЗаполнения);
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Договор", ДанныеЗаполнения.Договор);
		СтруктураЗаполнения.Вставить("Основание", ДанныеЗаполнения);
		
		ОбработкаЗаполнения(СтруктураЗаполнения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Константы.СоздаватьДоговорДляКаждогоСчета_ат.Получить() Тогда
		ПроверяемыеРеквизиты.Добавить("СчетаНаОплату");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору; //!!!!!
	Если ПолитикаФормированияВнешнегоНомера <> Перечисления.МетодикаПолученияВнешнегоНомера_ат.НомерИзБП Тогда
		СформироватьВнешнийНомер();
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Проведение") Тогда
		
		Отказ = Ложь;
		КомментарийСинхронизируемый = "";
		ДополнительныеСвойства.Свойство("КомментарийСинхронизируемый", КомментарийСинхронизируемый);
		Проведение = Неопределено;
		ДополнительныеСвойства.Свойство("Проведение", Проведение);
		
		СинхронизироватьРеализацию(Отказ, КомментарийСинхронизируемый, Проведение);
		Если Отказ Тогда
			
			ДополнительныеСвойства.Вставить("Отказ", Истина);
			
		Иначе
			
			Если ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.НомерИзБП Тогда
				СформироватьВнешнийНомер();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеЗаполнено(Период) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РодительскийДоговор = ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель); 
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Реализация.Ссылка
			|ИЗ
			|	Документ.Реализация_ат КАК Реализация
			|ГДЕ
			|	Реализация.Договор В ИЕРАРХИИ (&Договор)
			|	И Реализация.Период = &Период
			|	И НЕ Реализация.Ссылка = &Ссылка
			|	И Реализация.Проведен");
		Запрос.УстановитьПараметр("Договор", РодительскийДоговор);
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "По договору " + РодительскийДоговор + " за "
				+ Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период)
				+ " существует проведённая " + Выборка.Ссылка;
			Сообщение.Сообщить(); 
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ДополнительныеСвойства.Вставить("Проведение", РежимЗаписи = РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	ПересчитатьСуммуДокумента();
	
	Если ПометкаУдаления Тогда
		ДополнительныеСвойства.Вставить("ПомечаетсяНаУдаление", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("Отказ") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Реализация_СчетаНаОплату.СчетНаОплату КАК Документ,
		|	Реализация_СчетаНаОплату.СчетНаОплату.СуммаДокумента КАК СуммаСчетов,
		|	0 КАК СуммаРеализаций
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Документ.Реализация_ат.СчетаНаОплату КАК Реализация_СчетаНаОплату
		|ГДЕ
		|	Реализация_СчетаНаОплату.СчетНаОплату.Ссылка В(&Счета)
		|	И Реализация_СчетаНаОплату.СчетНаОплату.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Реализация_СчетаНаОплату.Ссылка,
		|	0,
		|	Реализация_СчетаНаОплату.Ссылка.СуммаДокумента
		|ИЗ
		|	Документ.Реализация_ат.СчетаНаОплату КАК Реализация_СчетаНаОплату
		|ГДЕ
		|	Реализация_СчетаНаОплату.Ссылка <> &Реализация
		|	И Реализация_СчетаНаОплату.СчетНаОплату.Ссылка В(&Счета)
		|	И Реализация_СчетаНаОплату.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ЕСТЬNULL(ВТ.СуммаСчетов, 0)), 0) КАК СуммаСчетов,
		|	ЕСТЬNULL(СУММА(ЕСТЬNULL(ВТ.СуммаРеализаций, 0)), 0) КАК СуммаРеализаций
		|ИЗ
		|	ВТ КАК ВТ");
	Запрос.УстановитьПараметр("Реализация", Ссылка);
	Запрос.УстановитьПараметр("Счета", СчетаНаОплату.ВыгрузитьКолонку("СчетНаОплату"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.СуммаСчетов < (Выборка.СуммаРеализаций + СуммаДокумента) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Возможно сумма документа " + Ссылка
			+ " некорректна (сумма связанных счетов = " + Выборка.СуммаСчетов
			+ " , а сумма связанных реализаций = " + Выборка.СуммаРеализаций
			+ "  + сумма документа = " + СуммаДокумента + ")";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Для каждого СтрокаКосвенныхСвязей Из КосвенныеСвязиЗаданий Цикл
		
		Согласование_ат.ЗаписатьКосвеннуюСвязьЗадания(СтрокаКосвенныхСвязей.Задание, СтрокаКосвенныхСвязей.Заявка,,,,
			Ссылка,,, Клиент, СтрокаКосвенныхСвязей.Задание.СодержаниеРабот);
		
	КонецЦикла;
	
	РезультатСинхронизации = Неопределено;
	Если ДополнительныеСвойства.Свойство("РезультатСинхронизации", РезультатСинхронизации) Тогда
		
		ЗаписьСинхронизацииРеализации = РегистрыСведений.СинхронизацияРеализаций_ат.СоздатьМенеджерЗаписи();
		ЗаписьСинхронизацииРеализации.Ссылка = Ссылка;
		ЗаписьСинхронизацииРеализации.Прочитать();
		
		ЗаписьСинхронизацииРеализации.Ссылка 				= Ссылка;
		ЗаписьСинхронизацииРеализации.Идентификатор			= РезультатСинхронизации.Идентификатор;
		ЗаписьСинхронизацииРеализации.НавигационнаяСсылка 	= РезультатСинхронизации.НавигационнаяСсылка;
		ЗаписьСинхронизацииРеализации.ДатаРеализации 		= РезультатСинхронизации.ДатаДокумента;
		ЗаписьСинхронизацииРеализации.НомерРеализации 		= РезультатСинхронизации.НомерДокумента;
		ЗаписьСинхронизацииРеализации.СуммаРеализации 		= РезультатСинхронизации.СуммаДокумента;
		
		Попытка
			
			ЗаписьСинхронизацииРеализации.Записать();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выполнена синхронизация с Реализацией товаров и услуг №" + РезультатСинхронизации.НомерДокумента
				+ " в ИБ Бухгалтерии Предприятия";
			Сообщение.Сообщить();
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("Отказ") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьПометкиУдаления(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКосвенныхСвязей Из КосвенныеСвязиЗаданий Цикл
		
		Согласование_ат.ЗаписатьКосвеннуюСвязьЗадания(СтрокаКосвенныхСвязей.Задание, СтрокаКосвенныхСвязей.Заявка,,,,
			Документы.Реализация_ат.ПустаяСсылка(),,, Клиент, СтрокаКосвенныхСвязей.Задание.СодержаниеРабот);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

Процедура ПересчитатьСуммуДокумента()
	
	СуммаДокумента = ЭтотОбъект.Услуги.Итог("Сумма");
	
	Если НЕ ЭтотОбъект.СуммаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + ЭтотОбъект.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВнешнийНомер()
	
	ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору; //!!!!!
	Если ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору Тогда
		
		Запрос = Новый  Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Крайний
			|ИЗ
			|	Документ.Реализация_ат КАК Реализация
			|ГДЕ
			|	Реализация.Договор = &Договор");
		Запрос.УстановитьПараметр("Договор", Договор);
		
		ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатовЗапроса.Следующий() Тогда
			НомерРеализации = Строка(ВыборкаРезультатовЗапроса.Крайний + 1);
		Иначе
			НомерРеализации = "1";
		КонецЕсли;
		
	ИначеЕсли ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.Тикет3по3 Тогда
		
		НомерРеализации = Строки_КлиентСервер_ат.ПолучитьНомерТикета(Номер, Дата, Ложь);
		
	ИначеЕсли ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.НомерИзБП Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СинхронизацияРеализаций.НомерРеализации
			|ИЗ
			|	Документ.Реализация_ат КАК Реализация
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияРеализаций_ат КАК СинхронизацияРеализаций
			|		ПО Реализация.Ссылка = СинхронизацияРеализаций.Ссылка
			|ГДЕ
			|	Реализация_ат.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РЗ = Запрос.Выполнить();
		Если РЗ.Пустой() Тогда
			
			НомерРеализации = Номер;
			
		Иначе
			
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			
			НомерРеализации = Выборка.НомерРеализации;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЦифрыНомераСтр = Строки_КлиентСервер_ат.ВернутьТолькоЦифры(НомерРеализации,,, Ложь);
	Если ПустаяСтрока(ЦифрыНомераСтр) Тогда
		ЦифрыНомераСтр = "1";
	КонецЕсли;
	
	Если ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору Тогда //!!!!!
		ВнешнийНомер = Справочники.Договоры_ат.ПолучитьПолныйНомерДоговора(Договор) + "/" + ЦифрыНомераСтр;
	Иначе
		ВнешнийНомер = ЦифрыНомераСтр;
	КонецЕсли;
	
	ЦифрыНомера = Число(ЦифрыНомераСтр);
	
КонецПроцедуры

Процедура ЗаполнитьИзСчета(Счет)
	
	СчетНаОплату = Счет;
	Организация	 = Счет.Организация;
	Клиент		 = Счет.Клиент;
	Договор		 = Счет.Договор;
	Период		 = Счет.Период;
	
	Услуги.Загрузить(Счет.Услуги.Выгрузить());
	
	ПредставлениеПериода = Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период);
	
	Для Каждого Строка Из Услуги Цикл
		
		Строка.Содержание = Финансы_ат.ПолучитьСодержаниеНоменклатурыДляРеализации(Строка.Номенклатура, Договор,
			ПредставлениеПериода, Счет);
		
	КонецЦикла;
	
	НоваяСтрока = СчетаНаОплату.Добавить();
	НоваяСтрока.СчетНаОплату = Счет;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииФиксации(ДанныеЗаполнения) //!!!см. ОМ.Финансы.ЗаполнитьРеализациюПоОснованиям и МО.Счет
	
	//Организация 	= ДанныеЗаполнения.Договор.Организация;
	//Клиент 		= ДанныеЗаполнения.Клиент;
	//Договор 		= ДанныеЗаполнения.Договор;
	
	МассивЗаданий = Новый Массив;
	
	Для Каждого СтрокаУслугФиксации Из ДанныеЗаполнения.Услуги Цикл
		
		ИмитацияСтроки = Новый Структура;
		
		ИмитацияСтроки.Вставить("Номенклатура", СтрокаУслугФиксации.Номенклатура);
		ИмитацияСтроки.Вставить("Содержание",
			Финансы_ат.ПолучитьСодержаниеНоменклатурыДляРеализации(СтрокаУслугФиксации.Номенклатура,
				Договор, Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период), ДанныеЗаполнения));
		ИмитацияСтроки.Вставить("Количество",
			ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
				СтрокаУслугФиксации.ОтчетноеВремя));
		ИмитацияСтроки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС_ат.БезНДС);
		ИмитацияСтроки.Вставить("СуммаНДС", 0);
		ИмитацияСтроки.Вставить("Сумма", СтрокаУслугФиксации.Сумма);
		ИмитацияСтроки.Вставить("Всего", СтрокаУслугФиксации.Сумма);
		
		Цена = СтрокаУслугФиксации.Сумма / СтрокаУслугФиксации.ОтчетноеКоличество;
		
		ИмитацияСтроки.Вставить("Цена", Цена);
		
		Финансы_КлиентСервер_ат.ПересчитатьСумму(ИмитацияСтроки, СуммаВключаетНДС);
		
		СтрокаУслуг = Услуги.Найти(ИмитацияСтроки.Номенклатура, "Номенклатура");
		
		Если СтрокаУслуг = Неопределено Тогда
			
			СтрокаУслуг = Услуги.Добавить();
			
		Иначе
			
			ИмитацияСтроки.Количество 	= ИмитацияСтроки.Количество + СтрокаУслуг.Количество;
			ИмитацияСтроки.Сумма 		= ИмитацияСтроки.Сумма + СтрокаУслуг.Сумма;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаУслуг, ИмитацияСтроки);
		
		Если МассивЗаданий.Найти(СтрокаУслугФиксации.Задание) = Неопределено Тогда
			
			НоваяСтрока = КосвенныеСвязиЗаданий.Добавить();
			НоваяСтрока.Заявка = СтрокаУслугФиксации.Заявка;
			НоваяСтрока.Задание = СтрокаУслугФиксации.Задание;
			
		КонецЕсли;
		
		МассивЗаданий.Добавить(СтрокаУслугФиксации.Задание);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПометкиУдаления(Отказ)
	
	Если Отказ ИЛИ Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ПомечаетсяНаУдаление") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СписаниеСоСчетаКлиента_атРасшифровкаПлатежа.Ссылка
			|ИЗ
			|	Документ.СписаниеСоСчетаКлиента_ат.РасшифровкаПлатежа КАК СписаниеСоСчетаКлиента_атРасшифровкаПлатежа
			|ГДЕ
			|	СписаниеСоСчетаКлиента_атРасшифровкаПлатежа.Реализация = &Реализация");
		Запрос.УстановитьПараметр("Реализация", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Текст = "Невозможно пометить реализацию <" + Ссылка + "> на удаление. На неё имеются ссылки в списаниях:";
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Текст = Текст + Символы.ПС + "<" + Выборка.Ссылка + ">";
		КонецЦикла;
		
		Сообщить(Текст);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СинхронизироватьРеализацию(Отказ, КомментарийСинхронизируемый, Проведение)
	
	БазаДанных = Константы.БухгалтерияДляСинхронизации_ат.Получить();
	Если БазаДанных.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСинхронизации = СинхронизацияСБП_ат.СинхронизироватьРеализацию(ЭтотОбъект, БазаДанных,, Проведение, КомментарийСинхронизируемый);
	Если РезультатСинхронизации.Ошибки.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		Для каждого Ошибка Из РезультатСинхронизации.Ошибки Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибка;
			Сообщение.Сообщить();
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РезультатСинхронизации", РезультатСинхронизации);
	
КонецПроцедуры

#КонецОбласти
