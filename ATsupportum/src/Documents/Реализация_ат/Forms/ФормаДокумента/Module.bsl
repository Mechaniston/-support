
#Область  ЛокальныеПеременные

#Область  Комментарии

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

#КонецОбласти

#КонецОбласти

#Область  ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Ложь);
	
	#КонецОбласти
	
	ПересчитатьДоступностьФормы(ЭтотОбъект);
	ПрочитатьДанныеСтатусаОтправки();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Истина);
	
	#КонецОбласти
	
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Параметры.ЗначенияЗаполнения.Свойство("КомментарийСинхронизируемый", КомментарийСинхронизируемый);
		ЗаполнитьНовыйДокумент();
		
	КонецЕсли;
	
	БезНДС = Перечисления.СтавкиНДС_ат.БезНДС;
	
	ПредставлениеПериода = Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Объект.Период);
	
	// Если реализация введена на основании, редактировать услуги нельзя.
	Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ОрганизацияФинансы_ат") Тогда
		Элементы.Услуги.ТолькоПросмотр = Объект.Основания.Количество() > 0;
	КонецЕсли;
	
	ОбновитьОтборПоВидуДоговора();
	ОбновитьОтборСчетовПоДоговору();
	
	Если Константы.СоздаватьДоговорДляКаждогоСчета_ат.Получить() Тогда
		
		Элементы.Договор.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СчетаНаОплату.АвтоОтметкаНезаполненного = Истина;
		Элементы.СчетаНаОплатуСчетНаОплату.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли; 
	
	ОбновитьОтображениеСчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтотОбъект,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок)
		И НЕ ЗначениеЗаполнено(КомментарийСтатусаОтправки) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для данного статуса отправки необходимо заполнить комментарий."
			+ Символы.ПС + "(Кнопка """ + Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок + """)";
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
	Если ЭтотОбъект.ТолькоПросмотр И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Отказ = Истина;
		
		ЗаписатьВнешниеДанные(Объект, ПараметрыЗаписи);
		ПослеЗаписи(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("КомментарийСинхронизируемый", КомментарийСинхронизируемый);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаписатьВнешниеДанные(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ОповеститьОбИзмененииСтатусаОтправки") Тогда
		
		Оповестить("ИзменениеСтатусаОтправки",, Объект.Ссылка);
		ПрочитатьДанныеСтатусаОтправки();
		
	КонецЕсли;
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПересчитатьДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиДействийПользователя

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьПланируемуюДатуПодписания(Объект.ДатаПодписанияПланируемая, Объект.Дата, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВыполнитьУстановкуНовогоНомера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ИзменениеДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ИзменениеДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПриИзменении(Элемент)
	
	Объект.СчетаНаОплату.Очистить();
	
	НоваяСтрока = Объект.СчетаНаОплату.Добавить();
	НоваяСтрока.СчетНаОплату = СчетНаОплату;
	
	ЗадатьВопросОЗаполненииУслуг();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтатусОтправкиИзменен = Истина;
	КомментарийСтатусаОтправки = "";
	
	Если КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок) Тогда
		ОткрытьКомментарийСтатусаОтправки(Команды.ОткрытьКомментарийСтатусаОтправки);
	КонецЕсли;
	
	Если ФинальныйТипСтатуса() Тогда
		
		ДатаСтатусаОтправки = Неопределено;
		ДатаСтатусаОтправкиИзменена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаСтатусаОтправкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ДатаСтатусаОтправкиИзменена = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеПериода) Тогда
		Объект.Период = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Даты_Клиент_ат.ВыбратьМесяц(ЭтотОбъект, Объект.Период, "Объект.Период", "ПредставлениеПериода");
	
КонецПроцедуры

&НаКлиенте
Процедура КосвенныеСвязиЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.КосвенныеСвязиЗаданий.ТекущиеДанные.Заявка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Основание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПриИзменениях(Элемент)
	
	ОбновитьУслугиПоОснованиямНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияОснованиеПриИзменении(Элемент)
	
	ОбновитьУслугиПоОснованиямНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблицыФормы_Услуги

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = БезНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	УслугиНоменклатураПриИзмененииНаСервере(Элемент.ТекущиеДанные.Номенклатура,
		Элемент.ТекущиеДанные.Содержание, Объект.Договор, Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура УслугиНоменклатураПриИзмененииНаСервере(Номенклатура, Содержание, Договор, Период)
	
	Содержание = Финансы_ат.ПолучитьСодержаниеНоменклатурыДляРеализации(Номенклатура, Договор,
		Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период), Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуУслуги("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ПересчитатьСуммуУслуги("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДС("Услуги");

КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблицыФормы_СчетаНаОплату

&НаКлиенте
Процедура СчетаНаОплатуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.СчетаНаОплату.ТекущиеДанные.СчетНаОплату);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаНаОплатуПриИзменении(Элемент)
	
	ОбновитьОтображениеСчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаНаОплатуСчетНаОплатуПриИзменении(Элемент)
	
	ОбновитьОтображениеСчетаНаСервере();
	
	ЗадатьВопросОЗаполненииУслуг();
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьПроведениеКоманда(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКомментарийСтатусаОтправки(Команда)
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникКлиента() Тогда
		
		ПоказатьПредупреждение(, КомментарийСтатусаОтправки, 10);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПослеИзмененияКомментарияСтатусаОтправки", ЭтотОбъект);
		ПоказатьВводСтроки(Оповещение, КомментарийСтатусаОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок, 0, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФормыЗаписать(Команда)
	
	Записать();
	Оповестить("ИзменениеСтатусаОтправки");
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУслугиПоОснованиямНаСервере(ОчищатьСписки = Ложь)
	
	Если ОчищатьСписки Тогда
		
		Объект.Услуги.Очистить();
		Объект.КосвенныеСвязиЗаданий.Очистить();
		
	КонецЕсли;
	
	Финансы_ат.ЗаполнитьРеализациюПоОснованиям(Объект, Истина);
	
	ОбновитьОтображениеСчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоОснованиям(Команда)
	
	Если Объект.Основания.Количество() = 0 Тогда
		
		Предупреждение("Основания для реализации не указаны!", 5);
		
	Иначе
		
		Если Объект.Услуги.Количество() > 0 Тогда
			
			ОтветНаВопрос = Вопрос("Очистить список Услуг и Заданий?", РежимДиалогаВопрос.ДаНетОтмена, 10, //!!!!!HOTFIX
				КодВозвратаДиалога.Отмена,, КодВозвратаДиалога.Отмена);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ОтветНаВопрос = КодВозвратаДиалога.Да;
			
		КонецЕсли;
		
		ОбновитьУслугиПоОснованиямНаСервере(ОтветНаВопрос = КодВозвратаДиалога.Да);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоСчетам(Команда)
	
	Если Объект.СчетаНаОплату.Количество() = 0 Тогда
		
		Предупреждение("Счета для реализации не указаны!", 5);
		
	Иначе
		
		Если Объект.Услуги.Количество() > 0 Тогда
			
			ОтветНаВопрос = Вопрос("Очистить список Услуг и Заданий?", РежимДиалогаВопрос.ДаНетОтмена, 10, //!!!!!HOTFIX
				КодВозвратаДиалога.Отмена,, КодВозвратаДиалога.Отмена);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ОтветНаВопрос = КодВозвратаДиалога.Да;
			
		КонецЕсли;
		
		ОбновитьПоСчетамНаСервере(ОтветНаВопрос = КодВозвратаДиалога.Да);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНовыйДокумент()
	
	Объект.ДатаПодписанияПланируемая = Неопределено;
	Объект.ВнешнийНомер = "";
	Объект.ЦифрыНомера = 0;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьДоступностьФормы(Форма)
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникКлиента() Тогда
		
		Форма.Элементы.ГруппаЗадания.Видимость = Ложь;
		Форма.Элементы.ГруппаТаблицы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ТолькоПросмотр = Форма.Объект.Проведен И НЕ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ТекущийПользовательИмеетРольПолныеПрава();
	Форма.Элементы.ОтменаПроведения.Доступность = Форма.Объект.Проведен;
	
КонецПроцедуры 

&НаСервере
Процедура ИзменениеДоговораНаСервере()
	
	ОбновитьОтборПоВидуДоговора();
	ОбновитьОтборСчетовПоДоговору();
	ЗаполнитьПланируемуюДатуПодписания(Объект.ДатаПодписанияПланируемая, Объект.Дата, Объект.Договор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПланируемуюДатуПодписания(ДатаПодписанияПланируемая, Дата, Договор)
	
	ДатаОплатыПланируемая = Документы.Реализация_ат.ПолучитьПланируемуюДатуПодписания(Дата, Договор);
	
КонецПроцедуры 

&НаСервере
Процедура ПрочитатьДанныеСтатусаОтправки()
	
	ДанныеСтатусаОтправки = Финансы_ат.ПолучитьДанныеТекущегоСтатусаОтправкиФинДокумента(Объект.Ссылка);
	
	СтатусОтправки = ДанныеСтатусаОтправки.Статус;
	СтатусОтправкиИзменен = Ложь;
	ДатаСтатусаОтправки = ДанныеСтатусаОтправки.ДатаСтатуса;
	ДатаСтатусаОтправкиИзменена = Ложь;
	КомментарийСтатусаОтправки = ДанныеСтатусаОтправки.Комментарий;
	КомментарийСтатусаОтправкиИзменен = Ложь;
	КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок);
	
	Если СтатусОтправки.ТипСтатуса = Перечисления.ТипыСтатусовОтправкиФинДокументов_ат.ФинальныйПоложительный Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СписаниеСоСчетаКлиента_атРасшифровкаПлатежа.Ссылка.Дата КАК ДатаСписания
			|ИЗ
			|	Документ.СписаниеСоСчетаКлиента_ат.РасшифровкаПлатежа КАК СписаниеСоСчетаКлиента_атРасшифровкаПлатежа
			|ГДЕ
			|	СписаниеСоСчетаКлиента_атРасшифровкаПлатежа.Ссылка.Проведен
			|	И СписаниеСоСчетаКлиента_атРасшифровкаПлатежа.Реализация = &Реализация");
		Запрос.УстановитьПараметр("Реализация", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаРезультатовЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаРезультатовЗапроса.Следующий();
			
			ДатаСтатусаОтправки = ВыборкаРезультатовЗапроса.ДатаСписания;
			Элементы.ДатаСтатусаОтправки.ТолькоПросмотр = Истина; // т.к. надо менять дату документа Списание
			
		Иначе
			
			ДатаСтатусаОтправки = Дата(1, 1, 1);
			Элементы.ДатаСтатусаОтправки.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
		Элементы.ДатаСтатусаОтправки.Заголовок = "Дата подписания";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, ЗаголовокКнопкиОткрытияКомментарияСтатусаОтправки)
	
	ЗаголовокКнопкиОткрытияКомментарияСтатусаОтправки = ?(ЗначениеЗаполнено(СтатусОтправки.ПредставлениеКомментария),
		СтатусОтправки.ПредставлениеКомментария, "Комментарий"); 
	
	Возврат СтатусОтправки.КомментарийОбязателен;
	
КонецФункции 

&НаКлиенте
Процедура ПослеИзмененияКомментарияСтатусаОтправки(Строка, ДопПараметры) Экспорт
	
	Если Строка <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		КомментарийСтатусаОтправки = Строка;
		КомментарийСтатусаОтправкиИзменен = Истина;
		
	Иначе
		
		ПрочитатьДанныеСтатусаОтправки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусОтправки(Ссылка, ПараметрыЗаписи)
	
	Если НЕ СтатусОтправкиИзменен И НЕ ДатаСтатусаОтправкиИзменена И НЕ КомментарийСтатусаОтправкиИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Финансы_ат.ЗаписатьСтатусОтправкиФинДокумента(Ссылка, СтатусОтправки, КомментарийСтатусаОтправки, ДатаСтатусаОтправки);
	//!!! см. комментарий внутри этой процедуры
	
	ПрочитатьДанныеСтатусаОтправки();
	
	ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииСтатусаОтправки", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВнешниеДанные(Знач ОбъектДанных, ПараметрыЗаписи)
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтотОбъект, ОбъектДанных.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтотОбъект, ОбъектДанных.Ссылка);
	Комментарии_ат.СохранитьКомментарийКлиента(ЭтотОбъект, ОбъектДанных.Ссылка);
	Комментарии_ат.СохранитьКомментарийСинхронизируемый(ЭтотОбъект, ОбъектДанных.Ссылка);
	
	#КонецОбласти
	
	ЗаписатьСтатусОтправки(ОбъектДанных.Ссылка, ПараметрыЗаписи);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоСчетамНаСервере(ОчищатьСписки = Ложь)
	
	#Область Удалить_после_тестирования_нижеследующего
	
	//Объект.Услуги.Очистить();
	//
	//Для Каждого СтрокаСчетов Из Объект.СчетаНаОплату Цикл
	//	
	//	Счет = СтрокаСчетов.СчетНаОплату;
	//	
	//	Для Каждого СтрокаУслугСчета Из Счет.Услуги Цикл
	//		
	//		ОбъединятьНоменклатуру = Объект.Клиент.ОбъединятьНоменклатуру;
	//		
	//		Если ОбъединятьНоменклатуру Тогда
	//			
	//			НайденныеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("Номенклатура,СтавкаНДС",
	//				СтрокаУслугСчета.Номенклатура, СтрокаУслугСчета.СтавкаНДС));
	//				
	//		Иначе
	//			
	//			НайденныеСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("Номенклатура,Цена,СтавкаНДС",
	//				СтрокаУслугСчета.Номенклатура, СтрокаУслугСчета.Цена, СтрокаУслугСчета.СтавкаНДС));
	//			
	//		КонецЕсли;
	//		
	//		Если НайденныеСтроки.Количество() > 0 Тогда
	//			
	//			ПерваяНайденнаяСтрока = НайденныеСтроки[0];
	//			ПерваяНайденнаяСтрока.Количество = ПерваяНайденнаяСтрока.Количество + СтрокаУслугСчета.Количество;
	//			
	//			Если ОбъединятьНоменклатуру Тогда
	//				
	//				ПерваяНайденнаяСтрока.Цена	 = ПерваяНайденнаяСтрока.Цена + СтрокаУслугСчета.Цена;
	//				
	//			Иначе
	//				
	//				ПерваяНайденнаяСтрока.Цена	 = СтрокаУслугСчета.Цена;
	//				
	//			КонецЕсли;
	//			
	//			ПерваяНайденнаяСтрока.Сумма		 = ПерваяНайденнаяСтрока.Сумма + СтрокаУслугСчета.Сумма;
	//			ПерваяНайденнаяСтрока.СуммаНДС	 = ПерваяНайденнаяСтрока.СуммаНДС + СтрокаУслугСчета.СуммаНДС;
	//			ПерваяНайденнаяСтрока.Всего		 = ПерваяНайденнаяСтрока.Всего + СтрокаУслугСчета.Сумма;
	//			ПерваяНайденнаяСтрока.Содержание = СтрокаУслугСчета.Содержание;
	//			
	//		Иначе
	//			
	//			НоваяСтрока = Объект.Услуги.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслугСчета);
	//			НоваяСтрока.Всего = СтрокаУслугСчета.Цена * СтрокаУслугСчета.Количество;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	
	#КонецОбласти
	
	МассивСчетов = Объект.СчетаНаОплату.Выгрузить(, "СчетНаОплату").ВыгрузитьКолонку("СчетНаОплату");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетНаОплату_атУслуги.Ссылка КАК Счет,
		|	СчетНаОплату_атУслуги.Номенклатура,
		|	СчетНаОплату_атУслуги.Содержание,
		|	СчетНаОплату_атУслуги.Цена,
		|	СчетНаОплату_атУслуги.Количество,
		|	СчетНаОплату_атУслуги.Сумма,
		|	СчетНаОплату_атУслуги.СтавкаНДС,
		|	СчетНаОплату_атУслуги.СуммаНДС
		|ИЗ
		|	Документ.СчетНаОплату_ат.Услуги КАК СчетНаОплату_атУслуги
		|ГДЕ
		|	СчетНаОплату_атУслуги.Ссылка.Проведен
		|	И СчетНаОплату_атУслуги.Ссылка В(&Счета)";
	
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	
	ТаблицаПоСчетам = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Реализация_атСчетаНаОплату.СчетНаОплату КАК Счет,
		|	Реализация_атСчетаНаОплату.Ссылка КАК Реализация
		|ИЗ
		|	Документ.Реализация_ат.СчетаНаОплату КАК Реализация_атСчетаНаОплату
		|ГДЕ
		|	Реализация_атСчетаНаОплату.Ссылка.Проведен
		|	И НЕ Реализация_атСчетаНаОплату.Ссылка = &Реализация
		|	И Реализация_атСчетаНаОплату.СчетНаОплату В(&Счета)";
	
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	Запрос.УстановитьПараметр("Реализация", Объект.Ссылка);
	
	СвязиСчетовИРеализаций = Запрос.Выполнить().Выгрузить();
	
	МассивРеализаций = СвязиСчетовИРеализаций.ВыгрузитьКолонку("Реализация");
	
	Если ВРеализацияхЕстьДополнительныеСчета(МассивРеализаций, МассивСчетов) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Автоматическое заполнение услуг невозможно. Заполните услуги вручную.";
		Сообщение.Поле  = "Объект.Услуги";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	Если ОчищатьСписки Тогда
		
		Объект.Услуги.Очистить();
		Объект.КосвенныеСвязиЗаданий.Очистить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Реализация_атУслуги.Ссылка КАК Реализация,
		|	Реализация_атУслуги.Номенклатура,
		|	Реализация_атУслуги.Содержание,
		|	Реализация_атУслуги.Цена,
		|	Реализация_атУслуги.Количество,
		|	Реализация_атУслуги.Сумма,
		|	Реализация_атУслуги.СтавкаНДС,
		|	Реализация_атУслуги.СуммаНДС
		|ИЗ
		|	Документ.Реализация_ат.Услуги КАК Реализация_атУслуги
		|ГДЕ
		|	Реализация_атУслуги.Ссылка В(&Реализации)";
	
	Запрос.УстановитьПараметр("Реализации", МассивРеализаций);
	
	ТаблицаПоРеализациям = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРеализации Из ТаблицаПоРеализациям Цикл
		
		СвязанныеРеализации = СвязиСчетовИРеализаций.НайтиСтроки(Новый Структура("Реализация", СтрокаРеализации.Реализация));
		
		Для каждого СтрокаСвязи Из СвязанныеРеализации Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Счет",		 СтрокаСвязи.Счет);
			СтруктураПоиска.Вставить("Номенклатура", СтрокаРеализации.Номенклатура);
			СтруктураПоиска.Вставить("Цена",		 СтрокаРеализации.Цена);
			СтруктураПоиска.Вставить("СтавкаНДС",	 СтрокаРеализации.СтавкаНДС);
			
			СтрокиВСчетах = ТаблицаПоСчетам.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаСчета Из СтрокиВСчетах Цикл
				
				Если СтрокаСчета.Количество >= СтрокаРеализации.Количество Тогда
					
					СтрокаСчета.Количество = СтрокаСчета.Количество - СтрокаРеализации.Количество;
					СтрокаРеализации.Количество = 0;
					
				Иначе
					
					СтрокаСчета.Количество = 0;
					СтрокаРеализации.Количество = СтрокаРеализации.Количество - СтрокаСчета.Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиСНулевымКоличеством = ТаблицаПоСчетам.НайтиСтроки(Новый Структура("Количество", 0));
	
	Для каждого Строка Из СтрокиСНулевымКоличеством Цикл
		
		ТаблицаПоСчетам.Удалить(Строка);
		
	КонецЦикла;
	
	Если Объект.Клиент.ОбъединятьНоменклатуру Тогда
	
		ТаблицаНоменклат = ТаблицаПоСчетам.Скопировать( , "Номенклатура, Содержание");
		
		ТаблицаПоСчетам.Свернуть("Номенклатура, Цена, СтавкаНДС", "Содержание, Количество, Сумма, СуммаНДС");
		
		Для каждого СтрокаУслуги Из ТаблицаПоСчетам Цикл
			
			СтрокаУслуги.Содержание = ТаблицаНоменклат.Найти(СтрокаУслуги.Номенклатура, "Номенклатура").Содержание;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаУслугКорректна(ТаблицаПоСчетам) Тогда
		
		Объект.Услуги.Загрузить(ТаблицаПоСчетам);
		
		Для каждого Строка Из Объект.Услуги Цикл
			
			Финансы_КлиентСервер_ат.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС);
			Финансы_КлиентСервер_ат.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КосвенныеСвязиЗаданий_ат.Задание,
	|	КосвенныеСвязиЗаданий_ат.Заявка
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	КосвенныеСвязиЗаданий_ат.Счет В(&Счета)";
	
	Запрос.УстановитьПараметр("Счета", Объект.СчетаНаОплату.Выгрузить(, "СчетНаОплату"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.КосвенныеСвязиЗаданий.Добавить();
		НоваяСтрока.Заявка = Выборка.Заявка;
		НоваяСтрока.Задание = Выборка.Задание;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   ТаблицаУслугКорректна(ТаблицаУслуг)
	
	Если ТаблицаУслуг.Количество() = 0 Тогда
		
		Если Объект.СчетаНаОплату.Количество() = 1 Тогда
			
			Текст = "Счёт полностью закрыт.";
			
		Иначе
			
			Текст = "Счёта полностью закрыты.";
			
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Поле  = "Объект.Услуги";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Для каждого СтрокаУслуги Из ТаблицаУслуг Цикл
		
		Если СтрокаУслуги.Количество < 0 ИЛИ СтрокаУслуги.Сумма < 0 ИЛИ СтрокаУслуги.СуммаНДС < 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "При подборе услуг полученны отрицательные значения.";
			Сообщение.Поле  = "Объект.Услуги";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция   ВРеализацияхЕстьДополнительныеСчета(МассивРеализаций, МассивСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Реализация_атСчетаНаОплату.Ссылка
		|ИЗ
		|	Документ.Реализация_ат.СчетаНаОплату КАК Реализация_атСчетаНаОплату
		|ГДЕ
		|	Реализация_атСчетаНаОплату.Ссылка В(&Реализации)
		|	И НЕ Реализация_атСчетаНаОплату.СчетНаОплату В (&Счета)";
	
	Запрос.УстановитьПараметр("Реализации", МассивРеализаций);
	Запрос.УстановитьПараметр("Счета", МассивСчетов);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуУслуги(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Финансы_КлиентСервер_ат.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС, 1);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	Финансы_КлиентСервер_ат.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Финансы_КлиентСервер_ат.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение()
	
	ПолныеПрава = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ТекущийПользовательИмеетРольПолныеПрава();
	
	Элементы.ОбновитьПоОснованиям.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр ИЛИ ПолныеПрава;
	Элементы.ОбновитьПоСчетам.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр ИЛИ ПолныеПрава;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборПоВидуДоговора()
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Объект.Договор.ВидДоговора);
	МассивВидовДоговоров.Добавить(Справочники.ВидыДоговоров_ат.ПустаяСсылка());
	ВидыДоговора.ЗагрузитьЗначения(МассивВидовДоговоров);
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВидДоговора", "ВидыДоговора");
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.УслугиНоменклатура.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборСчетовПоДоговору()
	
	//МассивДоговоров = Новый Массив;
	//МассивДоговоров.Добавить(Объект.Договор.ВидДоговора);
	//МассивДоговоров.Добавить(Справочники.ВидыДоговоров_ат.ПустаяСсылка());
	МассивДоговоров = ПолучитьПодчиненныеДоговоры(Объект.Договор);
	Договоры.ЗагрузитьЗначения(МассивДоговоров);
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Договор", "Договоры");
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.СчетаНаОплатуСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
	Элементы.СчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьПодчиненныеДоговоры(Договор)
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Договоры_ат.Ссылка
	|ИЗ
	|	Справочник.Договоры_ат КАК Договоры_ат
	|ГДЕ
	|	Договоры_ат.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивДоговоров.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	МассивДоговоров.Добавить(Договор);
	
	Возврат МассивДоговоров;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеСчетаНаСервере()
	
	СчетаНаОплату = Объект.СчетаНаОплату;
	КоличествоСчетов = СчетаНаОплату.Количество();
	
	Если КоличествоСчетов = 1 Тогда
		
		СчетНаОплату = СчетаНаОплату[0].СчетНаОплату;
		Элементы.СчетНаОплату.Видимость = Истина;
		Элементы.СчетаНаОплату.Видимость = Ложь;
		
	ИначеЕсли КоличествоСчетов > 1 Тогда
		
		Элементы.СчетНаОплату.Видимость = Ложь;
		Элементы.СчетаНаОплату.Видимость = Истина;
		
	Иначе
		
		Элементы.СчетНаОплату.Видимость = Истина;
		Элементы.СчетаНаОплату.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.СчетНаОплату.РедактированиеТекста = НЕ ТолькоПросмотр И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ОрганизацияФинансы_ат");
	Элементы.СчетаНаОплату.ТолькоПросмотр = НЕ ТолькоПросмотр И НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ОрганизацияФинансы_ат");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОЗаполненииУслуг()
	
	Оповещение = Новый ОписаниеОповещения("ПослеВопросаОЗаполненииУслуг", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, "Заполнить Услуги из Счёта?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаполненииУслуг(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьПоСчетамНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУстановкуНовогоНомера()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.УстановитьНовыйНомер();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Функция   ФинальныйТипСтатуса()
	
	Возврат СтатусОтправки.ТипСтатуса = Перечисления.ТипыСтатусовОтправкиФинДокументов_ат.ФинальныйПоложительный;
	
КонецФункции

#КонецОбласти

#Область  УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтотОбъект, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти

#Область  Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтотОбъект, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийКлиента(ЭтотОбъект, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийСинхронизируемый(ЭтотОбъект, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтотОбъект, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтотОбъект, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКлиентаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, КомментарийВнутренний_ОбработчикСобытий;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикСобытий(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтотОбъект, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаСервере
Процедура КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтотОбъект,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

#КонецОбласти
