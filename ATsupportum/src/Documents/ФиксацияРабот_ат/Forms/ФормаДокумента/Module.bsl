
#Область ЛокальныеПеременные

#Область Комментарии

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Ложь);
	
	#КонецОбласти
	
	УстановитьДоступностьЭлементов();
	
	ЗаполнитьВременаДляОтображения();
	
	Объект.СоздаватьУведомлениеОЗакрытии = Уведомления_ат.НужноОтправлятьУведомлениеОПоступленииСписанииДенежныхСредств(Объект.Ссылка); //!!!!! см. также ОМ.Планирование_Сервер_ат.Процедура ЗафиксироватьЗаявку
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Истина);
	
	#КонецОбласти
	
	УстановитьДоступностьЭлементов();
	
	ЗаполнитьВременаДляОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	УправляемыеФормы_Клиент_ат.ПриПовторномОткрытии(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Клиент_ат.ПередЗакрытием(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	УправляемыеФормы_Клиент_ат.ПриЗакрытии(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	УправляемыеФормы_Клиент_ат.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УправляемыеФормы_Клиент_ат.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	
	УправляемыеФормы_Клиент_ат.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	УправляемыеФормы_Клиент_ат.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
	//Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	
	//	НужноДопСогласование = Ложь;
	//	
	//	Для Каждого СтрокаУслуг Из Объект.Услуги Цикл
	//		
	//		Если СтрокаУслуг.ВводитьДополнительноеСогласование Тогда
	//			
	//			НужноДопСогласование = Истина;
	//			Прервать;
	//			
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если НужноДопСогласование Тогда
	//		
	//		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	//		
	//		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОДопСогласовании_Завершение", ЭтаФорма);
	//		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, "Имеются услуги, требующие дополнительного согласования!
	//			|Ввести согласование?", РежимДиалогаВопрос.ДаНетОтмена, 30);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	//!!!!! сверять суммы по услугам в Закрытии (включая текущее), если меньше всех Согласований по заявке, то спросить о частичном закрыти
	// если таки полное - то пока просто сообщить ФинРоли о необходимости сторнирования (записи с минусом каких-либо Услуг каких-либо Согласований)
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтаФОрма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийКлиента(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаполнитьВременаДляОтображения();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	УправляемыеФормы_Сервер_ат.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтаФорма, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийКлиента(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	//ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, ОбработчикСобытийВнутреннегоКомментария;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийВнутреннегоКомментария(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УслугиОтчетноеВремяДляОтображенияПриИзменении(Элемент) //!!!!!
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	БылоВремя = ТекущиеДанные.ОтчетноеВремя;
	ТекущиеДанные.ОтчетноеВремя =
		ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДеятельностиДляХранения(
		ТекущиеДанные.ОтчетноеВремяДляОтображения);
	
	БылаСтоимость = ТекущиеДанные.Сумма;
	ТекущиеДанные.Сумма = Элементы.Услуги.ТекущиеДанные.Цена
		* ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
			ТекущиеДанные.ОтчетноеВремя);
	
	Объект.КоличествоДокумента = Объект.КоличествоДокумента
		- БылоВремя + ТекущиеДанные.ОтчетноеВремя;
	
	Объект.СуммаДокумента = Объект.СуммаДокумента
		- БылаСтоимость + ТекущиеДанные.Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОДопСогласовании_Завершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Документ.Согласование_ат.ФормаОбъекта", Новый Структура("Основание", Объект.Ссылка, ЭтаФорма));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслуги(Команда)
	
	ЗаполнитьУслугиНаСервере(); //!!!TODO - выполнить Вопрос о продолжении
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиНаСервере()
	
	Модифицированность = Истина;
	
	Объект.Услуги.Очистить();
	Объект.Задания.Очистить();
	Объект.Основания.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСодержание();
	ДокументОбъект.РассчитатьСодержание();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьВременаДляОтображения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.ГруппаОсновное.ТолькоПросмотр = Объект.Проведен;
	Элементы.Страницы.ТолькоПросмотр = Объект.Проведен;
	Элементы.ЗаполнитьУслуги.Доступность = НЕ Объект.Проведен;
	
	Если ПравоДоступа("ИнтерактивноеПроведение", Метаданные.Документы.ФиксацияРабот_ат) Тогда
		Элементы.ФормаПровести.Доступность = НЕ Объект.Проведен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.Проведен Тогда
		
		ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "Услуги", "");
		
		Если Объект.Услуги.Количество() > ВыбраннаяСтрока И Объект.Услуги[ВыбраннаяСтрока].Свойство(ИмяРеквизита) Тогда
			
			ПоказатьЗначение(, Объект.Услуги[ВыбраннаяСтрока][ИмяРеквизита]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВременаДляОтображения()
	
	Для Каждого СтрокаТаблицы Из Объект.Задания Цикл
		
		СтрокаТаблицы.ФактическоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.ФактическоеВремяВыполнения);
		
		СтрокаТаблицы.ПланируемоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.ПланируемоеВремяВыполнения);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		
		СтрокаТаблицы.ПланируемоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.ПланируемоеВремя);
		
		СтрокаТаблицы.ФактическоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.ФактическоеВремя);
		
		СтрокаТаблицы.СогласованноеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.СогласованноеВремя);
		
		СтрокаТаблицы.РанееЗакрытоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.РанееЗакрытоеВремя);
		
		СтрокаТаблицы.ОтчетноеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.ОтчетноеВремя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.Задания.ТекущиеДанные.Задание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПриИзменении(Элемент)
	
	Объект.Клиент = ПолучитьКлиентаЗаявки(Объект.Заявка);
	Объект.Проект = ПолучитьПроектЗаявки(Объект.Заявка);
	
	ЗаполнитьУслугиНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьКлиентаЗаявки(Заявка)
	
	Возврат Заявка.Клиент;
	
КонецФункции

&НаСервереБезКонтекста
Функция   ПолучитьПроектЗаявки(Заявка)
	
	Возврат Заявка.Проект;
	
КонецФункции

&НаСервере
Процедура УслугиСодержаниеРаботПриИзмененииНаСервере()
	
	//!!!!!
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСодержаниеРаботПриИзменении(Элемент)
	
	УслугиСодержаниеРаботПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.Основания.ТекущиеДанные.Согласование);
		
	КонецЕсли;

КонецПроцедуры
