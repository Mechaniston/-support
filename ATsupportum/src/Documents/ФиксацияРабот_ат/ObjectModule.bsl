
Перем Вложения Экспорт;

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Услуги.Количество() = 0
		ИЛИ (Услуги.Количество() = 1 И Услуги[0].СодержаниеРабот.Пустая()) Тогда
		
		Сообщить("Содержание Закрытия не заполнено, сохранение невозможно!", СтатусСообщения.Внимание);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения) //!!!!!HOTFIX
	
	Для Каждого СтрокаЗаданий Из Задания Цикл
		Согласование_ат.ЗаписатьКосвеннуюСвязьЗадания(СтрокаЗаданий.Задание, Заявка,,
			?(ПометкаУдаления, Неопределено, Ссылка),,,,,
			Заявка.Клиент, СтрокаЗаданий.Задание.СодержаниеРабот);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Согласование_ат.ПровестиФиксациюПоОперативномуБалансу(Ссылка, Истина, Автор);
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыНакопления.ВременаРабот_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Если НЕ ПометкаУдаления Тогда
		
		Для Каждого СтрокаУслуг Из Услуги Цикл
			
			//Заявка = СтрокаУслуг.Удалить_Заявка;
			
			//Планирование_Сервер_ат.ПересчитатьСвойстваЗаявки(Заявка);
			
			//Договор = ?(ЗначениеЗаполнено(ДоговорЗаявки.Родитель), ДоговорЗаявки.Родитель, ДоговорЗаявки); //?!?!?!?!
			
			Согласование_ат.СоздатьДвижениеПоРегиструУчетаВременРабот(НаборЗаписей, Ссылка,
				?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()), //СтрокаУслуг.Удалить_ОтчетнаяДатаОкончания, 
				Заявка,
				СтрокаУслуг.СодержаниеРабот,,,
				СтрокаУслуг.ОтчетноеВремя);
			
			//!!!!!HOTFIX {!!!!!TODO - сделать откат изменений и раскомментировать
			//НаборЗаписей2 = РегистрыСведений.СвойстваЗаявок_ат.СоздатьНаборЗаписей();
			//НаборЗаписей2.Отбор.Ссылка.Установить(Заявка);
			//НаборЗаписей2.Прочитать();
			//
			//Если НаборЗаписей2.Количество() = 1 Тогда
			//	
			//	Запись = НаборЗаписей2[0];
			//	
			//	Запись.ОтчетнаяДлительность 	= Запись.ОтчетнаяДлительность + СтрокаУслуг.ОтчетнаяДлительность;
			//	Запись.ОтчетнаяДатаНачала 		= ?(ЗначениеЗаполнено(Запись.ОтчетнаяДатаНачала),
			//		?(Запись.ОтчетнаяДатаНачала < СтрокаУслуг.ОтчетнаяДатаНачала, Запись.ОтчетнаяДатаНачала, СтрокаУслуг.ОтчетнаяДатаНачала),
			//		СтрокаУслуг.ОтчетнаяДатаНачала);
			//	Запись.ОтчетнаяДатаОкончания 	= ?(ЗначениеЗаполнено(Запись.ОтчетнаяДатаОкончания),
			//		?(Запись.ОтчетнаяДатаОкончания > СтрокаУслуг.ОтчетнаяДатаОкончания, Запись.ОтчетнаяДатаОкончания, СтрокаУслуг.ОтчетнаяДатаОкончания),
			//		СтрокаУслуг.ОтчетнаяДатаОкончания);
			//	
			//	НаборЗаписей2.Записать();
			//	
			//КонецЕсли;
			//!!!!!HOTFIX }
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Если НЕ ПометкаУдаления Тогда
		
		Если Уведомления_ат.НужноОтправлятьУведомлениеОПоступленииСписанииДенежныхСредств(Ссылка) Тогда
			Уведомления_ат.ЗаписатьИнформациюОНеобходимостиОтправкиУведомленийПоФинансовымДокументам(Ссылка, Истина);
		КонецЕсли;
		
		Если НЕ Ссылка.Договор.Пустая() И НЕ Ссылка.Договор.ИспользоватьПостоплату И Ссылка.СуммаДокумента > 0 Тогда
			Реализация = Согласование_ат.ПолучитьРеализациюПоФиксации(Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Согласование_ат.ПровестиФиксациюПоОперативномуБалансу(Ссылка, Ложь);
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыНакопления.ВременаРабот_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Если НЕ Ссылка.Договор.Пустая() И НЕ Ссылка.Договор.ИспользоватьПостоплату И Ссылка.СуммаДокумента > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Реализация_атОснования.Ссылка
		|ИЗ
		|	Документ.Реализация_ат.Основания КАК Реализация_атОснования
		|ГДЕ
		|	Реализация_атОснования.Основание = &Основание
		|	И Реализация_атОснования.Ссылка.Проведен";
		
		Запрос.УстановитьПараметр("Основание", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаРезультатовЗапроса = РезультатЗапроса.Выбрать();
			ВыборкаРезультатовЗапроса.Следующий();
			Реализация = ВыборкаРезультатовЗапроса.Ссылка.ПолучитьОбъект();
			Реализация.УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Дата = Дата(1, 1, 1) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		Заявка = ДанныеЗаполнения;
		Клиент = Заявка.Клиент;
		Проект = Заявка.Проект;
		
		ЗаполнитьСодержание();
		РассчитатьСодержание();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Согласование_ат") Тогда
		
		Заявка = ДанныеЗаполнения.Заявка; //!!!??? какого фига не заполняется само с учётом установленного для реквизита флага "Заполнять из данных заполнения"
		Клиент = Заявка.Клиент;
		Проект = Заявка.Проект;
		Договор = ДанныеЗаполнения.Договор;
		
		Основание = Основания.Добавить();
		Основание.Согласование = ДанныеЗаполнения;
		
		//!!!!!TODO решить вопрос - когда брать Здания из Согласования, а когда нет
		// (т.е. научится определять частичное согласование)
		
		ЗаполнитьСодержание();
		РассчитатьСодержание();
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Согласование") Тогда
			
			ОбработкаЗаполнения(ДанныеЗаполнения.Согласование, СтандартнаяОбработка);
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Заявка") Тогда
			
			ОбработкаЗаполнения(ДанныеЗаполнения.Заявка, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЗаявок(СписокЗаявок) //!!!!!УДАЛИТЬ
	
	//Удалить_Заявки.Очистить();
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВременаРабот_атОбороты.Заявка,
	//|	ВременаРабот_атОбороты.СодержаниеРабот,
	//|	ВременаРабот_атОбороты.ПланируемоеВремяОборот,
	//|	ВременаРабот_атОбороты.ФактическоеВремяОборот,
	//|	ВременаРабот_атОбороты.ОтчетноеВремяОборот,
	//|	ВременаРабот_атОбороты.СогласованноеВремяОборот
	//|ИЗ
	//|	РегистрНакопления.ВременаРабот_ат.Обороты КАК ВременаРабот_атОбороты
	//|ГДЕ
	//|	ВременаРабот_атОбороты.Заявка В(&Заявки)";
	//
	//Запрос.УстановитьПараметр("Заявки", СписокЗаявок);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	СтрокаЗаявок = Удалить_Заявки.Добавить();
	//	СтрокаЗаявок.Заявка								= Выборка.Заявка;
	//	СтрокаЗаявок.Удалить_СодержаниеРабот					= Выборка.СодержаниеРабот;
	//	
	//	СтрокаЗаявок.ПланируемоеВремя					= Выборка.ПланируемоеВремяОборот;
	//	СтрокаЗаявок.ПланируемоеВремяДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//														Выборка.ПланируемоеВремяОборот);
	//														
	//	СтрокаЗаявок.ФактическоеВремя					= Выборка.ФактическоеВремяОборот;
	//	СтрокаЗаявок.ФактическоеВремяДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//														Выборка.ФактическоеВремяОборот);
	//														
	//	СтрокаЗаявок.СогласованноеВремя					= Выборка.СогласованноеВремяОборот;
	//	СтрокаЗаявок.СогласованноеВремяДляОтображения	= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//														Выборка.СогласованноеВремяОборот);
	//														
	//	СтрокаЗаявок.ФиксированноеВремя					= Выборка.ОтчетноеВремяОборот;
	//	СтрокаЗаявок.ФиксированноеВремяДляОтображения	= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//														Выборка.ОтчетноеВремяОборот);
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержание() Экспорт //!!!!!HOTFIX
	
	Услуги.Очистить();
	
	ОтборПоЗаданиям = Задания.Количество() > 0;
	
	//Если Задания.Количество() > 0 Тогда
	//	
	//Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	СогласованиеОбъекты.Задание,
	//	|	СогласованиеОбъекты.Задание.СодержаниеРабот ВидДеятельности,
	//	|	СвойстваЗаданий.ПлановоеВремяВыполнения КАК ПлановоеВремя,
	//	|	СвойстваЗаданий.ФактическоеВремяВыполнения КАК ФактическоеВремя,
	//	|	СогласованиеОбъекты.Ссылка КАК Согласование,
	//	|	СогласованиеОбъекты.Ссылка.ФлагВнутреннего КАК ВнутреннееСогласование,
	//	|	СогласованиеОбъекты.Ссылка.Договор КАК Договор,
	//	|	СодержаниеСогласования.Цена,
	//	|	СодержаниеСогласования.Количество КАК ФактическоеВремя
	//	//|	СодержаниеСогласования.Тариф,
	//	//|	СодержаниеСогласования.ТарифныйПлан,
	//	|ПОМЕСТИТЬ
	//	|	СогласованияПоЗаданиям
	//	|ИЗ
	//	|	Документ.Согласование_ат.ОбъектыСогласования КАК СогласованиеОбъекты
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
	//	|		ПО СогласованиеОбъекты.Задание = СвойстваЗаданий.Ссылка
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Согласование_ат.СодержаниеСогласования КАК СодержаниеСогласования
	//	|		ПО СодержаниеСогласования.Ссылка = СогласованиеОбъекты.Ссылка
	//	|			И СодержаниеСогласования.СодержаниеРабот = СогласованиеОбъекты.Задание.СодержаниеРабот
	//	|ГДЕ
	//	|	СодержаниеСогласования.Ссылка.Заявка = &Заявка
	//	|	И СодержаниеСогласования.Ссылка.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.Принято)
	//	|	И (СодержаниеСогласования.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.Техническое)
	//	|		ИЛИ СодержаниеСогласования.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.ТехническоеИФинансовое))
	//	|	И НЕ СодержаниеСогласования.Ссылка.ПометкаУдаления
	//	|	И СодержаниеСогласования.НомерСтроки > 0
	//	|	И СодержаниеСогласования.Количество > 0 //СвойстваЗаданий.ФактическоеВремяВыполнения > 0
	//	//|	И СогласованиеОбъекты.Задание НЕ В
	//	//|		(ВЫБРАТЬ
	//	//|			ДокументФиксацияЗадания.Задание
	//	//|		ИЗ
	//	//|			Документ.ФиксацияРабот_ат.Задания КАК ДокументФиксацияЗадания
	//	//|		ГДЕ
	//	//|			ДокументФиксацияЗадания.Ссылка.Заявка = &Заявка
	//	//|			И ДокументФиксацияЗадания.Ссылка.Проведен)
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныеЗадания
	//	|			ТОГДА СогласованиеОбъекты.Задание В (&КонкретныеЗадания)
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныеСогласования
	//	|			ТОГДА СогласованиеОбъекты.Ссылка В (&КонкретныеСогласования)
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныйДоговор
	//	|			ТОГДА СогласованиеОбъекты.Ссылка.Договор = &КонкретныйДоговор
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|;
	//	|ВЫБРАТЬ
	//	|	СогласованиеСодержание.Ссылка КАК Согласование,
	//	|	СогласованиеСодержание.Ссылка.ФлагВнутреннего,
	//	|	СогласованиеСодержание.Ссылка.Договор,
	//	//|	СогласованиеСодержание.Ссылка.Тариф,
	//	//|	СогласованиеСодержание.Ссылка.ТарифныйПлан,
	//	|	СогласованиеСодержание.СодержаниеРабот КАК ВидДеятельности
	//	|ПОМЕСТИТЬ
	//	|	СогласованияПоВидамДеятельности
	//	|ИЗ
	//	|	Документ.Согласование_ат.СодержаниеСогласования КАК СогласованиеСодержание
	//	|ГДЕ
	//	|	СогласованиеСодержание.Ссылка.Заявка = &Заявка
	//	|	И СогласованиеСодержание.Ссылка.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.Принято)
	//	|	И (СогласованиеСодержание.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.Техническое)
	//	|		ИЛИ СогласованиеСодержание.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.ТехническоеИФинансовое))
	//	|	И НЕ СогласованиеСодержание.Ссылка.ПометкаУдаления
	//	|	И НЕ СогласованиеСодержание.Ссылка.ОбъектыСогласования.НомерСтроки > 0 // ТЧ не заполнена => Согласование чисто по ВД
	//	|	И НЕ СогласованиеСодержание.Ссылка В
	//	|		(ВЫБРАТЬ
	//	|			ДокументФиксацияОснования.Согласование
	//	|		ИЗ
	//	|			Документ.ФиксацияРабот_ат.Основания КАК ДокументФиксацияОснования
	//	|		ГДЕ
	//	|			ДокументФиксацияОснования.Ссылка.Заявка = &Заявка
	//	|			И ДокументФиксацияОснования.Ссылка.Проведен)
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныеСогласования
	//	|			ТОГДА СогласованиеСодержание.Ссылка В (&КонкретныеСогласования)
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныйДоговор
	//	|			ТОГДА СогласованиеСодержание.Ссылка.Договор = &КонкретныйДоговор
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И СогласованиеСодержание.Ссылка НЕ В // просто на всякий случай
	//	|		(ВЫБРАТЬ
	//	|			Согласование
	//	|		ИЗ
	//	|			СогласованияПоЗаданиям)
	//	|;
	//	//|ВЫБРАТЬ
	//	//|	КОЛИЧЕСТВО(Согласование) КАК Значение
	//	//|ПОМЕСТИТЬ
	//	//|	КолвоСогласованийПоВД
	//	//|ИЗ
	//	//|	СогласованияПоВидамДеятельности
	//	//|;
	//	|ВЫБРАТЬ
	//	|	ДокументЗадание.СодержаниеРабот КАК ВидДеятельности,
	//	|	ДокументЗадание.Ссылка КАК Задание,
	//	|	СвойстваЗаданий.ФактическоеВремяВыполнения КАК ФактическоеВремя
	//	|ПОМЕСТИТЬ ЗаданияБезСогласований
	//	|ИЗ
	//	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание_ат КАК ДокументЗадание
	//	|			ПО СвязиОбъектов.Объект = ДокументЗадание.Ссылка
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
	//	|			ПО СвязиОбъектов.Объект = СвойстваЗаданий.Ссылка
	//	|ГДЕ
	//	|	СвязиОбъектов.Предок = &Заявка
	//	|	И (СвязиОбъектов.Объект ССЫЛКА Документ.Задание_ат)
	//	|	И (НЕ ВЫРАЗИТЬ(СвязиОбъектов.Объект КАК Документ.Задание_ат).ПометкаУдаления)
	//	|	И СвойстваЗаданий.ФактическоеВремяВыполнения > 0
	//	|	И ДокументЗадание.Ссылка НЕ В
	//	|		(ВЫБРАТЬ
	//	|			ДокументФиксацияЗадания.Задание
	//	|		ИЗ
	//	|			Документ.ФиксацияРабот_ат.Задания КАК ДокументФиксацияЗадания
	//	|		ГДЕ
	//	|			ДокументФиксацияЗадания.Ссылка.Заявка = &Заявка
	//	|			И ДокументФиксацияЗадания.Ссылка.Проведен)
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныеЗадания
	//	|			ТОГДА СвязиОбъектов.Объект В (&КонкретныеЗадания)
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ДокументЗадание.Ссылка НЕ В (
	//	|		ВЫБРАТЬ
	//	|			Задание
	//	|		ИЗ
	//	|			СогласованияПоЗаданиям)
	//	|;
	//	|ВЫБРАТЬ
	//	|	Согласование,
	//	|	ФлагВнутреннего,
	//	|	Договор,
	//	//|	Тариф,
	//	//|	ТарифныйПлан,
	//	|	ВидДеятельности,
	//	|	Задание,
	//	|	ФактическоеВремя
	//	|ИЗ
	//	|	СогласованияПоЗаданиям
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	Согласование,
	//	|	ФлагВнутреннего,
	//	|	Договор,
	//	//|	Тариф,
	//	//|	ТарифныйПлан,
	//	|	ВидДеятельности,
	//	|	ЗНАЧЕНИЕ(Документ.Задание_ат.ПустаяСсылка),
	//	|	0
	//	//|	ЕСТЬNULL(ВременаРаботОбороты.СогласованноеВремяОборот, 0)
	//	//|		- ЕСТЬNULL(ВременаРаботОбороты.ОтчетноеВремяОборот, 0) / КолвоСогласованийПоВД.Значение КАК ФактическоеВремя
	//	|ИЗ
	//	|	СогласованияПоВидамДеятельности
	//	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВременаРабот_ат.Обороты(,,, Заявка = &Заявка) КАК ВременаРаботОбороты
	//	//|			ПО СогласованияПоВидамДеятельности.ВидДеятельности = ВременаРаботОбороты.СодержаниеРабот
	//	//|	, КолвоСогласованийПоВД
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка),
	//	|	Ложь,
	//	|	ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка),
	//	//|	NULL,
	//	//|	NULL,
	//	|	ВидДеятельности,
	//	|	Задание,
	//	|	ФактическоеВремя
	//	|ИЗ
	//	|	ЗаданияБезСогласований
	//	|");
	//	
	//КонецЕсли;
	
	//Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	СодержаниеСогласования.Ссылка КАК Согласование,
	//	|	СодержаниеСогласования.Ссылка.ФлагВнутреннего,
	//	|	СодержаниеСогласования.Ссылка.Договор,
	//	|	СодержаниеСогласования.СодержаниеРабот КАК ВидДеятельности,
	//	//|	СодержаниеСогласования.Цена,
	//	|	СодержаниеСогласования.Количество КАК ФактическоеВремя
	//	//|	СодержаниеСогласования.Тариф,
	//	//|	СодержаниеСогласования.ТарифныйПлан,
	//	//|	СогласованиеОбъекты.Задание,
	//	//|	СвойстваЗаданий.ФактическоеВремяВыполнения КАК ФактическоеВремя
	//	|ПОМЕСТИТЬ
	//	|	СогласованияПоЗаданиям
	//	|ИЗ
	//	|	Документ.Согласование_ат.СодержаниеСогласования КАК СодержаниеСогласования
	//	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Согласование_ат.ОбъектыСогласования КАК СогласованиеОбъекты
	//	//|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
	//	//|				ПО СогласованиеОбъекты.Задание = СвойстваЗаданий.Ссылка
	//	//|		ПО СодержаниеСогласования.Ссылка = СогласованиеОбъекты.Ссылка
	//	|ГДЕ
	//	|	СодержаниеСогласования.Ссылка.Заявка = &Заявка
	//	|	И СодержаниеСогласования.Ссылка.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.Принято)
	//	|	И (СодержаниеСогласования.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.Техническое)
	//	|		ИЛИ СодержаниеСогласования.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.ТехническоеИФинансовое))
	//	|	И НЕ СодержаниеСогласования.Ссылка.ПометкаУдаления
	//	|	И СодержаниеСогласования.НомерСтроки > 0
	//	|	И СодержаниеСогласования.Количество > 0 //СвойстваЗаданий.ФактическоеВремяВыполнения > 0
	//	//|	И СогласованиеОбъекты.Задание НЕ В
	//	//|		(ВЫБРАТЬ
	//	//|			ДокументФиксацияЗадания.Задание
	//	//|		ИЗ
	//	//|			Документ.ФиксацияРабот_ат.Задания КАК ДокументФиксацияЗадания
	//	//|		ГДЕ
	//	//|			ДокументФиксацияЗадания.Ссылка.Заявка = &Заявка
	//	//|			И ДокументФиксацияЗадания.Ссылка.Проведен)
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныеЗадания
	//	|			ТОГДА СогласованиеОбъекты.Задание В (&КонкретныеЗадания)
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныеСогласования
	//	|			ТОГДА СодержаниеСогласования.Ссылка В (&КонкретныеСогласования)
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныйДоговор
	//	|			ТОГДА СодержаниеСогласования.Ссылка.Договор = &КонкретныйДоговор
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|;
	//	|ВЫБРАТЬ
	//	|	СогласованиеСодержание.Ссылка КАК Согласование,
	//	|	СогласованиеСодержание.Ссылка.ФлагВнутреннего,
	//	|	СогласованиеСодержание.Ссылка.Договор,
	//	//|	СогласованиеСодержание.Ссылка.Тариф,
	//	//|	СогласованиеСодержание.Ссылка.ТарифныйПлан,
	//	|	СогласованиеСодержание.СодержаниеРабот КАК ВидДеятельности
	//	|ПОМЕСТИТЬ
	//	|	СогласованияПоВидамДеятельности
	//	|ИЗ
	//	|	Документ.Согласование_ат.СодержаниеСогласования КАК СогласованиеСодержание
	//	|ГДЕ
	//	|	СогласованиеСодержание.Ссылка.Заявка = &Заявка
	//	|	И СогласованиеСодержание.Ссылка.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.Принято)
	//	|	И (СогласованиеСодержание.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.Техническое)
	//	|		ИЛИ СогласованиеСодержание.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.ТехническоеИФинансовое))
	//	|	И НЕ СогласованиеСодержание.Ссылка.ПометкаУдаления
	//	|	И НЕ СогласованиеСодержание.Ссылка.ОбъектыСогласования.НомерСтроки > 0 // ТЧ не заполнена => Согласование чисто по ВД
	//	|	И НЕ СогласованиеСодержание.Ссылка В
	//	|		(ВЫБРАТЬ
	//	|			ДокументФиксацияОснования.Согласование
	//	|		ИЗ
	//	|			Документ.ФиксацияРабот_ат.Основания КАК ДокументФиксацияОснования
	//	|		ГДЕ
	//	|			ДокументФиксацияОснования.Ссылка.Заявка = &Заявка
	//	|			И ДокументФиксацияОснования.Ссылка.Проведен)
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныеСогласования
	//	|			ТОГДА СогласованиеСодержание.Ссылка В (&КонкретныеСогласования)
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|		КОГДА &ЕстьКонкретныйДоговор
	//	|			ТОГДА СогласованиеСодержание.Ссылка.Договор = &КонкретныйДоговор
	//	|			ИНАЧЕ ИСТИНА
	//	|		КОНЕЦ
	//	|	И СогласованиеСодержание.Ссылка НЕ В // просто на всякий случай
	//	|		(ВЫБРАТЬ
	//	|			Согласование
	//	|		ИЗ
	//	|			СогласованияПоЗаданиям)
	//	|;
	//	//|ВЫБРАТЬ
	//	//|	КОЛИЧЕСТВО(Согласование) КАК Значение
	//	//|ПОМЕСТИТЬ
	//	//|	КолвоСогласованийПоВД
	//	//|ИЗ
	//	//|	СогласованияПоВидамДеятельности
	//	//|;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СодержаниеСогласования.Ссылка КАК Согласование,
		|	СодержаниеСогласования.Ссылка.ФлагВнутреннего КАК ФлагВнутреннего,
		|	СодержаниеСогласования.Ссылка.Договор КАК Договор,
		|	СодержаниеСогласования.Ссылка.Тариф КАК Тариф,
		|	СодержаниеСогласования.Ссылка.ТарифныйПлан КАК ТарифныйПлан,
		|	СодержаниеСогласования.СодержаниеРабот КАК ВидДеятельности,
		|	СодержаниеСогласования.Номенклатура КАК Номенклатура,
		|	СодержаниеСогласования.Цена КАК Цена,
		|	СодержаниеСогласования.Количество КАК ФактическоеВремяВыполнения
		|ПОМЕСТИТЬ Согласования
		|ИЗ
		|	Документ.Согласование_ат.СодержаниеСогласования КАК СодержаниеСогласования
		|ГДЕ
		|	СодержаниеСогласования.Ссылка.Заявка = &Заявка
		|	И СодержаниеСогласования.Ссылка.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.Принято)
		|	И (СодержаниеСогласования.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.Техническое)
		|			ИЛИ СодержаниеСогласования.Ссылка.ТипСогласования = ЗНАЧЕНИЕ(Перечисление.ТипыСогласований_ат.ТехническоеИФинансовое))
		|	И НЕ СодержаниеСогласования.Ссылка.ПометкаУдаления
		|	И НЕ СодержаниеСогласования.СодержаниеРабот.ПометкаУдаления
		|	И НЕ СодержаниеСогласования.СодержаниеРабот = ЗНАЧЕНИЕ(Справочник.СодержанияРабот_ат.ПустаяСсылка)
		|	И СодержаниеСогласования.НомерСтроки > 0
		|	И СодержаниеСогласования.Количество > 0
		|	И НЕ СодержаниеСогласования.Ссылка В
		|				(ВЫБРАТЬ
		|					ДокументФиксацияОснования.Согласование
		|				ИЗ
		|					Документ.ФиксацияРабот_ат.Основания КАК ДокументФиксацияОснования
		|				ГДЕ
		|					ДокументФиксацияОснования.Ссылка.Заявка = &Заявка
		|					И ДокументФиксацияОснования.Ссылка.Проведен)
		|	И ВЫБОР
		|			КОГДА &ЕстьКонкретныеЗадания
		|				ТОГДА СодержаниеСогласования.Ссылка В
		|						(ВЫБРАТЬ
		|							СогласованиеОбъекты.Ссылка
		|						ИЗ
		|							Документ.Согласование_ат.ОбъектыСогласования КАК СогласованиеОбъекты
		|						ГДЕ
		|							СогласованиеОбъекты.Задание В (&КонкретныеЗадания)
		|							И НЕ СогласованиеОбъекты.Ссылка.ПометкаУдаления)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЕстьКонкретныеСогласования
		|				ТОГДА СодержаниеСогласования.Ссылка В (&КонкретныеСогласования)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ЕстьКонкретныйДоговор
		|				ТОГДА СодержаниеСогласования.Ссылка.Договор = &КонкретныйДоговор
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументЗадание.СодержаниеРабот КАК ВидДеятельности,
		|	ДокументЗадание.Ссылка КАК Задание,
		|	СвойстваЗаданий.ФактическоеВремяВыполнения КАК ФактическоеВремяВыполнения,
		|	СвойстваЗаданий.ПланируемоеВремяВыполнения КАК ПланируемоеВремяВыполнения
		|ПОМЕСТИТЬ Задания
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание_ат КАК ДокументЗадание
		|		ПО СвязиОбъектов.Объект = ДокументЗадание.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ПО СвязиОбъектов.Объект = СвойстваЗаданий.Ссылка
		|ГДЕ
		|	СвязиОбъектов.Предок = &Заявка
		|	И СвязиОбъектов.Объект ССЫЛКА Документ.Задание_ат
		|	И НЕ ДокументЗадание.ПометкаУдаления
		|	И НЕ ДокументЗадание.СодержаниеРабот.ПометкаУдаления
		|	И НЕ ДокументЗадание.СодержаниеРабот = ЗНАЧЕНИЕ(Справочник.СодержанияРабот_ат.ПустаяСсылка)
		|	И СвойстваЗаданий.ФактическоеВремяВыполнения > 0
		|	И НЕ ДокументЗадание.Ссылка В
		|				(ВЫБРАТЬ
		|					ДокументФиксацияЗадания.Задание
		|				ИЗ
		|					Документ.ФиксацияРабот_ат.Задания КАК ДокументФиксацияЗадания
		|				ГДЕ
		|					ДокументФиксацияЗадания.Ссылка.Заявка = &Заявка
		|					И ДокументФиксацияЗадания.Ссылка.Проведен)
		|	И ВЫБОР
		|			КОГДА &ЕстьКонкретныеЗадания
		|				ТОГДА ДокументЗадание.Ссылка В (&КонкретныеЗадания)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ ДокументЗадание.Ссылка В
		|				(ВЫБРАТЬ
		|					СогласованиеОбъекты.Задание
		|				ИЗ
		|					Документ.Согласование_ат.ОбъектыСогласования КАК СогласованиеОбъекты
		|				ГДЕ
		|					СогласованиеОбъекты.Ссылка В
		|						(ВЫБРАТЬ
		|							Согласования.Согласование
		|						ИЗ
		|							Согласования))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Согласования.Согласование КАК Согласование,
		|	Согласования.ФлагВнутреннего КАК ФлагВнутреннего,
		|	Согласования.Договор КАК Договор,
		|	Согласования.ВидДеятельности КАК ВидДеятельности,
		|	Согласования.Номенклатура КАК Номенклатура,
		|	Согласования.Цена КАК Цена,
		|	Согласования.ФактическоеВремяВыполнения КАК ФактическоеВремяВыполнения,
		|	Согласования.Тариф КАК Тариф,
		|	Согласования.ТарифныйПлан КАК ТарифныйПлан,
		|	ЗНАЧЕНИЕ(Документ.Задание_ат.ПустаяСсылка) КАК Задание,
		|	0 КАК ПланируемоеВремяВыполнения
		|ИЗ
		|	Согласования КАК Согласования
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка),
		|	ЛОЖЬ,
		|	ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка),
		|	Задания.ВидДеятельности,
		|	NULL,
		|	0,
		|	Задания.ФактическоеВремяВыполнения,
		|	NULL,
		|	NULL,
		|	Задания.Задание,
		|	Задания.ПланируемоеВремяВыполнения
		|ИЗ
		|	Задания КАК Задания");
		
		//|ВЫБРАТЬ
		//|	ДокументЗадание.Ссылка КАК Задание,
		//|	ЕСТЬNULL(СогласованияПоЗаданиям.Согласование, СогласованияПоВидамДеятельности.Согласование) КАК Согласование,
		//|	СвойстваЗаданий.ФактическоеВремяВыполнения
		////,
		////|	ВЫБОР
		////		КОГДА СогласованияПоЗаданиям.Согласование ЕСТЬ NULL
		////			ТОГДА ВЫБОР
		////				КОГДА СогласованияПоВидамДеятельности.Согласование ЕСТЬ NULL
		////					ТОГДА 0
		////				ИНАЧЕ
		////					СогласованияПоВидамДеятельности.СодержаниеРабот
		////|	ЕСТЬNULL(ВременаРаботОбороты.ПланируемоеВремяОборот, 0) КАК ПланируемоеВремяВыполнения,
		////|	ЕСТЬNULL(ВременаРаботОбороты.ФактическоеВремяОборот, 0) КАК ФактическоеВремяВыполнения,
		////|	ЕСТЬNULL(ВременаРаботОбороты.СогласованноеВремяОборот, 0) КАК СогласованноеВремяВыполнения,
		////|	ВЫБОР
		////|		КОГДА НЕ КосвенныеСвязиЗаданий.Согласование ЕСТЬ NULL
		////|				И КосвенныеСвязиЗаданий.Согласование <> ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)
		////|			ТОГДА КосвенныеСвязиЗаданий.Согласование
		////|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)
		////|	КОНЕЦ КАК СогласованиеПоКСЗ
		//|ИЗ
		//|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задание_ат КАК ДокументЗадание
		//|			ПО СвязиОбъектов.Объект = ДокументЗадание.Ссылка
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		//|			ПО СвязиОбъектов.Объект = СвойстваЗаданий.Ссылка
		//|		ЛЕВОЕ СОЕДИНЕНИЕ СогласованияПоЗаданиям КАК СогласованияПоЗаданиям
		//|			ПО ДокументЗадание.Ссылка = СогласованияПоЗаданиям.Задание
		//|		ЛЕВОЕ СОЕДИНЕНИЕ СогласованияПоВидамДеятельности КАК СогласованияПоВидамДеятельности
		//|			ПО ДокументЗадание.СодержаниеРабот = СогласованияПоВидамДеятельности.ВидДеятельности
		////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВременаРабот_ат.Обороты(,,, Заявка = &Заявка) КАК ВременаРаботОбороты
		////|			ПО ДокументЗадание.СодержаниеРабот = ВременаРаботОбороты.СодержаниеРабот
		////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий
		////|			ПО ДокументЗадание.Ссылка = КосвенныеСвязиЗаданий.Задание
		////|				ИЛИ (КосвенныеСвязиЗаданий.Задание = ЗНАЧЕНИЕ(Документ.Задание_ат.ПустаяСсылка)
		////|					И ДокументЗадание.СодержаниеРабот = КосвенныеСвязиЗаданий.СодержаниеРабот
		////|					И СвязиОбъектов.Предок = КосвенныеСвязиЗаданий.Заявка)
		//|ГДЕ
		//|	СвязиОбъектов.Предок = &Заявка
		//|	И (СвязиОбъектов.Объект ССЫЛКА Документ.Задание_ат)
		//|	И (НЕ ВЫРАЗИТЬ(СвязиОбъектов.Объект КАК Документ.Задание_ат).ПометкаУдаления)
		//|	И СвойстваЗаданий.ФактическоеВремяВыполнения > 0
		//|	И ВЫБОР
		//|		КОГДА &КонкретныеЗадания <> НЕОПРЕДЕЛЕНО
		//|			ТОГДА СвязиОбъектов.Объект В (&КонкретныеЗадания)
		//|			ИНАЧЕ ИСТИНА
		//|		КОНЕЦ
		//|	И ВЫБОР
		//|		КОГДА &КонкретныеСогласования <> НЕОПРЕДЕЛЕНО
		//|			И 1 В
		//|				(ВЫБРАТЬ
		//|					1
		//|				ИЗ
		//|					Согласования
		//|				ГДЕ
		//|					НЕ Задание ЕСТЬ NULL)
		//|			ТОГДА СвязиОбъектов.Объект В (&ЗаданияСогласований)
		//|			ИНАЧЕ ИСТИНА
		//|		КОНЕЦ
		//|");
	
	//
	
	Если ОтборПоЗаданиям Тогда
		
		Запрос.УстановитьПараметр("ЕстьКонкретныеЗадания", Истина);
		Запрос.УстановитьПараметр("КонкретныеЗадания", Задания.ВыгрузитьКолонку("Задание"));
		
	Иначе
		
		Запрос.УстановитьПараметр("ЕстьКонкретныеЗадания", Ложь);
		Запрос.УстановитьПараметр("КонкретныеЗадания", Неопределено);
		
	КонецЕсли;
	
	Если Основания.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ЕстьКонкретныеСогласования", Истина);
		Запрос.УстановитьПараметр("КонкретныеСогласования", Основания.ВыгрузитьКолонку("Согласование"));
		
	Иначе
		
		Запрос.УстановитьПараметр("ЕстьКонкретныеСогласования", Ложь);
		Запрос.УстановитьПараметр("КонкретныеСогласования", Неопределено);
		
	КонецЕсли;
	
	Если НЕ Договор.Пустая() Тогда
		
		Запрос.УстановитьПараметр("ЕстьКонкретныйДоговор", Истина);
		Запрос.УстановитьПараметр("КонкретныйДоговор", Договор);
		
	Иначе
		
		Запрос.УстановитьПараметр("ЕстьКонкретныйДоговор", Ложь);
		Запрос.УстановитьПараметр("КонкретныйДоговор", Неопределено);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//ТаблицаПроверки = Таблица.Скопировать();
	//ТаблицаПроверки.Свернуть("Договор"); //Тариф,ТарифныйПлан
	//Если ТаблицаПроверки.Количество() > 1 Тогда
	//	
	//	ВызватьИсключение "Не допустимо (в текущей версии) комплексное закрытие по Согласованиям с различными Договором, Тарифом, ТарифнымПланом!";
	//	
	//КонецЕсли;
	//
	//Для Каждого СтрокаТаблицы Из Таблица Цикл
	//	
	//	Если СтрокаТаблицы.Договор.Пустая() Тогда
	//		
	//		
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//.....
	
	ТаблицаВД = Таблица.Скопировать();
	ТаблицаВД.Свернуть("ВидДеятельности");
	МассивВД = ТаблицаВД.ВыгрузитьКолонку("ВидДеятельности");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВременаРаботОбороты.СодержаниеРабот КАК ВидДеятельности,
		|	СУММА(ЕСТЬNULL(ВременаРаботОбороты.ПланируемоеВремяОборот, 0)) КАК ПланируемоеВремя,
		|	СУММА(ЕСТЬNULL(ВременаРаботОбороты.ФактическоеВремяОборот, 0)) КАК ФактическоеВремя,
		|	СУММА(ЕСТЬNULL(ВременаРаботОбороты.СогласованноеВремяОборот, 0)) КАК СогласованноеВремя,
		|	СУММА(ЕСТЬNULL(ВременаРаботОбороты.ОтчетноеВремяОборот, 0)) КАК ОтчетноеВремя
		|ИЗ
		|	РегистрНакопления.ВременаРабот_ат.Обороты(,,, Заявка = &Заявка И СодержаниеРабот В (&ВидыДеятельности)) КАК ВременаРаботОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременаРаботОбороты.СодержаниеРабот");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ВидыДеятельности", МассивВД);
	
	ТаблицаВремен = Запрос.Выполнить().Выгрузить();
	
	//Пока Выборка.Следующий() Цикл
	//	
	//	Услуга = Услуги.Найти(Выборка.ВидДеятельности, "СодержаниеРабот");
	//	
	//	Если Услуга = Неопределено Тогда
	//		
	//		Услуга = Услуги.Добавить();
	//		Услуга.СодержаниеРабот = Выборка.ВидДеятельности;
	//		
	//	КонецЕсли;
	//	
	//	Услуга.ПланируемоеВремя 	= Выборка.ПланируемоеВремя;
	//	Услуга.ФактическоеВремя 	= Выборка.ФактическоеВремя;
	//	Услуга.СогласованноеВремя 	= Выборка.СогласованноеВремя;
	//	Услуга.РанееЗакрытоеВремя 	= Выборка.ОтчетноеВремя;
	//	
	//	Услуга.ОтчетноеВремя 		= ?(
	//		Выборка.ФактическоеВремя - Выборка.ОтчетноеВремя > 0,
	//		Выборка.ФактическоеВремя - Выборка.ОтчетноеВремя, 0);
	//	
	//	//Услуга.Согласование 		= Неопределено;
	//	//Услуга.Тариф 				= Неопределено;
	//	//Услуга.ТарифныйПлан  		= Неопределено;
	//	//Услуга.ВводитьДополнительноеСогласование = Истина;
	//	
	//КонецЦикла;
	
	ТаблицаСогласований = Таблица.Скопировать();
	ТаблицаСогласований.Свернуть("Согласование");
	МассивСогласований = ТаблицаСогласований.ВыгрузитьКолонку("Согласование");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СогласованиеОбъекты.Ссылка КАК Согласование,
		|	СогласованиеОбъекты.Задание.СодержаниеРабот КАК ВидДеятельности,
		|	СогласованиеОбъекты.Задание,
		|	СвойстваЗаданий.ПланируемоеВремяВыполнения КАК ПланируемоеВремяВыполнения,
		|	СвойстваЗаданий.ФактическоеВремяВыполнения КАК ФактическоеВремяВыполнения
		|ИЗ
		|	Документ.Согласование_ат.ОбъектыСогласования КАК СогласованиеОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|			ПО СогласованиеОбъекты.Задание = СвойстваЗаданий.Ссылка
		|ГДЕ
		|	СогласованиеОбъекты.Ссылка В (&Согласования)
		|	И НЕ СогласованиеОбъекты.Задание.ПометкаУдаления
		|	И СвойстваЗаданий.ФактическоеВремяВыполнения > 0
		|	И СогласованиеОбъекты.Задание.СодержаниеРабот В (&СодержанияРабот)
		|	И СогласованиеОбъекты.Задание НЕ В
		|		(ВЫБРАТЬ
		|			ДокументФиксацияЗадания.Задание
		|		ИЗ
		|			Документ.ФиксацияРабот_ат.Задания КАК ДокументФиксацияЗадания
		|		ГДЕ
		|			ДокументФиксацияЗадания.Ссылка.Заявка = &Заявка
		|			И ДокументФиксацияЗадания.Ссылка.Проведен)
		|	И ВЫБОР
		|		КОГДА &ЕстьКонкретныеЗадания
		|			ТОГДА СогласованиеОбъекты.Задание В (&КонкретныеЗадания)
		|				И НЕ СогласованиеОбъекты.Ссылка.ПометкаУдаления
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|");
	
	Запрос.УстановитьПараметр("Согласования", МассивСогласований);
	Запрос.УстановитьПараметр("СодержанияРабот", МассивВД);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Если Задания.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ЕстьКонкретныеЗадания", Истина);
		Запрос.УстановитьПараметр("КонкретныеЗадания", Задания.ВыгрузитьКолонку("Задание"));
		
	Иначе
		
		Запрос.УстановитьПараметр("ЕстьКонкретныеЗадания", Ложь);
		Запрос.УстановитьПараметр("КонкретныеЗадания", Неопределено);
		
	КонецЕсли;
	
	ТаблицаЗаданийПоСогласованиям = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРасчетаОтчетногоВремени = ТаблицаЗаданийПоСогласованиям.Скопировать();
	ТаблицаРасчетаОтчетногоВремени.Свернуть("Согласование,ВидДеятельности", "ФактическоеВремяВыполнения");
	
	Для Каждого Выборка Из Таблица Цикл
		
		Если ЗначениеЗаполнено(Выборка.Договор) Тогда
			
			Если Договор.Пустая() Тогда
				
				Договор = Выборка.Договор;
				
			ИначеЕсли Договор <> Выборка.Договор Тогда
				
				ВызватьИсключение "Не допустимо комплексное закрытие по Согласованиям с различными Договорами!";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтчетноеВремя = Выборка.ФактическоеВремяВыполнения;
		
		Если ЗначениеЗаполнено(Выборка.Согласование) И ОтборПоЗаданиям Тогда
			
			ТаблицаФактическогоВремениПоЗаданиямВСогласовании = ТаблицаРасчетаОтчетногоВремени.НайтиСтроки(
				Новый Структура("Согласование,ВидДеятельности", Выборка.Согласование, Выборка.ВидДеятельности));
			
			Если ТаблицаФактическогоВремениПоЗаданиямВСогласовании.Количество() > 0 Тогда
				
				ОтчетноеВремя = ТаблицаФактическогоВремениПоЗаданиямВСогласовании[0].ФактическоеВремяВыполнения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СуществующиеУслуги = Услуги.НайтиСтроки(
			Новый Структура("СодержаниеРабот,Номенклатура,Цена",
			Выборка.ВидДеятельности, Выборка.Номенклатура, Выборка.Цена)); //!!!!! пока нет спр.Услуги со спецификацией
		
		Если СуществующиеУслуги.Количество() > 0 Тогда
			
			СуществующиеУслуги[0].ОтчетноеВремя = СуществующиеУслуги[0].ОтчетноеВремя + ОтчетноеВремя;
			
		Иначе
			
			Услуга = Услуги.Добавить();
			Услуга.СодержаниеРабот 	= Выборка.ВидДеятельности;
			Услуга.ОтчетноеВремя 	= ОтчетноеВремя;
			Услуга.Номенклатура 	= Выборка.Номенклатура; //!!!!!TODO добавить определение через РС.НастройкиСогласований_ат
			Услуга.Цена 			= Выборка.Цена;
			
			ВременаУслуги = ТаблицаВремен.Найти(Выборка.ВидДеятельности, "ВидДеятельности");
			
			Если ВременаУслуги <> Неопределено Тогда
				
				Услуга.ПланируемоеВремя 	= ВременаУслуги.ПланируемоеВремя;
				Услуга.ФактическоеВремя 	= ВременаУслуги.ФактическоеВремя;
				Услуга.СогласованноеВремя 	= ВременаУслуги.СогласованноеВремя;
				Услуга.РанееЗакрытоеВремя 	= ВременаУслуги.ОтчетноеВремя;
				
				//?????
				//Услуга.ОтчетноеВремя 		= ?(
				//	Выборка.ФактическоеВремя - Выборка.ОтчетноеВремя > 0,
				//	Выборка.ФактическоеВремя - Выборка.ОтчетноеВремя, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Согласование) Тогда
			
			ЗаданияПоСогласованию = ТаблицаЗаданийПоСогласованиям.НайтиСтроки(Новый Структура("Согласование,ВидДеятельности",
				Выборка.Согласование, Выборка.ВидДеятельности));
			
			Для Каждого ЗаданиеПоСогласованию Из ЗаданияПоСогласованию Цикл
				
				Если ЗначениеЗаполнено(ЗаданиеПоСогласованию.Задание)
					И Задания.Найти(ЗаданиеПоСогласованию.Задание, "Задание") = Неопределено Тогда
					
					НовоеЗадание = Задания.Добавить();
					НовоеЗадание.Задание = ЗаданиеПоСогласованию.Задание;
					НовоеЗадание.СодержаниеРабот = ЗаданиеПоСогласованию.ВидДеятельности;
					НовоеЗадание.ПланируемоеВремяВыполнения = ЗаданиеПоСогласованию.ПланируемоеВремяВыполнения;
					НовоеЗадание.ФактическоеВремяВыполнения = ЗаданиеПоСогласованию.ФактическоеВремяВыполнения;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ОтборПоЗаданиям И Основания.Найти(Выборка.Согласование, "Согласование") = Неопределено Тогда
				
				НовоеОснование = Основания.Добавить();
				НовоеОснование.Согласование = Выборка.Согласование;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.Задание) И Задания.Найти(Выборка.Задание, "Задание") = Неопределено Тогда
				
				НовоеЗадание = Задания.Добавить();
				НовоеЗадание.Задание = Выборка.Задание;
				НовоеЗадание.СодержаниеРабот = Выборка.ВидДеятельности;
				НовоеЗадание.ПланируемоеВремяВыполнения = Выборка.ПланируемоеВремяВыполнения;
				НовоеЗадание.ФактическоеВремяВыполнения = Выборка.ФактическоеВремяВыполнения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	//	//	Если ЗначениеЗаполнено(Выборка.ВидДеятельности) Тогда
	//		
	//		//УслугиБезСогласований = Услуги.НайтиСтроки(
	//		//	Новый Структура("СодержаниеРабот,ВводитьДополнительноеСогласование",
	//		//	Выборка.ВидДеятельности, Истина));
	//		//
	//		//Если УслугиБезСогласований.Количество() = 1 Тогда
	//		//	
	//		//	УслугиБезСогласований[0].ОтчетноеВремя = УслугиБезСогласований[0].ОтчетноеВремя - Выборка.ФактическоеВремя;
	//		//	
	//		//КонецЕсли;
	//		
	////		Если ЗначениеЗаполнено(Выборка.Согласование) Тогда //И ЗначениеЗаполнено(Выборка.Тариф) И ЗначениеЗаполнено(Выборка.ТарифныйПлан) Тогда
	//			
	////			УслугиБезСогласований = Услуги.НайтиСтроки(
	////				Новый Структура("СодержаниеРабот,Согласование", //,Тариф,ТарифныйПлан",
	////				Выборка.ВидДеятельности, Выборка.Согласование)); //, Выборка.Тариф, Выборка.ТарифныйПлан));
	////			
	////			Если УслугиБезСогласований.Количество() = 0 Тогда
	//				
	//				Услуга = Услуги.Добавить();
	//				Услуга.СодержаниеРабот 			= Выборка.ВидДеятельности;
	//				Услуга.Номенклатура 			= Выборка.ВидДеятельности.Номенклатура; //!!!!!TODO добавить определение через РС.НастройкиСогласований_ат
	//				//Услуга.Согласование 			= Выборка.Согласование;
	//				//Услуга.ВнутренееСогласование 	= Выборка.ФлагВнутреннего;
	//				Услуга.Тариф 					= Выборка.Тариф;
	//				Услуга.ТарифныйПлан 			= Выборка.ТарифныйПлан;
	//				Услуга.ОтчетноеВремя 			= Выборка.ФактическоеВремя;
	////				Услуга.Цена 					= Выборка.Цена;
	//				Услуга.ВводитьДополнительноеСогласование = Ложь;
	//				
	////			Иначе
	////				
	////				УслугиПоСогласованию[0].ОтчетноеВремя = УслугиПоСогласованию[0].ОтчетноеВремя + Выборка.ФактическоеВремя; // по логике более одной строки быть не может
	////				
	////			КонецЕсли;
	//		
	//			
	//			
	//		Иначе
	//			
	//			УслугиБезСогласований = Услуги.НайтиСтроки(
	//				Новый Структура("СодержаниеРабот,Согласование", //,Тариф,ТарифныйПлан",
	//				Выборка.ВидДеятельности, Выборка.Согласование)); //, Выборка.Тариф, Выборка.ТарифныйПлан));
	//			
	//			Если УслугиБезСогласований.Количество() = 0 Тогда
	//				
	//				Услуга = Услуги.Добавить();
	//				Услуга.СодержаниеРабот 			= Выборка.ВидДеятельности;
	//				Услуга.ОтчетноеВремя 			= Выборка.ФактическоеВремя;
	//				Услуга.ВводитьДополнительноеСогласование = Истина;
	//				
	//			Иначе
	//				
	//				УслугиБезСогласований[0].ОтчетноеВремя = УслугиБезСогласований[0].ОтчетноеВремя + Выборка.ФактическоеВремя;
	//				
	//			КонецЕсли;
	//		
	////			
	////			Если УслугиБезСогласований.Количество() = 1 Тогда
	////			
	////				УслугиБезСогласований[0].ОтчетноеВремя = УслугиБезСогласований[0].ОтчетноеВремя + Выборка.ФактическоеВремя;
	////				
	////			Иначе
	////				
	////				Услуга = Услуги.Добавить();
	////				Услуга.СодержаниеРабот 	= Выборка.ВидДеятельности;
	////				Услуга.Номенклатура 	= Выборка.ВидДеятельности.Номенклатура; //!!!!!TODO добавить определение через РС.НастройкиСогласований_ат
	////				Услуга.ОтчетноеВремя 	= Выборка.ФактическоеВремя;
	////			
	////			КонецЕсли;
	//			
	//		КонецЕсли;
	//		
	////	КонецЕсли;
	//	
	//
	//
	//	
	//	Если ЗначениеЗаполнено(Выборка.Задание) И Задания.Найти(Выборка.Задание, "Задание") = Неопределено Тогда
	//		
	//		НовоеЗадание = Задания.Добавить();
	//		НовоеЗадание.Задание 					= Выборка.Задание;
	//		НовоеЗадание.СодержаниеРабот 			= Выборка.ВидДеятельности;
	//		НовоеЗадание.ФактическоеВремяВыполнения = Выборка.ФактическоеВремя;
	//		
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(Выборка.Согласование) И Основания.Найти(Выборка.Согласование, "Согласование") = Неопределено Тогда
	//		
	//		НовоеОснование = Основания.Добавить();
	//		НовоеОснование.Согласование = Выборка.Согласование;
	//		
	//	КонецЕсли;
	//	
	КонецЦикла;
	
	//// Удаляем Услуги с нулевым ОВ
	//ПозицияВУслугах = Услуги.Количество() - 1;
	//Пока ПозицияВУслугах > 0 Цикл
	//	
	//	Если Услуги[ПозицияВУслугах].ОтчетноеВремя = 0 Тогда
	//		Услуги.Удалить(ПозицияВУслугах);
	//	КонецЕсли;
	//	
	//	ПозицияВУслугах = ПозицияВУслугах - 1;
	//	
	//КонецЦикла;
	
	//Запрос = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	Задание_ат.СодержаниеРабот,
	//	|	ВЫБОР
	//	|		КОГДА НЕ КосвенныеСвязиЗаданий_ат.Согласование ЕСТЬ NULL
	//	|				И КосвенныеСвязиЗаданий_ат.Согласование <> ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)
	//	|			ТОГДА КосвенныеСвязиЗаданий_ат.Согласование
	//	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)
	//	|	КОНЕЦ КАК Согласование,
	//	|	ВЫБОР
	//	|		КОГДА КосвенныеСвязиЗаданий_ат.Согласование ЕСТЬ NULL
	//	|				ИЛИ КосвенныеСвязиЗаданий_ат.Согласование = ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)
	//	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	//	|		ИНАЧЕ КосвенныеСвязиЗаданий_ат.Согласование.Дата
	//	|	КОНЕЦ КАК ДатаСогласования,
	//	|	ВЫБОР
	//	|		КОГДА КосвенныеСвязиЗаданий_ат.Согласование ЕСТЬ NULL
	//	|				ИЛИ КосвенныеСвязиЗаданий_ат.Согласование = ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)
	//	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Договоры.ПустаяСсылка)
	//	|		ИНАЧЕ КосвенныеСвязиЗаданий_ат.Согласование.Договоры
	//	|	КОНЕЦ КАК Договор,
	//	|	//
	//	|	МИНИМУМ(ЕСТЬNULL(СвойстваЗаданий_ат.ПланируемаяДатаНачала, ДАТАВРЕМЯ(1, 1, 2999))) КАК ПланируемаяДатаНачала,
	//	|	МИНИМУМ(ЕСТЬNULL(СвойстваЗаданий_ат.ФактическаяДатаНачала, ДАТАВРЕМЯ(1, 1, 2999))) КАК ФактическаяДатаНачала,
	//	|	МАКСИМУМ(ЕСТЬNULL(СвойстваЗаданий_ат.ПланируемаяДатаОкончания, ДАТАВРЕМЯ(1, 1, 1))) КАК ПланируемаяДатаОкончания, 
	//	|	МАКСИМУМ(ЕСТЬNULL(СвойстваЗаданий_ат.ФактическаяДатаОкончания, ДАТАВРЕМЯ(1, 1, 1))) КАК ФактическаяДатаОкончания,
	//	|	СУММА(ЕСТЬNULL(СвойстваЗаданий_ат.ПланируемаяДлительность, 0)) КАК ПланируемаяДлительность,
	//	|	СУММА(ЕСТЬNULL(СвойстваЗаданий_ат.ФактическаяДлительность, 0)) КАК ФактическаяДлительность,
	//	|	ЕСТЬNULL(ВременаРабот_атОбороты.ПланируемоеВремяОборот, 0) КАК ПланируемоеВремяВыполнения,
	//	|	ЕСТЬNULL(ВременаРабот_атОбороты.ФактическоеВремяОборот, 0) КАК ФактическоеВремяВыполнения,
	//	|	ЕСТЬNULL(ВременаРабот_атОбороты.СогласованноеВремяОборот, 0) КАК СогласованноеВремяВыполнения
	//	|ИЗ
	//	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	//	|			ПО СвязиОбъектов_ат.Объект = СвойстваЗаданий_ат.Ссылка
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданий_атСрезПоследних
	//	|			ПО СвязиОбъектов_ат.Объект = ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задание_ат КАК Задание_ат
	//	|			ПО СвязиОбъектов_ат.Объект = Задание_ат.Ссылка
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	//	|			ПО Задание_ат.Ссылка = КосвенныеСвязиЗаданий_ат.Задание
	//	|				ИЛИ (КосвенныеСвязиЗаданий_ат.Задание = ЗНАЧЕНИЕ(Документ.Задание_ат.ПустаяСсылка)
	//	|					И Задание_ат.СодержаниеРабот = КосвенныеСвязиЗаданий_ат.СодержаниеРабот
	//	|					И СвязиОбъектов_ат.Предок = КосвенныеСвязиЗаданий_ат.Заявка)
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВременаРабот_ат.Обороты(, , , Заявка = &Заявка) КАК ВременаРабот_атОбороты
	//	|			ПО ВременаРабот_атОбороты.СодержаниеРабот = Задание_ат.СодержаниеРабот
	//	|ГДЕ
	//	|	СвязиОбъектов_ат.Предок = &Заявка
	//	|	И (СвязиОбъектов_ат.Объект ССЫЛКА Документ.Задание_ат)
	//	|	И (НЕ ВЫРАЗИТЬ(СвязиОбъектов_ат.Объект КАК Документ.Задание_ат).ПометкаУдаления)
	//	|	//И (ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Выполнено)
	//	|	//	ИЛИ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Прервано)
	//	|	//	ИЛИ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено))
	//	|	И СвойстваЗаданий_ат.ФактическоеВремяВыполнения > 0
	//	|	//И (КосвенныеСвязиЗаданий_ат.ФиксацияРабот ЕСТЬ NULL
	//	|	//	ИЛИ КосвенныеСвязиЗаданий_ат.ФиксацияРабот = ЗНАЧЕНИЕ(Документ.ФиксацияРабот_ат.ПустаяСсылка)
	//	|	//	ИЛИ НЕ КосвенныеСвязиЗаданий_ат.ФиксацияРабот.ПометкаУдаления)
	//	|	И НЕ СвязиОбъектов_ат.Объект В
	//	|		(ВЫБРАТЬ
	//	|			ДокументФиксацияЗадания.Задание
	//	|		ИЗ
	//	|			Документ.ФиксацияРабот_ат.Задания КАК ДокументФиксацияЗадания
	//	|		ГДЕ
	//	|			ДокументФиксацияЗадания.Ссылка.Заявка = &Заявка
	//	|			И ДокументФиксацияЗадания.Ссылка.Проведен)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	Задание_ат.СодержаниеРабот,
	//	|	ВЫБОР
	//	|		КОГДА КосвенныеСвязиЗаданий_ат.Согласование ЕСТЬ NULL
	//	|				ИЛИ КосвенныеСвязиЗаданий_ат.Согласование = ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)
	//	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	//	|		ИНАЧЕ КосвенныеСвязиЗаданий_ат.Согласование.Дата
	//	|	КОНЕЦ,
	//	|	ВременаРабот_атОбороты.ПланируемоеВремяОборот,
	//	|	ВременаРабот_атОбороты.ФактическоеВремяОборот,
	//	|	ВременаРабот_атОбороты.СогласованноеВремяОборот
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ПланируемаяДатаОкончания,
	//	|	ФактическаяДатаОкончания
	//	|");
	//
	//Запрос.УстановитьПараметр("Заявка", Заявка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//СуммаДокумента = 0;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	ДоговорПоЗаявке		= Финансы_ат.ПолучитьДоговорПоЗаявке(Заявка, Дата);
	//	ОрганизацияПоЗаявке	= ДоговорПоЗаявке.Организация;
	//	ВидДоговораПоЗаявке	= ДоговорПоЗаявке.ВидДоговора;
	//	КлиентПоЗаявке		= ДоговорПоЗаявке.Владелец;
	//	ПроектПоЗаявке		= Выборка.Заявка.Проект;
	//	
	//	НоваяСтрока = Услуги.Добавить();
	//	
	//	// Общее
	//	
	//	НоваяСтрока.Удалить_Заявка = Выборка.Заявка;
	//	//НоваяСтрока.Задание = Выборка.Задание; //!!!!!HOTFIX
	//	НоваяСтрока.СодержаниеРабот = Выборка.СодержаниеРабот;
	//	НоваяСтрока.Номенклатура = Выборка.СодержаниеРабот.Номенклатура;
	//	НоваяСтрока.Удалить_Договор = ДоговорПоЗаявке;
	//	НоваяСтрока.Проект = ПроектПоЗаявке;
	//	
	//	// Даты окончания
	//	
	//	НоваяСтрока.Удалить_ПланируемаяДатаОкончания = Выборка.ПланируемаяДатаОкончания;
	//	НоваяСтрока.Удалить_ФактическаяДатаОкончания = Выборка.ФактическаяДатаОкончания;
	//	НоваяСтрока.Удалить_ОтчетнаяДатаОкончания	 = Выборка.ПланируемаяДатаОкончания;
	//	
	//	// Даты начала
	//	
	//	НоваяСтрока.Удалить_ПланируемаяДатаНачала	= Выборка.ПланируемаяДатаНачала;
	//	НоваяСтрока.Удалить_ФактическаяДатаНачала	= Выборка.ФактическаяДатаНачала;
	//	НоваяСтрока.Удалить_ОтчетнаяДатаНачала		= Выборка.ПланируемаяДатаНачала;
	//	
	//	// Длительности
	//	
	//	НоваяСтрока.Удалить_ПланируемаяДлительность	= Выборка.ПланируемаяДлительность;
	//	НоваяСтрока.Удалить_ФактическаяДлительность = Выборка.ФактическаяДлительность;
	//	
	//	Если Выборка.СогласованноеВремяВыполнения > 0 Тогда //!!!!!TODO //БылоСогласование Тогда
	//		НоваяСтрока.Удалить_ОтчетнаяДлительность = Выборка.ПланируемаяДлительность;
	//	Иначе
	//		НоваяСтрока.Удалить_ОтчетнаяДлительность = Выборка.ФактическаяДлительность;
	//	КонецЕсли;
	//	
	//	// Времена
	//	
	//	НоваяСтрока.ПланируемоеВремя					= Выборка.ПланируемоеВремяВыполнения;
	//	НоваяСтрока.ПланируемоеВремяДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//		Выборка.ПланируемоеВремяВыполнения);
	//	
	//	НоваяСтрока.ФактическоеВремя					= Выборка.ФактическоеВремяВыполнения;
	//	НоваяСтрока.ФактическоеВремяДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//		Выборка.ФактическоеВремяВыполнения);
	//	
	//	База = ПродолжительностьПроцессов_Сервер_ат.ПолучитьМинимальныйИнтервалДеятельности();
	//	Если Выборка.СогласованноеВремяВыполнения > 0 Тогда //!!!!!TODO //БылоСогласование Тогда
	//		
	//		НоваяСтрока.ОтчетноеВремя					=  Числа_КлиентСервер_ат.ПривестиЧислоКБазе(
	//			Выборка.СогласованноеВремяВыполнения, База);
	//		НоваяСтрока.ОтчетноеВремяДляОтображения	= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//			НоваяСтрока.ОтчетноеВремя);
	//		
	//	ИначеЕсли Выборка.ФактическоеВремяВыполнения > 0 Тогда
	//		
	//		НоваяСтрока.ОтчетноеВремя					= Числа_КлиентСервер_ат.ПривестиЧислоКБазе(
	//			Выборка.ФактическоеВремяВыполнения, База);
	//		НоваяСтрока.ОтчетноеВремяДляОтображения	= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//			НоваяСтрока.ОтчетноеВремя);
	//		
	//	Иначе
	//		
	//		НоваяСтрока.ОтчетноеВремя					= Числа_КлиентСервер_ат.ПривестиЧислоКБазе(
	//			Выборка.ПланируемоеВремяВыполнения, База);
	//		
	//		НоваяСтрока.ОтчетноеВремяДляОтображения	= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//			НоваяСтрока.ОтчетноеВремя);
	//		
	//	КонецЕсли;
	//	
	//	// Суммы
	//	
	//	РасчетнаяЦена = Финансы_ат.ПолучитьЦенуНоменклатуры(
	//		?(ЗначениеЗаполнено(Выборка.ДатаСогласования), Выборка.ДатаСогласования, Дата// ТекущаяДата() //!!!!!HOTFIX
	//			),
	//		НоваяСтрока.Номенклатура, ОрганизацияПоЗаявке, ВидДоговораПоЗаявке,
	//		КлиентПоЗаявке, ДоговорПоЗаявке, ПроектПоЗаявке);
	//	
	//	РасчетнаяЦена = ?(РасчетнаяЦена = Неопределено, 0, РасчетнаяЦена);
	//	
	//	НоваяСтрока.РасчетнаяЦена = РасчетнаяЦена;
	//	
	//	НоваяСтрока.ПланируемаяСтоимость	 = РасчетнаяЦена
	//		* ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
	//			НоваяСтрока.ПланируемоеВремя);
	//	НоваяСтрока.ФактическаяСтоимость = РасчетнаяЦена
	//		* ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
	//			НоваяСтрока.ФактическоеВремя);
	//	НоваяСтрока.ОтчетнаяСтоимость	 = РасчетнаяЦена
	//		* ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
	//			НоваяСтрока.ОтчетноеВремя);
	//	
	//	//Итоги
	//	СуммаДокумента			= СуммаДокумента + НоваяСтрока.ОтчетнаяСтоимость;
	//	
	//КонецЦикла;
	
	ВОЗВРАТ; // ниже какая-то фигня :((( //!!!!!TODO
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задание_ат.Ссылка КАК Задание,
	|	СвойстваЗаданий_ат.ПланируемаяДатаНачала,
	|	СвойстваЗаданий_ат.ПланируемаяДатаОкончания,
	|	СвойстваЗаданий_ат.ПланируемаяДлительность,
	|	СвойстваЗаданий_ат.ПланируемоеВремяВыполнения,
	|	СвойстваЗаданий_ат.ФактическаяДатаНачала,
	|	СвойстваЗаданий_ат.ФактическаяДатаОкончания,
	|	СвойстваЗаданий_ат.ФактическаяДлительность,
	|	СвойстваЗаданий_ат.ФактическоеВремяВыполнения,
	|	Задание_ат.СодержаниеРабот
	|ИЗ
	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	|		ПО СвязиОбъектов_ат.Объект = СвойстваЗаданий_ат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданий_атСрезПоследних
	|		ПО СвязиОбъектов_ат.Объект = ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задание_ат КАК Задание_ат
	|		ПО СвязиОбъектов_ат.Объект = Задание_ат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|		ПО СвязиОбъектов_ат.Предок = КосвенныеСвязиЗаданий_ат.Заявка
	|ГДЕ
	|	СвязиОбъектов_ат.Предок = &Заявка
	|	И (ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Выполнено)
	|			ИЛИ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Прервано)
	|			ИЛИ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено))
	|	И СвойстваЗаданий_ат.ФактическоеВремяВыполнения > 0
	|	И (КосвенныеСвязиЗаданий_ат.ФиксацияРабот ЕСТЬ NULL
	|			ИЛИ КосвенныеСвязиЗаданий_ат.ФиксацияРабот = ЗНАЧЕНИЕ(Документ.ФиксацияРабот_ат.ПустаяСсылка)
	|			ИЛИ КосвенныеСвязиЗаданий_ат.ФиксацияРабот.ПометкаУдаления)
	|	И СвязиОбъектов_ат.Предок ССЫЛКА Документ.Заявка_ат";
	
	Запрос.УстановитьПараметр("Заявки", Заявка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Задания.Добавить();
		
		НоваяСтрока.Задание			= Выборка.Задание;
		НоваяСтрока.СодержаниеРабот = Выборка.СодержаниеРабот;
		
		//// Даты окончания.
		//НоваяСтрока.Удалить_ПланируемаяДатаОкончания	= Выборка.ПланируемаяДатаОкончания;
		//НоваяСтрока.Удалить_ФактическаяДатаОкончания	= Выборка.ФактическаяДатаОкончания;
		//
		//// Даты начала.
		//НоваяСтрока.Удалить_ПланируемаяДатаНачала		= Выборка.ПланируемаяДатаНачала;
		//НоваяСтрока.Удалить_ФактическаяДатаНачала	= Выборка.ФактическаяДатаНачала;
		//
		//// Длительности (!!!!! - почему-то весь блок был закомментирован)
		//НоваяСтрока.Удалить_ПланируемаяДлительность	= Выборка.ПланируемаяДлительность;
		//НоваяСтрока.Удалить_ФактическаяДлительность = Выборка.ФактическаяДлительность;
		//
		//Если БылоСогласование Тогда
		//	НоваяСтрока.Удалить_ОтчетнаяДлительность = Выборка.ПланируемаяДлительность;
		//Иначе
		//	НоваяСтрока.Удалить_ОтчетнаяДлительность = Выборка.ФактическаяДлительность;
		//КонецЕсли;
		
		// Времена.
		НоваяСтрока.ПланируемоеВремяВыполнения						= Выборка.ПланируемоеВремяВыполнения;
		//НоваяСтрока.Удалить_ПланируемоеВремяВыполненияДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
		//	Выборка.ПланируемоеВремяВыполнения);
		
		НоваяСтрока.ФактическоеВремяВыполнения						= Выборка.ФактическоеВремяВыполнения;
		//НоваяСтрока.Удалить_ФактическоеВремяВыполненияДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
		//	Выборка.ФактическоеВремяВыполнения);
		
		//База = ПродолжительностьПроцессов_Сервер_ат.ПолучитьМинимальныйИнтервалЗадания();
		//Если БылоСогласование Тогда
		//	
		//	НоваяСтрока.ОтчетноеВремяВыполнения						=  Числа_КлиентСервер_ат.ПривестиЧислоКБазе(Выборка.ПланируемоеВремяВыполнения, База);
		//	НоваяСтрока.ОтчетноеВремяВыполненияДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
		//																НоваяСтрока.ОтчетноеВремяВыполнения);
		//	
		//Иначе
		//	
		//	НоваяСтрока.ОтчетноеВремяВыполнения						= Числа_КлиентСервер_ат.ПривестиЧислоКБазе(Выборка.ФактическоеВремяВыполнения, База);
		//	НоваяСтрока.ОтчетноеВремяВыполненияДляОтображения		= ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
		//																НоваяСтрока.ОтчетноеВремяВыполнения);
		//	
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьСодержание() Экспорт
	
	СуммаДокумента = 0;
	КоличествоДокумента = 0;
	
	Для Каждого Услуга Из Услуги Цикл
		
		РассчитатьСтроку(Услуга);
		
		СуммаДокумента = СуммаДокумента + Услуга.Сумма;
		КоличествоДокумента = КоличествоДокумента + Услуга.ОтчетноеВремя;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьСтроку(Услуга)
	
	Услуга.Сумма = 0;
	
	Если Услуга.ОтчетноеВремя > 0 Тогда
		
		Услуга.ОтчетноеВремя = Числа_КлиентСервер_ат.ПривестиЧислоКБазе(
			Услуга.ОтчетноеВремя, ПродолжительностьПроцессов_Сервер_ат.ПолучитьМинимальныйИнтервалДеятельности());
		
		//Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Услуга.Номенклатура)
		//	И ЗначениеЗаполнено(Услуга.Согласование) Тогда
		//	
		//	МассивНоменклатур = Новый Массив;
		//	МассивНоменклатур.Добавить(Услуга.Номенклатура);
		//	
		//	ТаблицаЦен = Финансы_ат.ПолучитьЦеныНоменклатур(Услуга.Согласование.ДатаСогласования, МассивНоменклатур,
		//		Договор.Организация, Договор.ВидДоговора, Клиент, Договор, Проект);
		//	
		//	Если ТаблицаЦен.Количество() > 0 Тогда
		//		
		//		Услуга.Цена = ТаблицаЦен[0].Цена;
		//		
				Если ЗначениеЗаполнено(Услуга.Цена) И Услуга.Цена > 0 Тогда
					
					Услуга.Сумма = Услуга.Цена * ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
						Услуга.ОтчетноеВремя);
					
				КонецЕсли;
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСтроку


Вложения = Неопределено;
