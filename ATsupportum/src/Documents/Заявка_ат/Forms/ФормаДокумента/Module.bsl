
#Область  ЛокальныеПеременные

//+ Работа с HTML

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

//- Работа с HTML

#КонецОбласти 

#Область  ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ОжидаемаяДатаЗавершения = Планирование_Сервер_ат.ПолучитьОжидаемуюДатуЗавершенияЗаявки(Объект.Ссылка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Ложь);
	
	#КонецОбласти
	
	ОбновитьСвойстваЗаявки();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Истина);
	
	#КонецОбласти
	
	СтараяОжидаемаяДатаЗавершения = ОжидаемаяДатаЗавершения;
	
	СотрудникОрганизации = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации();
	
	Если НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		Объект.Тикет = Неопределено; // тикет не копируем
	КонецЕсли;
	
	ПроверкаОтображения(СотрудникОрганизации);
	
	Если Параметры.ВводПрошлогоПериода Тогда
		
		Если Параметры.Свойство("ДатаЗаявки") Тогда
			Объект.Дата = Параметры.ДатаЗаявки;
		КонецЕсли;
		
		СохраненнаяДата = Объект.Дата;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Шаблон) Тогда
		
		Шаблон = Параметры.Шаблон;
		
		Если ТипЗнч(Шаблон) = Тип("ДокументСсылка.Заявка_ат") Тогда
			Объект.РодительскаяЗаявка = Шаблон;
		КонецЕсли;
		
		Объект.Клиент = Шаблон.Клиент;
		Объект.Подразделение = Шаблон.Подразделение;
		Объект.Сотрудник = Шаблон.Сотрудник;
		Объект.ТипЗаявки = Шаблон.ТипЗаявки;
		Объект.Тезис = Шаблон.Тезис;
		Объект.Проект = Шаблон.Проект;
		Объект.Ответственный = Шаблон.Ответственный;
		ПроектПриИзменении_Сервер();
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ЭтоНоваяЗаявка = Истина;
		Регистрировать = Истина;
		
		Если Объект.Сотрудник.Пустая() Тогда
			
			Пользователь = ПараметрыСеанса.ТекущийПользователь;
			Если НЕ СотрудникОрганизации Тогда
				Планирование_Сервер_ат.ПервичноеЗаполнениеСотрудникКлиентПодразделение(Пользователь,
					Объект.Сотрудник, Объект.Клиент, Объект.Подразделение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+ Работа с HTML
	
	//+ Текст заявки в HTML
	РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КоманднаяПанельТекстаЗаявкиВHTML,
		"ОбработчикКомандТекстаЗаявкиВHTML",, Элементы.ПредставлениеТекстаЗаявкиВHTML.КонтекстноеМеню);
	ПредставлениеТекстаЗаявкиВHTML = Объект.ТекстЗаявкиВHTML;
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "ТекстЗаявкиВHTML", ЭтаФорма);
	//- Текст заявки в HTML
	
	//- Работа с HTML 
	
	#Область Метки
	
	Элементы.ОтборМетокПоПроектам.Пометка = ЗначениеЗаполнено(Объект.Проект);
	Метки_Сервер_ат.ОбновитьМетки(ЭтаФорма, Объект.Ссылка,, Элементы.ОтборМетокПоПроектам.Пометка, Объект.Проект);
	ОбновитьКоличествоВыбранныхМеток();
	
	#КонецОбласти
	
	ОтправлятьУведомления = Истина;
	УстановитьТекущийЭлементФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	Метки_Клиент_ат.ОбновитьПринадлежностьВыбранныхМетокКПроектам(ЭтаФорма);
	ПроинформироватьОФайлахОснования();
	
	// без этого не вызывается ПредставлениеТекстаЗаявкиВHTMLДокументСформирован
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КоманднаяПанельТекстаЗаявкиВHTML,
		Элементы.ПредставлениеТекстаЗаявкиВHTML, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УправляемыеФормы_Клиент_ат.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ЗаписьРезультата" И Источник = ЭтаФорма Тогда
		
		ОбновитьСвойстваЗаявки();
		ОбработкаОповещенияЗаписиРезультатаЗаявкиНаСервере();
		Элементы.РезультатВыполнения.Документ.Body.InnerHTML = РезультатВыполнения;
		
		Если ЗакрыватьЗаявку Тогда //!!! переделать - не на это оповещение надо ориентироваться, думается
			
			Если Параметр.СтатусСтрокой = "Закрыта" Тогда
				ЗакрытьЗаявку(Неопределено);
			ИначеЕсли Параметр.СтатусСтрокой = "Отклонена" Тогда
				ОтклонитьЗаявку(Неопределено);
			ИначеЕсли Параметр.СтатусСтрокой = "Отменена" Тогда
				ОтменитьЗаявку(Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьЗаявку" И Параметр = Объект.Ссылка Тогда
		
		ОбновитьСвойстваЗаявки();
		Прочитать();
		Активизировать();
		ТекущийЭлемент = Элементы.Тезис;
		
	ИначеЕсли ИмяСобытия = "ОбновленСписокМеток" Тогда
		
		ОбновитьМетки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиРезультатаЗаявкиНаСервере()
	
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "РезультатВыполнения", ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если НЕ КлиентСоответствуетКлиентуПроекта(Объект.Клиент, Объект.Проект) Тогда
		
		ПоказатьПредупреждение(, "Проект не соответствует выбранному Клиенту!", 5);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Тезис) Тогда
		
		НовыйТезис = СокрЛП(Лев(Объект.ТекстЗаявки, 100));
		Если НЕ ПустаяСтрока(НовыйТезис) Тогда
			
			Для Позиция = 1 По СтрДлина(НовыйТезис) Цикл
				
				Симв = Сред(НовыйТезис, Позиция, 1);
				Если Симв = "." ИЛИ Симв = Символы.ПС ИЛИ Симв = Символы.ВК ИЛИ Симв = Символы.ПФ Тогда
					НовыйТезис = СокрП(Лев(НовыйТезис, Позиция - 1));
				КонецЕсли;
				
			КонецЦикла;
			
			Объект.Тезис = НовыйТезис;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+ Работа с HTML
	
	//+ Текст заявки в HTML
	
	Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ.body.innerHTML =
		ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(
			Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ.body.innerHTML);
	
	Объект.ТекстЗаявкиВHTML = Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ.documentElement.outerHTML;
	
	Объект.ТекстЗаявки = Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ.body.innerText;
	
	//- Текст заявки в HTML
	
	//- Работа с HTML
	
	//ИзменитьПометкиСпискаЗначенийОтбора();
	
	ПроверитьМеткиИЗадатьВопрос(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОтправлятьУведомления Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтправлятьУведомления", Истина);
	КонецЕсли;
	
	Если Регистрировать Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Регистрировать", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийКлиента(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	#КонецОбласти
	
	#Область Метки_ат
	
	Для Каждого ЭлементВыбранныхМеток Из ВыбранныеМетки Цикл
		
		ЭлементСпискаМеток = СписокМеток.НайтиПоЗначению(ЭлементВыбранныхМеток.Значение);
		
		Если НЕ ЭлементСпискаМеток = Неопределено Тогда
			ЭлементСпискаМеток.Пометка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Метки_Сервер_ат.ЗаписатьМетки(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	#КонецОбласти
	
	Если ЗначениеЗаполнено(НовыйСтатус) Тогда
		
		Планирование_Сервер_ат.УстановитьСтатус(Объект.Ссылка, НовыйСтатус,
			ТекущаяДатаСеанса(), ОтправлятьУведомления);
		
	ИначеЕсли ДатаИзменена Тогда
		
		Планирование_Сервер_ат.УстановитьСтатус(Объект.Ссылка, Перечисления.СтатусыЗаявок_ат.Зарегистрирована,
			Объект.Дата, ОтправлятьУведомления);
		
		ДатаИзменена = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСвойстваЗаявки();
	ОбновитьКоличествоВыбранныхМеток();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	Если МеткиИзменены Тогда
		
		//Оповестить("ОбновилисьМетки",, ЭтаФорма);
		Сообщить("!!!!!ОбновилисьМетки!!!!!");
		МеткиИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.Найти("Проект") <> Неопределено
		И Элементы.Проект.АвтоОтметкаНезаполненного = Истина
		И НЕ ЗначениеЗаполнено(Объект.Проект)
		И Статус = Перечисления.СтатусыЗаявок_ат.НаРассмотрении Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;              
		Сообщение.Текст = "Поле ""Проект"" не заполнено";
		Сообщение.Поле  = "Объект.Проект";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
	//Если Элементы.Найти("Ответственный") <> Неопределено
	//	И Элементы.Ответственный.АвтоОтметкаНезаполненного = Истина
	//	И НЕ ЗначениеЗаполнено(Объект.Ответственный)
	//	И Статус = Перечисления.СтатусыЗаявок_ат.НаРассмотрении
	//	Тогда
	//		
	//	Отказ = Истина;
	//		
	//	Сообщение = Новый СообщениеПользователю;              
	//	Сообщение.Текст = "Поле ""Ответственный"" не заполнено";
	//	Сообщение.Поле  = "Объект.Ответственный";
	//	Сообщение.УстановитьДанные(ЭтаФорма);
	//	Сообщение.Сообщить(); 
	//	
	//КонецЕсли;
	//
	//Если Элементы.Тезис.АвтоОтметкаНезаполненного = Истина И НЕ ЗначениеЗаполнено(Объект.Тезис) Тогда
	//	
	//	Отказ = Истина;
	//	
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Поле ""Тезис"" не заполнено";
	//	Сообщение.Поле  = "Объект.Тезис";
	//	Сообщение.УстановитьДанные(ЭтаФорма);
	//	Сообщение.Сообщить(); 
	//	
	//КонецЕсли;
	
	Если Элементы.Найти("ТипЗаявки") <> Неопределено
		И Элементы.ТипЗаявки.АвтоОтметкаНезаполненного = Истина
		И НЕ ЗначениеЗаполнено(Объект.ТипЗаявки) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""ТипЗаявки"" не заполнено";
		Сообщение.Поле  = "Объект.ТипЗаявки";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить(); 
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиДействийПользователя

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.Дата > ТекущаяДата() Тогда
		
		Объект.Дата = СохраненнаяДата;
		ПоказатьПредупреждение(, "Дата Заявки не может быть больше текущей даты!", 5);
		
		Возврат;
		
	ИначеЕсли Объект.Ссылка.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПроверки = Планирование_Сервер_ат.ПроверитьКорректностьИзмененияДаты(Объект.Ссылка, Объект.Дата);
	
	Если РезультатПроверки.ИзменениеДопустимо Тогда
		
		ДатаИзменена = Истина;
		СохраненнаяДата = Объект.Дата;
		
	Иначе
		
		ПоказатьПредупреждение(, РезультатПроверки.Текст, 5);
		Объект.Дата = СохраненнаяДата;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Планирование_Клиент_ат.ВыбратьПроект(ЭтаФорма, Объект.Клиент);

КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПроектПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	
	Пометка = ЗначениеЗаполнено(Объект.Проект);
	Элементы.ОтборМетокПоПроектам.Пометка = Пометка; //!!!!!HOTFIX
	
	Метки_Сервер_ат.ОбновитьМетки(ЭтаФорма, Объект.Ссылка, Ложь, Элементы.ОтборМетокПоПроектам.Пометка, Объект.Проект); //!!!!!HOTFIX
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидаемаяДатаЗавершенияПриИзменении(Элемент)
	
	ОбработатьИзменениеОжидаемойДатыЗавершения();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительскаяЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СкрываемыеЗаявки = Новый Массив;
	СкрываемыеЗаявки.Добавить(Объект.Ссылка);
	СкрываемыеЗаявки.Добавить(Объект.РодительскаяЗаявка);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("СкрываемыеЗаявки", СкрываемыеЗаявки);
	
	Оповещение = Новый ОписаниеОповещения("ОкончаниеВыбораРодительскойЗаявки", ЭтаФорма);
	
	ОткрытьФорму("Документ.Заявка_ат.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, , , ,
		Оповещение ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ДополнитьПараметрыАвтоподбораИсполнителя(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеЗаявкиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиКомандФормы

&НаКлиенте
Процедура НаРассмотрение(Команда)
	
	//НаРассмотрении_Сервер(); //!!!!!
	Элементы.ФормаНаРассмотрение.Пометка = НЕ Элементы.ФормаНаРассмотрение.Пометка;
	
	НаРассмотрении = Элементы.ФормаНаРассмотрение.Пометка;
	Если НаРассмотрении Тогда
		
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявок_ат.НаРассмотрении");
		
		Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Проект;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТипЗаявки) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ТипЗаявки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Ответственный;
		КонецЕсли;
	Иначе
		
		НовыйСтатус = Неопределено;
		
	КонецЕсли;
	
	Элементы.Проект.АвтоОтметкаНезаполненного = НаРассмотрении;
	Элементы.ТипЗаявки.АвтоОтметкаНезаполненного = НаРассмотрении;
	Элементы.Ответственный.АвтоОтметкаНезаполненного = НаРассмотрении;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаявку(Команда)
	
	ДопПараметры = Новый Структура("СтатусСтрокой", "Закрыта");
	
	СвойстваЗаявки = Планирование_Сервер_ат.ПолучитьСвойстваЗаявки(Объект.Ссылка);
	Если (СвойстваЗаявки.Свойство("ФактическоеВремяВыполнения") И СвойстваЗаявки.ФактическоеВремяВыполнения > 0)
		ИЛИ РезультатЗаполнен() Тогда
		
		ПродолжитьЗакрытиеЗаявки(КодВозвратаДиалога.Отмена, ДопПараметры);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗакрытиеЗаявки", ЭтаФорма, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Необходимо заполнить результат выполнения Заявки!
			|Открыть форму ввода результата?", РежимДиалогаВопрос.ДаНет, 5);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаявку(Команда)
	
	ДопПараметры = Новый Структура("СтатусСтрокой", "Отменена");
	
	Если РезультатЗаполнен() Тогда
		
		ПродолжитьЗакрытиеЗаявки(КодВозвратаДиалога.Отмена, ДопПараметры);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗакрытиеЗаявки", ЭтаФорма, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Необходимо заполнить причину отмены Заявки!
			|Открыть форму ввода причины (результата)?", РежимДиалогаВопрос.ДаНет, 5);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗаявку(Команда)
	
	ДопПараметры = Новый Структура("СтатусСтрокой", "Отклонена");
	
	Если РезультатЗаполнен() Тогда
		
		ПродолжитьЗакрытиеЗаявки(КодВозвратаДиалога.Отмена, ДопПараметры);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьЗакрытиеЗаявки", ЭтаФорма, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Необходимо заполнить причину отклонения Заявки!
			|Открыть форму ввода причины (результата)?", РежимДиалогаВопрос.ДаНет, 5);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВЧерновик(Команда)
	
	Регистрировать = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	Элементы.ФормаЗарегистрировать.Пометка = НЕ Элементы.ФормаЗарегистрировать.Пометка;
	
	Зарегистрировать = Элементы.ФормаЗарегистрировать.Пометка;
	Если Зарегистрировать Тогда
		
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявок_ат.Зарегистрирована");
		
		Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Проект;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТипЗаявки) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ТипЗаявки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Ответственный;
		КонецЕсли;
		
	Иначе
		
		НовыйСтатус = Неопределено;
		
	КонецЕсли;
	
	Элементы.Проект.АвтоОтметкаНезаполненного = Зарегистрировать;
	Элементы.ТипЗаявки.АвтоОтметкаНезаполненного = Зарегистрировать;
	Элементы.Ответственный.АвтоОтметкаНезаполненного = Зарегистрировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьОтветаКлиента(Команда)
	
	Элементы.ФормаОжидатьОтветаКлиента.Пометка = НЕ Элементы.ФормаОжидатьОтветаКлиента.Пометка;
	
	ФормаОжидатьОтветаКлиента = Элементы.ФормаОжидатьОтветаКлиента.Пометка;
	Если ФормаОжидатьОтветаКлиента Тогда
		
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявок_ат.ВОжиданииОтвета");
		
		Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Проект;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ТипЗаявки) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ТипЗаявки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.Ответственный;
		КонецЕсли;
		
	Иначе
		
		НовыйСтатус = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаПриемку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НаПриемкуПослеВопроса", ЭтаФорма, Новый Структура);
	
	ПоказатьВопрос(ОписаниеОповещения, "Будет отправлено письмо о приемке Заявки.
										|Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура НаПриемкуПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Письмо = НаПриемкуНаСервере();
		
		//ОткрытьЗначение(Письмо);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОДЗ(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияОДЗ", ЭтаФорма, Новый Структура);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВводаОДЗ", Новый Структура("Заявка, ОДЗ", Объект.Ссылка, ОжидаемаяДатаЗавершения),
		ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияОДЗ(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ОжидаемаяДатаЗавершения = Результат.ОДЗ;
		ПричинаСменыОДЗ			= Результат.Причина;
		КомментарийОПереносеОДЗ = Результат.Комментарий;
		
		ОбработатьИзменениеОжидаемойДатыЗавершения();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область  СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция   ДоступноЗакрытиеЗаявки(Ссылка, Статус, СотрудникОрганизации, ВводПрошлогоПериода)
	
	Результат = Истина;
	
	Если Ссылка.Пустая() 
		ИЛИ ВводПрошлогоПериода
		И НЕ (СотрудникОрганизации
			И (Статус = Перечисления.СтатусыЗаявок_ат.НаПриемке ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.ВОжиданииОтвета)) Тогда
		
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ДополнитьПараметрыАвтоподбораИсполнителя(Параметры)
	
	МассивИменРолей = Новый Массив;
	МассивИменРолей.Добавить("ОрганизацияИсполнитель_ат");
	МассивИменРолей.Добавить("ОрганизацияРуководительПроектов_ат");
	МассивИменРолей.Добавить("ОрганизацияМенеджерПроектов_ат");
	
	Параметры.Отбор.Вставить("Ссылка", ВнутреннегоИспользования_ат.ПолучитьСписокПильзователейПоНесколькимРолям(МассивИменРолей));
	
	//Параметры.Отбор.Вставить("Ссылка", ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияИсполнитель_ат"));
	
КонецПроцедуры 

&НаСервере
Процедура ПроектПриИзменении_Сервер()
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		
		Если НЕ КлиентСоответствуетКлиентуПроекта(Объект.Клиент, Объект.Проект) Тогда
			
			Объект.Клиент = Объект.Проект.Клиент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОтборМетокПоПроектам.Пометка = НЕ ЗначениеЗаполнено(Объект.Проект);
	
	Метки_Сервер_ат.ОбновитьМетки(ЭтаФорма, Объект.Ссылка, Ложь, Элементы.ОтборМетокПоПроектам.Пометка, Объект.Проект); //!!!!!HOTFIX
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеВыбораРодительскойЗаявки(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		
		Объект.РодительскаяЗаявка = РезультатВыбора;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеВыбораПроекта(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Объект.Проект = Результат;
		ПроектПриИзменении_Сервер();
		
		Метки_Клиент_ат.ОбновитьПринадлежностьВыбранныхМетокКПроектам(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЗаявки()
	
	СтатусИДата = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Объект.Ссылка, Истина);
	
	Если СтатусИДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьФинансовыеСтатусы();
	
	СотрудникОрганизации = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации();
	
	Если НЕ СотрудникОрганизации И СтатусИДата.Статус = Перечисления.СтатусыЗаявок_ат.ВОчереди Тогда
		Статус = Перечисления.СтатусыЗаявок_ат.Выполняется;
	Иначе
		Статус = СтатусИДата.Статус;
	КонецЕсли;
	
	// ТУДУ [Grig]: для подменённых статусов дату тоже следует подменять
	ДатаСтатуса = СтатусИДата.ДатаСтатуса;
	
	ТекущийСтатусФинальный = ТекущийСтатусЗаявкиЯвляетсяФинальным();
	
	Элементы.ФормаЗарегистрировать.Видимость = (Статус = Перечисления.СтатусыЗаявок_ат.Черновик);
	Элементы.ФормаВЧерновик.Видимость = Объект.Ссылка.Пустая();
	Элементы.ФормаНаРассмотрение.Видимость = (Статус = Перечисления.СтатусыЗаявок_ат.Зарегистрирована);
	
	Элементы.ФормаОжидатьОтветаКлиента.Видимость = НЕ Объект.Ссылка.Пустая() И НЕ ТекущийСтатусЗаявкиЯвляетсяФинальным()
		И (НЕ Статус = Перечисления.СтатусыЗаявок_ат.Черновик) И (НЕ Статус = Перечисления.СтатусыЗаявок_ат.Пожелание)
		И (НЕ Статус = Перечисления.СтатусыЗаявок_ат.ВОжиданииРелиза) И (НЕ Статус = Перечисления.СтатусыЗаявок_ат.ВОжиданииОтвета)
		И (НЕ Статус = Перечисления.СтатусыЗаявок_ат.НаСогласовании)
		И РольДоступна("ПолныеПрава") И СотрудникОрганизации;
		
	Элементы.ФормаЗакрытьЗаявку.Видимость = НЕ Объект.Ссылка.Пустая() И НЕ ТекущийСтатусЗаявкиЯвляетсяФинальным()
		И (РольДоступна("ПолныеПрава")
			ИЛИ ДоступноЗакрытиеЗаявки(Объект.Ссылка, Статус, СотрудникОрганизации, Параметры.ВводПрошлогоПериода));
			
	Элементы.ФормаОтклонитьЗаявку.Видимость = НЕ Объект.Ссылка.Пустая() И НЕ ТекущийСтатусЗаявкиЯвляетсяФинальным()
		И (РольДоступна("ПолныеПрава")
			ИЛИ (СотрудникОрганизации И (Статус = Перечисления.СтатусыЗаявок_ат.Зарегистрирована ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.НаРассмотрении)));
		
	Элементы.ФормаОтменитьЗаявку.Видимость = НЕ Объект.Ссылка.Пустая() И НЕ ТекущийСтатусЗаявкиЯвляетсяФинальным()
		И (РольДоступна("ПолныеПрава")
			ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Зарегистрирована ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Черновик ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Пожелание
			ИЛИ (СотрудникОрганизации И (Статус = Перечисления.СтатусыЗаявок_ат.НаСогласовании ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.ВОчереди)));
	
	ПересчитатьВидимостьКнопокСменыСтатуса(); //!!!перенести вышенакоденное в эту процедуру
	
	СвойстваЗаявки = Планирование_Сервер_ат.ПолучитьСвойстваЗаявки(Объект.Ссылка);
	
	Если СвойстваЗаявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = СвойстваЗаявки.РезультатВыполненияВHTML;
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "РезультатВыполнения", ЭтаФорма, Истина);
	
	ТекущаяПланируемаяДатаЗавершения = СвойстваЗаявки.ПланируемаяДатаОкончания;
	
	ЭкземплярПродутка = СвойстваЗаявки.ЭкземплярПродукта_ИзЗакрытияЗаявки;
	ВерсияПродукта = СвойстваЗаявки.ВерсияПродукта_ИзЗакрытияЗаявки;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьФинансовыеСтатусы()
	
	ФинСтатусДата = Финансы_ат.ПолучитьФинансовыйСтатусЗаявки(Объект.Ссылка);
	
	Если ФинСтатусДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФинСтатус = ФинСтатусДата.Статус;
	ДатаФинСтатуса = ФинСтатусДата.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВидимостьКнопокСменыСтатуса()
	
	
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактироватьРезультат(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Заявка", Объект.Ссылка);
	ОткрытьФорму("Обработка.ФинализацияЗиЗ_ат.Форма.ФормированиеРезультата", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗакрытиеЗаявки(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПараметрыФормы = Новый Структура("Заявка,СтатусСтрокой", Объект.Ссылка, ДополнительныеПараметры.СтатусСтрокой);
		ОткрытьФорму("Обработка.ФинализацияЗиЗ_ат.Форма.ФормированиеРезультата", ПараметрыФормы, ЭтаФорма);
		
		ЗакрыватьЗаявку = Истина;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		
		Если ДополнительныеПараметры.СтатусСтрокой = "Закрыта" Тогда
			Результат = ЗакрытьЗаявку_Сервер();
		ИначеЕсли ДополнительныеПараметры.СтатусСтрокой = "Отклонена" Тогда
			Результат = ОтклонитьЗаявкуНаСервере();
		ИначеЕсли ДополнительныеПараметры.СтатусСтрокой = "Отменена" Тогда
			Результат = ОтменитьЗаявкуНаСервере();
		Иначе
			Результат = ""
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Результат) Тогда
			ПоказатьПредупреждение(, Результат, 5);
		КонецЕсли;
		
		Оповестить("ОбновитьЗаявку", Объект.Ссылка);
		
		ЗакрыватьЗаявку = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   КлиентСоответствуетКлиентуПроекта(Клиент, Проект)
	
	Возврат Клиент = Проект.Клиент ИЛИ Проект.Клиент.Пустая();
	
КонецФункции

#Область ИзменениеОжидаемойДатыЗавершения

&НаКлиенте
Процедура ОбработатьИзменениеОжидаемойДатыЗавершения()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСвойстваЗаявки();
	
	Если ОжидаемаяДатаЗавершения < ТекущаяПланируемаяДатаЗавершения Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаИзмененияОжидаемойДатыЗавершения", ЭтаФорма);
		ТекстВопроса = "Указанная ожидаемая дата (" + Формат(ОжидаемаяДатаЗавершения, "ДФ=dd.MM.yyyy")
			+ ") меньше текущей планируемой даты завершения (" + Формат(ТекущаяПланируемаяДатаЗавершения, "ДФ=dd.MM.yyyy")
			+ ")." + Символы.ПС + "Применить изменение?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		
	Иначе
		
		ПослеЗакрытияВопросаИзмененияОжидаемойДатыЗавершения(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопросаИзмененияОжидаемойДатыЗавершения(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		ОжидаемаяДатаЗавершения = СтараяОжидаемаяДатаЗавершения;
		
	Иначе
		
		СтараяОжидаемаяДатаЗавершения = ОжидаемаяДатаЗавершения;
		
		Планирование_Сервер_ат.УстановитьОжидаемуюДатуЗавершенияЗаявки(Объект.Ссылка,
			ОжидаемаяДатаЗавершения,, ПричинаСменыОДЗ, КомментарийОПереносеОДЗ);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция   ДобавлятьКомментарий(Причина)
	
	Возврат Причина.ДобавлятьКомментарий;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура НаРассмотрении_Сервер()
	
	ОбновитьСвойстваЗаявки();
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.Зарегистрирована Тогда
		
		Статус = Перечисления.СтатусыЗаявок_ат.НаРассмотрении;
		ТекДата = ТекущаяДатаСеанса();
		ДатаСтатуса = ТекДата;
		
		Планирование_Сервер_ат.УстановитьСтатус(Объект.Ссылка, Статус, ТекДата, ОтправлятьУведомления);
		
		Элементы.ФормаНаРассмотрение.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ЗакрытьЗаявку_Сервер()
	
	Если НЕ Записать() Тогда
		Возврат Строка("Возникла ошибка при записи Заявки: " + ОписаниеОшибки());
	КонецЕсли;
	
	Если Элементы.ФормаЗакрытьЗаявку.Видимость Тогда
		
		Результат = Планирование_Сервер_ат.ЗакрытьЗаявку(Объект.Ссылка, ОтправлятьУведомления);
		
		Если Результат <> "" Тогда
			Возврат Результат;
		КонецЕсли;
		
		Элементы.ФормаНаРассмотрение.Видимость = Ложь;
		Элементы.ФормаЗакрытьЗаявку.Видимость = Ложь;
		Элементы.ФормаОтклонитьЗаявку.Видимость = Ложь;
		Элементы.ФормаОтменитьЗаявку.Видимость = Ложь;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция   ОтменитьЗаявкуНаСервере() //!!! изменённая копия ЗакрытьЗаявку_Сервер, привести потом в порядок всё это
	
	Если НЕ Записать() Тогда
		Возврат Строка("Возникла ошибка при записи Заявки: " + ОписаниеОшибки());
	КонецЕсли;
	
	Если Элементы.ФормаЗакрытьЗаявку.Видимость Тогда
		
		Если Планирование_Сервер_ат.ЕстьНеЗакрытыеЗаданияПоЗаявке(Объект.Ссылка) Тогда
			Возврат "Заявка не может быть закрыта, т.к. по ней есть не завершённые Задания!";
		КонецЕсли;
		
		Фиксация = Документы.ФиксацияРабот_ат.СоздатьДокумент();
		Фиксация.Дата = ТекущаяДатаСеанса();
		Фиксация.Заполнить(Объект.Ссылка);
		
		Если Фиксация.Услуги.Количество() > 0 Тогда
			Возврат "Заявка не может быть отменена, т.к. по ней осуществлялась деятельность требующая закрытия!";
		КонецЕсли;
		
		Планирование_Сервер_ат.УстановитьСтатус(Объект.Ссылка, Перечисления.СтатусыЗаявок_ат.Отменена, ТекущаяДатаСеанса(), ОтправлятьУведомления); //ОтправлятьУведомления - что означает???
		Планирование_Сервер_ат.ПересчитатьСвойстваЗаявки(Объект.Ссылка);
		Уведомления_ат.УведомитьОСменеСтатуса(Объект.Ссылка, Перечисления.СтатусыЗаявок_ат.Отменена,, ОтправлятьУведомления); // и тут с учётом всех этих =<> Статус.Закрыта! переделать бардак
		
		Элементы.ФормаНаРассмотрение.Видимость = Ложь;
		Элементы.ФормаЗакрытьЗаявку.Видимость = Ложь;
		Элементы.ФормаОтклонитьЗаявку.Видимость = Ложь;
		Элементы.ФормаОтменитьЗаявку.Видимость = Ложь;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция   ОтклонитьЗаявкуНаСервере() //!!! изменённая копия ЗакрытьЗаявку_Сервер, привести потом в порядок всё это
	
	Если НЕ Записать() Тогда
		Возврат Строка("Возникла ошибка при записи Заявки: " + ОписаниеОшибки());
	КонецЕсли;
	
	Если Элементы.ФормаЗакрытьЗаявку.Видимость Тогда
		
		Если Планирование_Сервер_ат.ПолучитьДочерниеЗадания(Объект.Ссылка).Количество() > 0 Тогда
			Возврат "Заявка не может быть отклонена, т.к. по ней есть Задания!";
		КонецЕсли;
		
		Планирование_Сервер_ат.УстановитьСтатус(Объект.Ссылка, Перечисления.СтатусыЗаявок_ат.Отклонена, ТекущаяДатаСеанса(), ОтправлятьУведомления); //ОтправлятьУведомления - что означает???
		Планирование_Сервер_ат.ПересчитатьСвойстваЗаявки(Объект.Ссылка);
		Уведомления_ат.УведомитьОСменеСтатуса(Объект.Ссылка, Перечисления.СтатусыЗаявок_ат.Отклонена,, ОтправлятьУведомления); // и тут с учётом всех этих =<> Статус.Закрыта! переделать бардак
		
		Элементы.ФормаНаРассмотрение.Видимость = Ложь;
		Элементы.ФормаЗакрытьЗаявку.Видимость = Ложь;
		Элементы.ФормаОтклонитьЗаявку.Видимость = Ложь;
		Элементы.ФормаОтменитьЗаявку.Видимость = Ложь;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция   НаПриемкуНаСервере()
	
	Возврат Уведомления_ат.СоздатьПисьмоДляПриемкиЗаявки(Объект.Ссылка);
	
КонецФункции

&НаСервере
Функция   РезультатЗаполнен()
	
	Возврат НЕ ПустаяСтрока(РезультатВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветНаВопросОМетках(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущийЭлемент = Элементы.СтраницаМеток;
		
	Иначе
		
		ЗаписыватьБезВопросаОМетках = Истина;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеЗаявки()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ДокументHTML = Уведомления_ат.СоздатьДокументHTMLСОписаниемЗаявки(Объект.Ссылка,,
			ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации(), Пользователи.ТекущийПользователь(),, Истина,
			ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ДоступныФинансы());
		
		ОписаниеЗаявки = РаботаСHTML_КлиентСервер_ат.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансыПоЗаявкеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	а= 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.Сводно Тогда
		
		УстановитьОписаниеЗаявки();
		
	КонецЕсли;
	
	ОбновитьКоличествоВыбранныхМеток();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийЭлементФормы()
	
	ПриоритетЭлементовФормы = ПолучитьПриоритетТекущихЭлементовФормы();
	Если ЭтоНоваяЗаявка Тогда
		
		Для Каждого ИмяЭлементаФормы Из ПриоритетЭлементовФормы Цикл
			
			Если НЕ ЗначениеЗаполнено(Объект[ИмяЭлементаФормы]) Тогда
				
				ТекущийЭлемент = Элементы[ИмяЭлементаФормы];
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекущийЭлемент = Элементы[ПриоритетЭлементовФормы[0]];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПриоритетТекущихЭлементовФормы()
	
	Массив = Новый Массив;
	Массив.Добавить("Клиент");
	Массив.Добавить("Сотрудник");
	Массив.Добавить("Подразделение");
	Массив.Добавить("Проект");
	Массив.Добавить("ТипЗаявки");
	Массив.Добавить("Тезис");
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	ПроинформироватьОФайлахОснования(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроинформироватьОФайлахОснования(ИзменилосьОснование = Ложь)
	
	Если Объект.Ссылка.Пустая() ИЛИ ИзменилосьОснование Тогда
		
		Если ЗначениеЗаполнено(Объект.Основание) И УОснованияЕстьФайлы(Объект.Основание) Тогда
			
			ПоказатьПредупреждение(, "У основания Заявки имеются присоединенные файлы.
				|Они будут прикреплены к Заявке после записи.", 5);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   УОснованияЕстьФайлы(Основание)
	
	МассивФайлов = Новый Массив;
	
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Основание, МассивФайлов);
	
	Возврат МассивФайлов.Количество() > 0;
	
КонецФункции

&НаСервере
Функция   ТекущийСтатусЗаявкиЯвляетсяФинальным()
	
	Возврат Статус = Перечисления.СтатусыЗаявок_ат.Закрыта ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отклонена ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отменена;
	
КонецФункции

#КонецОбласти

#Область  УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти 

#Область  РаботаСHTML

//+ Текст заявки в HTML

&НаКлиенте
Процедура ПредставлениеТекстаЗаявкиВHTMLДокументСформирован(Элемент)
	
	//ДобавитьОбработчик Элемент.Документ.body.OnContextMenu, ОбработчикСобытийТекстаЗаявкиВHTML;
	//ДобавитьОбработчик Элемент.Документ.body.OnPaste, ОбработчикСобытийТекстаЗаявкиВHTML;
	
	НоваяЗаявка = Объект.Ссылка.Пустая();
	//РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КоманднаяПанельТекстаЗаявкиВHTML,
	//	Элементы.ПредставлениеТекстаЗаявкиВHTML, Ложь);//НоваяЗаявка);
	
	//Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ.Body.InnerHTML = ПредставлениеТекстаЗаявкиВHTML;
	
	РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
		Элементы.ПредставлениеТекстаЗаявкиВHTML, Элементы.КоманднаяПанельТекстаЗаявкиВHTML,
		НЕ НоваяЗаявка ИЛИ ТекущийСтатусЗаявкиЯвляетсяФинальным());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийТекстаЗаявкиВHTML(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.ПредставлениеТекстаЗаявкиВHTML);
		
		Для Каждого ЭлементКонтекстногоМеню Из Элементы.ПредставлениеТекстаЗаявкиВHTML.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "ПредставлениеТекстаЗаявкиВHTML_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "ПредставлениеТекстаЗаявкиВHTML_КонтекстноеМеню_ПроверитьОрфографию"
				И НЕ ЭлементКонтекстногоМеню.Имя = "ПредставлениеТекстаЗаявкиВHTML_КонтекстноеМеню_ПоказатьИсходныйКод" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
				
				ИзменитьКонтестноеМенюЗаменыСловТекстаЗаявкиВHTML(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловТекстаЗаявкиВHTML(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловТекстаЗаявкиВHTML(Неопределено, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Событие.type = "paste" Тогда
		
		ИдентификаторыКартинок.ЗагрузитьЗначения(РаботаСHTML_Клиент_ат.ПолучитьИдентификаторыКартинок(Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ));
		ПодключитьОбработчикОжидания("УдалитьКартинкиВставленныеКопированием", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинкиВставленныеКопированием() Экспорт
	
	РаботаСHTML_Клиент_ат.УдалитьКартинкиВставленныеКопированием(Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ,
		ИдентификаторыКартинок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловТекстаЗаявкиВHTML(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.ПредставлениеТекстаЗаявкиВHTML.КонтекстноеМеню,
		СоответствиеКомандЗаменыСловам, ТолькоОчистить, "ОбработчикКомандТекстаЗаявкиВHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикКомандТекстаЗаявкиВHTML(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.ПредставлениеТекстаЗаявкиВHTML, Элементы.КоманднаяПанельТекстаЗаявкиВHTML,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТекстаЗаявкиВHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КоманднаяПанельТекстаЗаявкиВHTML,
		Элементы.ПредставлениеТекстаЗаявкиВHTML.Документ);
	
КонецПроцедуры

//- Текст заявки в HTML

&НаКлиенте
Процедура РезультатВыполненияДокументСформирован(Элемент)
	
	Элементы.РезультатВыполнения.Документ.Body.InnerHTML = РезультатВыполнения;
	
КонецПроцедуры

#КонецОбласти

#Область  ПодборСотрудников

&НаСервереБезКонтекста
Процедура ПолучениеДанныхВыбораПодразделения(ДанныеВыбора, Текст, Подразделение, Клиент, Сотрудник)
	
	ПараметрыОтбораДанных = ЗаполнениеПараметров(Подразделение, Клиент, Сотрудник, 3) ;
	спВыбора    =    Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СпецификацияПользователей_ат.Подразделение
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &КонтрагентЗаполнен
		|				ТОГДА СпецификацияПользователей_ат.Контрагент = &Контрагент
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &СотрудникЗаполнен
		|				ТОГДА СпецификацияПользователей_ат.Пользователь = &Пользователь
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И СпецификацияПользователей_ат.Подразделение.Наименование ПОДОБНО &Текст";
		
	Запрос.УстановитьПараметр("Пользователь", 		ПараметрыОтбораДанных.Пользователь);	
	Запрос.УстановитьПараметр("Контрагент", 			ПараметрыОтбораДанных.Контрагент);
	
	Запрос.УстановитьПараметр("СотрудникЗаполнен",		ПараметрыОтбораДанных.СотрудникЗаполнен);	
	Запрос.УстановитьПараметр("КонтрагентЗаполнен",		ПараметрыОтбораДанных.КонтрагентЗаполнен);	
	Запрос.УстановитьПараметр("Текст", 				Текст);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//ВыбранныеЗначения = Новый Структура;
		//ПредставлениеКонтрагента = Строка(ВыборкаДетальныеЗаписи.Контрагент);
		//ВыбранныеЗначения.Вставить("Клиент",  ВыборкаДетальныеЗаписи.Контрагент);
		//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Пользователь) тогда
		//	 ПредставлениеПользователя =  Строка(ВыборкаДетальныеЗаписи.Пользователь);
		//	 ВыбранныеЗначения.Вставить("Заявитель", ВыборкаДетальныеЗаписи.Пользователь);
		// Иначе 
		//	 ПредставлениеПользователя = Неопределено;
		// КонецЕсли;
		
		//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Подразделение) тогда
		ВыбранныеЗначения = ВыборкаДетальныеЗаписи.Подразделение; 
		ПредставлениеПодразделение =   "" + ВыборкаДетальныеЗаписи.Подразделение;
			 //ВыбранныеЗначения.Вставить("Подразделение", ВыборкаДетальныеЗаписи.Подразделение);
		 //Иначе 
		 //    ПредставлениеПодразделение = Неопределено;
		 //КонецЕсли;
			//ПредставлениеЗаписи = ПредставлениеКонтрагента + " / " +  ПредставлениеПользователя +" / " +  ПредставлениеПодразделение;
		спВыбора.Добавить(ВыбранныеЗначения, ПредставлениеПодразделение);	
			
	КонецЦикла;
	
	ДанныеВыбора =  спВыбора;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПроверкаЗаполненностиПараметра(ПараметрОтбора)
	
	Если ЗначениеЗаполнено(ПараметрОтбора)  тогда
		ПараметрЗаполнен = Истина;
		//Параметр	= ПараметрОтбора;
	Иначе
		ПараметрЗаполнен = ложь;
		ПараметрОтбора	= Неопределено;
	КонецЕсли;
	Возврат ПараметрЗаполнен;

КонецФункции

&НаСервереБезКонтекста
Функция   ЗаполнениеПараметров(Подразделение, Клиент, Сотрудник, ЧислоАктивногоПараметра = 1)
	
	ПараметрыОтбораДанных = Новый Структура;
	ПараметрыОтбораДанных.Вставить("Пользователь", 				Сотрудник);
	ПараметрыОтбораДанных.Вставить("Контрагент", 					Клиент);
	//ПараметрыОтбораДанных.Вставить("Контрагент", 					Неопределено);
	ПараметрыОтбораДанных.Вставить("Подразделение", 				Подразделение);

	
	Если 		ЧислоАктивногоПараметра = 1 тогда
		СотрудникЗаполнен 		= ПроверкаЗаполненностиПараметра(Сотрудник);
		ПодразделениеЗаполнен	= ПроверкаЗаполненностиПараметра(Подразделение);
		КонтрагентЗаполнен 		= Ложь;
		
	ИначеЕсли ЧислоАктивногоПараметра = 2 тогда
		СотрудникЗаполнен 		= Ложь;
		ПодразделениеЗаполнен	= ПроверкаЗаполненностиПараметра(Подразделение);
		КонтрагентЗаполнен 		= ПроверкаЗаполненностиПараметра(Клиент);

	ИначеЕсли ЧислоАктивногоПараметра = 3 тогда
		СотрудникЗаполнен 		= ПроверкаЗаполненностиПараметра(Сотрудник);
		ПодразделениеЗаполнен	= Ложь;
		КонтрагентЗаполнен 		= ПроверкаЗаполненностиПараметра(Клиент);
	КонецЕсли;
	
	ПараметрыОтбораДанных.Вставить("СотрудникЗаполнен", 		СотрудникЗаполнен);
	ПараметрыОтбораДанных.Вставить("КонтрагентЗаполнен", 		КонтрагентЗаполнен);
	ПараметрыОтбораДанных.Вставить("ПодразделениеЗаполнен", 	ПодразделениеЗаполнен);
Возврат ПараметрыОтбораДанных;
	
КонецФункции

&НаКлиенте
Процедура СотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ТекстПоиска = "%"+Текст + "%";
	//ПараметрыОтбораДанных = ЗаполнениеПараметров(Объект.Сотрудник);
	ПолучениеДанныхВыбораСотрудника(ДанныеВыбора,ТекстПоиска, Объект.Подразделение, Объект.Клиент, Объект.Сотрудник) ;	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучениеДанныхВыбораСотрудника(ДанныеВыбора, ТекстПоиска, Подразделение, Клиент, Сотрудник)
	
	ПараметрыОтбораДанных = ЗаполнениеПараметров(Подразделение, Клиент, Сотрудник, 2);
	спВыбора    =    Новый СписокЗначений;
	Если ПараметрыОтбораДанных.КонтрагентЗаполнен = Истина	тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпецификацияПользователей_ат.Пользователь,
		|	СпецификацияПользователей_ат.Подразделение
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	СпецификацияПользователей_ат.Контрагент = &Контрагент
		|	И СпецификацияПользователей_ат.Пользователь.Наименование ПОДОБНО &Текст
		|	И ВЫБОР
		|			КОГДА &ПодрЗап
		|				ТОГДА СпецификацияПользователей_ат.Подразделение = &Подразделение
		|						И СпецификацияПользователей_ат.Подразделение.ПометкаУдаления = ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Текст",			ТекстПоиска);
		Запрос.УстановитьПараметр("Контрагент",		ПараметрыОтбораДанных.Контрагент);
		Запрос.УстановитьПараметр("Подразделение", ПараметрыОтбораДанных.Подразделение);
		Запрос.УстановитьПараметр("ПодрЗап", 		ПараметрыОтбораДанных.ПодразделениеЗаполнен);
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВДЗ = РезультатЗапроса.Выбрать();
		
		Пока ВДЗ.Следующий() Цикл
			ВыбранноеЗначение = Новый Структура;
			ВыбранноеЗначение.Вставить("Заявитель", ВДЗ.Пользователь);
			Если ПараметрыОтбораДанных.ПодразделениеЗаполнен тогда
				ПредставлениеОбщее =  Строка(ВДЗ.Пользователь);
			Иначе
				ПредставлениеПользователя = Строка(ВДЗ.Пользователь);
				ПредставлениеПодразделения = Строка(ВДЗ.Подразделение);
				ПредставлениеОбщее = ПредставлениеПользователя + " ( "+ ПредставлениеПодразделения + " )";
				ВыбранноеЗначение.Вставить("Подразделение",ВДЗ.Подразделение);
			КонецЕсли;
			спВыбора.Добавить(ВыбранноеЗначение, ПредставлениеОбщее);	   
		КонецЦикла;
		
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	СпецификацияПользователей_ат.Пользователь,
		|	СпецификацияПользователей_ат.Контрагент,
		|	СпецификацияПользователей_ат.Подразделение
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	СпецификацияПользователей_ат.Пользователь.ПометкаУдаления = ЛОЖЬ
		|	И СпецификацияПользователей_ат.Контрагент.ПометкаУдаления = ЛОЖЬ
		|	И СпецификацияПользователей_ат.Контрагент.ЭтоГруппа = ЛОЖЬ
		|	И СпецификацияПользователей_ат.Контрагент.Клиент = ИСТИНА
		|	И СпецификацияПользователей_ат.Пользователь.Наименование ПОДОБНО &Текст";
		
		Запрос.УстановитьПараметр("Текст", ТекстПоиска);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВДЗ = РезультатЗапроса.Выбрать();
		
		Пока ВДЗ.Следующий() Цикл
			ПредставлениеКонтрагента		= Строка(ВДЗ.Контрагент);
			ПредставлениеПользователя		= Строка(ВДЗ.Пользователь);
			ПредставлениеПодразделения	= Строка(ВДЗ.Подразделение);
			ОбщееПредставление = ПредставлениеПользователя + " (" + ПредставлениеКонтрагента +" / "+ ПредставлениеПодразделения + ")";
			ВыбранноеЗначение = Новый Структура;
			ВыбранноеЗначение.Вставить("Заявитель", 		ВДЗ.Пользователь);
			ВыбранноеЗначение.Вставить("Подразделение",	ВДЗ.Подразделение);
			ВыбранноеЗначение.Вставить("Клиент",				ВДЗ.Контрагент);
			Если ВДЗ.Подразделение.ПометкаУдаления = Истина тогда
				ПометкаУдаления = Истина;	
			Иначе 
				ПометкаУдаления = ложь;
			КонецЕсли;
			спВыбора.Добавить(ВыбранноеЗначение, ОбщееПредставление, ПометкаУдаления);
		КонецЦикла;
	КонецЕсли;	

	ДанныеВыбора=  спВыбора;
КонецПроцедуры // ПолучениеДанныхВыбораСотрудника()

&НаКлиенте
Процедура ПодразделениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Если ЗначениеЗаполнено(Объект.Клиент) тогда
		ТекстПоиска = "%"+Текст + "%";
	//	ПараметрыОтбораДанных = ЗаполнениеПараметров(Объект.Подразделение);
		ПолучениеДанныхВыбораПодразделения(ДанныеВыбора, ТекстПоиска, Объект.Подразделение, Объект.Клиент, Объект.Сотрудник) ;	
		
	Иначе 
		
		Сбщ = Новый СообщениеПользователю;
		Сбщ.Текст = "Необходимо заполнит Клиента";
		Сбщ.ПутьКДанным = "Объект.Клиент";
		Сбщ.Сообщить();
		
	КонецЕсли;


КонецПроцедуры

Функция   ПроверкаПользователяКлиентаИПодразделения(Пользователь, Контрагент, Подразделение = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпецификацияПользователей_ат.Пользователь,
		|	СпецификацияПользователей_ат.Контрагент,
		|	СпецификацияПользователей_ат.Подразделение,
		|	СпецификацияПользователей_ат.Основной
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	СпецификацияПользователей_ат.Пользователь = &Пользователь
		|	И СпецификацияПользователей_ат.Контрагент = &Контрагент
		|	И ВЫБОР
		|			КОГДА &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияКлиентов_ат.ПустаяСсылка)
		|					ИЛИ &Подразделение = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СпецификацияПользователей_ат.Подразделение = &Подразделение
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() тогда
		Возврат Ложь;
	Иначе
		
		ВДЗ = РезультатЗапроса.Выбрать();
		Если ВДЗ.Количество() = 1 тогда
			Пока ВДЗ.Следующий() Цикл
				Подразделение = ВДЗ.Подразделение;
			КонецЦикла;
		Иначе
			Пока ВДЗ.Следующий() Цикл
				Если ВДЗ.Основной тогда
					Подразделение = ВДЗ.Подразделение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;

	
КонецФункции // ПроверкаПользователяКлиентаИПодразделения()

&НаКлиенте
Процедура КлиентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекстПоиска = "%"+  Текст + "%";
	ПолучениеСпискаКлиентов(ДанныеВыбора, ТекстПоиска, Объект.Сотрудник);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучениеСпискаКлиентов(ДанныеВыбора, ТекстПоиска, Заявитель) 
	
	спВыбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Заявитель) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СпецификацияПользователей_ат.Пользователь,
		|	СпецификацияПользователей_ат.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	СпецификацияПользователей_ат.Пользователь = &Пользователь
		|	И (СпецификацияПользователей_ат.Контрагент.Наименование ПОДОБНО &ТекстПоиска
		|			ИЛИ СпецификацияПользователей_ат.Контрагент.НаименованиеПолное ПОДОБНО &ТекстПоиска
		|			ИЛИ ВЫБОР
		|				КОГДА &СотрудникОрганизации
		|					ТОГДА СпецификацияПользователей_ат.Контрагент.НаименованиеВнутреннее ПОДОБНО &ТекстПоиска
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|	И СпецификацияПользователей_ат.Контрагент.ЭтоГруппа = ЛОЖЬ
		|	И СпецификацияПользователей_ат.Контрагент.Клиент = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпецификацияПользователей_ат.Контрагент";
		
		Запрос.УстановитьПараметр("Пользователь", Заявитель);
		Запрос.УстановитьПараметр("ТекстПоиска", ТекстПоиска);
		Запрос.УстановитьПараметр("СотрудникОрганизации", ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			
			ДанныеВыбора = Неопределено;
			Возврат;
			
		Иначе
			
			ВДЗ = РезультатЗапроса.Выбрать();
			Если ВДЗ.Количество() = 1 тогда
				Пока ВДЗ.Следующий() Цикл
					
					ПредставлениеКонтрагента	= Строка(ВДЗ.Контрагент);
					ПредставлениеПользователя	= Строка(ВДЗ.Пользователь);
					
					Представление = ПредставлениеКонтрагента + " - " + ПредставлениеПользователя; 
					спВыбора.Добавить(ВДЗ.Контрагент, Представление);
					
				КонецЦикла;
				
				ПолучениеСтандартныхДанныхКлиентаАвтоподбора(спВыбора, ТекстПоиска);
				
			Иначе
				
				Пока ВДЗ.Следующий() Цикл
					
					ПредставлениеКонтрагента	= Строка(ВДЗ.Контрагент);
					ПредставлениеПользователя	= Строка(ВДЗ.Пользователь);
					Представление = ПредставлениеКонтрагента + " - " + ПредставлениеПользователя; 
					спВыбора.Добавить(ВДЗ.Контрагент, Представление);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		
		ПолучениеСтандартныхДанныхКлиентаАвтоподбора(спВыбора, ТекстПоиска);
		
	КонецЕсли;
	
	ДанныеВыбора = спВыбора;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучениеСтандартныхДанныхКлиентаАвтоподбора(СписокВыбора, ТекстПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты_ат.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты_ат КАК Контрагенты_ат
		|ГДЕ
		|	Контрагенты_ат.Наименование ПОДОБНО &Наименование
		|	И Контрагенты_ат.ЭтоГруппа = ЛОЖЬ
		|	И Контрагенты_ат.Клиент = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагенты_ат.Наименование";
Запрос.УстановитьПараметр("Наименование", ТекстПоиска);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВДЗ = РезультатЗапроса.Выбрать();
	
	Пока ВДЗ.Следующий() Цикл
		
		ПредставлениеКонтрагента	= Строка(ВДЗ.Контрагент);
		СписокВыбора.Добавить(ВДЗ.Контрагент, ПредставлениеКонтрагента,,);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КлиентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	ТекстПоиска = "%"+  Текст + "%";
	ПолучениеСпискаКлиентов(ДанныеВыбора, ТекстПоиска, Объект.Сотрудник);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ТекстПоиска = "%"+Текст + "%";
	//ПараметрыОтбораДанных = ЗаполнениеПараметров(Объект.Сотрудник);
	ПолучениеДанныхВыбораСотрудника(ДанныеВыбора, ТекстПоиска, Объект.Подразделение, Объект.Клиент, Объект.Сотрудник) ;	

КонецПроцедуры

&НаКлиенте
Процедура СотрудникИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	ТекстПоиска = "%"+  Текст + "%";
	//ПолучениеСпискаКлиентов(ДанныеВыбора, ТекстПоиска, Объект.Сотрудник);
	//ПараметрыОтбораДанных = ЗаполнениеПараметров(Объект.Подразделение);
	//ПолучениеДанныхВыбораПодразделения(ДанныеВыбора, ТекстПоиска, ПараметрыОтбораДанных) ;	
	ПолучениеДанныхВыбораПодразделения(ДанныеВыбора, ТекстПоиска, Объект.Подразделение, Объект.Клиент, Объект.Сотрудник) ;	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Объект.Клиент			= Неопределено;
	Объект.Сотрудник		= Неопределено;
	Объект.Подразделение	= Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаОтображения(СотрудникОрганизации)
	
	Если Параметры.ВводПрошлогоПериода Тогда
		
		Элементы.Дата.ТолькоПросмотр = Ложь;
		Элементы.ФормаСоздатьНаОсновании.Видимость = Ложь;
		
	ИначеЕсли Статус <> Перечисления.СтатусыЗаявок_ат.Зарегистрирована Тогда
		
		Если НЕ СотрудникОрганизации И НЕ Объект.Ссылка.Пустая() Тогда
			
			//ЭтаФорма.ТолькоПросмотр = Истина;
			Элементы.КоманднаяПанельТекстаЗаявкиВHTML.Доступность = Ложь;
			
		КонецЕсли;
		
		Если ТекущийСтатусЗаявкиЯвляетсяФинальным() Тогда
			
			Для Каждого Элемент Из Элементы.ФормаСоздатьНаОсновании.ПодчиненныеЭлементы Цикл
				
				Если Элемент.Имя = "ФормаДокументСогласование_атСоздатьНаОсновании"
					ИЛИ Элемент.Имя = "ФормаОбщаяКомандаСоздатьПодчиненноеЗадание_ат" Тогда
					
					Элемент.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СотрудникОрганизации Тогда
		
		Элементы.Клиент.КнопкаОчистки = Истина;
		Элементы.Подразделение.КнопкаОчистки = Истина;
		Элементы.Сотрудник.КнопкаОчистки = Истина;
		
		Элементы.Проект.АвтоОтметкаНезаполненного = Истина;
		Элементы.ТипЗаявки.АвтоОтметкаНезаполненного = Истина;
		
		//Элементы.ГруппаМетки.Видимость = Истина;
		Элементы.РедактироватьРезультат.Видимость = Истина;
		
		Элементы.ФормаНаПриемку.Видимость = Статус = Перечисления.СтатусыЗаявок_ат.НаПриемке;
		
		Если НЕ РольДоступна("ОрганизацияФинансы_ат") И НЕ РольДоступна("ПолныеПрава") Тогда
			
			Элементы.ФинСтатус.Видимость = Ложь;
			Элементы.ДатаФинСтатуса.Видимость = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		//Элементы.ГруппаМетки.Видимость = Ложь;
		Элементы.РедактироватьРезультат.Видимость = Ложь;
		Элементы.ФормаНаПриемку.Видимость = Ложь;
		
		Элементы.ДатаСтатуса.Формат = "ДФ=dd.MM.yyyy";
		Элементы.ДатаСтатуса.Ширина = 9;
		
		Если РольДоступна("КлиентФинансы_ат") Тогда
			
			Элементы.ДатаФинСтатуса.Формат = "ДФ=dd.MM.yyyy";
			Элементы.ДатаФинСтатуса.Ширина = 9;
			
		Иначе
			
			Элементы.ФинСтатус.Видимость = Ложь;
			Элементы.ДатаФинСтатуса.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Элементы.Регистрировать.Видимость = Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
		Отбор.Вставить("Контрагент",Объект.Клиент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Отбор.Вставить("Подразделение",Объект.Подразделение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("ЗакрытьПриВыборе", Истина);

	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.СпецификацияПользователей_ат.Форма.ФормаСпискаИВыбора",ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор				= Новый Структура;
	Если ЗначениеЗаполнено(Объект.Клиент) тогда
		Отбор.Вставить("Контрагент",Объект.Клиент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник) тогда
		Отбор.Вставить("Пользователь",Объект.Сотрудник);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("ЗакрытьПриВыборе", Истина);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФорму("РегистрСведений.СпецификацияПользователей_ат.Форма.ФормаСпискаИВыбора",ПараметрыФормы, Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Сотрудник) тогда
		Отбор.Вставить("Пользователь", Объект.Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) тогда
		Отбор.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("ЗакрытьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.СпецификацияПользователей_ат.Форма.ФормаСпискаИВыбора", ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.Сотрудник = ВыбранноеЗначение.Заявитель Тогда        
		// т.к. при выборе предыдущего значения изменения не происходит
		
		Элемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.Всегда;
		
	Иначе
		
		Элемент.ОбновлениеТекстаРедактирования = ОбновлениеТекстаРедактирования.ПриИзмененииЗначения;
		
	КонецЕсли;
	
	РучноеЗаполнениеСотрудникаКлиентаИПодразделение(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РучноеЗаполнениеСотрудникаКлиентаИПодразделение(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РучноеЗаполнениеСотрудникаКлиентаИПодразделение(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура РучноеЗаполнениеСотрудникаКлиентаИПодразделение(ВыбранноеЗначение)
	
	Если  ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("Клиент") Тогда
			Объект.Клиент = ВыбранноеЗначение.Клиент;
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("Подразделение") Тогда
			Объект.Подразделение = ВыбранноеЗначение.Подразделение;
			
			УстановитьПричастного(ВыбранноеЗначение.Подразделение);
		КонецЕсли;
		
		Если ВыбранноеЗначение.Свойство("Заявитель") Тогда
			Объект.Сотрудник = ВыбранноеЗначение.Заявитель;
			
			УстановитьПричастного(ВыбранноеЗначение.Заявитель);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты_ат") Тогда
		
		Подразделение = Неопределено;
		Объект.Клиент = ВыбранноеЗначение;
		РезПравЗаполнения = ПроверкаПользователяКлиентаИПодразделения(Объект.Сотрудник, Объект.Клиент, Подразделение);
		
		Если НЕ РезПравЗаполнения Тогда
			
			Объект.Сотрудник = Неопределено;
			Объект.Подразделение = Неопределено;
			
		КонецЕсли;
		
		Объект.Подразделение = Подразделение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПодразделенияКлиентов_ат") Тогда
		
		Объект.Подразделение = ВыбранноеЗначение;
		РезПравЗаполнения = ПроверкаПользователяКлиентаИПодразделения(Объект.Сотрудник, Объект.Клиент, Объект.Подразделение);
		Если НЕ РезПравЗаполнения Тогда 
			Объект.Сотрудник = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область  Метки

&НаКлиенте
Процедура ПроверитьМеткиИЗадатьВопрос(Отказ)
	
	Если НЕ Объект.Ссылка.Пустая() ИЛИ ЗаписыватьБезВопросаОМетках Тогда
		Возврат;
	КонецЕсли;
	
	МеткиУстановлены = Ложь;
	
	Для Каждого СтрокаВыбранныхМеток Из ВыбранныеМетки Цикл
		
		Если СтрокаВыбранныхМеток.Использовать > 0 Тогда
			
			МеткиУстановлены = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МеткиУстановлены Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОМетках", ЭтаФорма, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения, "Метки по заявке не установлены!
			|Желаете установить метки?", РежимДиалогаВопрос.ДаНет, 10);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМетокПоПроектам(Команда)
	
	ОтключитьОтборПоПроектуНаСервере();
	Метки_Клиент_ат.ОбновитьПринадлежностьВыбранныхМетокКПроектам(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьОтборПоПроектуНаСервере()
	
	Элементы.ОтборМетокПоПроектам.Пометка = НЕ Элементы.ОтборМетокПоПроектам.Пометка;
	Метки_Сервер_ат.ОбновитьМетки(ЭтаФорма, Объект.Ссылка, Ложь, Элементы.ОтборМетокПоПроектам.Пометка, Объект.Проект); //!!!!!HOTFIX
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМеток(Команда)
		
	ОткрытьФорму("Справочник.Метки_ат.ФормаСписка",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Метки_Клиент_ат.УстановитьМетку(ЭтаФорма, Истина);
	ОбновитьКоличествоВыбранныхМеток();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМеткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Метки_Клиент_ат.УстановитьМетку(ЭтаФорма, Истина,, Истина);
	ОбновитьКоличествоВыбранныхМеток();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетокИспользоватьПриИзменении(Элемент)
	
	Метки_Клиент_ат.УстановитьМетку(ЭтаФорма, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеМеткиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ВыбранныеМетки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Метки_Клиент_ат.ПолучитьИдентификаторСтроки(Элементы.ВыбранныеМетки.ТекущиеДанные.Значение, ДеревоМеток.ПолучитьЭлементы());
	
	Если НЕ Строка = Неопределено Тогда
		Элементы.ДеревоМеток.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьВыбранныеМетки(Команда)
	
	_ВыбранныеМетки = ВыбранныеМетки;
	
	Для Каждого СтрокаВыбранныхМеток Из _ВыбранныеМетки Цикл
		
		СтрокаВыбранныхМеток.Использовать = 0;
		Метки_Клиент_ат.ВыполнитьВыбор(ЭтаФорма, СтрокаВыбранныхМеток.Значение, СтрокаВыбранныхМеток.Использовать, СтрокаВыбранныхМеток.Частичная, СтрокаВыбранныхМеток.Сохраненная);
		
	КонецЦикла;
	
	ОбновитьКоличествоВыбранныхМеток();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьМетки(Команда)
	
	ВосстановитьМеткиНаСервере();
	МеткиИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьМеткиНаСервере()
	
	Метки_Сервер_ат.ОбновитьМетки(ЭтаФорма, Объект.Ссылка,, Элементы.ОтборМетокПоПроектам.Пометка, Объект.Проект); //!!!!!HOTFIX
	ОбновитьКоличествоВыбранныхМеток();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоВыбранныхМеток()
	
	КоличествоВыбранныхМеток = 0;
	
	Для Каждого ВыбраннаяМетка Из ВыбранныеМетки Цикл
		
		Если ВыбраннаяМетка.Использовать > 0 Тогда
			КоличествоВыбранныхМеток = КоличествоВыбранныхМеток + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.СтраницаМеток.Заголовок = "Метки" + ?(КоличествоВыбранныхМеток = 0, "", " (" + КоличествоВыбранныхМеток + ")");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМетки()
	
	Метки_Сервер_ат.ОбновитьМетки(ЭтаФорма, Объект.Ссылка, Ложь, Элементы.ОтборМетокПоПроектам.Пометка, Объект.Проект); //!!!!!HOTFIX
	
КонецПроцедуры

&НаКлиенте
Функция   ПолучитьИдентификаторСтроки(Значение, СтрокиДерева) //!!!TODO - в ОМ.Коллекции_ат (@lib)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Значение = Значение Тогда
			
			Возврат СтрокаДерева;
			
		КонецЕсли;
		
		ИдентификаторСтроки = ПолучитьИдентификаторСтроки(Значение, СтрокаДерева.ПолучитьЭлементы());
		
		Если НЕ ИдентификаторСтроки = Неопределено Тогда
			
			Возврат ИдентификаторСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область  Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтаФорма, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийКлиента(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	//ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, ОбработчикСобытийВнутреннегоКомментария;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийВнутреннегоКомментария(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

#КонецОбласти

//!!!!!HOTFIX:
// Изменены СвязиПараметровВыбора поля Проект

Процедура УстановитьПричастного(Причастный)
	
	Если ТипЗнч(Причастный) = Тип("СправочникСсылка.Пользователи") Тогда
		
		
		
	ИначеЕсли ТипЗнч(Причастный) = Тип("СправочникСсылка.ПодразделенияКлиентов_ат") Тогда
		
		
		
	КонецЕсли; 
	
КонецПроцедуры
