
#Область  ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если НЕ ДанныеЗаполнения.Свойство("Дата", Дата) Тогда
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ДанныеЗаполнения.Свойство("Клиент", Клиент);
		ДанныеЗаполнения.Свойство("Период", Период);
		
		СписыватьСОперативногоБаланса =
			?(ДанныеЗаполнения.Свойство("СписыватьСОперативногоБаланса"), ДанныеЗаполнения.СписыватьСОперативногоБаланса, Истина);
		
		Если ДанныеЗаполнения.Свойство("Договор", Договор) ИЛИ ДанныеЗаполнения.Свойство("ОсновнойДоговор", Договор) Тогда
			
			Организация = Договор.Организация;
			Клиент = Договор.Владелец;
			
			ПредставлениеПериода = Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период);
			ДатаОплатыПланируемая = Документы.СчетНаОплату_ат.ПолучитьПланируемуюДатуОплаты(Дата, Договор);
			
			Если ДанныеЗаполнения.Свойство("ЗаполнитьУслугиПоДоговору") И ДанныеЗаполнения.ЗаполнитьУслугиПоДоговору Тогда
				
				//Если Договор.ВидДоговора.ТипДоговора = Перечисления.ТипыДоговоров_ат.АрендаПрограммныхПродуктов Тогда
				//	
				//	РодительскийДоговор = ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель);
				//	ПродуктыВАренде = Аренда_ат.ПолучитьППвАренде(РодительскийДоговор, Истина);
				//	
				//	Если ПродуктыВАренде <> Неопределено Тогда
				//		ЗаполнитьУслуги(Неопределено, ПродуктыВАренде, "Номенклатура", "ВАренде");
				//	КонецЕсли;
				//	
				//Иначе
					
					Услуги.Загрузить(Договор.Услуги.Выгрузить());
					
					Для Каждого Услуга Из Услуги Цикл
						Услуга.Содержание = СодержаниеНоменклатуры(Услуга.Номенклатура, ПредставлениеПериода);
					КонецЦикла;
					
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Основание")
			И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.Согласование_ат") Тогда
			
			НоваяСтрока = Основания.Добавить();
			НоваяСтрока.Основание = ДанныеЗаполнения.Основание;
			//ЗаполнитьНаОснованииСогласования(ДанныеЗаполнения.ДокументОснование);
			ЗаполнитьСчетПоОснованиям();
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Основания") Тогда
			
			Основания.ЗагрузитьКолонку(ДанныеЗаполнения.Основания, "Основание"); //!!!!!!почему-то не работает
			Для Каждого Закрытие Из ДанныеЗаполнения.Основания Цикл
				
				Основание = Основания.Добавить();
				Основание.Основание = Закрытие;
				
			КонецЦикла;
			
			ЗаполнитьСчетПоОснованиям();
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Основание") Тогда
			
			НоваяСтрока = Основания.Добавить();
			НоваяСтрока.Основание = ДанныеЗаполнения.Основание;
			ЗаполнитьСчетПоОснованиям();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		//Дата = ТекущаяДата();
		//Клиент = ДанныеЗаполнения.Клиент;
		//
		//СтрокаКлиента = ДанныеЗаполнения.Проект.Клиенты.Найти(Клиент, "Клиент");
		//
		//Договор = ?(СтрокаКлиента = Неопределено, Неопределено, СтрокаКлиента.Договор);
		//
		//Организация = Договор.Организация;
		//ДатаОплатыПланируемая = Документы.СчетНаОплату_ат.ПолучитьПланируемуюДатуОплаты(Дата, Договор);
		//
		//ТаблицаРабот = Финансы_ат.ПолучитьВремяРаботПоЗаявке(ДанныеЗаполнения);
		//
		//ЗаполнитьУслуги(ДанныеЗаполнения.Проект, ТаблицаРабот, "СодержаниеРабот", "ВремяВДесятичнойСистеме");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Согласование_ат") Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Договор", ДанныеЗаполнения.Договор);
		СтруктураЗаполнения.Вставить("Основание", ДанныеЗаполнения);
		
		ОбработкаЗаполнения(СтруктураЗаполнения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору; //!!!!!
	Если ПолитикаФормированияВнешнегоНомера <> Перечисления.МетодикаПолученияВнешнегоНомера_ат.НомерИзБП Тогда
		СформироватьВнешнийНомер();
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Проведение") Тогда
		
		Отказ = Ложь;
		КомментарийСинхронизируемый = "";
		ДополнительныеСвойства.Свойство("КомментарийСинхронизируемый", КомментарийСинхронизируемый);
		Проведение = Неопределено;
		ДополнительныеСвойства.Свойство("Проведение", Проведение);
		
		СинхронизироватьСчет(Отказ, КомментарийСинхронизируемый, Проведение);
		Если Отказ Тогда
			
			ДополнительныеСвойства.Вставить("Отказ", Истина);
			
		Иначе
			
			Если ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.НомерИзБП Тогда
				СформироватьВнешнийНомер();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗначениеЗаполнено(Период) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РодительскийДоговор = ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель); 
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СчетНаОплату.Ссылка
			|ИЗ
			|	Документ.СчетНаОплату_ат КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.Договор В ИЕРАРХИИ (&Договор)
			|	И СчетНаОплату.Период = &Период
			|	И НЕ СчетНаОплату.Ссылка = &Ссылка
			|	И СчетНаОплату.Проведен");
		Запрос.УстановитьПараметр("Договор", РодительскийДоговор);
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "По договору " + РодительскийДоговор + " за "
				+ Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период)
				+ " существует проведённый " + Выборка.Ссылка;
			Сообщение.Сообщить(); 
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ДополнительныеСвойства.Вставить("Проведение", РежимЗаписи = РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	ПересчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("Отказ") Тогда
		Возврат;
	КонецЕсли;
	
	Если СписыватьСОперативногоБаланса Тогда
		ДобавитьДвиженияСписанияСОперативногоБаланса();
	КонецЕсли;
	
	Для Каждого СтрокаКосвенныхСвязей Из КосвенныеСвязиЗаданий Цикл
		
		Согласование_ат.ЗаписатьКосвеннуюСвязьЗадания(СтрокаКосвенныхСвязей.Задание, СтрокаКосвенныхСвязей.Заявка,,,
			Ссылка,,,, Клиент, СтрокаКосвенныхСвязей.Задание.СодержаниеРабот);
		
	КонецЦикла;
	
	РезультатСинхронизации = Неопределено;
	Если ДополнительныеСвойства.Свойство("РезультатСинхронизации", РезультатСинхронизации) Тогда
		
		ЗаписьСинхронизацииСчета = РегистрыСведений.СинхронизацияСчетовНаОплату_ат.СоздатьМенеджерЗаписи();
		ЗаписьСинхронизацииСчета.Ссылка = Ссылка;
		ЗаписьСинхронизацииСчета.Прочитать();
		
		ЗаписьСинхронизацииСчета.Ссылка 				= Ссылка;
		ЗаписьСинхронизацииСчета.Идентификатор			= РезультатСинхронизации.Идентификатор;
		ЗаписьСинхронизацииСчета.НавигационнаяСсылка 	= РезультатСинхронизации.НавигационнаяСсылка;
		ЗаписьСинхронизацииСчета.ДатаСчета 				= РезультатСинхронизации.ДатаДокумента;
		ЗаписьСинхронизацииСчета.НомерСчета 			= РезультатСинхронизации.НомерДокумента;
		ЗаписьСинхронизацииСчета.СуммаСчета 			= РезультатСинхронизации.СуммаДокумента;
		
		Попытка
			
			ЗаписьСинхронизацииСчета.Записать();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выполнена синхронизация со Счётом на оплату №" + РезультатСинхронизации.НомерДокумента
				+ " в ИБ Бухгалтерии Предприятия";
			Сообщение.Сообщить();
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ДополнительныеСвойства.Свойство("Отказ") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКосвенныхСвязей Из КосвенныеСвязиЗаданий Цикл
		
		Согласование_ат.ЗаписатьКосвеннуюСвязьЗадания(СтрокаКосвенныхСвязей.Задание, СтрокаКосвенныхСвязей.Заявка,,,
			Документы.СчетНаОплату_ат.ПустаяСсылка(),,,, Клиент, СтрокаКосвенныхСвязей.Задание.СодержаниеРабот);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДвиженияСписанияСОперативногоБаланса()
	
	ДвижениеОпер = Движения.Клиентский_ат.Добавить();
	
	ДоговорОсновной = ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель);
	ТекПользователь = Пользователи.ТекущийПользователь();
	ТекДата = ТекущаяДатаСеанса();
	ДоговорСубконто = ПланыВидовХарактеристик.ВидыСубконто_ат.Договор;
	ДокументСубконто = ПланыВидовХарактеристик.ВидыСубконто_ат.Документ;
	
	ДвижениеОпер.Период 					= Дата;
	ДвижениеОпер.Клиент 					= Клиент;
	ДвижениеОпер.Счет 						= ПланыСчетов.Клиентский_ат.Оперативный;
	ДвижениеОпер.ВидДвижения 				= ВидДвиженияБухгалтерии.Кредит;
	ДвижениеОпер.Субконто[ДоговорСубконто] 	= ДоговорОсновной;
	ДвижениеОпер.Субконто[ДокументСубконто] = Ссылка;
	ДвижениеОпер.Сумма 						= СуммаДокумента;
	
	ДвижениеОпер.Договор 					= Договор;
	ДвижениеОпер.Организация 				= Организация;
	
	ДвижениеОпер.АвторИзменения 			= ТекПользователь;
	ДвижениеОпер.ДатаИзменения 				= ТекДата;
	
	Движения.Клиентский_ат.Записывать = Истина;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивСчета = Новый Массив;
	МассивСчета.Добавить(Ссылка);
	
	Финансы_ат.ПересчитатьСтатусыОплатыСчетов(МассивСчета);
	
	Если СписыватьСОперативногоБаланса Тогда
		
		Если Проведен И (НЕ Ссылка.Проведен ИЛИ НЕ Ссылка.СписыватьСОперативногоБаланса) Тогда
			Уведомления_ат.УведомитьОСписанииСОперативногоБаланса(Ссылка, ДополнительныеСвойства.Свойство("Уведомлять"), Ложь);
		ИначеЕсли НЕ Проведен И Ссылка.Проведен Тогда
			Уведомления_ат.УведомитьОСписанииСОперативногоБаланса(Ссылка, ДополнительныеСвойства.Свойство("Уведомлять"), Истина);
		КонецЕсли;
		
	ИначеЕсли Ссылка.СписыватьСОперативногоБаланса Тогда
		
		Уведомления_ат.УведомитьОСписанииСОперативногоБаланса(Ссылка, ДополнительныеСвойства.Свойство("Уведомлять"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

Процедура ПересчитатьСуммуДокумента()
	
	СуммаДокумента = ЭтотОбъект.Услуги.Итог("Сумма");
	
	Если НЕ ЭтотОбъект.СуммаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + ЭтотОбъект.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВнешнийНомер()
	
	ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору; //!!!!!
	Если ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору Тогда
		
		Запрос = Новый  Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Крайний
			|ИЗ
			|	Документ.СчетНаОплату_ат КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.Договор = &Договор");
		Запрос.УстановитьПараметр("Договор", Договор);
		
		ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатовЗапроса.Следующий() Тогда
			НомерСчета = Строка(ВыборкаРезультатовЗапроса.Крайний + 1);
		Иначе
			НомерСчета = "1";
		КонецЕсли;
		
	ИначеЕсли ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.Тикет3по3 Тогда
		
		НомерСчета = Строки_КлиентСервер_ат.ПолучитьНомерТикета(Номер, Дата, Ложь);
		
	ИначеЕсли ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.НомерИзБП Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СинхронизацияСчетовНаОплату.НомерСчета
			|ИЗ
			|	Документ.СчетНаОплату_ат КАК СчетНаОплату
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияСчетовНаОплату_ат КАК СинхронизацияСчетовНаОплату
			|		ПО СчетНаОплату.Ссылка = СинхронизацияСчетовНаОплату.Ссылка
			|ГДЕ
			|	СчетНаОплату_ат.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РЗ = Запрос.Выполнить();
		Если РЗ.Пустой() Тогда
			
			НомерСчета = Номер;
			
		Иначе
			
			Выборка = РЗ.Выбрать();
			Выборка.Следующий();
			
			НомерСчета = Выборка.НомерСчета;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЦифрыНомераСтр = Строки_КлиентСервер_ат.ВернутьТолькоЦифры(НомерСчета,,, Ложь);
	Если ПустаяСтрока(ЦифрыНомераСтр) Тогда
		ЦифрыНомераСтр = "1";
	КонецЕсли;
	
	Если ПолитикаФормированияВнешнегоНомера = Перечисления.МетодикаПолученияВнешнегоНомера_ат.ПоДоговору Тогда //!!!!!
		ВнешнийНомер = Справочники.Договоры_ат.ПолучитьПолныйНомерДоговора(Договор) + "/" + ЦифрыНомераСтр;
	Иначе
		ВнешнийНомер = ЦифрыНомераСтр;
	КонецЕсли;
	
	ЦифрыНомера = Число(ЦифрыНомераСтр);
	
КонецПроцедуры

Процедура ЗаполнитьУслуги(Проект, ТаблицаУслуг, ИмяКолонкиУслуг, ИмяКолонкиКоличества)
	
	ТаблицаСтоимостей = Финансы_ат.ПолучитьЦеныНоменклатур(Дата, ТаблицаУслуг.ВыгрузитьКолонку(ИмяКолонкиУслуг),
		Организация, Договор.ВидДоговора, Клиент, Договор, Проект);
	
	ПредставлениеПериода = Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период);
	
	Для Каждого Строка Из ТаблицаУслуг Цикл
		
		ИмитацияСтроки = Новый Структура;
		
		ИмитацияСтроки.Вставить("Номенклатура", Строка.Номенклатура);
		ИмитацияСтроки.Вставить("Содержание", СодержаниеНоменклатуры(Строка.Номенклатура, ПредставлениеПериода));
		ИмитацияСтроки.Вставить("Количество", Строка[ИмяКолонкиКоличества]);
		ИмитацияСтроки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС_ат.БезНДС);
		ИмитацияСтроки.Вставить("СуммаНДС", 0);
		ИмитацияСтроки.Вставить("Сумма", 0);
		
		СтрокаСтоимости = ТаблицаСтоимостей.Найти(Строка[ИмяКолонкиУслуг], "Номенклатура");
		
		ИмитацияСтроки.Вставить("Цена", ?(СтрокаСтоимости <> Неопределено И СтрокаСтоимости.Цена <> Неопределено,
			СтрокаСтоимости.Цена, 0));
			
		Финансы_КлиентСервер_ат.ПересчитатьСумму(ИмитацияСтроки, СуммаВключаетНДС);
		
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИмитацияСтроки);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция   СодержаниеНоменклатуры(Номенклатура, ПредставлениеПериода)
	
	Возврат Финансы_ат.ПолучитьСодержаниеНоменклатурыДляСчета(Номенклатура,
		Договор, ПредставлениеПериода, Ссылка);
	
КонецФункции

Процедура ЗаполнитьСчетПоОснованиям() Экспорт
	
	Если Основания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПериода = Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период);
	
	СписыватьСОперативногоБаланса = Ложь;
	СуммаВключаетНДС = Ложь;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основания[0].Основание,, "Ссылка,Номер,Дата,Проведен,ПометкаУдаления"); // все стандартные реквизиты
	
	Для Каждого СтрокаОснования Из Основания Цикл
		
		Основание = СтрокаОснования.Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.Согласование_ат") Тогда
			
			Если ЗначениеЗаполнено(Договор) Тогда
				
				Если НЕ Договор = Основание.Договор
					ИЛИ (Основание.ТипСогласования <> Перечисления.ТипыСогласований_ат.Финансовое
					И Основание.ТипСогласования <> Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое) Тогда
					
					Продолжить; //!!!!!TODO - помечать убранные, удалять при сохранении
					
				КонецЕсли;
				
			Иначе
				
				Договор = Основание.Договор;
				Клиент = Договор.Владелец;
				Организация = Договор.Организация;
				ДатаОплатыПланируемая = Основание.ОжидаемаяДатаЗавершения;
				
			КонецЕсли;
			
			Для Каждого СтрокаСодержанияСогласования Из Основание.СодержаниеСогласования Цикл
				
				Если НЕ СтрокаСодержанияСогласования.Номенклатура.Пустая()
					И СтрокаСодержанияСогласования.Сумма > 0
					И СтрокаСодержанияСогласования.Количество > 0 Тогда
					
					ИмитацияСтроки = Новый Структура;
					
					ИмитацияСтроки.Вставить("Номенклатура", СтрокаСодержанияСогласования.Номенклатура);
					ИмитацияСтроки.Вставить("Содержание", СодержаниеНоменклатуры(СтрокаСодержанияСогласования.Номенклатура, ПредставлениеПериода));
					ИмитацияСтроки.Вставить("Количество",
						ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
							СтрокаСодержанияСогласования.Количество));
					ИмитацияСтроки.Вставить("СтавкаНДС", Перечисления.СтавкиНДС_ат.БезНДС);
					ИмитацияСтроки.Вставить("СуммаНДС", 0);
					ИмитацияСтроки.Вставить("Сумма", СтрокаСодержанияСогласования.Сумма);
					
					Цена = СтрокаСодержанияСогласования.Сумма / ИмитацияСтроки.Количество;
					
					ИмитацияСтроки.Вставить("Цена", Цена);
					
					Финансы_КлиентСервер_ат.ПересчитатьСумму(ИмитацияСтроки, СуммаВключаетНДС);
					
					СтруктураОтбора = Новый Структура("Номенклатура,Цена", ИмитацияСтроки.Номенклатура, ИмитацияСтроки.Цена);
					
					НайденныеСтроки = Услуги.НайтиСтроки(СтруктураОтбора);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						СтрокаУслуг = Услуги.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаУслуг, ИмитацияСтроки);
						
					Иначе
						
						СтрокаУслуг = НайденныеСтроки[0];
						
						ИмитацияСтроки.Количество 	= ИмитацияСтроки.Количество + СтрокаУслуг.Количество;
						ИмитацияСтроки.Сумма 		= ИмитацияСтроки.Сумма + СтрокаУслуг.Сумма;
						ЗаполнитьЗначенияСвойств(СтрокаУслуг, ИмитацияСтроки,, "Количество,Сумма");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//в.1
	//Для Каждого СтрокаЗадания Из ДанныеЗаполнения.ОбъектыСогласования Цикл
	//	
	//	НоваяСтрока = КосвенныеСвязиЗаданий.Добавить(); //!!!!!TODO - контроль дублирования??
	//	НоваяСтрока.Заявка = ДанныеЗаполнения.Заявка;
	//	НоваяСтрока.Задание = СтрокаЗадания.Задание;
	//	
	//КонецЦикла;
	//
	//в.2
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КосвенныеСвязиЗаданий_ат.Задание,
		|	КосвенныеСвязиЗаданий_ат.Заявка
		|ИЗ
		|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
		|ГДЕ
		|	КосвенныеСвязиЗаданий_ат.Согласование В(&Согласования)
		|");
	Запрос.УстановитьПараметр("Согласования", Основания.ВыгрузитьКолонку("Основание"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = КосвенныеСвязиЗаданий.Добавить();
		
		НоваяСтрока.Заявка = Выборка.Заявка;
		НоваяСтрока.Задание = Выборка.Задание;
		
	КонецЦикла;
	
	ДатаОплатыПланируемая = Документы.СчетНаОплату_ат.ПолучитьПланируемуюДатуОплаты(Дата, Договор);
	
КонецПроцедуры

Процедура СинхронизироватьСчет(Отказ, КомментарийСинхронизируемый, Проведение)
	
	БазаДанных = Константы.БухгалтерияДляСинхронизации_ат.Получить();
	Если БазаДанных.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСинхронизации = СинхронизацияСБП_ат.СинхронизироватьСчетНаОплату(ЭтотОбъект, БазаДанных,, Проведение, КомментарийСинхронизируемый);
	Если РезультатСинхронизации.Ошибки.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		Для каждого Ошибка Из РезультатСинхронизации.Ошибки Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибка;
			Сообщение.Сообщить();
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("РезультатСинхронизации", РезультатСинхронизации);
	
КонецПроцедуры

#КонецОбласти
