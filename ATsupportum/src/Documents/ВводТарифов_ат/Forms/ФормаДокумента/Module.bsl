
#Область ЛокальныеПеременные

#Область Комментарии

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Истина);
	
	#КонецОбласти
	
	ТочностьСтоимости = Константы.ТочностьСтоимости_ат.Получить();
	
	ВременнаяТаблица = Объект.Тарифы.Выгрузить( , "Номенклатура, ПорядокНоменклатуры");
	ВременнаяТаблица.Свернуть("Номенклатура, ПорядокНоменклатуры");
	ВременнаяТаблица.Сортировать("ПорядокНоменклатуры");
	Номенклатуры.Загрузить(ВременнаяТаблица);
	
	СпособыРасчета = Новый Структура;
	СпособыРасчета.Вставить("ФиксированнаяСумма", Перечисления.СпособыИзмененияЦены_ат.ФиксированнаяСумма);
	СпособыРасчета.Вставить("ОтличиеВПроцентах", Перечисления.СпособыИзмененияЦены_ат.ОтличиеВПроцентах);	
	СпособыРасчета.Вставить("ОтличиеВСумме", Перечисления.СпособыИзмененияЦены_ат.ОтличиеВСумме);
	
	ОбновитьОтборПоВидуДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	
	Если Объект.ТарифныеПланы.Количество() = 0 Тогда
		
		Объект.ТарифныеПланы.Добавить();
		ДобавитьТарифныйПлан();
		
	КонецЕсли; 
	
	МаксимальноеЗначениеВыбора = Объект.ТарифныеПланы[Объект.ТарифныеПланы.Количество() - 1].ЗначениеВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ЗаменитьТарифыПоНоменклатуре(ТекНоменклатура);
	
	Сч = 1;
	
	Для каждого Строка Из Номенклатуры Цикл
		
		ТарифыНоменклатуры = Объект.Тарифы.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
		
		Для каждого ТарифНоменклатуры Из ТарифыНоменклатуры Цикл
			
			ТарифНоменклатуры.ПорядокНоменклатуры = Сч;
			
		КонецЦикла;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийПользователя

&НаКлиенте
Процедура ТарифныеПланыПриИзменении(Элемент)
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифныеПланыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Тарифы.ТекущиеДанные = Неопределено Тогда
		
		ТекЗначениеВыбора = 0;
		
	Иначе
		
		ТекЗначениеВыбора = Элементы.ТарифныеПланы.ТекущиеДанные.ЗначениеВыбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифныеПланыПередУдалением(Элемент, Отказ)

	КоличествоТарифныхПланов = Объект.ТарифныеПланы.Количество();
	
	Если КоличествоТарифныхПланов = 1 Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ТарифыПоТарифномуПлану = Объект.Тарифы.НайтиСтроки(Новый Структура("НомерСтрокиТарифногоПлана", КоличествоТарифныхПланов));
	
	Если ТарифыПоТарифномуПлану.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Тариф Из ТарифыПоТарифномуПлану Цикл
		Объект.Тарифы.Удалить(Тариф);
	КонецЦикла;
	
	Тарифы.Удалить(Тарифы[КоличествоТарифныхПланов - 1]);
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифныеПланыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		МаксимальноеЗначениеВыбора = ?(Объект.ТарифныеПланы.Количество() = 1, МаксимальноеЗначениеВыбора, МаксимальноеЗначениеВыбора + 1);
		
		Элемент.ТекущиеДанные.ЗначениеВыбора = МаксимальноеЗначениеВыбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифныеПланыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		
		ДобавитьТарифныйПлан();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифныеПланыЗначениеВыбораПриИзменении(Элемент)
	
	Если Объект.ТарифныеПланы.НайтиСтроки(Новый Структура("ЗначениеВыбора", Элементы.ТарифныеПланы.ТекущиеДанные.ЗначениеВыбора)).Количество() > 1 Тогда
		
		ПоказатьПредупреждение(, "Значения выбора тарифных планов не могут быть одинаковыми!", 5);
		
		Если ТекущееЗначениеВыбора = 0 Тогда
			
			Элементы.ТарифныеПланы.ТекущиеДанные.ЗначениеВыбора = МаксимальноеЗначениеВыбора + 1;
			
		Иначе
			
			Элементы.ТарифныеПланы.ТекущиеДанные.ЗначениеВыбора = ТекущееЗначениеВыбора;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ТарифныеПланы.Сортировать("ЗначениеВыбора");
	
	ТекущееЗначениеВыбора = Элементы.ТарифныеПланы.ТекущиеДанные.ЗначениеВыбора;
	МаксимальноеЗначениеВыбора = ?(МаксимальноеЗначениеВыбора > ТекущееЗначениеВыбора, МаксимальноеЗначениеВыбора, ТекущееЗначениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурыПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТарифыМодифицированы Тогда
		
		ЗаменитьТарифыПоНоменклатуре(ТекНоменклатура);
		
	КонецЕсли;	
		
	Тарифы.Очистить();
	
	СменитьТекущуюНоменклатуру();
	
	Если НЕ ЗначениеЗаполнено(ТекНоменклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТарифыПоНоменклатуре(ТекНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Копирование Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурыПередУдалением(Элемент, Отказ)

	Тарифы.Очистить();
	
	УдалитьТарифыПоНоменклатуре(ТекНоменклатура);
	
	ТекНоменклатура = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		
		ТекстПредупреждения = "Номенклатура должна быть заполнена!";
		
	ИначеЕсли Номенклатуры.НайтиСтроки(Новый Структура("Номенклатура", Элемент.ТекущиеДанные.Номенклатура)).Количество() > 1 Тогда
		
		ТекстПредупреждения = "Номенклатуры не должны повторяться!";
		
	Иначе
		
		ТекстПредупреждения = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		Если НоваяСтрока Тогда
			Номенклатуры.Удалить(Элемент.ТекущиеДанные);
		Иначе
			Элементы.Номенклатуры.ТекущиеДанные.Номенклатура = ТекНоменклатура;
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения, 5);
		
		Возврат;
		
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Для Сч = 1 По Объект.ТарифныеПланы.Количество() Цикл
			
			НовыйТариф = Тарифы.Добавить();
			НовыйТариф.НомерСтрокиТарифногоПлана = Сч;
			НовыйТариф.ВеличинаИзмененияЦены = 0;
			НовыйТариф.Цена = 0;
			
			Если Сч = 1 Тогда
				НовыйТариф.СпособИзмененияЦены = СпособыРасчета.ФиксированнаяСумма;
			Иначе
				НовыйТариф.СпособИзмененияЦены = СпособыРасчета.ОтличиеВПроцентах;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		УдалитьТарифыПоНоменклатуре(ТекНоменклатура);
		
	КонецЕсли;
	
	СменитьТекущуюНоменклатуру();
	
	ДобавитьТарифыПоНоменклатуре(ТекНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СпособИзмененияЦены) Тогда
		
		Элемент.ТекущиеДанные.СпособИзмененияЦены = СпособыРасчета.ФиксированнаяСумма;
		
	КонецЕсли;
	
	ПересчитатьСуммы();
	
	ТарифыМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	ОбновитьОтборПоВидуДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбновитьОтборПоВидуДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ОбновитьОтборПоВидуДоговора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УвеличитьНаШаг(Команда)
	
	ИзменитьНаШаг("+");
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьНаШаг(Команда)
	
	ИзменитьНаШаг("-");
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьТарифы(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораНоменклатурыДляКопированияТарифов", ЭтаФорма);
	
	СписокНоменклатур = ПолучитьСписокНоменклатур();
	
	СписокНоменклатур.ПоказатьВыборЭлемента(Оповещение, "Выберите Номенклатуру для копирования тарифов");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьТарифыПоНоменклатуре(Номенклатура)
	
	МассивСтрок = Объект.Тарифы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(Тарифы.Добавить(), Строка);
		
	КонецЦикла;
	
	ПересчитатьСуммы();
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьТарифныйПлан()
	
	КоличествоТарифныхПланов = Объект.ТарифныеПланы.Количество();
	
	Для Каждого Строка Из Номенклатуры Цикл
		
		НовыйТариф = Объект.Тарифы.Добавить();
		НовыйТариф.Номенклатура = Строка.Номенклатура;
		НовыйТариф.НомерСтрокиТарифногоПлана = КоличествоТарифныхПланов;
		НовыйТариф.ВеличинаИзмененияЦены = 0;
		
		Если КоличествоТарифныхПланов = 1 Тогда
			
			НовыйТариф.СпособИзмененияЦены = СпособыРасчета.ФиксированнаяСумма;
			НовыйТариф.Цена = 0;
			
		Иначе
			
			ПредыдущийТариф = Объект.Тарифы.НайтиСтроки(Новый Структура("Номенклатура, НомерСтрокиТарифногоПлана", Строка.Номенклатура, КоличествоТарифныхПланов - 1));
			
			НовыйТариф.СпособИзмененияЦены = СпособыРасчета.ОтличиеВПроцентах;
			НовыйТариф.Цена = ПредыдущийТариф[0].Цена;
			
		КонецЕсли;
		
		Если Строка.Номенклатура = ТекНоменклатура Тогда
			
			ОтображаемаяСтрока = Тарифы.Добавить();
			ОтображаемаяСтрока.НомерСтрокиТарифногоПлана = НовыйТариф.НомерСтрокиТарифногоПлана;
			ОтображаемаяСтрока.СпособИзмененияЦены = НовыйТариф.СпособИзмененияЦены;
			ОтображаемаяСтрока.ВеличинаИзмененияЦены = НовыйТариф.ВеличинаИзмененияЦены;
			ОтображаемаяСтрока.Цена = НовыйТариф.Цена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьТекущуюНоменклатуру()
	
	ТекНоменклатура = Элементы.Номенклатуры.ТекущиеДанные.Номенклатура;
	
	Элементы.Тарифы.Доступность = ЗначениеЗаполнено(ТекНоменклатура);	
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаменитьТарифыПоНоменклатуре(Номенклатура)
	
	УдалитьТарифыПоНоменклатуре(Номенклатура);
	ДобавитьТарифыПоНоменклатуре(Номенклатура);
	
	ТарифыМодифицированы = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьТарифыПоНоменклатуре(Номенклатура)
	
	Для Каждого Строка Из Тарифы Цикл
		
		НоваяСтрока = Объект.Тарифы.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.НомерСтрокиТарифногоПлана = Строка.НомерСтрокиТарифногоПлана;
		НоваяСтрока.СпособИзмененияЦены = Строка.СпособИзмененияЦены;
		НоваяСтрока.ВеличинаИзмененияЦены = Строка.ВеличинаИзмененияЦены;
		НоваяСтрока.Цена = Строка.Цена;
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура УдалитьТарифыПоНоменклатуре(Номенклатура)
	
	МассивСтрок = Объект.Тарифы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Объект.Тарифы.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьНаШаг(Знак)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	
	Если ТекущиеДанные.СпособИзмененияЦены = СпособыРасчета.ОтличиеВПроцентах Тогда
		
		Шаг = 1;
		
	Иначе
		
		Шаг = ?(ТочностьСтоимости = 0, 1, ТочностьСтоимости);
		
	КонецЕсли;
	
	ТекущиеДанные.ВеличинаИзмененияЦены = ТекущиеДанные.ВеличинаИзмененияЦены + ?(ТекущиеДанные.ВеличинаИзмененияЦены < 0, - Шаг, Шаг) * Число(Знак + 1);
	
	ПересчитатьСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммы()
	
	ПерваяСумма = 0;
	ПредыдущаяСумма = 0;
	Сч = 1;
	
	Для Каждого Строка Из Тарифы Цикл
		
		Строка.НомерСтрокиТарифногоПлана = Сч;
		СтрокаТарифногоПлана = Объект.ТарифныеПланы[Сч - 1];
		Строка.ПредставлениеТарифногоПлана = ?(ПустаяСтрока(СтрокаТарифногоПлана.НазваниеТарифногоПлана),
			"От " + СтрокаТарифногоПлана.ЗначениеВыбора, СтрокаТарифногоПлана.НазваниеТарифногоПлана);
		
		Если Строка.СпособИзмененияЦены = СпособыРасчета.ФиксированнаяСумма Тогда
			
			Строка.Цена = Строка.ВеличинаИзмененияЦены;
			
		ИначеЕсли Строка.СпособИзмененияЦены = СпособыРасчета.ОтличиеВПроцентах Тогда
			
			Строка.Цена = Числа_КлиентСервер_ат.ПривестиЧислоКБазе((ПредыдущаяСумма + ПредыдущаяСумма * Строка.ВеличинаИзмененияЦены / 100), ТочностьСтоимости);
			
		ИначеЕсли Строка.СпособИзмененияЦены = СпособыРасчета.ОтличиеВСумме Тогда
			
			Строка.Цена = ПредыдущаяСумма + Строка.ВеличинаИзмененияЦены;
			
		КонецЕсли;
		
		Если Сч = 1 Тогда
			
			Строка.РазностьСПервой = 0;
			Строка.РазностьСПредыдущей = 0;
			
			ПерваяСумма = Строка.Цена;
			
		Иначе
			
			Строка.РазностьСПервой = Строка.Цена - ПерваяСумма;
			Строка.РазностьСПредыдущей = Строка.Цена - ПредыдущаяСумма;
			
		КонецЕсли;
		
		ПредыдущаяСумма = Строка.Цена;
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Функция   ПолучитьСписокНоменклатур()
	
	СписокНоменклатур = Новый СписокЗначений;
	СписокНоменклатур.ЗагрузитьЗначения(Номенклатуры.Выгрузить().ВыгрузитьКолонку("Номенклатура"));	
	
	Возврат СписокНоменклатур;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораНоменклатурыДляКопированияТарифов(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат.Значение = Элементы.Номенклатуры.ТекущиеДанные.Номенклатура Тогда
		Возврат;
	КонецЕсли;
	
	Тарифы.Очистить();
	
	ЗаполнитьТарифыПоНоменклатуре(Результат.Значение);
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьОтборПоВидуДоговора()
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Объект.ВидДоговора);
	МассивВидовДоговоров.Добавить(Справочники.ВидыДоговоров_ат.ПустаяСсылка());
	ВидыДоговоров.ЗагрузитьЗначения(МассивВидовДоговоров);
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВидДоговора", "ВидыДоговоров");
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.НоменклатурыНоменклатура.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

#КонецОбласти 

#Область УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти

#Область Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	//ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, ОбработчикСобытийВнутреннегоКомментария;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийВнутреннегоКомментария(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

#КонецОбласти
