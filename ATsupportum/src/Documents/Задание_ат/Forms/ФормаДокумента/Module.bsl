
#Область  ЛокальныеПеременные

//+ Работа с HTML

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

//- Работа с HTML

#КонецОбласти

#Область  ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Ложь);
	
	#КонецОбласти
	
	ОбновитьСвойстваЗадания();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Истина);
	
	#КонецОбласти
	
	Если Параметры.ВводПрошлогоПериода Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			
			Предок = Параметры.Предок;
			ТипСвязи = Параметры.ТипСвязи;
			ЗаполнитьРеквизиты();
			
		КонецЕсли;
		
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.СоздатьПодчиненноеЗадание.Видимость = Ложь;
		Элементы.Действия.Видимость = Ложь;
		Элементы.ГруппаПланируемойДлительности.Видимость = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		Отказ = Истина;
		Сообщить("Создание Задания копированием запрещено!");
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Параметры.Предок = Неопределено ИЛИ Параметры.ТипСвязи = Неопределено Тогда
			
			Сообщить("Нельзя создавать Задание без основания!");
			Отказ = Истина;
			Возврат;
			
		Иначе
			
			Предок = Параметры.Предок;
			ТипСвязи = Параметры.ТипСвязи;
			ЗаполнитьРеквизиты();
			
		КонецЕсли;
		
		Элементы.Действия.Видимость = Ложь;
		
	ИначеЕсли Планирование_Сервер_ат.ЗаданиеРедактируется(Объект.Ссылка) Тогда
		
		РедактируетсяВРПЗ = Истина;
		Сообщить("В настоящий момент задание редактируется!");
		
	КонецЕсли; 
	
	Если Параметры.ЗапретРедактированияДат Тогда
		Элементы.РедактироватьФактическиеДаты.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПересчитатьДоступностьЭлементов();
		УстановитьПараметры();
		
	Иначе
		
		Заголовок = Документы.Задание_ат.ПолучитьЗаголовокЗадания(Объект.Ссылка);
		АвтоЗаголовок = Ложь;
		
		РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "РезультатВыполнения", ЭтаФорма,,, Предок);
		
	КонецЕсли;
	
	ОбновитьИнформациюОСогласованномВремени();
	
	РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомманднаяПанельКнопокРедактированияHTML,,,
		Элементы.РезультатВыполнения.КонтекстноеМеню);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	
	Если Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Статус) Тогда
		
		ПодключитьОбработчикОжидания("ОткрытьОтчетОбОстаткахВремен", 0.1, Истина);
		
		Если Параметры.ВводПрошлогоПериода Тогда
			
			РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомманднаяПанельКнопокРедактированияHTML,
				Элементы.РезультатВыполнения, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если ПустаяСтрока(Объект.Тезис) Тогда
		НовыйТезис = СокрЛП(Лев(Объект.ТекстЗадания, 100));
		Если НЕ ПустаяСтрока(НовыйТезис) Тогда
			Для Позиция = 1 По СтрДлина(НовыйТезис) Цикл
				Если НовыйТезис[Позиция] = "." ИЛИ НовыйТезис[Позиция] = Символы.ПС ИЛИ НовыйТезис[Позиция] = Символы.ВК
					ИЛИ НовыйТезис[Позиция] = Символы.ПФ Тогда
					
					НовыйТезис = СокрП(Лев(НовыйТезис, Позиция - 1));
				КонецЕсли;
			КонецЦикла;
			Объект.Тезис = НовыйТезис;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Исполнитель)
	  И ЗначениеЗаполнено(ПланируемаяДатаНачала) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Исполнитель"" не заполнено.";
		Сообщение.Поле  = "Исполнитель";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить(); 
		
	КонецЕсли;

	Если Параметры.ВводПрошлогоПериода Тогда
		
		Если НЕ ЗначениеЗаполнено(ФактическаяДатаНачала) Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Поле ""Фактическая дата начала"" не заполнено.";
			Сообщение.Поле  = "ФактическаяДатаНачала";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить(); 
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ФактическаяДатаОкончания) Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Поле ""Фактическая дата окончания"" не заполнено.";
			Сообщение.Поле  = "ФактическаяДатаОкончания";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить(); 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПланируемаяДлительность) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Планируемая длительность"" не заполнено.";
		Сообщение.Поле  = "ПланируемаяДлительность";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПланируемоеВремяВыполнения) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Поле ""Планируемое время выполнения"" не заполнено.";
		Сообщение.Поле  = "ПланируемоеВремяВыполнения";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ДокументHTMLСформирован Тогда
		
		Если НЕ Объект.Ссылка.Пустая()
		   И Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданий_ат.Выполнено")
		   И ПустаяСтрока(РаботаСHTML_КлиентСервер_ат.ПолучитьОбычныйТекстИзHTML(Элементы.РезультатВыполнения.Документ.Body.InnerHTML)) Тогда
			
			Предупреждение("Результат выполнения не может быть пустым", 30);
			Отказ = Истина;
			
		КонецЕсли;
		
		Элементы.РезультатВыполнения.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(
				Элементы.РезультатВыполнения.Документ.body.innerHTML);
		
		РезультатВыполнения = Элементы.РезультатВыполнения.Документ.documentElement.outerHTML;
		ИзменитьСвойствоЗадания(ЭтаФорма, "РезультатВыполненияВHTML", РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ЭтоЗаписьНового = Истина;
		
	Иначе
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если НЕ ТекущийОбъект.Автор = ТекущийПользователь
			И НЕ Исполнитель = ТекущийПользователь // возможность забрать себе чцжое задание
			И НЕ РольДоступна("ОрганизацияМенеджерПроектов_ат")
			И НЕ РольДоступна("ПолныеПрава") Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Изменять это Задание может только " + Исполнитель + ", автор Задания или Менеджеры/Руководители Проектов";
			Сообщение.Сообщить(); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НачатьТранзакцию();
	Попытка
		
		Если ПараметрыЗаписи.Свойство("ПостановкаВОчередь") И ПараметрыЗаписи.ПостановкаВОчередь Тогда
			
			Планирование_Сервер_ат.УстановитьСтатус(ТекущийОбъект.Ссылка, Перечисления.СтатусыЗаданий_ат.ВОчереди, ТекущаяДатаСеанса());
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Предок) Тогда // Первое сохранение Задания
			
			СвязиОбъектов_ат.ДобавитьСвязьСПредком(ТекущийОбъект.Ссылка, Предок, , ТипСвязи, "СвязиОбъектов_ат");
			
			Если НЕ Параметры.ВводПрошлогоПериода Тогда
				
				Если СвойстваЗадания <> Неопределено Тогда
					
					Если НЕ СвойстваЗадания.Свойство("ПланируемоеВремяВыполнения") Тогда
						
						ИзменитьСвойствоЗадания(ЭтаФорма, "ПланируемоеВремяВыполнения", 
							ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ПланируемоеВремяВыполнения));
						
					КонецЕсли;
					
					Планирование_Сервер_ат.ЗаписатьСвойстваЗадания(ТекущийОбъект.Ссылка, СвойстваЗадания);
					
				КонецЕсли;
				
				Планирование_Сервер_ат.ПересчитатьСтатусыСвязанныхЗаявок(ТекущийОбъект.Ссылка);
				Планирование_Сервер_ат.ПересчитатьСвойстваСвязанныхЗаявок(ТекущийОбъект.Ссылка);
				
			КонецЕсли;
			
		ИначеЕсли СвойстваЗадания <> Неопределено Тогда
			
			Планирование_Сервер_ат.ЗаписатьСвойстваЗадания(ТекущийОбъект.Ссылка, СвойстваЗадания);
			
		КонецЕсли;
		
		Предок = Неопределено;
		СвойстваЗадания = Неопределено;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщить(ОписаниеОшибки());
		
		Отказ = Истина;
		
	КонецПопытки;
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтаФорма, ТекущийОбъект.Ссылка, , Неопределено);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Параметры.ВводПрошлогоПериода Тогда
		
		ОбновитьСвойстваЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	Если НЕ Параметры.ВводПрошлогоПериода Тогда
		
		ОбновитьСвойстваЗадания();
		
	КонецЕсли;
	
	Если ЭтоЗаписьНового Тогда
		
		Если НетОтветственногоПоЗаявке() Тогда
			Планирование_Клиент_ат.ЗадатьВопросОбУстановкеОтветственного(Заявка, Исполнитель);
		КонецЕсли;
		
		ЭтоЗаписьНового = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьЗадание" И Параметр = Объект.Ссылка Тогда
		
		ОбновитьСвойстваЗадания();
		Активизировать();
		ТекущийЭлемент = Элементы.Тезис;
		
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуЗадания" И Параметр = Объект.Ссылка Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область  ОбработкаДействийПользователя

&НаКлиенте
Процедура ПланируемаяДлительностьПриИзменении(Элемент)
	
	ИзменитьСвойствоЗадания(ЭтаФорма, "ПланируемаяДлительность", ПланируемаяДлительность);
	
	Если ПланируемаяДлительность = 1 Тогда
		
		Элементы.Краткосрочное.ТолькоПросмотр = Ложь;
		
	Иначе	
		
		Краткосрочное = Ложь;
		Элементы.Краткосрочное.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ИзменитьСвойствоЗадания(ЭтаФорма, "Исполнитель", Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура КраткосрочноеПриИзменении(Элемент)
	
	ИзменитьСвойствоЗадания(ЭтаФорма, "Краткосрочное", Краткосрочное);
	ПересчитатьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияПриИзменении(Элемент)
	
	ИзменитьСвойствоЗадания(ЭтаФорма, "РезультатВыполненияВHTML", РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеРаботПриИзменении(Элемент)
	
	ЗаполнитьСписокСодержанияРабот();
	НастроитьПоСодержаниюРабот();
	ОбновитьИнформациюОСогласованномВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкземплярПродуктаПриИзменении(Элемент)
	
	ЭкземплярПродуктаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЭкземплярПродуктаПриИзмененииНаСервере()
	
	УчетПродуктов_ат.ЗаполнитьСписокПоследнихВерсийПродукта(Объект.ЭкземплярПродукта.ТекущийПродукт,
		Элементы.ВерсияПродукта.СписокВыбора);
	
	Объект.ВерсияПродукта = Объект.ЭкземплярПродукта.ТекущаяВерсия;
	
	ТребуетсяПерезапускЭкземпляраПродукта = Истина; //TODO: должно быть в зависимости от ТипаЗаявки
	
	ИзменитьСвойствоЗадания(ЭтаФорма, "ТребуетсяПерезапускЭкземпляраПродукта", ТребуетсяПерезапускЭкземпляраПродукта);
	
	НовыйМассив_Версии = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ЭкземплярПродукта) Тогда
		
		ВерсииПродуктов.ЗагрузитьЗначения(УчетПродуктов_ат.ПолучитьВерсииЭкземпляраПродукта(Объект.ЭкземплярПродукта));
		//ТекущийПродуктЭкземпляра = ЭкземплярПродукта.ТекущийПродукт;
		НоваяСвязь_Версии = Новый СвязьПараметраВыбора("Отбор.Ссылка", "ВерсииПродуктов");
		НовыйМассив_Версии.Добавить(НоваяСвязь_Версии);
		
	КонецЕсли;
	
	НовыеСвязи_Версии = Новый ФиксированныйМассив(НовыйМассив_Версии);
	Элементы.ВерсияПродукта.СвязиПараметровВыбора = НовыеСвязи_Версии;
	
КонецПроцедуры

&НаСервере
Процедура ГруппаСтраницПриСменеСтраницыНаСервере()
	
	Если Элементы.ГруппаСтраниц.ТекущаяСтраница = Элементы.ГруппаСводно Тогда
		
		УстановитьОписаниеЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ГруппаСтраницПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеЗаданияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемоеВремяВыполненияПриИзменении(Элемент)
	
	ОбновитьИнформациюОСогласованномВремени();
	
КонецПроцедуры

#КонецОбласти 

#Область  ОбработчикиКомандФормы

&НаКлиенте
Процедура РедактироватьФактическиеДаты(Команда)
	
	Если Параметры.ВводПрошлогоПериода Тогда
		
		Если НЕ ОбязательныеРеквизитыЗаполнены() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			
			Предупреждение("Редактировать даты не записанного Задания нельзя.");
			
			Возврат;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ФактическаяДатаНачала) Тогда
			
			Предупреждение("Для редактирования дат Фактическая дата начала должна быть заполнена.");
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыОткрытия.Вставить("Задание", Объект.Ссылка);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("Предок", Предок);
		
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ИзменениеДат", Истина);
	ПараметрыОткрытия.Вставить("ВводПрошлогоПериода", Параметры.ВводПрошлогоПериода);
	ПараметрыОткрытия.Вставить("РезультатВыполненияВHTML",
		?(ДокументHTMLСформирован,Элементы.РезультатВыполнения.Документ.BODY.InnerHTML, РезультатВыполнения));
	
	Оповещение = Новый ОписаниеОповещения("ПослеКорректировкиДатИВремени", ЭтаФорма);
	
	ОткрытьФорму("Обработка.ФинализацияЗиЗ_ат.Форма.ЗавершениеЗадания", ПараметрыОткрытия, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРПЗ(Команда)
	
	Если НЕ ОбязательныеРеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ?(Объект.Ссылка.Пустая(), Предок, Объект.Ссылка);
	
	ПараметрыОткрытия = Новый Структура;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыОткрытия.Вставить("Задание", "Планируемое Задание");
		ПараметрыОткрытия.Вставить("Предок", Предок);
	Иначе
		ПараметрыОткрытия.Вставить("Задание", Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Тезис", Объект.Тезис);
	ПараметрыОткрытия.Вставить("СодержаниеРабот", Объект.СодержаниеРабот);
	ПараметрыОткрытия.Вставить("Исполнитель", Исполнитель);
	ПараметрыОткрытия.Вставить("ПланируемаяДлительность", ПланируемаяДлительность);
	ПараметрыОткрытия.Вставить("Краткосрочное", Краткосрочное);
	
	ОткрытьФорму("Обработка.ПланированиеЗаданий_ат.Форма", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВКонецОчереди(Команда)
	
	Если НЕ ОбязательныеРеквизитыЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ?(Объект.Ссылка.Пустая(), Предок, Объект.Ссылка);
	
	ПроверенныеДаты = Планирование_Сервер_ат.ПолучитьИПроверитьДатыВКонцеОчереди(Исполнитель, Ссылка, ПланируемаяДлительность, Истина);
	
	Если ПроверенныеДаты.Сообщение = "" Тогда
		
		ПослеВопросаПриПостановкеЗаданияВКонецОчереди(КодВозвратаДиалога.Да, ПроверенныеДаты);
		
	Иначе
		
		Если ПроверенныеДаты.ВСпринте Тогда
		
			Оповещение = Новый ОписаниеОповещения("ПослеВопросаПриПостановкеЗаданияВКонецОчереди", ЭтаФорма, ПроверенныеДаты);
			
			ТекстВопроса = ПроверенныеДаты.Сообщение + Символы.ПС + "Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет);
			
		Иначе
			
			ПоказатьПредупреждение(, ПроверенныеДаты.Сообщение, 5);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьТекстЗаявки(Команда)
	
	КопироватьТекстЗаявкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложитьДоРелиза(Команда)
	
	СтатусЗакрытия = ПредопределенноеЗначение("Перечисление.СтатусыЗаданий_ат.Выполнено");
	
	СтруктураЗакрытия = Планирование_Сервер_ат.ПолучитьСтруктуруЗавершенияЗадания(Объект.Ссылка, СтатусЗакрытия);
	Если НЕ ПустаяСтрока(СтруктураЗакрытия.ТекстОшибки) Тогда
		
		ПоказатьПредупреждение(, СтруктураЗакрытия.ТекстОшибки, 5);
		Возврат;
		
	КонецЕсли;
	
	КоличествоЗакрываемыхЗаявок = СтруктураЗакрытия.ЗакрываемыеЗаявки.Количество();
	Если КоличествоЗакрываемыхЗаявок = 1 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Задание", Объект.Ссылка);
		//ПараметрыОткрытия.Вставить("ПрерываниеЗадания", Истина);
		ПараметрыОткрытия.Вставить("СтатусЗадания", СтатусЗакрытия);
		
		Оповещение = Новый ОписаниеОповещения("ПослеНастройкиЗавершенияЗаданияСОткладываниемДоРелиза", ЭтотОбъект);
		ОткрытьФорму("Обработка.ФинализацияЗиЗ_ат.Форма.ЗавершениеЗадания", ПараметрыОткрытия, ЭтаФорма,,,, Оповещение);
		
	Иначе
		
		ПоказатьПредупреждение(, "Это не последнее Задание по данной Заявке, следовательно она не может быть целиком отложена!", 5);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСвойстваЗадания()
	
	Свойства = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Объект.Ссылка);
	
	Если Свойства.Количество() > 0 Тогда
		
		Статус = Свойства.Статус;
		ДатаСтатуса = Свойства.ДатаСтатуса;
		Исполнитель = Свойства.Исполнитель;
		РезультатВыполнения = Свойства.РезультатВыполненияВHTML;
		Краткосрочное = Свойства.Краткосрочное;
		ПланируемаяДатаНачала = Свойства.ПланируемаяДатаНачала;
		ПланируемаяДатаОкончания = Свойства.ПланируемаяДатаОкончания;
		ПланируемаяДлительность = Свойства.ПланируемаяДлительность;
		ПланируемоеВремяВыполнения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(Свойства.ПланируемоеВремяВыполнения);
		ФактическаяДатаНачала = Свойства.ФактическаяДатаНачала;
		ФактическаяДатаОкончания = Свойства.ФактическаяДатаОкончания;
		ФактическаяДлительность = Свойства.ФактическаяДлительность;
		ФактическоеВремяВыполнения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(Свойства.ФактическоеВремяВыполнения);
		
	КонецЕсли;
	
	ПересчитатьДоступностьЭлементов();
	
	УстановитьПараметры();
	
КонецПроцедуры 

&НаСервере
Процедура ПересчитатьДоступностьЭлементов()
	
	Если Параметры.ВводПрошлогоПериода Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыЗаданий = Перечисления.СтатусыЗаданий_ат;
	СтатусЗаявки = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Заявка);
	ЗаявкаЗакрыта = ((СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Закрыта)
		ИЛИ (СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отклонена)
		ИЛИ (СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отменена));
	
	Если ЗначениеЗаполнено(ПланируемаяДатаНачала) И ЗначениеЗаполнено(ПланируемаяДатаОкончания)
		И НЕ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.МенеджерПроектовИлиПолныеПрава() Тогда
		
		Элементы.Исполнитель.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Если Статус <> СтатусыЗаданий.ПустаяСсылка() И Статус <> СтатусыЗаданий.Планируемое Тогда
		
		Элементы.ПланируемаяДлительность.ТолькоПросмотр = Истина;
		Элементы.ПланируемоеВремяВыполнения.ТолькоПросмотр = Истина;
		//Элементы.Краткосрочное.ТолькоПросмотр = Истина;
		//Элементы.СодержаниеРабот.ТолькоПросмотр = Истина;
		
		Элементы.ВКонецОчереди.Видимость = Ложь;
		
	Иначе
		
		Элементы.ПланируемаяДлительность.ТолькоПросмотр = Ложь;
		Элементы.ПланируемоеВремяВыполнения.ТолькоПросмотр = Ложь;
		Элементы.Краткосрочное.ТолькоПросмотр = Ложь;
		
		Элементы.ВКонецОчереди.Видимость = (НЕ Краткосрочное И НЕ ЗаявкаЗакрыта);
		
	КонецЕсли;
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		
		Элементы.СодержаниеРабот.ТолькоПросмотр = 
			(Статус = СтатусыЗаданий.Выполнено
			ИЛИ Статус = СтатусыЗаданий.ВРаботе
			ИЛИ Статус = СтатусыЗаданий.ВОчереди
			ИЛИ Статус = СтатусыЗаданий.Отменено
			ИЛИ Статус = СтатусыЗаданий.Прервано);
		
	КонецЕсли;
	
	Если НЕ РольДоступна("ОрганизацияИсполнитель_ат") И НЕ РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Действия.Видимость = (НЕ ЗаявкаЗакрыта
		И (Статус = СтатусыЗаданий.ВОчереди
			ИЛИ Статус = СтатусыЗаданий.КВозобновлению
			ИЛИ Статус = СтатусыЗаданий.ВРаботе
			ИЛИ ((Статус = СтатусыЗаданий.ПустаяСсылка() ИЛИ Статус = СтатусыЗаданий.Планируемое)
				И Краткосрочное)));
	Элементы.ПриступитьКЗаданию.Видимость = (НЕ ЗаявкаЗакрыта
		И (Статус = СтатусыЗаданий.ВОчереди
			ИЛИ Статус = СтатусыЗаданий.КВозобновлению
			ИЛИ ((Статус = СтатусыЗаданий.ПустаяСсылка() ИЛИ Статус = СтатусыЗаданий.Планируемое)
				И Краткосрочное)));
	Элементы.ЗавершитьЗадание.Видимость = (НЕ ЗаявкаЗакрыта
		И (Статус = СтатусыЗаданий.ВРаботе));
	Элементы.ЗавершитьСОбновлениемРелизом.Видимость = Элементы.ЗавершитьЗадание.Видимость;
	Элементы.ПрерватьЗадание.Видимость = Элементы.ЗавершитьЗадание.Видимость;
	Элементы.ОтменитьЗадание.Видимость = (НЕ ЗаявкаЗакрыта
		И (Статус <> СтатусыЗаданий.Выполнено И Статус <> СтатусыЗаданий.Отменено И Статус <> СтатусыЗаданий.Прервано));
	
	Элементы.ПерейтиВРПЗ.Видимость = (НЕ ЗаявкаЗакрыта И НЕ Краткосрочное
		И (Статус = СтатусыЗаданий.ВОчереди
			ИЛИ Статус = СтатусыЗаданий.КВозобновлению
			ИЛИ Статус = СтатусыЗаданий.Планируемое
			ИЛИ Статус = СтатусыЗаданий.ПустаяСсылка()));
		
	Элементы.СоздатьПодчиненноеЗадание.Видимость = НЕ ЗаявкаЗакрыта;
	
	Если Элементы.РедактироватьФактическиеДаты.Видимость Тогда
		Элементы.РедактироватьФактическиеДаты.Видимость = НЕ ЗаявкаЗакрыта;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметры()
	
	Предок = Параметры.Предок;
	Проект = Неопределено;
	ТипЗаявки = Неопределено;
	//ВидДоговора = Неопределено;
	
	Если ЗначениеЗаполнено(Предок) И ТипЗнч(Предок) = Тип("ДокументСсылка.Заявка_ат") Тогда // Для нового Задания
		
		Заявка = Предок;
		Проект = Предок.Проект;
		ТипЗаявки = Предок.ТипЗаявки;
		//ВидДоговора = Предок.Проект.Договор.ВидДоговора;
		
	ИначеЕсли НЕ Объект.Ссылка.Пустая() Тогда
		
		Заявка = Планирование_Сервер_ат.ПолучитьРодительскуюЗаявку(Объект.Ссылка);
		
		Если ЗначениеЗаполнено(Заявка) Тогда
			
			Проект = Заявка.Проект;
			ТипЗаявки = Заявка.ТипЗаявки;
			//ВидДоговора = Заявка.Проект.Договор.ВидДоговора;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСвязиПараметровВыбораЭкземпляраПродукта();
	
	ЗаполнитьСписокСодержанияРабот();
	
	НастроитьПоСодержаниюРабот();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораЭкземпляраПродукта()
	
	ЗаполнитьПродуктыПоРодительскимЗаявкам();
	Продукты.Добавить(Справочники.Продукты_ат.ПустаяСсылка());
	
	НовыйМассив = Новый Массив;
	
	Если ЗначениеЗаполнено(Продукты) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ТекущийПродукт", "Продукты");
		НовыйМассив.Добавить(НоваяСвязь);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		
		Клиент = Заявка.Клиент;
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Клиент", "Клиент");
		НовыйМассив.Добавить(НоваяСвязь);
		
	КонецЕсли;
		
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ЭкземплярПродукта.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПродуктыПоРодительскимЗаявкам()
	
	//Если Объект.Ссылка.Пустая() Тогда
	//	
	//	РодительскиеЗаявки = Новый Массив;
	//	РодительскиеЗаявки.Добавить(Параметры.Предок);
	//	
	//Иначе
	//	
	//	РодительскиеЗаявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Объект.Ссылка);
	//	
	//КонецЕсли;
	РодительскиеЗаявки = Новый Массив;
	РодительскиеЗаявки.Добавить(Заявка);
	
	Продукты.ЗагрузитьЗначения(УчетПродуктов_ат.ПолучитьПродуктыПоЗаявкам(РодительскиеЗаявки));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСодержанияРабот()
	
	СписокСодержанийРабот = Элементы.СодержаниеРабот.СписокВыбора;
	СписокСодержанийРабот.Очистить();
	
	//!!!!!TODO во-первых перенести нижеследующее в отдельную процедуру, а во-вторых, краткосрочность и соответствие виду договора
	// надо определять на этапе Согласования
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СодержанияРабот_ат.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СодержанияРабот_ат КАК СодержанияРабот_ат
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СодержанияРабот_ат.ВидыДоговоров КАК СодержанияРабот_атВидыДоговоров
		//|		ПО (СодержанияРабот_атВидыДоговоров.Ссылка = СодержанияРабот_ат.Ссылка)
		|ГДЕ
		//|	(СодержанияРабот_атВидыДоговоров.ВидДоговора = &ВидДоговора
		//|		ИЛИ СодержанияРабот_атВидыДоговоров.ВидДоговора ЕСТЬ NULL) И
		|	ВЫБОР
		|		КОГДА &ИспользоватьОтборПоПризнакуКраткосрочности
		|			ТОГДА СодержанияРабот_ат.КраткосрочныеРаботы
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НЕ СодержанияРабот_ат.ПометкаУдаления
		|	И СодержанияРабот_ат.ИТС_временное = &ИТС_временное
		|";
	//Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПризнакуКраткосрочности", ТипЗаявки.Срочное);
	Запрос.УстановитьПараметр("ИТС_временное", ?(Проект <> Неопределено, Проект.ИТС_временное, Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокСодержанийРабот.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если НЕ Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.СодержаниеРабот) Тогда
		
		Если СписокСодержанийРабот.НайтиПоЗначению(Объект.СодержаниеРабот) = Неопределено Тогда
			
			СписокСодержанийРабот.Добавить(Объект.СодержаниеРабот);
			Элементы.СодержаниеРабот.ЦветФона = Новый Цвет(200, 0, 0);
			
		Иначе
			
			Элементы.СодержаниеРабот.ЦветФона = Новый Цвет;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Ссылка.Пустая() И (СписокСодержанийРабот.Количество() = 1) И Объект.СодержаниеРабот.Пустая() Тогда
		
		Объект.СодержаниеРабот = СписокСодержанийРабот[0].Значение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоСодержаниюРабот()
	
	//!!!!!TODO краткосрочность по договору надо определять на этапе Согласования
	
	//СодержаниеРабот = Объект.СодержаниеРабот;
	//
	//Если НЕ ЗначениеЗаполнено(Заявка) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(СодержаниеРабот) Тогда
	//	
	//	Если СодержаниеРабот.КраткосрочныеРаботы Тогда
	//		
	//		Краткосрочное = Истина;
	//		ИзменитьСвойствоЗадания(ЭтаФорма, "Краткосрочное", Краткосрочное);
	//		Элементы.Краткосрочное.ТолькоПросмотр = Истина;
	//		
	//		Запрос = Новый Запрос;
	//		Запрос.Текст =
	//		"ВЫБРАТЬ
	//		|	ПолитикаКраткосрочныхЗаданий_ат.КраткосрочноеВремя
	//		|ИЗ
	//		|	РегистрСведений.ПолитикаКраткосрочныхЗаданий_ат КАК ПолитикаКраткосрочныхЗаданий_ат
	//		|ГДЕ
	//		|	ПолитикаКраткосрочныхЗаданий_ат.Контрагент = &Контрагент
	//		|	И ПолитикаКраткосрочныхЗаданий_ат.Договор = &Договор";
	//		
	//		Запрос.УстановитьПараметр("Контрагент", Заявка.Клиент);
	//		Запрос.УстановитьПараметр("Договор", ?(ЗначениеЗаполнено(Заявка.Проект.Договор.Родитель), Заявка.Проект.Договор.Родитель, Заявка.Проект.Договор));
	//		
	//		РезультатЗапроса = Запрос.Выполнить();
	//		
	//		Если РезультатЗапроса.Пустой() Тогда
	//			
	//			ПланируемоеВремяВыполнения = 1;
	//			
	//		Иначе
	//			
	//			Выборка = РезультатЗапроса.Выбрать();
	//			
	//			Выборка.Следующий();
	//			
	//			ПланируемоеВремяВыполнения = Выборка.КраткосрочноеВремя;
	//			ИзменитьСвойствоЗадания(ЭтаФорма, "ПланируемоеВремяВыполнения", ПланируемоеВремяВыполнения);
	//			
	//		КонецЕсли;
	//		
	//		ПланируемаяДлительность = 1;
	//		ИзменитьСвойствоЗадания(ЭтаФорма, "ПланируемаяДлительность", ПланируемаяДлительность);
	//		
	//		Элементы.ПланируемоеВремяВыполнения.ТолькоПросмотр = Истина;
	//		Элементы.ПланируемаяДлительность.ТолькоПросмотр = Истина;
	//		
	//	Иначе
	//		
	//		Элементы.Краткосрочное.ТолькоПросмотр = Ложь;
	//		Элементы.ПланируемоеВремяВыполнения.ТолькоПросмотр = Ложь;
	//		Элементы.ПланируемаяДлительность.ТолькоПросмотр = Ложь;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизиты()
	
	Объект.Тезис = Предок.Тезис;
	
	Если ТипЗнч(Предок) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		Исполнитель = Предок.Ответственный;
		
	ИначеЕсли ТипЗнч(Предок) = Тип("ДокументСсылка.Задание_ат") Тогда
		
		Если РольДоступна("ОрганизацияИсполнитель_ат") Тогда
			
			Исполнитель = Пользователи.ТекущийПользователь();
			
		Иначе
			
			СвойстваПредка = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Предок);
			
			ИсполнительПредка = Неопределено;
			
			Если СвойстваПредка.Свойство("Исполнитель", ИсполнительПредка) Тогда
				Исполнитель = ИсполнительПредка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьСвойствоЗадания(ЭтаФорма, "Исполнитель", Исполнитель);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСвойствоЗадания(Форма, ИмяСвойста, ЗначениеСвойства)
	
	Если Форма.СвойстваЗадания = Неопределено Тогда
		
		Форма.СвойстваЗадания = Новый Структура;
		
	КонецЕсли;
	
	Форма.СвойстваЗадания.Вставить(ИмяСвойста, ЗначениеСвойства);	
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ДополнитьПараметрыАвтоподбораИсполнителя(Параметры)
	
	Параметры.Отбор.Вставить("Ссылка", ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияИсполнитель_ат"));
	
КонецПроцедуры 

&НаКлиенте
Функция   ОбязательныеРеквизитыЗаполнены()
	
	Текст = "";
	Текст = ?(ЗначениеЗаполнено(Объект.СодержаниеРабот), Текст, Текст + Символы.ПС + "-""Вид деятельности""");
	Текст = ?(ЗначениеЗаполнено(Объект.Тезис), Текст, Текст + Символы.ПС + "-""Тезис""");
	Текст = ?(ЗначениеЗаполнено(Исполнитель), Текст, Текст + Символы.ПС + "-""Исполнитель""");
	
	Если НЕ Параметры.ВводПрошлогоПериода Тогда
		
		Текст = ?(ПланируемаяДлительность <> 0, Текст, Текст + Символы.ПС + "-""Планируемая длительность""");
		Текст = ?(ПланируемоеВремяВыполнения <> 0, Текст, Текст + Символы.ПС + "-""Планируемое время""");
		
	КонецЕсли;
	
	Если Текст = "" Тогда
		
		Возврат Истина;
		
	Иначе
		
		ПоказатьПредупреждение(, "Необходимо заполнить: " + Текст, 10);
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура КопироватьТекстЗаявкиНаСервере()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ТипЗнч(Предок) = Тип("ДокументСсылка.Заявка_ат") Тогда
			
			Объект.ТекстЗадания = Предок.ТекстЗаявки;
			
		ИначеЕсли ТипЗнч(Предок) = Тип("ДокументСсылка.Задание_ат") Тогда
			
			Объект.ТекстЗадания = Планирование_Сервер_ат.ПолучитьТекстРодительскихЗаявок(Предок);
			
		КонецЕсли;
		
	Иначе
		
		Объект.ТекстЗадания = Планирование_Сервер_ат.ПолучитьТекстРодительскихЗаявок(Объект.Ссылка);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьОтчетОбОстаткахВремен() Экспорт
	
	//ОткрытьФорму("Отчет.ОстаткиСогласованногоВремени_ат.Форма", Новый Структура("Объект", Объект.Ссылка), ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОписаниеЗадания()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ДокументHTML = Уведомления_ат.СоздатьДокументHTMLСОписаниемЗадания(Объект.Ссылка,, Пользователи.ТекущийПользователь());
		ОписаниеЗадания = РаботаСHTML_КлиентСервер_ат.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСогласованномВремени()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СодержаниеРабот = Объект.СодержаниеРабот;
	
	Если ЗначениеЗаполнено(СодержаниеРабот) Тогда
		
		Если Согласование_ат.ЗаданиеНужноСогласовывать(Объект.Ссылка) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЕСТЬNULL(КоличественноСуммовойУчетРабот_атОстатки.КоличествоОстаток, 0) КАК Остаток
			|ИЗ
			|	Справочник.СодержанияРабот_ат КАК СодержанияРабот_ат
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КоличественноСуммовойУчетРабот_ат.Остатки КАК КоличественноСуммовойУчетРабот_атОстатки
			|		ПО (КоличественноСуммовойУчетРабот_атОстатки.СодержаниеРабот = СодержанияРабот_ат.Ссылка)
			|ГДЕ
			|	КоличественноСуммовойУчетРабот_атОстатки.Заявка = &Заявка
			|	И СодержанияРабот_ат.Ссылка = &СодержаниеРабот";
			
			Запрос.УстановитьПараметр("Заявки", Заявка);
			Запрос.УстановитьПараметр("СодержаниеРабот", Объект.СодержаниеРабот);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				Элементы.ИнформацияОСогласованномВремени.Заголовок = "";
				
			Иначе
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Остаток = Выборка.Остаток;
				
				Если Остаток > 0 Тогда
					
					ОстатокДляОтображения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(Остаток);
					
					Элементы.ИнформацияОСогласованномВремени.Заголовок = "Согласовано " + ОстатокДляОтображения + " ч.";
					
					Если ОстатокДляОтображения < ПланируемоеВремяВыполнения Тогда
						
						Элементы.ИнформацияОСогласованномВремени.ЦветТекста = Новый Цвет(128, 0, 0);
						
					Иначе
						
						Элементы.ИнформацияОСогласованномВремени.ЦветТекста = Новый Цвет(0, 128, 0);
						
					КонецЕсли;
					
				Иначе
					
					Элементы.ИнформацияОСогласованномВремени.Заголовок = "Нет согласованного времени";
					Элементы.ИнформацияОСогласованномВремени.ЦветТекста = Новый Цвет(128, 0, 0);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Элементы.ИнформацияОСогласованномВремени.Заголовок = "";
			
		КонецЕсли;
		
	Иначе
		
		Элементы.ИнформацияОСогласованномВремени.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеКорректировкиДатИВремени(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	Иначе
		Результат.Вставить("Исполнитель", Исполнитель);
	КонецЕсли;
	
	Если ДокументHTMLСформирован Тогда
		Элементы.РезультатВыполнения.Документ.Body.InnerHTML = Результат.РезультатВыполненияВHTML;
	Иначе
		РезультатВыполнения = Результат.РезультатВыполненияВHTML;
	КонецЕсли;
	
	Если Объект.Дата <> Результат.ДатаЗадания Тогда
		Объект.Дата = Результат.ДатаЗадания;
	КонецЕсли;
	
	ФактическаяДатаНачала = Результат.ФактическаяДатаНачала;
	ФактическаяДатаОкончания = Результат.ФактическаяДатаОкончания;
	
	Если НЕ Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ПослеКорректировкиДатИВремениНаСервере(Объект.Ссылка, Результат);
	
	ОбновитьСвойстваЗадания();
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ПослеКорректировкиДатИВремениНаСервере(Ссылка, Результат)
	
	Планирование_Сервер_ат.ЗаписатьСвойстваЗадания(Ссылка, Результат);
	Планирование_Сервер_ат.УстановитьСтатусы(Ссылка, Результат.Статусы);
	Планирование_Сервер_ат.ПересчитатьСтатусыСвязанныхЗаявок(Ссылка);
	Планирование_Сервер_ат.ПересчитатьСвойстваСвязанныхЗаявок(Ссылка);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВопросаПриПостановкеЗаданияВКонецОчереди(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СвойстваЗадания = ПередаваемыеПараметры;
		
		СвойстваЗадания.Вставить("Исполнитель", Исполнитель);
		СвойстваЗадания.Вставить("ПланируемаяДлительность", ПланируемаяДлительность);
		СвойстваЗадания.Вставить("Краткосрочное", Краткосрочное);
		СвойстваЗадания.Вставить("ПланируемоеВремяВыполнения",
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ПланируемоеВремяВыполнения));
		
		Записать(Новый Структура("ПостановкаВОчередь", Истина));
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеНастройкиЗавершенияЗаданияСОткладываниемДоРелиза(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТД = ТекущаяДата();
		РазницаДН = 4 - ДеньНедели(ТД); //!!!!!HARDCODED!!!!! // четверг
		ДатаОбновления = ТД + 
			?(Час(ТД) >= 16, //!!!!!HARDCODED!!!!!
				?(РазницаДН < 0, 7 + РазницаДН, ?(РазницаДН = 0, 7, РазницаДН)) * 60*60*24,
				?(РазницаДН < 0, 7 + РазницаДН, РазницаДН) * 60*60*24);
		
		ВвестиДату(ДатаОбновления, "Дата обновления?", ЧастиДаты.Дата);
		
		РезультатПоЗаданию = Планирование_Сервер_ат.ЗавершитьЗаданиеСОбновлениемРелизом(Объект.Ссылка, Результат, ДатаОбновления);
		
		Если РезультатПоЗаданию <> Неопределено Тогда
			
			Если ТипЗнч(РезультатПоЗаданию) = Тип("Строка") Тогда
				
				ПоказатьПредупреждение(, РезультатПоЗаданию, 5);
				
			ИначеЕсли ТипЗнч(РезультатПоЗаданию) = Тип("Структура") И ЗначениеЗаполнено(РезультатПоЗаданию.Сообщение) Тогда
				
				ПоказатьПредупреждение(, РезультатПоЗаданию.Сообщение, 5);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   НетОтветственногоПоЗаявке()
	
	Возврат Заявка.Ответственный.Пустая();
	
КонецФункции

#КонецОбласти

#Область  УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти

#Область  HTML

&НаКлиенте
Процедура ОбработчикКомандРаботыСHTML(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.РезультатВыполнения, Элементы.КомманднаяПанельКнопокРедактированияHTML,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияДокументСформирован(Элемент)
	
	ДокументHTMLСформирован = Истина;
	
	//Элементы.РезультатВыполнения.Документ.Body.InnerHTML = РезультатВыполнения;
	
	//ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, ОбработчикСобытийПоляHTML;
	//ДобавитьОбработчик Элемент.Документ.Body.OnPaste, ОбработчикСобытийПоляHTML;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомманднаяПанельКнопокРедактированияHTML,
		Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийПоляHTML(Событие) Экспорт
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.РезультатВыполнения);
		
		Для Каждого ЭлементКонтекстногоМеню Из Элементы.РезультатВыполнения.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "РезультатВыполнения_КонтекстноеМеню_ВключитьВозможностьРедактирования"
			   И НЕ ЭлементКонтекстногоМеню.Имя = "РезультатВыполнения_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда	

			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Событие.type = "paste" Тогда
		
		ИдентификаторыКартинок.ЗагрузитьЗначения(РаботаСHTML_Клиент_ат.ПолучитьИдентификаторыКартинок(Элементы.РезультатВыполнения.Документ));
		ПодключитьОбработчикОжидания("УдалитьКартинкиВставленныеКопированием", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинкиВставленныеКопированием() Экспорт
	
	РаботаСHTML_Клиент_ат.УдалитьКартинкиВставленныеКопированием(Элементы.РезультатВыполнения.Документ,
																	ИдентификаторыКартинок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.РезультатВыполнения.КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ТолькоОчистить, "ОбработчикКомандРаботыСHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомманднаяПанельКнопокРедактированияHTML, Элементы.РезультатВыполнения.Документ);	
	
	РаботаСHTML_Клиент_ат.ПерейтиПоСсылке(ДанныеСобытия.href);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПерезапускЭкземпляраПродуктаПриИзменении(Элемент)
	
	ИзменитьСвойствоЗадания(ЭтаФорма, "ТребуетсяПерезапускЭкземпляраПродукта", ТребуетсяПерезапускЭкземпляраПродукта);
	
КонецПроцедуры

#КонецОбласти 

#Область  Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтаФорма, Объект.Ссылка, , Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
