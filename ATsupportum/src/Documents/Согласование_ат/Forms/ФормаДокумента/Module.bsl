
#Область  ЛокальныеПеременные

#Область  Комментарии

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

#КонецОбласти

#КонецОбласти

#Область  ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ЗагрузитьКомментарии(Ложь);
	
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "ТекстСогласования", ЭтаФорма);
	
	ЗаполнитьВременаДляОтображения();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ЗагрузитьКомментарии(Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Подготовка;
		
		Если Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.ПустаяСсылка() Тогда
			
			Если НЕ Объект.ФлагВнутреннего И ЗначениеЗаполнено(Объект.Договор) Тогда
				//!!!!!TODO - учесть создание финансового на основании технического
				Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое;
			Иначе
				Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.Техническое;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСписокСогласующих();
		
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Основание) Тогда
		РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "ТекстСогласования", ЭтаФорма,,, Объект.Основание);
	КонецЕсли;
	
	РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомманднаяПанельКнопокРедактированияHTML,
		"ОбработчикКомандРаботыСHTML", Истина, Элементы.ТекстСогласованияКонтекстноеМеню);
	
	ЗаполнитьВременаДляОтображения();
	
	Уведомлять = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации()
		И ФинансовоеСогласование(Объект.ТипСогласования)
		И Объект.Договор.Пустая() Тогда
		
		ПоказатьПредупреждение(, "Невозможно записать Финансовое Согласование при отсутствующем Договоре!", 5);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Объект.ФлагВнутреннего Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ОжидаемаяДатаЗавершения) Тогда
			
			ПоказатьПредупреждение(, "Ожидаемая дата завершения должна быть заполнена!", 5);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если ФинансовоеСогласование(Объект.ТипСогласования) Тогда
			
			Отказ = Истина;
			ПоказатьПредупреждение(, "Внутренним Согласованием может быть только 'Техническое' или 'Переноса дат'!", 5);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСHTML_Клиент_ат.ОбработатьHTMLПередЗаписью(Элементы.ТекстСогласования);
	Элементы.ТекстСогласования.Документ.body.InnerHTML =
		ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.ТекстСогласования.Документ.body.InnerHTML);
	
	Объект.ТекстСогласования = Элементы.ТекстСогласования.Документ.documentElement.outerHTML;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Уведомлять Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Уведомлять");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийКлиента(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВременаДляОтображения();
	
	ОбновитьОтображение();
	
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "ТекстСогласования", ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТехническоеСогласованиеПриИзменении(Элемент)
	
	ЗаполнитьСписокСогласующих();
	
КонецПроцедуры

&НаКлиенте
Процедура ФинансовоеСогласованиеПриИзменении(Элемент)
	
	ЗаполнитьСписокСогласующих();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПриИзменении(Элемент)
	
	Объект.Клиент = ПолучитьКлиентаЗаявки(Объект.Заявка);
	Объект.Проект = ПолучитьПроектЗаявки(Объект.Заявка);
	Объект.Договор = Неопределено; //!!!!! надо давать выбрать с отбором
	//Объект.Тариф = Неопределено;
	//Объект.ТарифныйПлан = "";
	
	ЗаполнитьСодержаниеНаСервере();
	ЗаполнитьСписокСогласующих();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьКлиентаЗаявки(Заявка)
	
	Возврат Заявка.Клиент;
	
КонецФункции

&НаСервереБезКонтекста
Функция   ПолучитьПроектЗаявки(Заявка)
	
	Возврат Заявка.Проект;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьНаСогласование(Команда)
	
	Если Объект.Согласующие.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не заполнены Согласующие!", 5);
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		Объект.СтатусСогласования = ПредопределенноеЗначение("Перечисление.СтатусыСогласований_ат.ОжиданиеОтвета");
		Объект.ДатаОтправкиНаСогласование = ТекущаяДата();
		
		Если Записать() Тогда
			
			Результат = ОтправитьНаСогласование_НаСервере();
			
			Если Результат <> Неопределено Тогда
				
				ПоказатьЗначение(, Результат);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ПоказатьПредупреждение(, ОписаниеОшибки(), 5);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеСогласованияПриИзменении(Элемент) //!!!!!!!!!переписать
	
	ТекущиеДанные = Элементы.СодержаниеСогласования.ТекущиеДанные;
	
	ТекущиеДанные.Количество = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДеятельностиДляХранения(
		ТекущиеДанные.КоличествоДляОтображения);
	
	ЗначениеВыбораТарифногоПлана_ = Неопределено;
	Объект.Тариф = Неопределено;
	Объект.ТарифныйПлан = "";
	
	ТекущиеДанные.Сумма = ПолучитьСуммуПоСубъекту(Объект.Дата, ТекущиеДанные.СодержаниеРабот, ТекущиеДанные.Количество, // а где изменение цены, блять?!
		Объект.Договор, Объект.Проект, ЗначениеВыбораТарифногоПлана_,
		Объект.Тариф, Объект.ТарифныйПлан);
	
	Объект.ЗначениеВыбораТарифногоПлана = ЗначениеВыбораТарифногоПлана_;
	
	//!!!!!HOTFIX - не бывает такого, по крайней мере в вышеуказанной функции
	//ТекущиеДанные.КоличествоДляОтображения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
	//	ТекущиеДанные.Количество); // на случай изменения кол-ва
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСогласованияОбъектСогласованияПриИзменении(Элемент) // !!!!!!!!!!
	
	ТекущиеДанные = Элементы.ОбъектыСогласования.ТекущиеДанные;
	
	Задание = ТекущиеДанные.Задание;
	СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
	
	ТекущиеДанные.СодержаниеРабот = ПолучитьСодержаниеИзЗадания(Задание);
	
	Если СвойстваЗадания.Свойство("ФактическоеВремяВыполнения")
		И СвойстваЗадания.ФактическоеВремяВыполнения > 0 Тогда
		
		ТекущиеДанные.Количество = СвойстваЗадания.ФактическоеВремяВыполнения;
		
	ИначеЕсли СвойстваЗадания.Свойство("ПланируемоеВремяВыполнения")
		И СвойстваЗадания.ПланируемоеВремяВыполнения > 0 Тогда
		   
		ТекущиеДанные.Количество = СвойстваЗадания.ПланируемоеВремяВыполнения;
		
	Иначе
		
		ТекущиеДанные.Количество = ПродолжительностьПроцессов_Сервер_ат.ПолучитьМинимальныйИнтервалВремени(); //?????
		
	КонецЕсли;
	
	ТекущиеДанные.КоличествоДляОтображения =
		ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(ТекущиеДанные.Количество);
	
	//!!!!!HOTFIX
	//ТекущиеДанные.Стоимость = ПолучитьСуммуПоОбъекту(Объект.Дата, ТекущиеДанные.Задание,
	//	ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(ТекущиеДанные.Количество),
	//	Объект.Договор, Объект.Проект);
	//ТекущиеДанные.Сумма = ПолучитьСуммуПоОбъекту(Объект.Дата, ТекущиеДанные.Задание,
	
	//ТекущиеДанные.Номенклатура = ТекущиеДанные.СодержаниеРабот.Номенклатура;
	
	//TODO - в модуле объекта сверять Задания (Объекты) и Содержание, на синхронность
	ДобавитьВСодержаниеСогласования(ТекущиеДанные.СодержаниеРабот, ТекущиеДанные.Количество);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСодержаниеСогласования(СодержаниеРабот, Количество)
	
	СтруктураОтбора = Новый Структура("СодержаниеРабот", СодержаниеРабот);
	НайденныеСтроки = Объект.СодержаниеСогласования.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаСодержанияСогласования = Объект.СодержаниеСогласования.Добавить();
		СтрокаСодержанияСогласования.СодержаниеРабот = СодержаниеРабот;
		
	Иначе
		
		СтрокаСодержанияСогласования = НайденныеСтроки[0];
		
	КонецЕсли;
	
	СтрокаСодержанияСогласования.СодержаниеРабот = СодержаниеРабот;
	СтрокаСодержанияСогласования.Номенклатура = СодержаниеРабот.Номенклатура;
	СтрокаСодержанияСогласования.Количество = СтрокаСодержанияСогласования.Количество + Количество;
	
	КоличествоДляРасчета = Числа_КлиентСервер_ат.ПривестиЧислоКБазе(СтрокаСодержанияСогласования.Количество,
		ПродолжительностьПроцессов_Сервер_ат.ПолучитьМинимальныйИнтервалДеятельности());
	
	СтрокаСодержанияСогласования.КоличествоДляОтображения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
		КоличествоДляРасчета);
	
	Если (Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое
		ИЛИ Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое)
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		МассивНоменклатур = Новый Массив;
		МассивНоменклатур.Добавить(СодержаниеРабот.Номенклатура);
	
		ТаблицаЦен = Финансы_ат.ПолучитьЦеныНоменклатур(НачалоДня(Объект.Дата), МассивНоменклатур,
			Объект.Договор.Организация, Объект.Договор.ВидДоговора,
			Объект.Договор.Владелец, Объект.Договор, Объект.Проект, Объект.ЗначениеВыбораТарифногоПлана,, Объект.Тариф, Объект.ТарифныйПлан);
		
		Если ТаблицаЦен.Количество() > 0 Тогда
			
			СтрокаСодержанияСогласования.Цена = ТаблицаЦен[0].Цена; //TODO - нужна проверка на изменение, если строка была найдена
			//!!!!!!!!!!!!!!!!
			//СтрокаСодержанияСогласования.Тариф = ТаблицаЦен[0].Тариф;
			//СтрокаСодержанияСогласования.ТарифныйПлан =
			//	ТаблицаЦен[0].Тариф.Наименование + " (" + ТаблицаЦен[0].ТарифныйПлан + ")";
			
			СтрокаСодержанияСогласования.Сумма = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
				КоличествоДляРасчета) * СтрокаСодержанияСогласования.Цена;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаСодержанияСогласования.Цена = 0;
		СтрокаСодержанияСогласования.Сумма = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСогласованияПередНачаломИзменения(Элемент, Отказ)
	
	//Если Объект.ОбъектыСогласования.Количество() > 0 Тогда
	//	
	//	Если Вопрос("Содержание Согласования будет очищено! Продолжить?",
	//		РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
	//		
	//		Отказ = Истина;
	//		
	//	Иначе
	//		
	//		Объект.ОбъектыСогласования.Очистить();
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСогласованияПриИзменении(Элемент)
	
	ЗаполнитьСодержаниеНаСервере();
	ОбновитьОтображение();
	
КонецПроцедуры

#КонецОбласти

#Область  HTML

&НаКлиенте
Процедура ОбработчикКомандРаботыСHTML(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.ТекстСогласования, Элементы.КомманднаяПанельКнопокРедактированияHTML,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСогласованияДокументСформирован(Элемент)
	
	//ДобавитьОбработчик Элемент.Документ.Body.OnContextMenu, ОбработчикСобытийПоляHTML;
	//ДобавитьОбработчик Элемент.Документ.Body.OnPaste, ОбработчикСобытийПоляHTML;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомманднаяПанельКнопокРедактированияHTML,
		Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийПоляHTML(Событие) Экспорт
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.ТекстСогласования);
		
		Для Каждого ЭлементКонтекстногоМеню Из Элементы.ПредставлениеТекстаЗаявкиВHTML.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "ТекстСогласования_КонтекстноеМеню_ВключитьВозможностьРедактирования"
			   И НЕ ЭлементКонтекстногоМеню.Имя = "ТекстСогласования_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда	

			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Событие.type = "paste" Тогда
		
		ИдентификаторыКартинок.ЗагрузитьЗначения(РаботаСHTML_Клиент_ат.ПолучитьИдентификаторыКартинок(Элементы.ТекстСогласования.Документ));
		ПодключитьОбработчикОжидания("УдалитьКартинкиВставленныеКопированием", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинкиВставленныеКопированием() Экспорт
	
	РаботаСHTML_Клиент_ат.УдалитьКартинкиВставленныеКопированием(Элементы.ТекстСогласования.Документ,
																	ИдентификаторыКартинок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.ТекстСогласования.КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ТолькоОчистить, "ОбработчикКомандРаботыСHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСогласованияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомманднаяПанельКнопокРедактированияHTML, Элементы.ТекстСогласования.Документ);	
	
	РаботаСHTML_Клиент_ат.ПерейтиПоСсылке(ДанныеСобытия.href);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область  УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти

#Область  Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтаФорма, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийКлиента(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	//ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, ОбработчикСобытийВнутреннегоКомментария;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийВнутреннегоКомментария(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьСодержание(Команда)
	
	ЗаполнитьСодержаниеНаСервере(); //!!!TODO - выполнить Вопрос о продолжении
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержаниеНаСервере()
	
	Модифицированность = Истина;
	
	Объект.СодержаниеСогласования.Очистить();
	Объект.ОбъектыСогласования.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСодержание();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьВременаДляОтображения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВременаДляОтображения()
	
	Для Каждого СтрокаТаблицы Из Объект.ОбъектыСогласования Цикл
		
		СтрокаТаблицы.КоличествоДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.Количество);
		
		СтрокаТаблицы.ФактическоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.ФактическоеВремяВыполнения);
		
		СтрокаТаблицы.ПланируемоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.ПланируемоеВремяВыполнения);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.СодержаниеСогласования Цикл
		
		СтрокаТаблицы.КоличествоДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
				СтрокаТаблицы.Количество);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСогласующих()
	
	ТипыСогласований = Перечисления.ТипыСогласований_ат;
	ТипСогласования = Объект.ТипСогласования;
	
	ПолныйСписокСогласующих = Новый СписокЗначений;
	
	Если Объект.ФлагВнутреннего Тогда
		
		//ПолныйСписокСогласующих = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
		
		Если НЕ Объект.Проект.Ответственный.Пустая() Тогда
			ПолныйСписокСогласующих.Добавить(Объект.Проект.Ответственный);
		КонецЕсли;
		
		//Для Каждого СтрокаКуратора Из Проект.Кураторы Цикл
		//	Если НЕ СтрокаКуратора.Куратор.Пустая() Тогда
		//		ПолныйСписокСогласующих.Добавить(СтрокаКуратора.Куратор);
		//	КонецЕсли;
		//КонецЦикла;
		//
		//КонецЦикла;
		
	Иначе
		
		Если ТипСогласования = ТипыСогласований.Техническое
			ИЛИ ТипСогласования = ТипыСогласований.ПереносДат Тогда
			
			СписокСогласующих = Уведомления_ат.ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(
				Объект.Заявка.Клиент, Объект.Заявка.Подразделение, Объект.Проект,,, Истина);
			
		ИначеЕсли ТипСогласования = ТипыСогласований.Финансовое Тогда
			
			СписокСогласующих = Уведомления_ат.ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(
				Объект.Заявка.Клиент, Объект.Заявка.Подразделение, Объект.Проект,,,, Истина);
			
		ИначеЕсли ТипСогласования = ТипыСогласований.ТехническоеИФинансовое Тогда
			
			СписокСогласующих = Уведомления_ат.ПолучитьСписокУведомляемыхИСогласующихПоНастройкамКлиента(
				Объект.Заявка.Клиент, Объект.Заявка.Подразделение, Объект.Проект,,, Истина, Истина);
			
		Иначе
			
			СписокСогласующих = Новый СписокЗначений;
			
		КонецЕсли;
		
		Для Каждого ЭлементСпискаСогласующих Из СписокСогласующих Цикл
			
			Если НЕ ЭлементСпискаСогласующих.Значение.Пустая()
				И ПолныйСписокСогласующих.НайтиПоЗначению(ЭлементСпискаСогласующих.Значение) = Неопределено Тогда
				
				ПолныйСписокСогласующих.Добавить(ЭлементСпискаСогласующих.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Объект.Заявка.Сотрудник.Пустая()
			И ПолныйСписокСогласующих.НайтиПоЗначению(Объект.Заявка.Сотрудник) = Неопределено Тогда
			
			ПолныйСписокСогласующих.Добавить(Объект.Заявка.Сотрудник);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Согласующие.Очистить();
	
	НедублированныйСписокСогласующих = Новый СписокЗначений;
	
	Для Каждого ЭлементСпискаСогласующих Из ПолныйСписокСогласующих Цикл
		
		Согласующий = ЭлементСпискаСогласующих.Значение;
		
		Если НедублированныйСписокСогласующих.НайтиПоЗначению(Согласующий) = Неопределено Тогда
			
			НоваяСтрока = Объект.Согласующие.Добавить();
			НоваяСтрока.Согласующий = Согласующий;
			НоваяСтрока.ТипСогласования = ПолучитьТипДоступногоСогласованияДляСогласующего(Согласующий,
				Объект.Заявка, Объект.ТипСогласования);
			
			НедублированныйСписокСогласующих.Добавить(Согласующий);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьСуммуПоСубъекту(Знач Дата, СубъектСогласования,
	КоличествоПоСубъекту, Договор, Проект, ЗначениеВыбораТарифногоПлана, Тариф, ТарифныйПлан)
	
	//!!!!!HOTFIX
	//Проект = Планирование_Сервер_ат.ПолучитьРодительскийПроект(Проект);
	//Договор = Финансы_ат.ПолучитьДоговорПоЗаявке(Заявка);
	
	Если Дата = Дата(1, 1, 1) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Организация = Договор.Организация;
	ВидДоговора = Договор.ВидДоговора;
	Клиент = Договор.Владелец;
	
	МассивНоменклатур = Новый Массив;
	МассивНоменклатур.Добавить(СубъектСогласования.Номенклатура);
	
	ТаблицаЦен = Финансы_ат.ПолучитьЦеныНоменклатур(НачалоДня(Дата), МассивНоменклатур, Организация,
		ВидДоговора, Клиент, Договор, Проект, ЗначениеВыбораТарифногоПлана,, Тариф, ТарифныйПлан);
	
	Если ТаблицаЦен.Количество() > 0 Тогда
		
		Цена = ТаблицаЦен[0].Цена;
		//ТарифныйПлан = ТаблицаЦен[0].Тариф.Наименование + " (" + ТаблицаЦен[0].ТарифныйПлан + ")";
		//Тариф = ТаблицаЦен[0].Тариф;
		
	Иначе
		
		Цена = 0;
		//ТарифныйПлан = "";
		//Тариф = Неопределено;
		
	КонецЕсли;
	
	//Цена = Финансы_ат.ПолучитьЦенуНоменклатуры(ТекущаяДата(),
	//	СубъектСогласования.Номенклатура, Организация, ВидДоговора, Клиент, Договор, Проект);
	
	СуммаПоСубъекту = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
		КоличествоПоСубъекту) * ?(Цена = Неопределено, 0, Цена);
	
	Возврат СуммаПоСубъекту;
	
КонецФункции

&НаСервереБезКонтекста
Функция   ПолучитьСуммуПоОбъекту(Знач Дата, ОбъектСогласования, КоличествоПоОбъекту, Договор, Проект)
	
	Организация = Договор.Организация;
	ВидДоговора = Договор.ВидДоговора;
	Клиент = Договор.Владелец;
	
	Если Дата = Дата(1, 1, 1) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Цена = Финансы_ат.ПолучитьЦенуНоменклатуры(НачалоДня(Дата),
		ОбъектСогласования.СодержаниеРабот.Номенклатура, Организация, ВидДоговора, Клиент, Договор, Проект);
	
	СуммаПоСубъекту = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
		КоличествоПоОбъекту) * ?(Цена = Неопределено, 0, Цена);
	
	Возврат СуммаПоСубъекту;
	
КонецФункции

&НаСервере
Функция   ОтправитьНаСогласование_НаСервере()
	
	// Клиенту не обязательно знать о внутренних согласованиях.
	// Пока просто не меняем статус. В идеале нужно подменять.
	Если НЕ Объект.ФлагВнутреннего Тогда
		
		Планирование_Сервер_ат.УстановитьСтатус(Объект.Заявка, Перечисления.СтатусыЗаявок_ат.НаСогласовании, ТекущаяДатаСеанса(),
			Ложь); //!!! не уведомляем, т.к. отдельно почему-то ниже сделано (для возврата?) - переделать
		
	КонецЕсли;
	
	Возврат Уведомления_ат.СоздатьПисьмоДляСогласованияЗаявки(Объект.Ссылка,,, Уведомлять); //????????
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСогласующих(Команда)
	
	//TODO - предупреждение
	ЗаполнитьСписокСогласующих();
	
КонецПроцедуры

&НаСервере
Процедура КопироватьТекстИзЗаявокНаСервере()
	
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Объект, "ТекстЗаявки", ЭтаФорма, Истина, Истина, Объект.Заявка, Истина);
	
	Объект.ТекстСогласования = Объект.Заявка.ТекстЗаявкиВHTML;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьТекстИзЗаявок(Команда)
	КопироватьТекстИзЗаявокНаСервере();
КонецПроцедуры

&НаСервере
Процедура КопироватьТекстИзЗаданийнаСервере()
	
	ТекстСогласования = "";
	
	ЭтоПервый = Истина;
	
	Для Каждого СтрокаОбъектовСогласования Из Объект.ОбъектыСогласования Цикл
		
		ТекстЗадания = СтрокаОбъектовСогласования.Задание.ТекстЗадания;
		ТекстСогласования = ТекстСогласования + ?(ЭтоПервый, "", Символы.ПС) + ТекстЗадания;
		
		ЭтоПервый = Ложь;
		
	КонецЦикла;
	
	Объект.ТекстСогласования = РаботаСHTML_КлиентСервер_ат.ПреобразоватьОбычныйТекстВHTML(ТекстСогласования);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьТекстИзЗаданий(Команда)
	
	КопироватьТекстИзЗаданийнаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботу(Команда)
	
	//HOTFIX!!! 
	// команда удалена для устранения неоднозначности с простым изменением статуса прямо в поле
	//
	//Объект.СтатусСогласования = ПредопределенноеЗначение("Перечисление.СтатусыСогласований_ат.Принято");
	//
	//Записать();
	//
	////ОбновитьОтображение(); //! это есть и в ПослеЗаписиНаСервере
	//
	//Если Объект.ТипСогласования = ПредопределенноеЗначение("Перечисление.ТипыСогласований_ат.Финансовое")
	// ИЛИ Объект.ТипСогласования = ПредопределенноеЗначение("Перечисление.ТипыСогласований_ат.ТехническоеИФинансовое") Тогда
	//	
	//	Если Объект.ФлагВнутреннего Тогда //! хм.. зачем?
	//		
	//		УведомитьОНеобходимостиСозданияСчета();
	//		
	//	Иначе
	//		
	//	//! это вообще зачем тут?!?!
	//	//	Счет = СоздатьСчет();
	//	//	
	//	//	Если НЕ Счет = Неопределено Тогда
	//	//		
	//	//		ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьОтправкуСчета", ЭтаФорма, Новый Структура("Счет", Счет));
	//	//		ПоказатьВопрос(ОписаниеОповещения, "Отправить счета?", РежимДиалогаВопрос.ДаНет, 30);
	//	//		
	//	//	КонецЕсли;
	//	//	
	//	//КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСчет(Команда)
	
	//TODO!!!!!
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтправкуСчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Счет = ДополнительныеПараметры.Счет;
		
		МассивСчетов = Новый Массив;
		МассивСчетов.Добавить(Счет);
		
		ПараметрыКоманды = ПолучитьПараметрыКоманды();
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.СчетНаОплату_ат", ПараметрыКоманды.ИмяМакета, МассивСчетов, ЭтаФорма, ПараметрыКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПараметрыКоманды()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ Первые 1
	|	СинхронизированныеПечатныеФормы_ат.Ссылка,
	|	СинхронизированныеПечатныеФормы_ат.ВерсияДанных,
	|	СинхронизированныеПечатныеФормы_ат.ПометкаУдаления,
	|	СинхронизированныеПечатныеФормы_ат.Код,
	|	СинхронизированныеПечатныеФормы_ат.Наименование,
	|	СинхронизированныеПечатныеФормы_ат.ВнешняяПечатнаяФорма,
	|	СинхронизированныеПечатныеФормы_ат.ИмяМакета,
	|	СинхронизированныеПечатныеФормы_ат.Порядок,
	|	СинхронизированныеПечатныеФормы_ат.РегистрСинхронизации,
	|	СинхронизированныеПечатныеФормы_ат.ИспользоватьДляОтправки,
	|	СинхронизированныеПечатныеФормы_ат.ТипФайлаПоУмолчаниюСтрокой,
	|	СинхронизированныеПечатныеФормы_ат.ШаблонТекстаПисьма,
	|	СинхронизированныеПечатныеФормы_ат.ОсновнойПоДокументу,
	|	СинхронизированныеПечатныеФормы_ат.Предопределенный,
	|	СинхронизированныеПечатныеФормы_ат.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.СинхронизированныеПечатныеФормы_ат КАК СинхронизированныеПечатныеФормы_ат
	|ГДЕ
	|	СинхронизированныеПечатныеФормы_ат.РегистрСинхронизации = &РегистрСинхронизации
	|	И СинхронизированныеПечатныеФормы_ат.ОсновнойПоДокументу";
	
	Запрос.УстановитьПараметр("РегистрСинхронизации", Перечисления.РегистрыСинхронизацииДокументов_ат.СинхронизацияСчетовНаОплату_ат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
	
		СтрокаКоманды = Запрос.Выполнить().Выгрузить()[0];
		
		СтрокаКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаКоманды);
		
		СтрокаКоманды.Вставить("ДополнительныеПараметры", Новый Структура);
		
		СтрокаКоманды.ДополнительныеПараметры.Вставить("РегистрСинхронизации",		СтрокаКоманды.РегистрСинхронизации);
		СтрокаКоманды.ДополнительныеПараметры.Вставить("ВнешняяПечатнаяФорма",		СтрокаКоманды.ВнешняяПечатнаяФорма);
		СтрокаКоманды.ДополнительныеПараметры.Вставить("ИспользоватьДляОтправки",	СтрокаКоманды.ИспользоватьДляОтправки);
		
		Если НЕ ПустаяСтрока(СтрокаКоманды.ШаблонТекстаПисьма) Тогда
			СтрокаКоманды.ДополнительныеПараметры.Вставить("ШаблонТекстаПисьма",	СтрокаКоманды.ШаблонТекстаПисьма);
		КонецЕсли;
		
		Возврат СтрокаКоманды;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображение()
	
	Подготовка = (Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Подготовка);
	ОжиданиеОтвета = (Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.ОжиданиеОтвета);
	ОбработкаОтвета = (Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.ОбработкаОтвета);
	
	ПолныеПрава = РольДоступна("ПолныеПрава");
	СтатусЗаявки = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Объект.Заявка);
	СотрудникОрганизации = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации();
	
	ДоступноДействие = (ОжиданиеОтвета
		И (СтатусЗаявки <> Перечисления.СтатусыЗаявок_ат.Закрыта)
		И (СтатусЗаявки <> Перечисления.СтатусыЗаявок_ат.Отклонена)
		И (СтатусЗаявки <> Перечисления.СтатусыЗаявок_ат.Отменена));
	
	ДоступноРасширенноеДействие = (ДоступноДействие
		ИЛИ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.МенеджерПроектовИлиПолныеПрава());
	
	ДоступноДействиеСогласовать = (ДоступноДействие
		И (НЕ Объект.Согласующие.НайтиСтроки(
			Новый Структура("Согласующий", Пользователи.ТекущийПользователь())) = Неопределено));
	
	ФинДоступность = ((РольДоступна("ОрганизацияФинансы_ат") ИЛИ РольДоступна("КлиентФинансы_ат") ИЛИ ПолныеПрава)
		И (Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое
			ИЛИ Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое));
	
	Если СотрудникОрганизации Тогда
		
		Если Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Подготовка Тогда
			Элементы.КомманднаяПанельКнопокРедактированияHTML.Доступность = Истина;
		КонецЕсли;
		
		Элементы.ДатаОтправкиНаСогласование.ФорматРедактирования = "";
		
		ЭтаФорма.ТолькоПросмотр = НЕ Подготовка И НЕ ПолныеПрава; //!!!!!TODO - HTML поля так нельзя
		Элементы.Страницы.ТолькоПросмотр = НЕ Подготовка И НЕ ПолныеПрава;
		
		Элементы.ГруппаТекстСогласования.ТолькоПросмотр = НЕ Подготовка И НЕ ПолныеПрава;
		Элементы.ГруппаСодержаниеСогласования.ТолькоПросмотр = НЕ Подготовка И НЕ ПолныеПрава;
		
		//Элементы.СодержаниеСогласованияНоменклатура.ТолькоПросмотр = НЕ ПолныеПрава;
		//Элементы.СодержаниеСогласованияЦена.ТолькоПросмотр = НЕ ПолныеПрава;
		
		Элементы.Согласующие.ТолькоПросмотр = НЕ Подготовка;
		
		Элементы.СогласующиеЗаполнитьСогласующих.Доступность = Подготовка;
		Элементы.КопироватьТекстИзЗаданий.Видимость = Подготовка;
		Элементы.КопироватьТекстИзЗаявки.Видимость = Подготовка;
		
		Элементы.ФормаЗаполнитьПоПлану.Видимость = Подготовка;
		
		Элементы.ГруппаКнопокЗаполненияТекста.Видимость = Подготовка;
		
		Элементы.ВнутреннееСогласование.Доступность = Подготовка;
		Элементы.Договор.ТолькоПросмотр = НЕ Подготовка И НЕ ПолныеПрава И НЕ ФинДоступность;
		
		Элементы.ФормаСогласовать.Видимость = ДоступноДействиеСогласовать ИЛИ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.МенеджерПроектовИлиПолныеПрава();
		Элементы.ФормаОтклонить.Видимость = ДоступноДействиеСогласовать ИЛИ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.МенеджерПроектовИлиПолныеПрава();
		Элементы.ФормаОтменить.Видимость = Подготовка ИЛИ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.МенеджерПроектовИлиПолныеПрава();
		Элементы.ФормаОтклонитьПринудительно.Видимость = ДоступноРасширенноеДействие;
		Элементы.ФормаСогласоватьПринудительно.Видимость = ДоступноРасширенноеДействие;
		//Элементы.ФормаВРаботу.Видимость = ОбработкаОтвета ИЛИ ДоступноРасширенноеДействие;
		Элементы.ФормаОтправитьНаСогласование.Видимость = Подготовка ИЛИ ОжиданиеОтвета ИЛИ ДоступноРасширенноеДействие;
		//Элементы.ФормаЗакрытьЗаявки.Видимость = Ложь;
		
	Иначе
		
		Элементы.КомманднаяПанельКнопокРедактированияHTML.Видимость = Ложь;
		
		Элементы.ФормаОтменить.Видимость = Ложь;
		
		//Элементы.ОбъектыСогласования.Видимость = Ложь; // реализовано через Роли
		
		Элементы.Согласующие.ТолькоПросмотр = Истина;
		Элементы.СогласующиеЗаполнитьСогласующих.Видимость = Ложь;
		
		Элементы.ОжидаемаяДатаОкончания.ТолькоПросмотр = Истина;
		
		Элементы.ГруппаКнопокЗаполненияТекста.Видимость = Ложь;
		
		Элементы.Договор.Видимость = ФинДоступность;
		Элементы.Договор.ТолькоПросмотр = Истина;
		
		Элементы.ФормаСогласовать.Видимость = ДоступноДействиеСогласовать;
		Элементы.ФормаОтклонить.Видимость = ДоступноДействиеСогласовать;
		Элементы.ФормаОтменить.Видимость = Ложь;
		Элементы.ФормаОтклонитьПринудительно.Видимость = Ложь;
		Элементы.ФормаСогласоватьПринудительно.Видимость = Ложь;
		//Элементы.ФормаВРаботу.Видимость = Ложь;
		Элементы.ФормаОтправитьНаСогласование.Видимость = Ложь;
		//Элементы.ФормаЗакрытьЗаявки.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.СодержаниеСогласованияНоменклатура.Видимость = ФинДоступность;
	Элементы.СодержаниеСогласованияСумма.Видимость = ФинДоступность;
	
	//Элементы.Тариф.Видимость = ФинДоступность;
	Элементы.ТарифныйПлан.Видимость = ФинДоступность;
	
	Элементы.СтатусСогласования.ТолькоПросмотр = НЕ ПолныеПрава;
	
	//ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьСодержаниеИзЗадания(Задание);
	
	Возврат Задание.СодержаниеРабот;
	
КонецФункции

&НаКлиенте
Процедура Согласовать(Команда)
	
	ОписаниеОповещенияОСогласовании = Новый ОписаниеОповещения("СогласоватьПослеВводаКомментария", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещенияОСогласовании, "", "Укажите комментарий к согласованию, при желании",, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПослеВводаКомментария(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьРешениеВСогласовании(ПредопределенноеЗначение("Перечисление.РешенияОСогласовании.Согласовано"), Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОписаниеОповещенияООтклоненииСогласования = Новый ОписаниеОповещения("ОтклонитьПослеВводаКомментария", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещенияООтклоненииСогласования, "", "Укажите причину отклонения согласования",, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПослеВводаКомментария(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьРешениеВСогласовании(ПредопределенноеЗначение("Перечисление.РешенияОСогласовании.Отклонено"), Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСогласованияПриИзменении(Элемент)
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеСогласованияСодержаниеРаботПриИзменении(Элемент) //!!!!!!!!!!!!переписать
	
	ТекущиеДанные = Элементы.СодержаниеСогласования.ТекущиеДанные;
	
	ТекущиеДанные.Номенклатура = ПолучитьНоменклатуруПоСодержанию(ТекущиеДанные.СодержаниеРабот); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьНоменклатуруПоСодержанию(СодержаниеРабот)
	
	Возврат СодержаниеРабот.Номенклатура;
	
КонецФункции

&НаКлиенте
Процедура СогласующиеСогласующийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	Если Объект.ФлагВнутреннего Тогда
		
		ПараметрыОткрытияФормы.Вставить("ДоступныеПользователи", ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ПолучитьСписокПользователейПоРоли(
			"ОрганизацияСотрудник_ат"));
		
	Иначе
		
		ПараметрыОткрытияФормы.Вставить("ДоступныеПользователи", ПолучитьПользователейСотрудниковКлиента(Объект.Клиент));
		
	КонецЕсли;
	
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыОткрытияФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьВыборСогласующего(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	//Объект.
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьПользователейСотрудниковКлиента(Клиент)
	
	СписокСотрудниковОрганизации = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацияПользователей_ат.Пользователь
	|ИЗ
	|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
	|ГДЕ
	|	СпецификацияПользователей_ат.Контрагент = &Контрагент
	|	И НЕ СпецификацияПользователей_ат.Пользователь.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Контрагент", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокСотрудниковОрганизации.Добавить(Выборка.Пользователь);
		
	КонецЦикла;
	
	Возврат СписокСотрудниковОрганизации;
	
КонецФункции

&НаКлиенте
Процедура СогласующиеСогласующийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДобавитьПараметрыАвтоподбораСогласующего(ПараметрыПолученияДанных, Объект.Клиент, Объект.ФлагВнутреннего);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПараметрыАвтоподбораСогласующего(Параметры, Клиент, Внутреннее)
	
	Если Внутреннее Тогда
		
		Параметры.Отбор.Вставить("Ссылка", ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ПолучитьСписокПользователейПоРоли(
			"ОрганизацияСотрудник_ат"));
		
	Иначе
		
		Параметры.Отбор.Вставить("Ссылка", ПолучитьПользователейСотрудниковКлиента(Клиент));
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СогласующиеСогласующийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДобавитьПараметрыАвтоподбораСогласующего(ПараметрыПолученияДанных, Объект.Клиент, Объект.ФлагВнутреннего);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеСогласующийПриИзменении(Элемент)
	
	ТекущийСогласующий = Элементы.Согласующие.ТекущиеДанные.Согласующий;
	
	Если Объект.Согласующие.НайтиСтроки(Новый Структура("Согласующий", ТекущийСогласующий)).Количество() > 1 Тогда
		
		ПоказатьПредупреждение(, "Пользователь уже присутствует в списке Согласующих!", 5);
		Элементы.Согласующие.ТекущиеДанные.Согласующий = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
	ИначеЕсли ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ПользовательИмеетРоль(ТекущийСогласующий, "КлиентСотрудник_ат") Тогда
		
		ТипСогласования = ПолучитьТипДоступногоСогласованияДляСогласующего(ТекущийСогласующий,
			Объект.Заявка, Объект.ТипСогласования);
			
		Если ЗначениеЗаполнено(ТипСогласования) Тогда
			Элементы.Согласующие.ТекущиеДанные.ТипСогласования = ТипСогласования;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьТипДоступногоСогласованияДляСогласующего(Согласующий, Заявка, ТипСогласования)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлятьИСогласовывать_ат.Согласования,
		|	УведомлятьИСогласовывать_ат.ФинансовыеСогласования
		|ИЗ
		|	РегистрСведений.УведомлятьИСогласовывать_ат КАК УведомлятьИСогласовывать_ат
		|ГДЕ
		|	УведомлятьИСогласовывать_ат.Сотрудник = &Сотрудник
		|	И УведомлятьИСогласовывать_ат.Клиент = &Клиент
		|	И (УведомлятьИСогласовывать_ат.Подразделение = &Подразделение
		|			ИЛИ УведомлятьИСогласовывать_ат.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияКлиентов_ат.ПустаяСсылка))
		|	И (УведомлятьИСогласовывать_ат.Проект = &Проект
		|			ИЛИ УведомлятьИСогласовывать_ат.Проект = ЗНАЧЕНИЕ(Справочник.Проекты_ат.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Сотрудник", Согласующий);
	Запрос.УстановитьПараметр("Клиент", Заявка.Клиент);
	Запрос.УстановитьПараметр("Подразделение", Заявка.Подразделение);
	Запрос.УстановитьПараметр("Проект", Заявка.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое Тогда
			
			Если Выборка.Согласования И Выборка.ФинансовыеСогласования Тогда
				
				Возврат Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое;
				
			ИначеЕсли Выборка.Согласования И НЕ Выборка.ФинансовыеСогласования Тогда
				
				Возврат Перечисления.ТипыСогласований_ат.Техническое;
				
			ИначеЕсли НЕ Выборка.Согласования И Выборка.ФинансовыеСогласования Тогда
				
				Возврат Перечисления.ТипыСогласований_ат.Финансовое;
				
			КонецЕсли;
			
		ИначеЕсли ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое И Выборка.ФинансовыеСогласования Тогда
				
				Возврат Перечисления.ТипыСогласований_ат.Финансовое;
				
		ИначеЕсли ТипСогласования = Перечисления.ТипыСогласований_ат.Техническое И Выборка.Согласования Тогда
				
				Возврат Перечисления.ТипыСогласований_ат.Техническое;
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьТипДоступногоСогласованияДляСогласующего()

&НаКлиенте
Процедура ОтменитьСогласование(Команда)
	
	//TODO - вернуть, когда будет соответвтсвующий статус. Смотри в алгоритм принудительного отклонения и в ОМ.Уведмоления_ат.ОповеститьОПринятииРешенияПоСогласованию при Согласующий = Неопределено
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьОтменуСогласования", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, "Вы уверены, что хотите отменить согласование?", РежимДиалогаВопрос.ДаНет, 10);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьОтменуСогласования(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтменитьСогласованиеНаСервере();
		Объект.СтатусСогласования = ПредопределенноеЗначение("Перечисление.СтатусыСогласований_ат.Отклонено");
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнутреннееСогласованиеПриИзменении(Элемент)
	
	Если Объект.ФлагВнутреннего И ФинансовоеСогласование(Объект.ТипСогласования) Тогда
		УстановитьТехническоеСогласование();
	КонецЕсли;
	
	Объект.Согласующие.Очистить();
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьПринудительно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПринудительноеСогласование", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, "Вы уверены, что хотите провести согласование принудительно?", РежимДиалогаВопрос.ДаНет, 10);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПринудительноеСогласование(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СогласоватьПринудительноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПринудительно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПринудительноеОтклонениеСогласования", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения, "Вы уверены, что хотите отклонить согласование принудительно?", РежимДиалогаВопрос.ДаНет, 10);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПринудительноеОтклонениеСогласования(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтклонитьПринудительноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРешениеВСогласовании(Решение, Комментарий)
	
	Согласование_ат.УстановитьРешениеВСогласовании(Объект.Ссылка, Решение,
		Пользователи.ТекущийПользователь(), Неопределено, Комментарий, Уведомлять);
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьПринудительноНаСервере()
	
	Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято;
	Записать();
	
	Уведомления_ат.ОповеститьОПринятииРешенияПоСогласованию(Объект.Ссылка, Неопределено,
		Перечисления.СтатусыСогласований_ат.Принято, Уведомлять);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСогласованиеНаСервере()
	
	Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отменено;
	Записать();
	
	Уведомления_ат.ОповеститьОПринятииРешенияПоСогласованию(Объект.Ссылка, Неопределено,
		Перечисления.СтатусыСогласований_ат.Отменено, Уведомлять);
	
КонецПроцедуры

&НаСервере
Процедура ОтклонитьПринудительноНаСервере()
	
	Объект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отклонено;
	Записать();
	
	Уведомления_ат.ОповеститьОПринятииРешенияПоСогласованию(Объект.Ссылка, Неопределено,
		Перечисления.СтатусыСогласований_ат.Отклонено, Уведомлять);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСогласованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Подготовка Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Объект.ОбъектыСогласования[ВыбраннаяСтрока].Задание);
		
	ИначеЕсли УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда // :))) переделать единообразно после преобразования ОС -> Основания
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.ОбъектыСогласования.ТекущиеДанные.Задание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСодержанияСогласования(Элемент, ВыбраннаяСтрока)
	
	//ПоказатьЗначение(, Объект.СодержаниеСогласования[ВыбраннаяСтрока].Заявка);
	
	ИмяРеквизита = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "СодержаниеСогласования", "");
	
	Если ИмяРеквизита = "ТарифныйПлан" Тогда
		ИмяРеквизита = "Тариф";
	КонецЕсли;
	
	
	
КонецПроцедуры

//&НаКлиенте
//Процедура ЗаявкиЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	Если ЗначениеЗаполнено(Объект.Клиент) Тогда
//		
//		СтандартнаяОбработка = Ложь;
//		ПараметрыОткрытияФормы = Новый Структура;
//		ПараметрыОткрытияФормы.Вставить("Отбор", ПолучитьСтруктуруОтбораЗаявки(Объект.Клиент, Объект.Проект));
//		ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
//		
//		ОткрытьФорму("Документ.Заявка_ат.ФормаВыбора", ПараметрыОткрытияФормы, Элемент);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция   ПолучитьСтруктуруОтбораЗаявки(Клиент, Проект)
//	
//	СтруктураОтбора = Новый Структура;
//	СтруктураОтбора.Вставить("Клиент", Клиент);
//	
//	Если ЗначениеЗаполнено(Проект) Тогда
//		СтруктураОтбора.Вставить("Проект", Проект);
//	КонецЕсли;
//	
//	Возврат СтруктураОтбора;
//	
//КонецФункции

&НаКлиенте
Процедура ОбъектыСогласованияОбъектСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ДоступныеЗадания", ПолучитьДоступныеЗаданияПоЗаявкам());
	ОткрытьФорму("Документ.Задание_ат.ФормаСписка", ПараметрыОткрытияФормы, Элемент);
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьДоступныеЗаданияПоЗаявкам()
	
	ДочерниеЗадания = Планирование_Сервер_ат.ПолучитьДочерниеЗадания(Объект.Заявка);
	
	ДоступныеЗадания = Новый Массив;
	
	Для Каждого Задание Из ДочерниеЗадания Цикл
		
		Если Задание.СодержаниеРабот.ТребуетсяСогласование Тогда
			
			ДоступныеЗадания.Добавить(Задание);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеЗадания;
	
КонецФункции

&НаКлиенте
Процедура СогласующиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) И Элементы.Согласующие.ТекущиеДанные <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Поле = Элементы.СогласующиеОснованиеСогласования Тогда
			
			ПоказатьЗначение(, Элементы.Согласующие.ТекущиеДанные.ОснованиеСогласования);
			
		ИначеЕсли Поле = Элементы.СогласующиеКомментарий И НЕ ПустаяСтрока(Элементы.Согласующие.ТекущиеДанные.Комментарий) Тогда
			
			ПоказатьЗначение(, Элементы.Согласующие.ТекущиеДанные.Комментарий);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Сводно Тогда
		
		СформироватьОписаниеСогласования();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОписаниеСогласования()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ТипыСогласований = Перечисления.ТипыСогласований_ат;
		
		ДокументHTML = Уведомления_ат.СоздатьДокументHTMLСОписаниемСогласования(Объект.Ссылка,,,
			Объект.ТипСогласования = ТипыСогласований.Техническое
				ИЛИ Объект.ТипСогласования = ТипыСогласований.ТехническоеИФинансовое,
			Объект.ТипСогласования = ТипыСогласований.Финансовое
				ИЛИ Объект.ТипСогласования = ТипыСогласований.ТехническоеИФинансовое,
			,,, Пользователи.ТекущийПользователь(),
			ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации());
		
		ОписаниеСогласования = РаботаСHTML_КлиентСервер_ат.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ФинансовоеСогласование(ТипСогласования)
	
	Возврат (ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое)
		ИЛИ (ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое);
	
КонецФункции

&НаСервере
Процедура УстановитьТехническоеСогласование()
	
	Объект.ТипСогласования = Перечисления.ТипыСогласований_ат.Техническое;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифныйПланОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Тариф) Тогда
		ПоказатьЗначение(, Объект.Тариф);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	Объект.Клиент = ПолучитьКлиентаИзДоговора(Объект.Договор, Объект.Заявка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьКлиентаИзДоговора(Договор, Заявка)
	
	Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Заявка)
		И Договор.Владелец <> Заявка.Клиент Тогда
		
		ВызватьИсключение "Различаются Клиент в Заявке и в Договоре!";
		
	Иначе
		
		Возврат Договор.Владелец;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СогласующиеТипСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ПользователиФинРолей = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ПолучитьСписокПользователейПоНесколькимРолям(
		"КлиентФинансы_ат,ОрганизацияФинансы_ат");
	СогласующийСФинРолью = ПользователиФинРолей.НайтиПоЗначению(Элементы.Согласующие.ТекущиеДанные.Согласующий) <> Неопределено;
	
	Согласование_Фин = ПредопределенноеЗначение("Перечисление.ТипыСогласований_ат.Финансовое");
	Согласование_Тех = ПредопределенноеЗначение("Перечисление.ТипыСогласований_ат.Техническое");
	Согласование_ТехИФин = ПредопределенноеЗначение("Перечисление.ТипыСогласований_ат.ТехническоеИФинансовое");
	
	Если Объект.ТипСогласования = Согласование_ТехИФин Тогда
		
		Если СогласующийСФинРолью Тогда
			
			ДанныеВыбора.Добавить(Согласование_ТехИФин);
			ДанныеВыбора.Добавить(Согласование_Фин);
			ДанныеВыбора.Добавить(Согласование_Тех);
			
		Иначе
			
			ДанныеВыбора.Добавить(Согласование_Тех);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ТипСогласования = Согласование_Фин И СогласующийСФинРолью Тогда
		
		ДанныеВыбора.Добавить(Согласование_Фин);
		
	ИначеЕсли Объект.ТипСогласования = Согласование_Тех Тогда
		
		ДанныеВыбора.Добавить(Согласование_Тех);
		
	КонецЕсли;
	
КонецПроцедуры //!!!TODO - объединить эту и ПолучитьТипДоступногоСогласованияДляСогласующего (вызываемую из СогласующиеСогласующийПриИзменении)

// для возврата списка допустимых ТС и дефолтного ТС из ОМ, на основании флагов в УиС для сотрудников клиентов и наличия Фин-роли для сотрудников
// организации. Предусмотреть заполнение Согласующих (по вопросу?) при смене типа (и прочих изменениях параметров) с автоустановкой ТС (а также
// при изменении Согласующего).
// + фильтровать выбор Согласующего по флагу внутренний и клиенту/подразделению (проверять ПередЗаписью в МО)
// + Дополнительно проверять соответствие ТС в ТЧ.Согласующие и ТС объекта. Очищать фин. данные при записи в МО для НЕ фин. ТС.
