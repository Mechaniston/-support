
&НаКлиенте
Перем КоординатыЗаменяемогоСлова;

&НаКлиенте
Перем СоответствиеКомандЗаменыСловам;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ЗавершаемоеЗадание) Тогда
		ЗаполнитьФормуПоДаннымЗадания();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Предок) И НЕ ЗначениеЗаполнено(Параметры.ЗавершаемоеЗадание) Тогда //???
		ДатаЗадания = Параметры.Предок.Дата + 1;
	КонецЕсли;
	
	Если Параметры.Свойство("РезультатВыполнения") Тогда
		РезультатВыполнения = Параметры.РезультатВыполнения;
	КонецЕсли;
	
	Если Параметры.ИзменениеДат Тогда
		
		Если Параметры.ВводПрошлогоПериода Тогда
			ЗапретРедактирования = Ложь;
		Иначе
			ЗапретРедактирования = НЕ ЗначениеЗаполнено(ФактическаяДатаОкончания);
		КонецЕсли;
		
		Элементы.ФактическаяДатаОкончания.ТолькоПросмотр = ЗапретРедактирования;
		Элементы.ФактическаяДлительность.ТолькоПросмотр = ЗапретРедактирования;
		Элементы.ФактическоеВремяДляОтображения.ТолькоПросмотр = ЗапретРедактирования;
		
	Иначе
		
		//TODO: добавить настройку контроля
		//Элементы.ГруппаДатыИВремяЗадания.ТолькоПросмотр = Истина;
		//
		//Элементы.ФактическаяДатаОкончания.ТолькоПросмотр = Истина;
		//Элементы.ФактическаяДлительность.ТолькоПросмотр = Истина;
		//Элементы.ФактическоеВремяДляОтображения.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаНовоеЗадание.Видимость = Ложь;
	
	Если Параметры.ЗавершениеПрерыванием Тогда
		
		Элементы.Назад.Видимость = Ложь;
		Элементы.Применить.Видимость = Ложь;
		
	Иначе	
		
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.Видимость = Ложь;
		
	КонецЕсли;
	
	СтатусЗадания = Параметры.СтатусЗавершенияЗадания;
	
	ИсключатьИзРезультатаЗаявки = СтатусЗадания = Перечисления.СтатусыЗаданий_ат.Отменено
		ИЛИ СтатусЗадания = Перечисления.СтатусыЗаданий_ат.Прервано
		ИЛИ Параметры.ЗавершениеПрерыванием;
	Элементы.ФактическаяДлительность.АвтоОтметкаНезаполненного = НЕ ИсключатьИзРезультатаЗаявки;
	Элементы.ФактическоеВремяДляОтображения.АвтоОтметкаНезаполненного = НЕ ИсключатьИзРезультатаЗаявки;
	
	РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомманднаяПанельКнопокРедактированияHTML,,,
		Элементы.РезультатВыполнения.КонтекстноеМеню);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийГруппыСуществуещегоЗадания

&НаКлиенте
Процедура ТезисЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Документ.Задание_ат.ФормаОбъекта", Новый Структура("Ключ, ЗапретРедактированияДат", Параметры.ЗавершаемоеЗадание, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	// Макс 26,10,2016
	// Решили не контролировать дату началана этом этапе.
	//Если ФактическаяДатаНачала > ДатаЗадания Тогда
	//	
	//	СохраненнаяДатаНачала = ФактическаяДатаНачала;
	//	
	//Иначе
	//	
	//	ПоказатьПредупреждение(, "Фактическая Дата Начала должна быть больше Даты задания!", 5);
	//	ФактическаяДатаНачала = СохраненнаяДатаНачала;
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
	Планирование_Клиент_ат.РассчитатьПараметрыФактическогоВыполнения(ФактическаяДатаНачала, ФактическаяДатаОкончания,
		ФактическоеВремяДляОтображения, Ложь);
	
	Если ЗначениеЗаполнено(ФактическаяДатаНачала) И ЗначениеЗаполнено(ФактическаяДатаОкончания)
		И ФактическаяДатаОкончания > ФактическаяДатаНачала Тогда
		
		ЗаполнитьФактическуюДлительностьИВремя();
		
	Иначе
		
		ФактическаяДатаОкончания = Неопределено;
		ФактическаяДлительность = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если ФактическаяДатаОкончания < ФактическаяДатаНачала Тогда 
		
		Если ЗначениеЗаполнено(ФактическаяДатаОкончания) Тогда 
			
			ПоказатьПредупреждение(, "Фактическая Дата Окончания не может быть меньше Фактической Даты Начала!", 5);
			
		КонецЕсли;
		
		ФактическаяДатаОкончания = Неопределено;
		ФактическаяДлительность = Неопределено;
		
	Иначе
		
		ЗаполнитьФактическуюДлительностьИВремя();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьПриИзменении(Элемент)
	
	Если ФактическаяДлительность = 0 Тогда
		
		ФактическаяДатаОкончания = ФактическаяДатаНачала;
		Возврат; //?? или продолжить выполнять нижерасположенный код?
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ФактическаяДатаНачала) Тогда
		ДлительностьПриИзменении_Сервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеВремяДляОтображенияПриИзменении(Элемент)
	
	Планирование_Клиент_ат.РассчитатьПараметрыФактическогоВыполнения(ФактическаяДатаНачала, ФактическаяДатаОкончания,
		ФактическоеВремяДляОтображения);
	
	Элементы.ПодсказкаКорректировкиВремени.Видимость = Ложь;
	
	Если ФактическоеВремяДляОтображения = 0
		И Параметры.СтатусЗавершенияЗадания <> ПредопределенноеЗначение("Перечисление.СтатусыЗаданий_ат.Отменено")
		И Параметры.СтатусЗавершенияЗадания <> ПредопределенноеЗначение("Перечисление.СтатусыЗаданий_ат.Прервано") Тогда
		
		ЗаполнитьФактическоеВремя();
		
	ИначеЕсли Параметры.ЗавершениеПрерыванием Тогда
		
		ЗаполнитьПланируемоеВремяВыполненияНовогоЗадания(ПланируемоеВремяНовогоДляОтображения,
			ПланируемоеВремяДляОтображения, ФактическоеВремяДляОтображения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаданияПриИзменении(Элемент)
	
	Если ДатаЗадания > ТекущаяДата() Тогда
		
		ДатаЗадания = СохраненнаяДата;
		ПоказатьПредупреждение( , "Дата Задания не может быть больше текущей даты!");
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗавершаемоеЗадание) Тогда
		
		РезультатПроверки = Планирование_Сервер_ат.ПроверитьКорректностьИзмененияДаты(Параметры.ЗавершаемоеЗадание, ДатаЗадания);
		
	Иначе
		
		РезультатПроверки = ПроверитьКорректностьИзмененияДаты();
		
	КонецЕсли;
	
	Если РезультатПроверки.ИзменениеДопустимо Тогда
		
		СохраненнаяДата = ДатаЗадания;
		
	Иначе
		
		ПоказатьПредупреждение(, РезультатПроверки.Текст, 5);
		ДатаЗадания = СохраненнаяДата;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийГруппыНовогоЗадания

&НаКлиенте
Процедура ПланДлительностьНовогоПриИзменении(Элемент)
	
	ОбработатьИзменениеПланДлительностиНового(ПланируемаяДлительностьНового, КраткосрочноеНовое, Элементы.КраткосрочноеНовое);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КопироватьТекстЗаявки(Команда)
	
	Если НЕ РаботаСHTML_КлиентСервер_ат.ПустоеСодержаниеHTML(РезультатВыполнения) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОКопированииТекстаЗаявкиВРезультатЗадания", ЭтаФорма);;
		ПоказатьВопрос(ОписаниеОповещения, "Результат выполнения уже заполнен!
			|Стереть и продолжить?", РежимДиалогаВопрос.ДаНет, 5, КодВозвратаДиалога.Нет);
		
	Иначе
		
		КопироватьТекстЗаявкиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Параметры.ЗавершениеПрерыванием Тогда
		РезультатВыполнения = Элементы.РезультатВыполнения.Документ.documentElement.outerHTML;
	КонецЕсли;
	
	Элементы.ГруппаСуществующееЗадание.Видимость = Ложь;
	Элементы.ГруппаНовоеЗадание.Видимость = Истина;

	ИзменитьВидимостьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Элементы.ГруппаСуществующееЗадание.Видимость = Истина;
	Элементы.ГруппаНовоеЗадание.Видимость = Ложь;

	ИзменитьВидимостьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Если ФактическоеВремяДляОтображения = 0
		ИЛИ Согласование_ат.ЕстьСогласованноеВремя(Параметры.ЗавершаемоеЗадание, Ложь,
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ФактическоеВремяДляОтображения)) Тогда
		
		Применить_ПослеПроверкиСогласованногоВремени(КодВозвратаДиалога.Да);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("Применить_ПослеПроверкиСогласованногоВремени", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Время выполнения Задания превышает согласованное время по Заявке!
			|Закрыть Задание?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьФормуПоДаннымЗадания()
	
	Задание = Параметры.ЗавершаемоеЗадание;
	
	ТезисЗадания 	= Задание.Тезис;
	ДатаЗадания 	= Задание.Дата;
	ТекстЗадания	= Задание.ТекстЗадания;
	Комментарий		= Комментарии_ат.ПолучитьКомментарийПоВиду(Задание, "Комментарий");
	
	Элементы.ТезисЗадания.Гиперссылка = Параметры.ВводПрошлогоПериода; //!??? или вообще так не делать, если окно всегда открывается с блокировкой владельца
	
	СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
	
	Если НЕ ПустаяСтрока(СвойстваЗадания.РезультатВыполненияВHTML) Тогда
		РезультатВыполнения = СвойстваЗадания.РезультатВыполненияВHTML;
	КонецЕсли;
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Задание, "РезультатВыполнения", ЭтаФорма);
	
	ПланируемаяДлительность = СвойстваЗадания.ПланируемаяДлительность;
	ФактическаяДатаНачала = СвойстваЗадания.ФактическаяДатаНачала;
	ПланируемоеВремяДляОтображения =
		ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СвойстваЗадания.ПланируемоеВремяВыполнения);
	
	СохраненнаяДатаНачала = ФактическаяДатаНачала;
	СохраненнаяДата = ДатаЗадания;
	
	Если ЗначениеЗаполнено(СвойстваЗадания.ФактическаяДатаОкончания) Тогда
		
		ФактическаяДатаОкончания = СвойстваЗадания.ФактическаяДатаОкончания;
		ФактическаяДлительность = СвойстваЗадания.ФактическаяДлительность;
		ФактическоеВремяДляОтображения =
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СвойстваЗадания.ФактическоеВремяВыполнения);
		
	ИначеЕсли НЕ Параметры.ИзменениеДат Тогда
		
		ФактическаяДатаОкончания = ТекущаяДатаСеанса();
		ЗаполнитьФактическуюДлительностьИВремя();
		
	КонецЕсли;
	
	Если Параметры.ЗавершениеПрерыванием Тогда
		
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = "Прерывание Задания";
		
		Элементы.ГруппаСуществующееЗадание.Заголовок = "Прерываемое Задание";
		Элементы.ГруппаСуществующееЗадание.ОтображатьЗаголовок = Истина;
		
		Элементы.ГруппаНовоеЗадание.Заголовок = "Новое Задание";
		Элементы.ГруппаНовоеЗадание.ОтображатьЗаголовок = Истина;
		
		ТезисНового = ТезисЗадания;
		ТекстНового = ТекстЗадания;
		ИсполнительНового = СвойстваЗадания.Исполнитель;
		СодержаниеРаботНового = Задание.СодержаниеРабот;
		
	ИначеЕсли Параметры.СтатусЗавершенияЗадания = Перечисления.СтатусыЗаданий_ат.Отменено Тогда	
		
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = "Отмена Задания";
		
	КонецЕсли;
	
	//ОтчетнаяДатаНачала =
	//	?(ЗначениеЗаполнено(СвойстваЗадания.ОтчетнаяДатаНачала), СвойстваЗадания.ОтчетнаяДатаНачала, ФактическаяДатаНачала); 
	//ОтчетнаяДатаОкончания =
	//	?(ЗначениеЗаполнено(СвойстваЗадания.ОтчетнаяДатаОкончания), СвойстваЗадания.ОтчетнаяДатаОкончания, ФактическаяДатаОкончания);
	//	
	//Если Параметры.ИзменениеДат Тогда
	//	
	//	ОтчетнаяДлительность = СвойстваЗадания.ОтчетнаяДлительность;
	//	ОтчетноеВремяДляОтображения =
	//		ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СвойстваЗадания.ОтчетноеВремяВыполнения);
	//	
	//Иначе
	//	
	//	ОтчетнаяДлительность =
	//		?(ЗначениеЗаполнено(СвойстваЗадания.ОтчетнаяДлительность), СвойстваЗадания.ОтчетнаяДлительность, ФактическаяДлительность);
	//	ОтчетноеВремяДляОтображения =
	//		?(ЗначениеЗаполнено(СвойстваЗадания.ОтчетноеВремяВыполнения), 
	//			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(СвойстваЗадания.ОтчетноеВремяВыполнения),
	//			ФактическоеВремяДляОтображения);
	//	
	//КонецЕсли;
	//
	//Элементы.ОтчетнаяДатаОкончания.Доступность = ЗначениеЗаполнено(ФактическаяДатаОкончания);
	//Элементы.ОтчетноеВремяВыполнения.Доступность = ЗначениеЗаполнено(ФактическаяДатаОкончания);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьФактическуюДлительностьИВремя()
	
	Если ЗначениеЗаполнено(ФактическаяДатаНачала) И ЗначениеЗаполнено(ФактическаяДатаОкончания) Тогда
		
		ФактическаяДлительность = ПродолжительностьПроцессов_Сервер_ат.ПолучитьДлительность(ФактическаяДатаНачала, ФактическаяДатаОкончания);
		
		Если Параметры.ЗавершениеПрерыванием Тогда
			ЗаполнитьПланируемыеДлительностьНовогоЗадания();
		КонецЕсли;
		
		ЗаполнитьФактическоеВремя(); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическоеВремя()
	
	Если ФактическоеВремяДляОтображения = 0 Тогда
		
		Если ФактическаяДлительность = 1 Тогда
			
			ВремяВСекундах = (ФактическаяДатаОкончания - НачалоДня(ФактическаяДатаОкончания))
				- (ФактическаяДатаНачала - НачалоДня(ФактическаяДатаНачала));
			Часы = Цел(ВремяВСекундах / 3600);
			Минуты = Цел((ВремяВСекундах - (Часы * 3600)) / 60) / 100;
			
		Иначе
			
			ВремяВСекундахПоследнийДень = (ФактическаяДатаОкончания - НачалоДня(ФактическаяДатаОкончания)) - 34200; // начало рабочего дня в 9:30
			ВремяВСекундахПервыйДень = 64800 - (ФактическаяДатаНачала - НачалоДня(ФактическаяДатаНачала)); // конец рабочего дня в 18:00
			ВремяВСекундах = ВремяВСекундахПервыйДень + ВремяВСекундахПоследнийДень;
			Часы = Цел(ВремяВСекундах / 3600);
			Минуты = Цел((ВремяВСекундах - (Часы * 3600)) / 60) / 100;
			Часы = Часы + (ФактическаяДлительность - 2) * 8;
			
		КонецЕсли;
		
		ФактическоеВремяДляОтображения = Часы + Минуты;
		Элементы.ПодсказкаКорректировкиВремени.Видимость = Истина;
		
	КонецЕсли;
	
	Если Параметры.ЗавершениеПрерыванием Тогда
		
		ЗаполнитьПланируемоеВремяВыполненияНовогоЗадания(ПланируемоеВремяНовогоДляОтображения,
			ПланируемоеВремяДляОтображения, ФактическоеВремяДляОтображения);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ДлительностьПриИзменении_Сервер()
	
	НоваяДатаОкончания = ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ФактическаяДатаНачала, ФактическаяДлительность);
	
	Если НоваяДатаОкончания < ФактическаяДатаОкончания Тогда
		НоваяДатаОкончания = НоваяДатаОкончания + (ФактическаяДатаНачала - НачалоДня(ФактическаяДатаНачала)) + 1;
	КонецЕсли;
	
	ФактическаяДатаОкончания = НоваяДатаОкончания;
	
	Если Параметры.ЗавершениеПрерыванием Тогда
		ЗаполнитьПланируемыеДлительностьНовогоЗадания();
	КонецЕсли;
	
	ЗаполнитьФактическоеВремя();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланируемыеДлительностьНовогоЗадания()
	
	ПланируемаяДлительностьНового = ПланируемаяДлительность - ФактическаяДлительность;
	
	ОбработатьИзменениеПланДлительностиНового(ПланируемаяДлительностьНового, КраткосрочноеНовое, Элементы.КраткосрочноеНовое);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПланируемоеВремяВыполненияНовогоЗадания(ПланВремяНового, ПланВремя, ФактВремя)
	
	ПланВремяНового = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(
		ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ПланВремя) -
		ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ФактВремя));
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеПланДлительностиНового(ПланДтильеностьНового, КраткосрочноеНовое, ЭлементКраткосрочноеНовое)
	
	Если ПланДтильеностьНового > 1 Тогда
		
		КраткосрочноеНовое = Ложь;
		
	КонецЕсли;
	
	ЭлементКраткосрочноеНовое.Доступность = (ПланДтильеностьНового = 1);
	
КонецПроцедуры 

&НаСервере
Функция   ПроверитьКорректностьИзмененияДаты()
	
	Если ДатаЗадания > Параметры.Предок.Дата Тогда
		
		ИзменениеДопустимо = Истина;
		
	Иначе
		
		ИзменениеДопустимо = Ложь;
		Текст = "Дата может быть больше даты предка (" + Параметры.Предок.Дата + ").";
		
	КонецЕсли;

	Возврат Новый Структура("ИзменениеДопустимо, Текст", ИзменениеДопустимо, Текст);
	
КонецФункции 

&НаСервереБезКонтекста
Функция   ПолучитьКрайниеСтатусы(Ссылка, ВводПрошлогоПериода, СтатусЗадания)
	
	Если НЕ СтатусЗадания.Пустая() Тогда
		ТекущийСтатус = СтатусЗадания;
	ИначеЕсли ВводПрошлогоПериода Тогда
		ТекущийСтатус = Перечисления.СтатусыЗаданий_ат.Выполнено;
	Иначе
		ТекущийСтатус = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Ссылка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияСтатусовЗаданийСрезПервых.Статус
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПервых(, Ссылка = &Ссылка) КАК ИсторияСтатусовЗаданийСрезПервых";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НачальныйСтатус = Выборка.Статус;
	Иначе
		НачальныйСтатус = Перечисления.СтатусыЗаданий_ат.ВОчереди;
	КонецЕсли;
	
	Возврат Новый Структура("ТекущийСтатус, НачальныйСтатус", ТекущийСтатус, НачальныйСтатус);
	
КонецФункции

&НаСервереБезКонтекста
Функция   НачальныйСтатусЗадания(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияСтатусовЗаданийСрезПервых.Статус
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПервых(, Ссылка = &Ссылка) КАК ИсторияСтатусовЗаданийСрезПервых";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Статус;
		
	Иначе
		
		Возврат Перечисления.СтатусыЗаданий_ат.ВОчереди;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьВидимостьКоманд()
	
	Элементы.Далее.Видимость = НЕ Элементы.Далее.Видимость;
	Элементы.Назад.Видимость = НЕ Элементы.Назад.Видимость;
	Элементы.Применить.Видимость = НЕ Элементы.Применить.Видимость;
	
КонецПроцедуры 

&НаСервере
Функция   ПроверитьСохраняемыеДанные()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("СохраняемыеДанные", Новый Структура);
	РезультатПроверки.Вставить("Ошибки", "");
	РезультатПроверки.Вставить("Вопросы", Новый Структура);
	
	ПроверитьДанныеДляСуществующегоЗадания(РезультатПроверки.СохраняемыеДанные, РезультатПроверки.Ошибки, РезультатПроверки.Вопросы);
	
	Если Параметры.ЗавершениеПрерыванием Тогда
		ПроверитьДанныеНовогоЗадания(РезультатПроверки.СохраняемыеДанные, РезультатПроверки.Ошибки, РезультатПроверки.Вопросы);
	КонецЕсли;
	
	РезультатПроверки.Ошибки = СокрЛ(РезультатПроверки.Ошибки);
	
	Возврат РезультатПроверки;
	
КонецФункции 

&НаСервере
Процедура ПроверитьДанныеДляСуществующегоЗадания(СохраняемыеДанные, Ошибки, Вопросы)
	
	КрайниеСтатусы = ПолучитьКрайниеСтатусы(Параметры.ЗавершаемоеЗадание, Параметры.ВводПрошлогоПериода, Параметры.СтатусЗавершенияЗадания);
	ТекущийСтатус = КрайниеСтатусы.ТекущийСтатус;
	НачальныйСтатус = КрайниеСтатусы.НачальныйСтатус;
	
	Если НЕ ЗначениеЗаполнено(ДатаЗадания) Тогда
		
		Ошибки = Ошибки + "Дата Задания не может быть пустой!";
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФактическаяДатаНачала)
		И ТекущийСтатус <> Перечисления.СтатусыЗаданий_ат.Отменено Тогда
		
		Ошибки = Ошибки + Символы.ПС + "Дата начала Задания не может быть пустой!";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФактическаяДатаОкончания) Тогда
		
		Если НЕ ЗначениеЗаполнено(ФактическоеВремяДляОтображения)
			И ТекущийСтатус <> Перечисления.СтатусыЗаданий_ат.Отменено
			И ТекущийСтатус <> Перечисления.СтатусыЗаданий_ат.Прервано Тогда
			
			Ошибки = Ошибки + Символы.ПС + "Время выполнения Задания не может быть пустым!";
			
		КонецЕсли;
		
		Если ФактическаяДатаНачала = ФактическаяДатаОкончания Тогда
			ФактическаяДатаОкончания = ФактическаяДатаОкончания + 1;
		КонецЕсли;
		
		Если ИсключатьИзРезультатаЗаявки Тогда
			
			Если ПустаяСтрока(Комментарий) Тогда
				Ошибки = Ошибки + Символы.ПС + "Комментарий не заполнен!";
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(Взаимодействия.ПолучитьОбычныйТекстИзHTML(РезультатВыполнения)) Тогда
				Ошибки = Ошибки + Символы.ПС + "Результат выполнения Задания не заполнен!";
			КонецЕсли;
			
		КонецЕсли;
		
		ФактическоеВремяВыполнения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ФактическоеВремяДляОтображения);
		
	Иначе
		
		Если ТекущийСтатус = Перечисления.СтатусыЗаданий_ат.Отменено Тогда
			Ошибки = Ошибки + Символы.ПС + "Дата окончания Задания не может быть пустой!";
		КонецЕсли;
		
		ФактическоеВремяВыполнения = 0;
		
	КонецЕсли;
	
	Статусы = Новый Соответствие;
	Статусы.Вставить(НачальныйСтатус, ДатаЗадания);
	
	Если ЗначениеЗаполнено(ФактическаяДатаНачала) Тогда
		Статусы.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыЗаданий_ат.ВРаботе"), ФактическаяДатаНачала);
	КонецЕсли;
	
	Если ТекущийСтатус = Перечисления.СтатусыЗаданий_ат.Выполнено
		ИЛИ ТекущийСтатус = Перечисления.СтатусыЗаданий_ат.Прервано
		ИЛИ ТекущийСтатус = Перечисления.СтатусыЗаданий_ат.Отменено Тогда
		
		Статусы.Вставить(ТекущийСтатус, ФактическаяДатаОкончания);
		
	КонецЕсли;
	
	СохраняемыеДанные.Вставить("Статусы", Статусы);
	СохраняемыеДанные.Вставить("ФактическаяДатаНачала", ФактическаяДатаНачала);
	СохраняемыеДанные.Вставить("ФактическаяДатаОкончания", ФактическаяДатаОкончания);
	СохраняемыеДанные.Вставить("ФактическаяДлительность", ФактическаяДлительность);
	СохраняемыеДанные.Вставить("ФактическоеВремяВыполнения", ФактическоеВремяВыполнения);
	СохраняемыеДанные.Вставить("РезультатВыполненияВHTML", РезультатВыполнения);
	СохраняемыеДанные.Вставить("Комментарий", Комментарий);
	СохраняемыеДанные.Вставить("ДатаЗадания", ДатаЗадания);
	СохраняемыеДанные.Вставить("ИсключатьИзРезультатаЗаявки", ИсключатьИзРезультатаЗаявки);
	
	Если Параметры.ВводПрошлогоПериода Тогда
		
		СохраняемыеДанные.Вставить("ПланируемаяДатаНачала", ФактическаяДатаНачала);
		СохраняемыеДанные.Вставить("ПланируемаяДатаОкончания", ФактическаяДатаОкончания);
		СохраняемыеДанные.Вставить("ПланируемаяДлительность", ФактическаяДлительность);
		СохраняемыеДанные.Вставить("ПланируемоеВремяВыполнения", ФактическоеВремяВыполнения);
		
	КонецЕсли;
	
	//СохраняемыеДанные.Вставить("ОтчетноеВремяВыполнения",
	//	ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяЗаданияДляХранения(ОтчетноеВремяДляОтображения));
	
КонецПроцедуры 

&НаСервере
Процедура ПроверитьДанныеНовогоЗадания(СохраняемыеДанные, Ошибки, Вопросы)
	
	Отказ = Ложь;
	СохраняемыеДанные.Вставить("ДанныеНовогоЗадания", Новый Структура);
	ДанныеНовогоЗадания = СохраняемыеДанные.ДанныеНовогоЗадания;
	
	Если НЕ ЗначениеЗаполнено(ТезисНового) Тогда
		
		Ошибки = Ошибки + Символы.ПС + "Тезис нового Задания должен быть заполнен!";
		
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(ТекстНового) Тогда
	//	
	//	Ошибки = Ошибки + Символы.ПС + "Текст нового Задания должен быть заполнен!";
	//	
	//КонецЕсли;
	
	ПроверитьПланВремяНовогоЗадания(СохраняемыеДанные, Ошибки, Вопросы);
	
	Если НЕ ЗначениеЗаполнено(ПланируемаяДлительностьНового) Тогда
		
		Ошибки = Ошибки + Символы.ПС + "Планируемая длительность нового Задания должна быть заполнена!";
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсполнительНового) Тогда
		
		Ошибки = Ошибки + Символы.ПС + "Исполнитель нового Задания должен быть заполнен!";
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроверенныеДатыНового = Планирование_Сервер_ат.ПолучитьИПроверитьДатыВКонцеОчереди(
		ИсполнительНового, Параметры.ЗавершаемоеЗадание, ПланируемаяДлительностьНового, Истина);
	
	Если ЗначениеЗаполнено(ПроверенныеДатыНового.Сообщение) И НЕ ПроверенныеДатыНового.ВСпринте Тогда
		
		Ошибки = Ошибки + Символы.ПС + ПроверенныеДатыНового.Сообщение;
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеНовогоЗадания.Вставить("Дата", ТекущаяДатаСеанса());
	ДанныеНовогоЗадания.Вставить("СодержаниеРабот", Параметры.ЗавершаемоеЗадание.СодержаниеРабот);
	ДанныеНовогоЗадания.Вставить("Тезис", ТезисНового);
	ДанныеНовогоЗадания.Вставить("ТекстЗадания", ТекстНового);
	ДанныеНовогоЗадания.Вставить("ПланируемаяДатаНачала", ПроверенныеДатыНового.ПланируемаяДатаНачала);
	ДанныеНовогоЗадания.Вставить("ПланируемаяДатаОкончания", ПроверенныеДатыНового.ПланируемаяДатаОкончания);
	ДанныеНовогоЗадания.Вставить("ПланируемаяДлительность", ПланируемаяДлительностьНового);
	ДанныеНовогоЗадания.Вставить("ПланируемоеВремяВыполнения",
		ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ПланируемоеВремяНовогоДляОтображения));
	ДанныеНовогоЗадания.Вставить("Краткосрочное", КраткосрочноеНовое);
	ДанныеНовогоЗадания.Вставить("Исполнитель", ИсполнительНового);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПланВремяНовогоЗадания(СохраняемыеДанные, Ошибки, Вопросы)
	
	Если НЕ ЗначениеЗаполнено(ПланируемоеВремяНовогоДляОтображения) Тогда
		
		Ошибки = Ошибки + Символы.ПС + "Планируемое время выполнения нового Задания должно быть заполнено!";
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопрос(ИмяПроцедуры, СтруктураВопроса, ПередаваемыеПараметры)
	
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтаФорма, ПередаваемыеПараметры);
	
	ПоказатьВопрос(Оповещение, СтруктураВопроса.ТекстВопроса, СтруктураВопроса.ВариантыОтвета, 10);
	
КонецПроцедуры 

&НаКлиенте
Процедура Применить_ПослеПроверкиСогласованногоВремени(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если НЕ Параметры.ЗавершениеПрерыванием Тогда
			РезультатВыполнения = Элементы.РезультатВыполнения.Документ.documentElement.outerHTML;
		КонецЕсли;
		
		РезультатПроверки = ПроверитьСохраняемыеДанные();
		
		Если ЗначениеЗаполнено(РезультатПроверки.Ошибки) Тогда
			
			ПоказатьПредупреждение(, РезультатПроверки.Ошибки, 5);
			Возврат;
			
		КонецЕсли;
		
		Если РезультатПроверки.Вопросы.Свойство("ВопросОПланВремениНовогоЗадания") Тогда
			СформироватьИЗадатьВопросОВремениНовогоЗадания(РезультатПроверки);
		Иначе
			ПослеЗакрытияВопросаОПланВремениНовогоЗадания("Пропустить", РезультатПроверки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИЗадатьВопросОВремениНовогоЗадания(ПередаваемыеПараметры)
	
	ВариантыОтвета = Новый СписокЗначений;
	ВариантыОтвета.Добавить("Отмена", "Отмена");
	
	РезультатПроверкиВремени = ПередаваемыеПараметры.Вопросы.ВопросОПланВремениНовогоЗадания;
	
	Если РезультатПроверкиВремени.ЕстьДоступноеВремя Тогда
		
		ПланВремяНовогоДляХранения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(
			ПланируемоеВремяНовогоДляОтображения);
		
		МаксВремя = РезультатПроверкиВремени.МаксВремя - ПередаваемыеПараметры.СохраняемыеДанные.ОтчетноеВремяВыполнения;
		
		Если МаксВремя <= 0 Тогда
			
			ТекстВопроса = "Согласованного времени с содержанием работ """ + СодержаниеРаботНового
				+ """ не достаточно для создания нового Задания." + Символы.ПС
				+ "Содержанием работ нового Задания будет установлено """ + РезультатПроверкиВремени.СодержаниеРаботДляЗамены + """.";
				
			ВариантыОтвета.Добавить(РезультатПроверкиВремени.СодержаниеРаботДляЗамены, "Продолжить");
				
		ИначеЕсли МаксВремя < ПланВремяНовогоДляХранения Тогда
			
			МаксВремяДляОтображения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(МаксВремя);
			
			ТекстВопроса = "Максимальное доступное время для нового Задания с содержанием работ """
				+ СодержаниеРаботНового + """ " + МаксВремяДляОтображения + "ч." + Символы.ПС
				+ "Возможна смена содержания работ на " + РезультатПроверкиВремени.СодержаниеРаботДляЗамены
				+ "или изменение планируемого времени на максимальное доступное.";
				
			ВариантыОтвета.Добавить(МаксВремя, "Изменить время на " + МаксВремяДляОтображения + "ч.");
			ВариантыОтвета.Добавить(РезультатПроверкиВремени.СодержаниеРаботДляЗамены, "Сменить содержание работ");
			
		КонецЕсли;
		
	Иначе
		
		ТекстВопроса = РезультатПроверкиВремени.ПричинаОтказа + Символы.ПС +
			"Содержанием работ нового Задания будет установлено """ + РезультатПроверкиВремени.СодержаниеРаботДляЗамены + """.";
		
		ВариантыОтвета.Добавить(РезультатПроверкиВремени.СодержаниеРаботДляЗамены, "Продолжить");
		
	КонецЕсли;
	
	СтруктураВопроса = Новый Структура("ТекстВопроса, ВариантыОтвета", ТекстВопроса, ВариантыОтвета);
	
	ЗадатьВопрос("ПослеЗакрытияВопросаОПланВремениНовогоЗадания", СтруктураВопроса, ПередаваемыеПараметры);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПланВремениНовогоЗадания(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = "Отмена" ИЛИ Результат = КодВозвратаДиалога.Таймаут Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Число") Тогда
		
		ПередаваемыеПараметры.СохраняемыеДанные.ДанныеНовогоЗадания.Вставить("ПланируемоеВремяВыполнения", Результат);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("СправочникСсылка.СодержанияРабот_ат") Тогда
		
		ПередаваемыеПараметры.СохраняемыеДанные.ДанныеНовогоЗадания.Вставить("СодержаниеРабот", Результат);
		ПередаваемыеПараметры.СохраняемыеДанные.ДанныеНовогоЗадания.Вставить("ПланируемоеВремяВыполнения",
			ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(ПланируемоеВремяНовогоДляОтображения));
		
	ИначеЕсли Результат <> "Пропустить" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗакрытьФорму(ПередаваемыеПараметры.СохраняемыеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(ВозвращаемаяСтруктура)
	
	Закрыть(ВозвращаемаяСтруктура);
	
КонецПроцедуры 

&НаСервере
Процедура КопироватьТекстЗаявкиНаСервере()
	
	РезультатВыполнения = РаботаСHTML_КлиентСервер_ат.ПреобразоватьОбычныйТекстВHTML(
		Планирование_Сервер_ат.ПолучитьТекстРодительскихЗаявок(Параметры.ЗавершаемоеЗадание));
	
КонецПроцедуры 

#КонецОбласти

#Область HTML

&НаКлиенте
Процедура ОбработчикКомандРаботыСHTML(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.РезультатВыполнения, Элементы.КомманднаяПанельКнопокРедактированияHTML,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияДокументСформирован(Элемент)
	
//	Элементы.РезультатВыполнения.Документ.Body.InnerHTML = РезультатВыполнения;
	
	//ДобавитьОбработчик Элемент.Документ.Body.OnContextMenu, ОбработчикСобытийПоляHTML;
	//ДобавитьОбработчик Элемент.Документ.Body.OnPaste, ОбработчикСобытийПоляHTML;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомманднаяПанельКнопокРедактированияHTML,
		Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийПоляHTML(Событие) Экспорт
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.РезультатВыполнения);
		
		Для Каждого ЭлементКонтекстногоМеню Из Элементы.РезультатВыполнения.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "РезультатВыполнения_КонтекстноеМеню_ВключитьВозможностьРедактирования"
			   И НЕ ЭлементКонтекстногоМеню.Имя = "РезультатВыполнения_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда	

			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Событие.type = "paste" Тогда
		
		ИдентификаторыКартинок.ЗагрузитьЗначения(РаботаСHTML_Клиент_ат.ПолучитьИдентификаторыКартинок(Элементы.РезультатВыполнения.Документ));
		ПодключитьОбработчикОжидания("УдалитьКартинкиВставленныеКопированием", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинкиВставленныеКопированием() Экспорт
	
	РаботаСHTML_Клиент_ат.УдалитьКартинкиВставленныеКопированием(Элементы.РезультатВыполнения.Документ,
		ИдентификаторыКартинок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.РезультатВыполнения.КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ТолькоОчистить, "ОбработчикКомандРаботыСHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомманднаяПанельКнопокРедактированияHTML, Элементы.РезультатВыполнения.Документ);	
	
	РаботаСHTML_Клиент_ат.ПерейтиПоСсылке(ДанныеСобытия.href);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ПослеВопросаОКопированииТекстаЗаявкиВРезультатЗадания(Результат, ПередаваемыеПараметры) Экспорт //!!!!!HOTFIX
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КопироватьТекстЗаявкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры
