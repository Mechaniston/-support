
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗакрытьПриСохранении = Истина;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ПолучитьЗначения();
	
	Если ЗначениеЗаполнено(Параметры.Задание) Тогда
		
		Исполнитель = Параметры.Исполнитель;
		
		ОбрабатываемоеЗадание = Параметры.Задание;
		ИсполнительОбрабатываемогоЗадания = Параметры.Исполнитель;
		ТезисОбрабатываемогоЗадания = Параметры.Тезис;
		ДлительностьОбрабатываемогоЗадания = Параметры.ПланируемаяДлительность;
		КраткосрочноеОбрабатываемоеЗадание = Параметры.Краткосрочное;
		Элементы.КраткосрочноеОбрабатываемоеЗадание.Видимость = (Параметры.ПланируемаяДлительность = 1);
		
		ЗаписьЗадания = ПолучитьНаборЗаписей(Новый Структура("Исполнитель, Задание", ИсполнительОбрабатываемогоЗадания, ОбрабатываемоеЗадание));
		
		Если ЗаписьЗадания.Количество() = 0
			ИЛИ НЕ ЗначениеЗаполнено(ЗаписьЗадания[0].ПланируемаяДатаНачала) Тогда
			
			НовыеДаты = ПолучитьНовыеДатыЗаданияВОчереди(ИсполнительОбрабатываемогоЗадания,
				ОбрабатываемоеЗадание, ДлительностьОбрабатываемогоЗадания);
				
			Если НовыеДаты = Неопределено Тогда
				
				ТекстПредупреждения = "Не удалось поставить Задание в очередь т.к. его длительность слишком велика.";
				ЗакрытьПослеПредупреждения = Истина;
				
				Возврат;
				
			КонецЕсли;	
			
			Если ЗаписьЗадания.Количество() = 0 Тогда
				
				ЗаданиеВГрафике = ЗаписьЗадания.Добавить();
				
			Иначе
				
				ЗаданиеВГрафике = ЗаписьЗадания[0];
				
			КонецЕсли;	
			
			ЗаданиеВГрафике.ТекущийПользователь = ТекущийПользователь;
			ЗаданиеВГрафике.Задание = Параметры.Задание;
			ЗаданиеВГрафике.Исполнитель = Параметры.Исполнитель;
			ЗаданиеВГрафике.Тезис = Параметры.Тезис;
			ЗаданиеВГрафике.ПланируемаяДлительность = Параметры.ПланируемаяДлительность;
			ЗаданиеВГрафике.Краткосрочное = Параметры.Краткосрочное;
			ЗаданиеВГрафике.ПланируемаяДатаНачала = НовыеДаты.ДатаНачала;
			ЗаданиеВГрафике.ПланируемаяДатаОкончания = НовыеДаты.ДатаОкончания;
			ЗаданиеВГрафике.СодержаниеРабот = Параметры.СодержаниеРабот;
			ЗаданиеВГрафике.Модифицированность = Истина;
			
			ЗаписьЗадания.Записать();
			
			ОжидаемаяДатаЗавершения = ПолучитьОжидаемуюДатуЗавершения(Параметры.Задание);
		
			Если ЗначениеЗаполнено(ОжидаемаяДатаЗавершения)
				И КонецДня(ОжидаемаяДатаЗавершения) < НовыеДаты.ДатаОкончания Тогда
				
				ТекстПредупреждения = "В результате автоматического размещения Задания в графике" + Символы.ПС
					+ "его планируемая дата завершения вышла за ожидаемую дату окончания Заявки!";
				
			КонецЕсли;
			
		Иначе	
			
			ЗаданиеВГрафике = ЗаписьЗадания[0];
			
		КонецЕсли;
		
		ПланируемаяДатаНачалаОбрабатываемогоЗадания = ЗаданиеВГрафике.ПланируемаяДатаНачала;
		ВыделитьСтроку(ОбрабатываемоеЗадание, ИсполнительОбрабатываемогоЗадания);
		
	Иначе
		
		Элементы.РедактируемоеЗадание.Видимость = Ложь;
		
	КонецЕсли;
	
	ДинамическийСписок.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ОтображатьГрафик = Истина;

	УстановитьФильтрацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения, 5);
		
	КонецЕсли;
	
	Если ЗакрытьПослеПредупреждения Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначения(Обновление = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ТекущийПользователь,
		|	Задание.Ссылка КАК Задание,
		|	ЛОЖЬ КАК Модифицированность,
		|	Задание.Тезис КАК Тезис,
		|	Задание.ВерсияДанных КАК ВерсияДанных,
		|	Задание.СодержаниеРабот,
		|	СвойстваЗаданий.Исполнитель,
		|	СвойстваЗаданий.ПланируемаяДатаНачала,
		|	СвойстваЗаданий.ПланируемаяДатаОкончания,
		|	СвойстваЗаданий.ПланируемаяДлительность,
		|	СвойстваЗаданий.Краткосрочное,
		|	ИсторияСтатусовЗаданийСрезПоследних.Статус
		|ИЗ
		|	Документ.Задание_ат КАК Задание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданийСрезПоследних
		|		ПО (ИсторияСтатусовЗаданийСрезПоследних.Ссылка = Задание.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ПО Задание.Ссылка = СвойстваЗаданий.Ссылка
		|ГДЕ
		|	(ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВОчереди)
		|			ИЛИ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВРаботе)
		|			ИЛИ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.КВозобновлению))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвойстваЗаданий.ПланируемаяДатаНачала";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	НаборЗаписей = ПолучитьНаборЗаписей();
	
	Если Обновление Тогда
		
		ТекущаяТаблица = НаборЗаписей.Выгрузить();
		МодифицированныеСтроки = ТекущаяТаблица.НайтиСтроки(Новый Структура("Модифицированность", Истина));
		
		Для каждого Строка Из МодифицированныеСтроки Цикл
			
			ИзменяемаяСтрока = Таблица.Найти(Строка.Задание, "Задание");
			ИзменяемаяСтрока.Исполнитель = Строка.Исполнитель;
			ИзменяемаяСтрока.ПланируемаяДатаНачала = Строка.ПланируемаяДатаНачала;
			ИзменяемаяСтрока.ПланируемаяДатаОкончания = Строка.ПланируемаяДатаОкончания;
			ИзменяемаяСтрока.ПланируемаяДлительность = Строка.ПланируемаяДлительность;
			ИзменяемаяСтрока.Статус = Строка.Статус;
			ИзменяемаяСтрока.Краткосрочное = Строка.Краткосрочное;
			ИзменяемаяСтрока.Модифицированность = Строка.Модифицированность;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Загрузить(Таблица);
	НаборЗаписей.Записать();
	
	Если Обновление Тогда
		
		Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЕстьИзмененныеЗадания() И НЕ ЗакрытиеПодтверждено Тогда
		Отказ = Истина;
		ТекстВопроса = "Закрытие обработки приведет к потере несохраненных данных." + Символы.ПС + "Закрыть обработку?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОЗакрытии", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОЗакрытии(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытиеПодтверждено = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОчиститьНаборЗаписей();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаборЗаписей()
	
	НаборЗаписей = РегистрыСведений.ПланированиеЗаданий_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТекущийПользователь.Установить(ТекущийПользователь);
	НаборЗаписей.Записать();
	
КонецПроцедуры 

&НаСервере
Функция   ЕстьИзмененныеЗадания()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПланированиеЗаданий.Задание) КАК Количество
		|ИЗ
		|	РегистрСведений.ПланированиеЗаданий_ат КАК ПланированиеЗаданий
		|ГДЕ
		|	ПланированиеЗаданий.ТекущийПользователь = &ТекущийПользователь
		|	И ПланированиеЗаданий.Модифицированность";

	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Количество > 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьФильтрацию()

	ДинамическийСписок.Отбор.Элементы.Очистить();
	
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		ЭлементОтбора = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Исполнитель;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		Элементы.ДинамическийСписок.РазрешитьНачалоПеретаскивания = Истина;	
	Иначе
		Элементы.ДинамическийСписок.РазрешитьНачалоПеретаскивания = Ложь;	
	КонецЕсли;
	
	Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначения(Команда)
	
	ПолучитьЗначения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ВыбранноеЗадание = Неопределено;
	УстановитьФильтрацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ДополнитьПараметрыАвтоподбораИсполнителя(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбрабатываемогоЗаданияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ДополнитьПараметрыАвтоподбораИсполнителя(Параметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьПараметрыАвтоподбораИсполнителя(Параметры)
	
	Параметры.Отбор.Вставить("Ссылка", ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ПолучитьСписокПользователейПоРоли("ОрганизацияИсполнитель_ат"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьСписокПриИзменении(Элемент)
	
	Если ОтображатьСписок Тогда
		Элементы.ГруппаСписка.Видимость = Истина;
		Обновить();
	Иначе	
		Элементы.ГруппаСписка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьГрафикПриИзменении(Элемент)
	
	Если ОтображатьГрафик Тогда
		Элементы.ГруппаГрафика.Видимость = Истина;
		Обновить();
	Иначе	
		Элементы.ГруппаГрафика.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
		
	Если Планирование_Сервер_ат.ПолучитьМаксимальнуюОжидаемуюДатуЗавершенияЗадания(ВыбранноеЗадание) <
		ПланируемаяДатаНачалаОбрабатываемогоЗадания	+ ДлительностьОбрабатываемогоЗадания * 24 * 60 * 60 Тогда
		
		ПоказатьПредупреждение(, "Планируемая Дата Завершения задания не может быть больше Ожидаемой Даты Завершения Заявки!", 5);
		Возврат;
		
	КонецЕсли;
	
	Режим = Новый СписокЗначений;
	Режим.Добавить(1, "Продолжить");
	Режим.Добавить(2, "Отмена");
	
	ТекстВопроса = "Сохранение изменений приведёт к перезаписи дат в Заданиях.";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСохраненииИзменений", ЭтаФорма);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСохраненииИзменений(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		
		НовыеЗначения = ПолучитьНовыеЗначенияПланируемогоЗадания();
		
		Если ТипЗнч(НовыеЗначения) = Тип("Структура") Тогда
			
			Владелец = ЭтаФорма.ВладелецФормы;
			Владелец.СвойстваЗадания = НовыеЗначения;
			Владелец.Объект.Тезис = НовыеЗначения.Тезис;
			
			Ссылка = ЭтаФорма.ВладелецФормы.Объект.Ссылка;
			
			Если Ссылка.Пустая() // Задание не было сохранено
				ИЛИ Планирование_Сервер_ат.ПолучитьТекущийСтатус(Ссылка) = Неопределено Тогда // было сохранено без постановки в план
				
				ПостановкаВОчередь = Истина;
				
			Иначе
				
				ПостановкаВОчередь = Ложь;
				
			КонецЕсли;
			
			ПараметрыЗаписи = Новый Структура("ПостановкаВОчередь", ПостановкаВОчередь);
			
			Владелец.Записать(ПараметрыЗаписи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СохранитьИзменения_Сервер();
	
	Если ЗакрытьПриСохранении Тогда
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция   ПолучитьНовыеЗначенияПланируемогоЗадания()
	
	НаборЗаписей = ПолучитьНаборЗаписей();
	ТаблицаЗаданий = НаборЗаписей.Выгрузить();
    ПланируемоеЗадание = ТаблицаЗаданий.Найти(Параметры.Задание, "Задание");
	
	Если ПланируемоеЗадание = Неопределено ИЛИ НЕ ПланируемоеЗадание.Модифицированность Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Значения = Новый Структура;
		
		Значения.Вставить("ПланируемаяДлительность", ПланируемоеЗадание.ПланируемаяДлительность);
		Значения.Вставить("ПланируемаяДатаНачала", ПланируемоеЗадание.ПланируемаяДатаНачала);
		Значения.Вставить("ПланируемаяДатаОкончания", ПланируемоеЗадание.ПланируемаяДатаОкончания);
		Значения.Вставить("Тезис", ПланируемоеЗадание.Тезис);
		Значения.Вставить("Исполнитель", ПланируемоеЗадание.Исполнитель);
		Значения.Вставить("Краткосрочное", ПланируемоеЗадание.Краткосрочное);
		
		ПланируемоеЗадание.Модифицированность = Ложь;
		ПланируемоеЗадание.Статус = Перечисления.СтатусыЗаданий_ат.ВОчереди;
		НаборЗаписей.Загрузить(ТаблицаЗаданий);
		НаборЗаписей.Записать();
		
		Возврат Значения;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СохранитьИзменения_Сервер()

	НаборЗаписей = ПолучитьНаборЗаписей();
	ТаблицаЗаданий = НаборЗаписей.Выгрузить();
	МассивИзменяемыхЗаданий = ТаблицаЗаданий.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	
	Для Каждого Строка Из МассивИзменяемыхЗаданий Цикл
		
		//+ Страховка от закрытия формы несохраненного Задания
		Если ТипЗнч(Строка.Задание) = Тип("Строка") Тогда
			
			Если Строка.Задание = ОбрабатываемоеЗадание Тогда
				
				Элементы.РедактируемоеЗадание.Видимость = Ложь;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		//- Страховка от закрытия формы несохраненного Задания
		
		Если Строка.Тезис <> Строка.Задание.Тезис Тогда
			
			РедактируемыйДокумент = Строка.Задание.ПолучитьОбъект();
			РедактируемыйДокумент.Тезис = Строка.Тезис;
			РедактируемыйДокумент.Записать();
			
		КонецЕсли;
		
		СтруктураИзменений = Новый Структура;
		СтруктураИзменений.Вставить("ПланируемаяДлительность", Строка.ПланируемаяДлительность);
		СтруктураИзменений.Вставить("ПланируемаяДатаНачала", Строка.ПланируемаяДатаНачала);
		СтруктураИзменений.Вставить("ПланируемаяДатаОкончания", Строка.ПланируемаяДатаОкончания);
		СтруктураИзменений.Вставить("Исполнитель", Строка.Исполнитель);
		СтруктураИзменений.Вставить("Краткосрочное", Строка.Краткосрочное);

		Планирование_Сервер_ат.ЗаписатьСвойстваЗадания(Строка.Задание, СтруктураИзменений);
		
	КонецЦикла;	
	
	ПолучитьЗначения();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Ручное редактирование задания

&НаКлиенте
Процедура ДлительностьОбрабатываемогоЗаданияПриИзменении(Элемент)
	
	Если ДлительностьОбрабатываемогоЗадания = 1 Тогда
		Элементы.КраткосрочноеОбрабатываемоеЗадание.Видимость = Истина;
	Иначе	
		КраткосрочноеОбрабатываемоеЗадание = Ложь;
		Элементы.КраткосрочноеОбрабатываемоеЗадание.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзменения(Команда)
	
	Если ЗначениеЗаполнено(ПланируемаяДатаНачалаОбрабатываемогоЗадания)
		И ПланируемаяДатаНачалаОбрабатываемогоЗадания < НачалоДня(ТекущаяДата()) Тогда
		
		ПоказатьПредупреждение(, "Перемещение задания в прошлое недопустимо!", 5);
		
		Возврат;
		
	КонецЕсли;
	
	Текст = "";
	Текст = ?(ЗначениеЗаполнено(ТезисОбрабатываемогоЗадания), Текст, Текст + Символы.ПС + "-""Тезис""");
	Текст = ?(ЗначениеЗаполнено(ИсполнительОбрабатываемогоЗадания), Текст, Текст + Символы.ПС + "-""Исполнитель""");
	Текст = ?(ЗначениеЗаполнено(ПланируемаяДатаНачалаОбрабатываемогоЗадания), Текст, Текст + Символы.ПС + "-""Планируемая дата начала""");
	Текст = ?(ДлительностьОбрабатываемогоЗадания <> 0, Текст, Текст + Символы.ПС + "-""Планируемая длительность""");
	
	Если Текст <> "" Тогда
		
		ПоказатьПредупреждение(, "Необходимо заполнить:" + Текст, 10); 
		
		Возврат;
		
	КонецЕсли;
	
	ОбработатьРезультат(ПрименитьИзменения_Сервер());
	
КонецПроцедуры

&НаСервере
Функция   ПрименитьИзменения_Сервер()
	
	СтруктураОтборов = Новый Структура("Задание", ОбрабатываемоеЗадание);
	НаборЗаписей = ПолучитьНаборЗаписей(СтруктураОтборов);
	ТаблицаЗаданий = НаборЗаписей.Выгрузить();
	ИсходноеЗначение = ТаблицаЗаданий[0];
	
	Если НЕ ИсходноеЗначение.Модифицированность Тогда
		Если ВерсияИзменена(ИсходноеЗначение) ИЛИ ОбъектЗанят(ОбрабатываемоеЗадание) Тогда
			Возврат "Изменение Задания в настоящий момент невозможно.";
		КонецЕсли;
	КонецЕсли;
	
	//+ Запретим увеличение продолжительности
	Если ДлительностьОбрабатываемогоЗадания > ИсходноеЗначение.ПланируемаяДлительность Тогда
		Возврат "Нельзя увеличивать длительность Задания.";
	КонецЕсли;
	//- Запретим увеличение продолжительности
	
	ЕстьИзменения = Ложь;
	
	Если ИсходноеЗначение.Тезис <> ТезисОбрабатываемогоЗадания Тогда
		ЕстьИзменения = Истина;
		ИсходноеЗначение.Тезис = ТезисОбрабатываемогоЗадания;
		ИсходноеЗначение.Модифицированность = Истина;
	КонецЕсли;
	
	Если ИсходноеЗначение.Краткосрочное <> КраткосрочноеОбрабатываемоеЗадание Тогда
		ЕстьИзменения = Истина;
		ИсходноеЗначение.Краткосрочное = КраткосрочноеОбрабатываемоеЗадание;
		ИсходноеЗначение.Модифицированность = Истина;
	КонецЕсли;

	Если ИсполнительОбрабатываемогоЗадания <> ИсходноеЗначение.Исполнитель Тогда	
		ЕстьИзменения = Истина;
		ОписаниеДействия = "Изменение исполнителя ";
		
		Даты = ПолучитьНовыеДатыЗаданияВОчереди(ИсполнительОбрабатываемогоЗадания, ОбрабатываемоеЗадание, ДлительностьОбрабатываемогоЗадания);
		ДатаОкончания = Даты.ДатаОкончания;
		
		ИсходноеЗначение.Исполнитель = ИсполнительОбрабатываемогоЗадания;
		ИсходноеЗначение.ПланируемаяДатаНачала = Даты.ДатаНачала;
		ИсходноеЗначение.ПланируемаяДатаОкончания = Даты.ДатаОкончания;
		ИсходноеЗначение.ПланируемаяДлительность = ДлительностьОбрабатываемогоЗадания;
		ИсходноеЗначение.Модифицированность = Истина;
	ИначеЕсли ПланируемаяДатаНачалаОбрабатываемогоЗадания <> ИсходноеЗначение.ПланируемаяДатаНачала Тогда
		ЕстьИзменения = Истина;
		ОписаниеДействия = "Изменение планируемой даты начала ";
		
		ДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ПланируемаяДатаНачалаОбрабатываемогоЗадания,
			ДлительностьОбрабатываемогоЗадания));
			
		Если НЕ ПродолжительностьПроцессов_Сервер_ат.ВСпринте(ПланируемаяДатаНачалаОбрабатываемогоЗадания, ДатаОкончания) Тогда
			Возврат "Изменение планируемой даты начала на указанную невозможно," + Символы.ПС +
				"т.к. приведет к выходу Планируемой даты окончания за пределы спринта.";
		КонецЕсли;

		Если КраткосрочноеОбрабатываемоеЗадание 
			ИЛИ ИзменениеДатыВозможно(ОбрабатываемоеЗадание, ИсполнительОбрабатываемогоЗадания,
					ПланируемаяДатаНачалаОбрабатываемогоЗадания, ДатаОкончания)
			Тогда
			ИсходноеЗначение.ПланируемаяДлительность = ДлительностьОбрабатываемогоЗадания;
			ИсходноеЗначение.ПланируемаяДатаНачала = ПланируемаяДатаНачалаОбрабатываемогоЗадания;
			ИсходноеЗначение.ПланируемаяДатаОкончания = ДатаОкончания;
			ИсходноеЗначение.Модифицированность = Истина;
		Иначе
			Возврат "Задание не может быть передвинуто на указанную дату.";
		КонецЕсли;	
	ИначеЕсли ДлительностьОбрабатываемогоЗадания <> ИсходноеЗначение.ПланируемаяДлительность Тогда
		ЕстьИзменения = Истина;
		ОписаниеДействия = "Изменение длительности ";
		
		ДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ПланируемаяДатаНачалаОбрабатываемогоЗадания,
			ДлительностьОбрабатываемогоЗадания));
			
		ИсходноеЗначение.ПланируемаяДлительность = ДлительностьОбрабатываемогоЗадания;
		ИсходноеЗначение.ПланируемаяДатаОкончания = ДатаОкончания;
		ИсходноеЗначение.Модифицированность = Истина;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		Возврат ЗавершитьРедактирование(СтруктураОтборов, НаборЗаписей, ТаблицаЗаданий, ОписаниеДействия, ИсходноеЗначение);
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Работа с Динамическим списком

&НаКлиенте
Процедура РедактироватьВыделенноеЗадание(Команда)

	ТекущиеДанные = Элементы.ДинамическийСписок.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если МожноРедактировать(ТекущиеДанные) Тогда
		
		Элементы.РедактируемоеЗадание.Видимость = Истина;
		
		ОбрабатываемоеЗадание = ТекущиеДанные.Задание;
		ТезисОбрабатываемогоЗадания = ТекущиеДанные.Тезис;
		ДлительностьОбрабатываемогоЗадания = ТекущиеДанные.ПланируемаяДлительность;
		ПланируемаяДатаНачалаОбрабатываемогоЗадания = ТекущиеДанные.ПланируемаядатаНачала;
		ИсполнительОбрабатываемогоЗадания = ТекущиеДанные.Исполнитель;
		
		Элементы.КраткосрочноеОбрабатываемоеЗадание.Видимость = ТекущиеДанные.ПланируемаяДлительность = 1;
		КраткосрочноеОбрабатываемоеЗадание = ТекущиеДанные.Краткосрочное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция   МожноРедактировать(ТекущиеДанные)
	
	Если Элементы.ДинамическийСписок.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданий_ат.ВРаботе") Тогда
		Предупреждение("Нельзя редактировать задание находящееся в работе.");
	ИначеЕсли Элементы.ДинамическийСписок.ТекущиеДанные.ПланируемаяДатаОкончания < НачалоДня(ТекущаяДата()) Тогда
		Предупреждение("Нельзя редактировать просроченное задание.");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ШагНазад(Команда)

	ОбработатьШаг("Назад");
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВперед(Команда)

	ОбработатьШаг("Вперед");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШаг(Направление)
	
	ТекущиеДанные = Элементы.ДинамическийСписок.ТекущиеДанные;

	Если МожноРедактировать(ТекущиеДанные) Тогда 
		ОбработатьРезультат(СдвинутьЗадание(Направление, ТекущиеДанные.Задание, ТекущиеДанные.Исполнитель));
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция   СдвинутьЗадание(Направление, Задание, ИсполнительЗадания)
	
	СтруктураОтборов = Новый Структура;
	СтруктураОтборов.Вставить("Исполнитель", ИсполнительЗадания);
	СтруктураОтборов.Вставить("Задание", Задание);
	
	НаборЗаписей	 = ПолучитьНаборЗаписей(СтруктураОтборов);
	ТаблицаЗаданий	 = НаборЗаписей.Выгрузить();
	ИсходноеЗначение = ТаблицаЗаданий[0];

	Если НЕ ИсходноеЗначение.Модифицированность Тогда
		Если ВерсияИзменена(ИсходноеЗначение) ИЛИ ОбъектЗанят(Задание) Тогда
			Возврат "Изменение Задания в настоящий момент невозможно.";
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеПозиции = ПолучитьДоступныеПозиции(ИсполнительЗадания, Задание, ИсходноеЗначение.ПланируемаяДлительность);
	ТекущаяПозиция	 = ДоступныеПозиции.Найти(ИсходноеЗначение.ПланируемаяДатаНачала);
		
	Если Направление = "Назад" Тогда
		Если ТекущаяПозиция = 0 ИЛИ ИсходноеЗначение.ПланируемаяДатаНачала < НачалоДня(ТекущаяДата()) Тогда
			Возврат "Подходящий интервал перед выбранным Заданием отсутствует.";
		ИначеЕсли ТекущаяПозиция = Неопределено Тогда
			НачалоИнтервала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(ИсходноеЗначение.ПланируемаяДатаНачала - 1, Истина);
			ИскатьДо = ДоступныеПозиции[ДоступныеПозиции.Количество() - 1];
			ИнтервалВнеГрафика = НайтиПодходящийИнтервал(НачалоИнтервала, ИсходноеЗначение.ПланируемаяДлительность, "Назад", ИскатьДо);
			Если ЗначениеЗаполнено(ИнтервалВнеГрафика) Тогда
				НоваяДатаНачала = ИнтервалВнеГрафика.ДатаНачала;
				НоваяДатаОкончания = ИнтервалВнеГрафика.ДатаОкончания;
			Иначе
				Возврат "Подходящий интервал перед выбранным Заданием отсутствует.";
			КонецЕсли;
		Иначе
			НоваяДатаНачала = ДоступныеПозиции[ТекущаяПозиция - 1];
		КонецЕсли;
	ИначеЕсли Направление = "Вперед" Тогда
		Если ИсходноеЗначение.ПланируемаяДатаНачала < НачалоДня(ТекущаяДата()) И ДоступныеПозиции.Количество() > 0 Тогда
			НоваяДатаНачала = ДоступныеПозиции[0]; 
		ИначеЕсли ТекущаяПозиция = ДоступныеПозиции.Количество() - 1 ИЛИ ТекущаяПозиция = Неопределено Тогда
			НачалоИнтервала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(КонецДня(ИсходноеЗначение.ПланируемаяДатаНачала) + 1);
			ИнтервалВнеГрафика = НайтиПодходящийИнтервал(НачалоИнтервала, ИсходноеЗначение.ПланируемаяДлительность, "Вперед");
			Если ЗначениеЗаполнено(ИнтервалВнеГрафика) Тогда
				НоваяДатаНачала = ИнтервалВнеГрафика.ДатаНачала;
				НоваяДатаОкончания = ИнтервалВнеГрафика.ДатаОкончания;
			Иначе
				Возврат "Подходящий интервал после выбранного Задания отсутствует.";
			КонецЕсли;
		Иначе
			НоваяДатаНачала = ДоступныеПозиции[ТекущаяПозиция + 1];
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НоваяДатаОкончания) Тогда
		НоваяДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(НоваяДатаНачала, ИсходноеЗначение.ПланируемаяДлительность));
	КонецЕсли;	
		
	ИсходноеЗначение.ПланируемаяДатаНачала = НоваяДатаНачала;
	ИсходноеЗначение.ПланируемаяДатаОкончания = НоваяДатаОкончания;
	ИсходноеЗначение.Модифицированность = Истина;
	
	Возврат ЗавершитьРедактирование(СтруктураОтборов, НаборЗаписей, ТаблицаЗаданий, "Перемещение ", ИсходноеЗначение);
	
КонецФункции

&НаСервере
Функция   ПолучитьДоступныеПозиции(Исполнитель, Задание, Длительность)
	
	//+ Получим интервалы запланированных заданий
	Запрос = Новый Запрос;
	Запрос.Текст =
	    "ВЫБРАТЬ
	    |	ПланированиеЗаданий.ПланируемаяДатаНачала КАК ПланируемаяДатаНачала,
	    |	ПланированиеЗаданий.ПланируемаяДатаОкончания
	    |ИЗ
	    |	РегистрСведений.ПланированиеЗаданий_ат КАК ПланированиеЗаданий
	    |ГДЕ
	    |	ПланированиеЗаданий.ТекущийПользователь = &ТекущийПользователь
	    |	И ПланированиеЗаданий.Исполнитель = &Исполнитель
	    |	И ПланированиеЗаданий.ПланируемаяДатаОкончания > &НастоящееВремя
	    |	И НЕ ПланированиеЗаданий.Задание = &Задание
	    |	И НЕ ПланированиеЗаданий.Краткосрочное
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	ПланируемаяДатаНачала";
		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("НастоящееВремя", НачалоДня(ТекущаяДата()));	
	Запрос.УстановитьПараметр("Задание", Задание);	

	ИнтервалыГрафика = Запрос.Выполнить().Выбрать();
	//- Получим интервалы запланированных заданий
	
	//+ Вычленим из интервалов доступные позиции начала перемещаемого задания
	ДоступныеПозиции = Новый Массив;
	НачалоИнтервала = НачалоДня(ТекущаяДата());
	
	Пока ИнтервалыГрафика.Следующий() Цикл
		КонецИнтервала = ИнтервалыГрафика.ПланируемаяДатаНачала - 1;
		Если НачалоИнтервала < КонецИнтервала Тогда
			КоличествоРабочихДней = ПродолжительностьПроцессов_Сервер_ат.ПолучитьДлительность(НачалоИнтервала, КонецИнтервала);
			Если Длительность <= КоличествоРабочихДней Тогда
				РазбитьИнтервал(НачалоИнтервала, КоличествоРабочихДней, Длительность, ДоступныеПозиции);
			КонецЕсли;
		КонецЕсли;
		НачалоИнтервала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(ИнтервалыГрафика.ПланируемаяДатаОкончания + 1);
	КонецЦикла;
	//- Вычленим из интервалов доступные позиции начала перемещаемого задания
	
	//+ Добавим к доступным позициям первый рабочий день за пределами графика с проверкой вхождения в спринт
	ИнтервалВнеГрафика = НайтиПодходящийИнтервал(НачалоИнтервала, Длительность, "Вперед");
	Если ЗначениеЗаполнено(ИнтервалВнеГрафика) Тогда
		ДоступныеПозиции.Добавить(ИнтервалВнеГрафика.ДатаНачала);
	КонецЕсли;
	//- Добавим к доступным позициям первый рабочий день за пределами графика с проверкой вхождения в спринт
	
	Возврат ДоступныеПозиции;
	
КонецФункции 

&НаСервере
Процедура РазбитьИнтервал(НачалоИнтервала, ДлительностьИнтервала, ДлительностьЗадания, ДоступныеПозиции)
	
	КонецИнтервала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(НачалоИнтервала, ДлительностьЗадания);
	
	Если ПродолжительностьПроцессов_Сервер_ат.ВСпринте(НачалоИнтервала, КонецИнтервала) Тогда
		ДоступныеПозиции.Добавить(НачалоИнтервала);
	КонецЕсли;
	
	НоваяДлительностьИнтервала = ДлительностьИнтервала - 1;
	
	Если НоваяДлительностьИнтервала >= ДлительностьЗадания Тогда		
		НовоеНачалоИнтервала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(НачалоИнтервала, 2);
		РазбитьИнтервал(НовоеНачалоИнтервала, НоваяДлительностьИнтервала, ДлительностьЗадания, ДоступныеПозиции);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция   НайтиПодходящийИнтервал(Знач ДатаНачала, Длительность, Направление, ИскатьДо = Неопределено)
	
	Если Направление = "Вперед" Тогда
		Для Сч = 1 По 2 Цикл // сделаем две попытки, большее число попыток сдвинет даты слишком далеко от конца очереди
			ДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ДатаНачала, Длительность));
			ВСпринте = ПродолжительностьПроцессов_Сервер_ат.ВСпринте(ДатаНачала, ДатаОкончания);
			Если ВСпринте Тогда
				Прервать;
			КонецЕсли;
			ДатаНачала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(КонецНедели(ДатаНачала) + 1);
		КонецЦикла;
	Иначе
		Если ИскатьДо = Неопределено Тогда
			ИскатьДо = НачалоДня(ТекущаяДата());
		КонецЕсли;
		
		Пока ДатаНачала >= ИскатьДо Цикл
			ДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ДатаНачала, Длительность));
			ВСпринте = ПродолжительностьПроцессов_Сервер_ат.ВСпринте(ДатаНачала, ДатаОкончания);
			Если ВСпринте Тогда
				Прервать;
			КонецЕсли;
			ДатаНачала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(ДатаНачала - 1, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ВСпринте Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачала, ДатаОкончания);
	КонецЕсли;
	
КонецФункции 

&НаКлиенте
Процедура ДинамическийСписокПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДинамическийСписок.ТекущиеДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если Элементы.ДинамическийСписок.ТекущиеДанные.Задание <> ВыбранноеЗадание Тогда
		Если ВыбранноеЗадание <> Неопределено Тогда
			Точка = ДиаграммаГанта.УстановитьТочку(ВыбранноеЗадание);
			Точка.ПриоритетЦвета = Ложь;
		КонецЕсли;	
		
		ВыбранноеЗадание = Элементы.ДинамическийСписок.ТекущиеДанные.Задание;
		
		Точка = ДиаграммаГанта.УстановитьТочку(ВыбранноеЗадание);
		Точка.ПриоритетЦвета = Истина;
		Точка.Цвет = WebЦвета.Черный;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Задание);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Работа с Диаграммой Ганта

&НаСервере
Процедура ПостроитьДГ()
	
	ДГ = ЭтаФорма.ДиаграммаГанта;
	ДГ.Очистить();
	
	ДГ.Обновление = Ложь;
	ДГ.АвтоОпределениеПолногоИнтервала = Ложь;
	ДГ.ОтображатьЛегенду = Ложь;
	ДГ.ОбластьПостроения.Право = 1;
	ДГ.ОбластьЗаголовка.Право = 1;
	ДГ.ОбластьЗаголовка.Верх = 1; 
	
	Серия = ДГ.УстановитьСерию("Серия");
	Серия.Цвет = WebЦвета.Зеленый;

	НачалоИнтервала = Неопределено;
	КонецИнтервала = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланированиеЗаданий.Исполнитель,
		|	ПланированиеЗаданий.Задание,
		|   ПланированиеЗаданий.Статус,
		|	ПланированиеЗаданий.Тезис,
		|	ПланированиеЗаданий.ПланируемаяДатаНачала,
		|	ПланированиеЗаданий.ПланируемаяДатаОкончания,
		|	ПланированиеЗаданий.ПланируемаяДлительность,
		|	ПланированиеЗаданий.Краткосрочное
		|ИЗ
		|	РегистрСведений.ПланированиеЗаданий_ат КАК ПланированиеЗаданий
		|ГДЕ
		|	ПланированиеЗаданий.ТекущийПользователь = &ТекущийПользователь
		|	И ВЫБОР
		|			КОГДА &Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.Пустаяссылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПланированиеЗаданий.Исполнитель = &Исполнитель
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланированиеЗаданий.ПланируемаяДатаНачала";

	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	РедактируемыеЗадания = Запрос.Выполнить().Выгрузить();
	
	Если РедактируемыеЗадания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//+ Получим исполнителей с невыполненными заданиями
	ТаблицаИсполнителей = РедактируемыеЗадания.Скопировать( ,"Исполнитель");
	ТаблицаИсполнителей.Свернуть("Исполнитель");
	//- Получим исполнителей с невыполненными заданиями
	
	Для Каждого ИсполнительЗаданий Из ТаблицаИсполнителей Цикл
		ДГ.УстановитьТочку(ИсполнительЗаданий.Исполнитель);
		ЗаданияИсполнителя = РедактируемыеЗадания.НайтиСтроки(Новый Структура("Исполнитель", ИсполнительЗаданий.Исполнитель));
		ЗаполнитьГруппуДГ(ДГ, Серия, НачалоИнтервала, КонецИнтервала, ИсполнительЗаданий.Исполнитель, ЗаданияИсполнителя);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(НачалоИнтервала) ИЛИ НЕ ЗначениеЗаполнено(КонецИнтервала) Тогда Возврат; КонецЕсли;
	
	Если НачалоИнтервала > НачалоДня(ТекущаяДата()) Тогда
		НачалоИнтервала = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	ДГ.УстановитьПолныйИнтервал(НачалоДня(НачалоИнтервала), КонецДня(КонецИнтервала));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		|	И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|	И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)";

	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала", КонецИнтервала);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		НеРабочий = ДГ.ИнтервалыФона.Добавить(НачалоДня(Выборка.Дата), КонецДня(Выборка.Дата));
		НеРабочий.Цвет = WebЦвета.БледноЛиловый;
	КонецЦикла;
	
	ДГ.Обновление = Истина;
	ДГ.ПоказатьУровеньТочек();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуДГ(ДГ, Серия, НачалоИнтервала, КонецИнтервала, Группа, ЗаданияВГруппе)
	
	Для Каждого Строка Из ЗаданияВГруппе Цикл	
		Если Строка.ПланируемаяДлительность = 0 ИЛИ НЕ ЗначениеЗаполнено(Строка.ПланируемаяДатаНачала) Тогда
			Продолжить;
		КонецЕсли;
		
		Точка = ДГ.УстановитьТочку(Строка.Задание, Группа);
		Точка.Текст = Строка.Тезис;
		Значение = ДГ.ПолучитьЗначение(Точка, Серия);
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданий_ат.ВРаботе") Тогда
			Значение.Цвет = WebЦвета.Синий;
			Значение.Редактирование = Ложь;
		ИначеЕсли Строка.ПланируемаяДатаОкончания < НачалоДня(ТекущаяДата()) Тогда
			Значение.Цвет = WebЦвета.Красный;
			Значение.Редактирование = Ложь;
		Иначе
			Значение.Редактирование = Истина;
			Если Строка.Краткосрочное Тогда
				Значение.Цвет = WebЦвета.СветлоСерый;
			КонецЕсли;	
		КонецЕсли;
		Интервал = Значение.Добавить();
		Интервал.Текст = Строка(Строка.Тезис) + "; Исполнитель: " + Строка.Исполнитель;
		Интервал.Расшифровка = Строка.Задание;
		Интервал.Начало = НачалоДня(Строка.ПланируемаяДатаНачала);
		Интервал.Конец = КонецДня(Строка.ПланируемаяДатаОкончания);
		
		Если НачалоИнтервала = Неопределено Тогда
			НачалоИнтервала = Строка.ПланируемаяДатаНачала;
			КонецИнтервала = Строка.ПланируемаяДатаОкончания;
		Иначе
			Если НачалоИнтервала > Строка.ПланируемаяДатаНачала Тогда
				НачалоИнтервала = Строка.ПланируемаяДатаНачала;
			КонецЕсли;
			Если КонецИнтервала < Строка.ПланируемаяДатаОкончания Тогда
				КонецИнтервала = Строка.ПланируемаяДатаОкончания;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	Если Интервал.Начало < НачалоДня(ТекущаяДата()) Тогда
		Предупреждение("Перемещение задания в прошлое недопустимо.");
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультат(ОбработатьРедактированиеИнтервала(Интервал.Расшифровка, Интервал.Начало, ОтменаРедактирования));
	
КонецПроцедуры

&НаСервере
Функция   ОбработатьРедактированиеИнтервала(Задание, Начало, ОтменаРедактирования)
	
	СтруктураОтборов = Новый Структура("Задание", Задание);
	НаборЗаписей = ПолучитьНаборЗаписей(СтруктураОтборов);
	ТаблицаЗаданий = НаборЗаписей.Выгрузить();
	ИсходноеЗначение = ТаблицаЗаданий[0];
	
	//+ Подстрахуемся от случайного изменений длительности при перетаскивании
	Если Начало = ИсходноеЗначение.ПланируемаяДатаНачала Тогда
		ОтменаРедактирования = Истина;
		Возврат Неопределено;
	КонецЕсли;
	//- Подстрахуемся от случайного изменений длительности при перетаскивании

	Если НЕ ИсходноеЗначение.Модифицированность Тогда
		Если ВерсияИзменена(ИсходноеЗначение) ИЛИ ОбъектЗанят(ОбрабатываемоеЗадание) Тогда
			Возврат "Изменение Задания в настоящий момент невозможно.";
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачала = НачалоДня(Начало);
	ДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ДатаНачала, ИсходноеЗначение.ПланируемаяДлительность));
	Если НЕ ПродолжительностьПроцессов_Сервер_ат.ВСпринте(ДатаНачала, ДатаОкончания) Тогда
		ОтменаРедактирования = Истина;
		Возврат "Задание не может быть передвинуто на указанную дату," + Символы.ПС +
			"т.к. при этом планируемые дата начала и окончания выйдут за приделы спринта.";
	КонецЕсли;	
	
	Если ИсходноеЗначение.Краткосрочное 
		ИЛИ ИзменениеДатыВозможно(Задание, ИсходноеЗначение.Исполнитель, ДатаНачала, ДатаОкончания) Тогда
		
		ИсходноеЗначение.ПланируемаяДатаНачала = ДатаНачала;
		ИсходноеЗначение.ПланируемаяДатаОкончания = ДатаОкончания;
		ИсходноеЗначение.Модифицированность = Истина;
		
		Возврат ЗавершитьРедактирование(СтруктураОтборов, НаборЗаписей, ТаблицаЗаданий, "Перемещение ", ИсходноеЗначение);

	Иначе
		ОтменаРедактирования = Истина;
		Возврат "Задание не может быть передвинуто на указанную дату.";
	КонецЕсли;
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// Изменение плана Заданий

&НаСервере
Функция   ПолучитьНовыеДатыЗаданияВОчереди(Исполнитель, Задание, Длительность)
	
	ДоступныеПозиции = ПолучитьДоступныеПозиции(Исполнитель, Задание, Длительность);
    Если ДоступныеПозиции.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаНачала = ДоступныеПозиции[0]; 
	ДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ДатаНачала, Длительность));
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания" , ДатаНачала, ДатаОкончания);
	
КонецФункции

&НаСервере
Функция   ИзменениеДатыВозможно(Задание, ИсполнительЗадания, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПланированиеЗаданий.Задание) КАК КоличествоЗаданий
		|ИЗ
		|	РегистрСведений.ПланированиеЗаданий_ат КАК ПланированиеЗаданий
		|ГДЕ
		|	ПланированиеЗаданий.ТекущийПользователь = &ТекущийПользователь
		|	И ПланированиеЗаданий.Исполнитель = &Исполнитель
		|	И НЕ ПланированиеЗаданий.Задание = &Задание
		|	И НЕ ПланированиеЗаданий.Краткосрочное
		|	И (ПланированиеЗаданий.ПланируемаяДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
		|			ИЛИ ПланированиеЗаданий.ПланируемаяДатаОкончания МЕЖДУ &ДатаНачала И &ДатаОкончания)";

		
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Исполнитель", ИсполнительЗадания);
	Запрос.УстановитьПараметр("Задание", Задание);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗаданий = 0;
	КонецЕсли;	
	
КонецФункции 


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

&НаСервере
Функция   ПолучитьНаборЗаписей(СтруктураОтборов = Неопределено)
	
	Если СтруктураОтборов = Неопределено Тогда
		
		СтруктураОтборов = Новый Структура;
		
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.ПланированиеЗаданий_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТекущийПользователь.Установить(ТекущийПользователь);
	
	Для Каждого Отбор Из СтруктураОтборов Цикл
		
		НаборЗаписей.Отбор[Отбор.Ключ].Установить(Отбор.Значение);
		
	КонецЦикла;

	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
	
КонецФункции

&НаСервере
Функция   ОбъектЗанят(ПроверяемыйОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПланированиеЗаданий_ат.Модифицированность) КАК Количество
		|ИЗ
		|	РегистрСведений.ПланированиеЗаданий_ат КАК ПланированиеЗаданий_ат
		|ГДЕ
		|	ПланированиеЗаданий_ат.Задание = &Задание
		|	И ПланированиеЗаданий_ат.Модифицированность
		|	И НЕ ПланированиеЗаданий_ат.ТекущийПользователь = &ТекущийПользователь";

	Запрос.УстановитьПараметр("Задание", ПроверяемыйОбъект);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если Выборка.Количество > 0 Тогда
			Сообщить("Задание редактируется другим пользователем и не может быть изменено");
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

&НаСервере
Функция   ВерсияИзменена(ИсходноеЗначение)
	
	Если ТипЗнч(ИсходноеЗначение.Задание) = Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ИсходноеЗначение.ВерсияДанных = ИсходноеЗначение.Задание.ВерсияДанных Тогда
		Возврат Ложь;
	Иначе	
		Сообщить("Редактируемое Задание было изменено, обновите значения.");
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура Обновить(Данные = Неопределено)
	
	Если ОтображатьСписок Тогда
		Элементы.ДинамическийСписок.Обновить();
	КонецЕсли;
	
	Если ОтображатьГрафик Тогда
		ПостроитьДГ();
		
		Если ВыбранноеЗадание <> Неопределено Тогда
			Точка = ДиаграммаГанта.УстановитьТочку(ВыбранноеЗадание);
			Точка.Цвет = WebЦвета.Черный;
			Точка.ПриоритетЦвета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		Если Элементы.РедактируемоеЗадание.Видимость И ОбрабатываемоеЗадание = Данные.Задание Тогда
			ПланируемаяДатаНачалаОбрабатываемогоЗадания = Данные.ДатаНачала;
		КонецЕсли;
		Если ОтображатьСписок Тогда
			ВыделитьСтроку(Данные.Задание, Данные.Исполнитель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьСтроку(Задание, ИсполнительЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТекущийПользователь", ТекущийПользователь);
	Отбор.Вставить("Задание", Задание);
	Отбор.Вставить("Исполнитель", ИсполнительЗадания);
	Элементы.ДинамическийСписок.ТекущаяСтрока = РегистрыСведений.ПланированиеЗаданий_ат.СоздатьКлючЗаписи(Отбор);
	
КонецПроцедуры 

&НаСервере
Функция   ЗавершитьРедактирование(Отборы, НаборЗаписей, ТаблицаЗаданий, ОписаниеДействия, НовыеДанные)
	
	ДанныеДляОбновления = Новый Структура;
	ДанныеДляОбновления.Вставить("Задание", НовыеДанные.Задание);
	ДанныеДляОбновления.Вставить("ДатаНачала", НовыеДанные.ПланируемаяДатаНачала);
	ДанныеДляОбновления.Вставить("Исполнитель", НовыеДанные.Исполнитель);
	
	ОжидаемаяДатаЗавершения = ПолучитьОжидаемуюДатуЗавершения(НовыеДанные.Задание);
	
	Если ЗначениеЗаполнено(ОжидаемаяДатаЗавершения) И ОжидаемаяДатаЗавершения < НовыеДанные.ПланируемаяДатаОкончания Тогда
		
		ПередаваемыеПараметры = Новый Структура;
		ПередаваемыеПараметры.Вставить("СтруктураОтборов", Отборы);
		ПередаваемыеПараметры.Вставить("АдресХранилища", ПоместитьВоВременноеХранилище(ТаблицаЗаданий, УникальныйИдентификатор));
		ПередаваемыеПараметры.Вставить("ДанныеДляОбновления", ДанныеДляОбновления);
		
		Возврат Новый Структура("ОписаниеДействия, ПередаваемыеПараметры", ОписаниеДействия, ПередаваемыеПараметры);
		
	КонецЕсли;

	НаборЗаписей.Загрузить(ТаблицаЗаданий);
	НаборЗаписей.Записать();
	
	Обновить(ДанныеДляОбновления);
	
КонецФункции 

&НаКлиенте
Процедура ОбработатьРезультат(Результат)
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда // ошибка
		ПоказатьПредупреждение(, Результат, 5);
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ЗначениеЗаполнено(Результат.ОписаниеДействия) Тогда
			ТекстВопроса = Результат.ОписаниеДействия + "Задания приветедет к выходу планируемой даты завершения" +
				Символы.ПС + "Задания за ожидаемую дату окончания Заявки." + Символы.ПС + "Продолжить?";
		Иначе
			ТекстВопроса = "Планируемая дата завершения Задания больше ожидаемой даты окончания Заявки." + Символы.ПС + "Продолжить?";
		КонецЕсли;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОДлительности", ЭтаФорма, Результат.ПередаваемыеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет); 
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопросаОДлительности(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВнестиИзменения(ПередаваемыеПараметры);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ВнестиИзменения(ПередаваемыеПараметры)
	
	НаборЗаписей = ПолучитьНаборЗаписей(ПередаваемыеПараметры.СтруктураОтборов);
	НаборЗаписей.Загрузить(ПолучитьИзВременногоХранилища(ПередаваемыеПараметры.АдресХранилища));
	НаборЗаписей.Записать();
	
	Обновить(ПередаваемыеПараметры.ДанныеДляОбновления);
	
КонецПроцедуры 

&НаСервере
Функция   ПолучитьОжидаемуюДатуЗавершения(Задание)
	
	Если ТипЗнч(Задание) = Тип("Строка") Тогда
		Возврат Планирование_Сервер_ат.ПолучитьОжидаемуюДатуЗавершения(Параметры.Предок);
	Иначе
		Возврат Планирование_Сервер_ат.ПолучитьОжидаемуюДатуЗавершения(Задание);
	КонецЕсли;
	
КонецФункции 
