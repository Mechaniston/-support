Функция onStartSession(CallNo, ClusterID, ClusterName, InfoBaseName, SessionID, UserID, UserName, AppID, Zone, LanguageCode, ErrorDescription)
	
	// Возвращаемые значения
	СеансМожетБытьСоздан   = 0;
	СеансНеМожетБытьСоздан = 1;
	ТребуетсяСинхронизация = 2;
	ErrorDescription = "УРАААА!";
	//
	
	//debug
	ИнфоСтрока = 
		  "CallNo = " + CallNo + "; "
		+ "ClusterID = " + ClusterID + "; "
		+ "ClusterName = " + ClusterName + "; "
		+ "InfoBaseName = " + InfoBaseName + "; "
		+ "SessionID = " + SessionID + "; "
		+ "UserID = " + UserID + "; "
		+ "UserName = " + UserName + "; "
		+ "AppID = " + AppID + "; "
		+ "Zone = " + Zone + "; "
		+ "LanguageCode = " + LanguageCode;
	ЗаписьЖурналаРегистрации("SCWS.onStartSession.Call", УровеньЖурналаРегистрации.Информация,, ИнфоСтрока);
	//
	
	ТекущиеАктивныеСеансы = РегистрыСведений.ТекущиеАктивныеСеансы_ат.СоздатьНаборЗаписей();
	ТекущиеАктивныеСеансы.Отбор.ИнформационнаяБаза.Установить(InfoBaseName, Истина);
	ТекущиеАктивныеСеансы.Прочитать();
	ПорядковыеНомераВызова = ТекущиеАктивныеСеансы.ВыгрузитьКолонки("ПорядковыйНомерВызова");
	ПорядковыеНомераВызова.Сортировать("ПорядковыйНомерВызова Убыв");
	ПорядковыйНомерВызова = ПорядковыеНомераВызова.Получить(0).ПорядковыйНомерВызова;
	
	//debug
	ИнфоСтрока = "СохранённыйПорядковыйНомерВызова = " + ПорядковыйНомерВызова;
	ЗаписьЖурналаРегистрации("SCWS.onStartSession.CallNo", УровеньЖурналаРегистрации.Информация,, ИнфоСтрока);
	//
	
	ПорядковыйНомерВызова = ПорядковыйНомерВызова + 1;
	Если ПорядковыйНомерВызова <> CallNo Тогда // если нарушена последовательность вызовов, то требуется синхронизация
		Возврат ТребуетсяСинхронизация;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭкземплярыПродуктов_ат.Владелец.КонтрагентВладелец,
	|	АрендаПП_атОстатки.РесурсОстаток
	|ИЗ
	|	Справочник.ЭкземплярыПродуктов_ат КАК ЭкземплярыПродуктов_ат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АрендаПП_ат.Остатки КАК АрендаПП_атОстатки
	|		ПО ЭкземплярыПродуктов_ат.Владелец.КонтрагентВладелец = АрендаПП_атОстатки.Клиент
	|ГДЕ
	|	НЕ ЭкземплярыПродуктов_ат.ПометкаУдаления
	|	И ЭкземплярыПродуктов_ат.Наименование = &НаименованиеИБ
	|	И НЕ ЭкземплярыПродуктов_ат.Владелец.ПометкаУдаления
	|	И НЕ ЭкземплярыПродуктов_ат.Владелец.КонтрагентВладелец.ПометкаУдаления
	|	И АрендаПП_атОстатки.ПоставкаПродукта.Продукт.ТипПродукта В(&ТипыПродукта)");
	Запрос.УстановитьПараметр("НаименованиеИБ", InfoBaseName);
	ТипыПродукта = Новый Массив;
	ТипыПродукта.Добавить(Перечисления.ТипыПродуктов_ат.КлиентскаяЛицензия1С);
	ТипыПродукта.Добавить(Перечисления.ТипыПродуктов_ат.КлючUSB1С);
	Запрос.УстановитьПараметр("ТипыПродукта", ТипыПродукта);
	ВРЗ = Запрос.Выполнить().Выбрать();
	ОстатокЛицензийНайден = ВРЗ.Следующий();
	Клиент = ВРЗ.КонтрагентВладелец;
	ОстатокЛицензий = ВРЗ.РесурсОстаток;
	
	//debug
	ИнфоСтрока = "Клиент = " + Клиент + "; ОстатокЛицензийНайден = " + ОстатокЛицензийНайден + "; ОстатокЛицензий = " + ОстатокЛицензий;
	ЗаписьЖурналаРегистрации("SCWS.onStartSession.RestLicInfo", УровеньЖурналаРегистрации.Информация,, ИнфоСтрока);
	//
	
	//Если Не ОстатокЛицензийНайден Тогда
	//	ErrorDescription = "Не определёна информация о доступных лицензионных ключах! В доступе отказано."
	//	Возврат СеансНеМожетБытьСоздан;
	//КонецЕсли;
	//
	//Если ОстатокЛицензий = 0 Тогда
	//	ErrorDescription = "Для клиента <" + Клиент + "> больше нет доступных лицензий";
	//	Возврат СеансНеМожетБытьСоздан;
	//КонецЕсли;
	
	НовыйСеанс = ТекущиеАктивныеСеансы.Добавить();
	НовыйСеанс.ИнформационнаяБаза = InfoBaseName;
	НовыйСеанс.ИдентификаторКластераСерверов = ClusterID;
	НовыйСеанс.ИдентификаторСеанса = SessionID;
	НовыйСеанс.ПорядковыйНомерВызова = ПорядковыйНомерВызова;
	НовыйСеанс.НаименованиеКластера = ClusterName;
	НовыйСеанс.ИдентификаторПользователя = UserID;
	НовыйСеанс.ИмяИнформационнойБазы = UserName;
	НовыйСеанс.ИмяПриложения = AppID;
	НовыйСеанс.НачальныеЗначенияРазделителей = Zone;
	НовыйСеанс.КодЯзыка = LanguageCode;
	
	ТекущиеАктивныеСеансы.Записать(Ложь);
	
	///////////////////////
	//Результат = Справочники.ДоступныеСеансы.НайтиПоНаименованию(InfoBaseName, Истина);
	//Если Результат.Пустая() Тогда
	//	// Если в справочнике нет базы с таким именем – значит
	//	// для нее нет ограничений
	//	Возврат 0;
	//  КонецЕсли;
	//Объект = Результат.ПолучитьОбъект();
	//Объект.ПоследнийНомерВызова = Объект.ПоследнийНомерВызова + 1;
	//// Проверим – если нарушена последовательность вызовов,
	//// то потребуется синхронизация
	//Если Объект.ПоследнийНомерВызова <> CallNo Тогда
	//	Возврат 2;
	//КонецЕсли;
	//
	//Если Результат.ТекущиеСеансы.Количество() > Результат.Количество Тогда
	//	// достигнуто максимальное количество сеансов, больше нельзя
	//	Объект.Записать();
	//	Возврат 1;
	//Иначе
	//	// сеансы еще возможны
	//	Строка = Объект.ТекущиеСеансы.Добавить();
	//	Строка.SessionID = SessionID;
	//	Строка.UserID = UserID;
	//	Строка.UserName = UserName;
	//	Строка.AppID = AppID;
	//	Строка.Zone = Zone;
	//	Строка.LanguageCode = LanguageCode;
	//	Объект.Записать();
	//	Возврат 0;
	//КонецЕсли;

КонецФункции

Функция onFinishSession(CallNo, ClusterID, SessionID)
	
	//debug
	ИнфоСтрока = 
		  "CallNo = " + CallNo + "; "
		+ "ClusterID = " + ClusterID + "; "
		+ "SessionID = " + SessionID;
	ЗаписьЖурналаРегистрации("SCWS.onFinishSession.Call", УровеньЖурналаРегистрации.Информация,, ИнфоСтрока);
	//
	
	ТекущиеАктивныеСеансы = РегистрыСведений.ТекущиеАктивныеСеансы_ат.СоздатьНаборЗаписей();
	ТекущиеАктивныеСеансы.Отбор.ИдентификаторКластераСерверов.Установить(ClusterID, Истина);
	ТекущиеАктивныеСеансы.Отбор.ИдентификаторСеанса.Установить(SessionID, Истина);
	ТекущиеАктивныеСеансы.Прочитать();
	ИнформационнаяБаза = ТекущиеАктивныеСеансы[0].ИнформационнаяБаза;
	ТекущиеАктивныеСеансы.Очистить();
	
	//debug
	ИнфоСтрока = "ИнформационнаяБаза = " + ИнформационнаяБаза;
	ЗаписьЖурналаРегистрации("SCWS.onFinishSession.IBName", УровеньЖурналаРегистрации.Информация,, ИнфоСтрока);
	//
	
	Если ИнформационнаяБаза <> "" Тогда
		ПустаяЗапись = ТекущиеАктивныеСеансы.Добавить();
		ПустаяЗапись.ИнформационнаяБаза = ИнформационнаяБаза;
		ПустаяЗапись.ПорядковыйНомерВызова = CallNo;
	КонецЕсли;
	
	ТекущиеАктивныеСеансы.Записать();
	
	Возврат Неопределено;
	
КонецФункции

Функция synchronize(CallNo, ClusterID, ClusterName, InfoBaseName, CurrentSessions)
	
	//debug
	ИнфоСтрока = 
		  "CallNo = " + CallNo + "; "
		+ "ClusterID = " + ClusterID + "; "
		+ "ClusterName = " + ClusterName + "; "
		+ "InfoBaseName = " + InfoBaseName;
	ЗаписьЖурналаРегистрации("SCWS.synchronize.Call", УровеньЖурналаРегистрации.Информация,, ИнфоСтрока);
	//
	
	ТекущиеАктивныеСеансы = РегистрыСведений.ТекущиеАктивныеСеансы_ат.СоздатьНаборЗаписей();
	ТекущиеАктивныеСеансы.Отбор.ИнформационнаяБаза.Установить(InfoBaseName, Истина);
	ТекущиеАктивныеСеансы.Прочитать();
	ТекущиеАктивныеСеансы.Очистить();
	Для каждого Сеанс Из CurrentSessions.Content Цикл
		НовыйСеанс = ТекущиеАктивныеСеансы.Добавить();
		НовыйСеанс.ИнформационнаяБаза = InfoBaseName;
		НовыйСеанс.ИдентификаторКластераСерверов = ClusterID;
		НовыйСеанс.НаименованиеКластера = ClusterName;
		НовыйСеанс.ПорядковыйНомерВызова = CallNo;
		
		НовыйСеанс.ИдентификаторСеанса = Сеанс.SessionID;
		НовыйСеанс.ИдентификаторПользователя = Сеанс.UserID;
		НовыйСеанс.ИмяИнформационнойБазы = Сеанс.UserName;
		НовыйСеанс.ИмяПриложения = Сеанс.AppID;
		НовыйСеанс.НачальныеЗначенияРазделителей = Сеанс.Zone;
		НовыйСеанс.КодЯзыка = Сеанс.LanguageCode;
	КонецЦикла;
	
	ТекущиеАктивныеСеансы.Записать();
	
	Возврат Неопределено;
	
КонецФункции
