
#Область ЛокальныеПеременные

#Область Комментарии

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Ложь);
	
	#КонецОбласти
	
	ПересчитатьРеквизитыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Истина);
	
	#КонецОбласти
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПересчитатьРеквизитыФормы(Ложь, Параметры.ЗначениеКопирования.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	
	СообщитьОНекорректномКоличестве();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ Объект.Ссылка.Пустая()
		И ТипПродукта = Перечисления.ТипыПродуктов_ат.Сервер1С
		И ЭтаФорма.СсылкаНаЦентральныйСерверКластера = Объект.Ссылка
		Тогда	
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В качестве ссылки на центральный сервер крастера не может быть укаказ этот же сервер.";
		Сообщение.Поле  = "СсылкаНаЦентральныйСерверКластера";
		Сообщение.УстановитьДанные(ЭтаФорма);
		Сообщение.Сообщить(); 
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ТипПродукта = Перечисления.ТипыПродуктов_ат.КлиентскаяЛицензия1С Тогда
		
		Если ЭтаФорма.ТипЛицензии Тогда
			
			ЭтаФорма.Размещение = Истина;
			ЭтаФорма.Сервер1С = Неопределено;
			
		Иначе
			
			Если ЭтаФорма.Размещение Тогда
				
				ЭтаФорма.Сервер1С = Неопределено;
				
			Иначе
				
				ЭтаФорма.Компьютер = Неопределено;
				ЭтаФорма.ВебСервер = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийКлиента(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	#КонецОбласти
	
	ИмяРегистра = УчетПродуктов_ат.ПолучитьИмяРегистраСпецификацииЭкземпляраПродукта(ТекущийОбъект.ТекущийПродукт.ТипПродукта);
	
	Если ИмяРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭкземплярПродукта.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Запись = НаборЗаписей[0];
		
	Иначе
		
		Запись = НаборЗаписей.Добавить();
		
	КонецЕсли;
	
	ЗаписьИзменена = Ложь;
	
	Для каждого Элемент Из СписокДобавленныхРеквизитов Цикл
		
		ТекущиеДанные = ЭтаФорма[Элемент.Значение];
		
		Если Элемент.Значение = "ОбъемИБ" Тогда // Динамически добавленый реквизит, отсутствующий в регистре спецификации.
			
			Продолжить;
			
		ИначеЕсли ТипЗнч(ТекущиеДанные) = Тип("Строка") Тогда
			
			ТекущиеДанные = СокрЛП(ТекущиеДанные);
			
		КонецЕсли;
		
		Если Запись[Элемент.Значение] <> ТекущиеДанные Тогда
			
			Запись[Элемент.Значение] = ТекущиеДанные;
			ЗаписьИзменена = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписьИзменена Тогда
		
		Запись.ЭкземплярПродукта = ТекущийОбъект.Ссылка;
		
		Попытка
			
			НаборЗаписей.Записать();
			
		Исключение
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийПользователя

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ПересчитатьРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПродуктПриИзменении(Элемент)
	
	ПересчитатьРеквизитыФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)

	СообщитьОНекорректномКоличестве();
	
КонецПроцедуры

&НаКлиенте
Процедура РольСервераРазмещенияПриИзменении(Элемент)

	Если ТипПродукта = ПредопределенноеЗначение("Перечисление.ТипыПродуктов_ат.Конфигурация1С") Тогда
		
		РольСервераРазмещенияПриИзменении_Сервер();
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПересчитатьРеквизитыФормы(СменаПродукта = Ложь, ЗначениеКопированияСсылка = Неопределено)
	
	ЗаполнитьИнформациюОПродукте(СменаПродукта, ЗначениеКопированияСсылка);
	УстановитьДоступностьСервераРазмещения();
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИнформациюОПродукте(СменаПродукта, ЗначениеКопированияСсылка)
	
	//Если СменаПродукта ИЛИ НЕ ЗначениеЗаполнено(Объект.ТекущийПродукт) Тогда
	//	
	//	Объект.ТекущийПродукт = Объект.Владелец.Продукт;
	//	Объект.ТекущаяВерсия = Неопределено;
	//	
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийПродукт) И ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		Объект.ТекущийПродукт = Объект.Владелец.Продукт;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТекущийПродукт) Тогда
		
		Объект.ТекущаяВерсия = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТекущийПродукт) И ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		Если Объект.Владелец.Продукт <> Объект.ТекущийПродукт
			//И Объект.Владелец.Состав.Найти(Объект.ТекущийПродукт) = Неопределено Тогда
			И ПолучитьСписокПродуктовИзГрупп(Объект.ТекущийПродукт).Найти(Объект.ТекущийПродукт) = Неопределено Тогда
			
			Объект.ТекущийПродукт = Неопределено;
			Объект.ТекущаяВерсия = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
		
	ТипПродукта = Объект.ТекущийПродукт.ТипПродукта;
	
	Если ТипПродукта = Перечисления.ТипыПродуктов_ат.Конфигурация1С
		ИЛИ ТипПродукта = Перечисления.ТипыПродуктов_ат.Сервер1С Тогда
		
		Элементы.ТекущаяВерсия.АвтоОтметкаНезаполненного = Истина;
		
	Иначе
		
		Элементы.ТекущаяВерсия.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ТекущаяВерсия.ОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
	УчетПродуктов_ат.ОтобразитьСпецификациюЭкземпляраНаФорме(ЭтаФорма, ЗначениеКопированияСсылка);
	
	Элементы.Количество.ТолькоПросмотр = НЕ УчетПродуктов_ат.ДоступнаМножественностьЭкземпляров(ТипПродукта);
	
	ОграниченияПоКоличеству = УчетПродуктов_ат.ОпределитьДоступноеКоличествоЭкземпляров(Объект.Владелец, Объект.Ссылка);
	
	УчетПродуктов_ат.ЗаполнитьСписокПоследнихВерсийПродукта(Объект.ТекущийПродукт, Элементы.ТекущаяВерсия.СписокВыбора);
	
	Если ПустаяСтрока(Объект.Наименование) Или
		(НЕ Объект.Ссылка.Пустая() И Объект.Ссылка.Наименование = Строка(Объект.Ссылка.ТекущийПродукт)) Тогда
		
		Объект.Наименование = Строка(Объект.ТекущийПродукт);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РольСервераРазмещенияПриИзменении_Сервер()
	
	УчетПродуктов_ат.ИзменитьВидимостьЭлементовСпецификацииКонфигурации1С(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура СообщитьОНекорректномКоличестве()
	
	Если Объект.ПометкаУдаления Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОграниченияПоКоличеству.КоличествоОграничено И ОграниченияПоКоличеству.ДоступноеКоличество < Объект.Количество Тогда
		
		ПоказатьПредупреждение(, "Количество Экземпляров Продукта не может превышать указанное количество в Продукте!" + Символы.ПС
			+ "Максимальное доступное количество экземпляров: " + ОграниченияПоКоличеству.ДоступноеКоличество + "шт.", 5);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЛицензииПриИзменении()
	
	Если ЭтаФорма.ТипЛицензии Тогда
		
		Элементы.Количество.ТолькоПросмотр = Истина;
		Объект.Количество = 1;
		
	Иначе
		
		Элементы.Количество.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
	ИзменитьВидимостьЭлементовСпецификацииЛицензии();
	
КонецПроцедуры

&НаКлиенте
Процедура РазмещениеПриИзменении()
	
	ИзменитьВидимостьЭлементовСпецификацииЛицензии();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьЭлементовСпецификацииЛицензии()
	
	УчетПродуктов_ат.ИзменитьВидимостьЭлементовСпецификацииЛицензии(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСервераРазмещения()
	
	ТипыРолейСерверов = УчетПродуктов_ат.ПолучитьТипыРолейСерверовПоТипуПродукта(ТипПродукта);
	
	Если ТипыРолейСерверов.Количество() = 0 Тогда
		
		Элементы.ГруппаСерверРазмещение.Видимость = Ложь;
		
		Возврат;
		
	Иначе	
		
		Элементы.ГруппаСерверРазмещение.Видимость = Истина;
		
	КонецЕсли;
	
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.КонтрагентВладелец", Объект.Владелец.КонтрагентВладелец));	
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.СерверРазмещения.ПараметрыВыбора = НовыеПараметры;
	
	НовыйМассив = Новый Массив;
	
	Если ТипыРолейСерверов.Количество() > 0 Тогда
		
		НовыйМассив.Добавить(Новый ПараметрВыбора("ТипыРолейСерверов", ТипыРолейСерверов));
		
	КонецЕсли;
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.РольСервераРазмещения.ПараметрыВыбора = НовыеПараметры;	
	
	Если ТипПродукта = Перечисления.ТипыПродуктов_ат.Конфигурация1С
		//ИЛИ ТипПродукта = Перечисления.ТипыПродуктов_ат.Платформа1С
		ИЛИ ТипПродукта = Перечисления.ТипыПродуктов_ат.Сервер1С
		ИЛИ ТипПродукта = Перечисления.ТипыПродуктов_ат.СерверMSSQL
		ИЛИ ТипПродукта = Перечисления.ТипыПродуктов_ат.СерверPostgreSQL
		ИЛИ ТипПродукта = Перечисления.ТипыПродуктов_ат.СерверOracle
		ИЛИ ТипПродукта = Перечисления.ТипыПродуктов_ат.СерверIBMDB2 Тогда
		
		Элементы.РольСервераРазмещения.АвтоОтметкаНезаполненного = Истина;
		
	Иначе	
		
		Элементы.РольСервераРазмещения.АвтоОтметкаНезаполненного = Ложь;
		Элементы.РольСервераРазмещения.ОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти

#Область Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтаФорма, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийКлиента(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	//ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, ОбработчикСобытийВнутреннегоКомментария;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийВнутреннегоКомментария(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция   ПолучитьСписокПродуктовПоПоставке(Поставка)
	
	//СписокПродуктов = Поставка.Состав.ВыгрузитьКолонку("Продукт");
	//СписокПродуктов- переименовать в массив!!!!!
	//Для Каждого СоставПоставки Из Поставка.Состав Цикл
	//КонецЦикла;
	СписокПродуктов = ПолучитьСписокПродуктовИзГрупп(Поставка.Продукт);
	СписокПродуктов.Добавить(Поставка.Продукт);
	
	Возврат СписокПродуктов;
	
КонецФункции

&НаСервереБезКонтекста
Функция   ПолучитьСписокПродуктовИзГрупп(Продукт)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПродуктыГрупп.Продукт КАК Продукт
	|ИЗ
	|	Справочник.ГруппыПродуктов_ат КАК ГруппыПродуктов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПродуктов_ат.Продукты КАК ПродуктыГрупп
	|		ПО ГруппыПродуктов.Ссылка = ПродуктыГрупп.Ссылка
	|ГДЕ
	|	НЕ ГруппыПродуктов.ПометкаУдаления
	|	И ГруппыПродуктов.Продукты.Продукт = &Продукт
	|	И НЕ ПродуктыГрупп.Продукт.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПродуктыГрупп.Продукт.Наименование
	|");
	
	Запрос.УстановитьПараметр("Продукт", Продукт);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Продукт");
	
КонецФункции

&НаКлиенте
Процедура ТекущийПродуктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		СписокПродуктов = ПолучитьСписокПродуктовПоПоставке(Объект.Владелец);
		
		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		эОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		эОтбор.ПравоеЗначение = СписокПродуктов;
		эОтбор.Использование = Истина;
		
		//эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
		//ПараметрыФормы = Новый Структура("Отбор", Новый Структура(ПараметрИмя, ПараметрКоманды));
		ПараметрыФормы.Вставить("НеСохранятьПользовательскиеНастройки", Истина);
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораТекущегоПродукта", ЭтаФорма); 
	
	ОткрытьФорму("Справочник.Продукты_ат.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(Объект.ТекущийПродукт) Тогда
		
		СписокПродуктов = ПолучитьСписокПродуктовИзГрупп(Объект.ТекущийПродукт);
		
		фиксНастройки = Новый НастройкиКомпоновкиДанных;
		
		эОтбор = фиксНастройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		эОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		эОтбор.Использование = Истина;
		
		эОтбор1 = эОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продукт");
		эОтбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		эОтбор1.ПравоеЗначение = Объект.ТекущийПродукт;
		эОтбор1.Использование = Истина;
		
		эОтбор2 = эОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		эОтбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состав.Продукт");
		эОтбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		эОтбор2.ПравоеЗначение = Объект.ТекущийПродукт;
		эОтбор2.Использование = Истина;
		
		эОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		
		ПараметрыФормы.Вставить("ФиксированныеНастройки", фиксНастройки);
		//ПараметрыФормы = Новый Структура("Отбор", Новый Структура(ПараметрИмя, ПараметрКоманды));
		ПараметрыФормы.Вставить("НеСохранятьПользовательскиеНастройки", Истина);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораПоставки", ЭтаФорма); 
	
	ОткрытьФорму("Справочник.ПоставкиПродуктов_ат.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТекущегоПродукта(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Объект.ТекущийПродукт = Результат;
		ПересчитатьРеквизитыФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПоставки(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Объект.Владелец = Результат;
		ПересчитатьРеквизитыФормы();
		
	КонецЕсли;
	
КонецПроцедуры
