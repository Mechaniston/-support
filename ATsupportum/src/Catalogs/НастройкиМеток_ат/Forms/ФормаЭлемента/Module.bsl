
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Дерево = Метки_Сервер_ат.ПолучитьТаблицуСсылокНаИсточникиЗначенийВыбора("Справочник.Метки_ат",, Истина);
	
	Отказ = Дерево = Неопределено;
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.СохраняемыеМетки) Тогда
		
		ИсточникМеток = Параметры.СохраняемыеМетки;
		Пользователь = Объект.Пользователи.Добавить();
		Пользователь.Пользователь = ПараметрыСеанса.ТекущийПользователь;
		
		Объект.ВключаяНезаполненные = Параметры.ВключаяНезаполненные;
		
	Иначе
		
		ИсточникМеток = Объект.ВыбранныеМетки;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыВыбранныхМеток Из ИсточникМеток Цикл
		
		СтрокаДерева = Дерево.Строки.Найти(СтрокаТаблицыВыбранныхМеток.Значение,, Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			
			СтрокаДерева.ИспользоватьИ	 = СтрокаТаблицыВыбранныхМеток.ИспользоватьИ;
			СтрокаДерева.ИспользоватьИЛИ = СтрокаТаблицыВыбранныхМеток.ИспользоватьИЛИ;
			СтрокаДерева.ИспользоватьНЕ	 = СтрокаТаблицыВыбранныхМеток.ИспользоватьНЕ;
			
		КонецЕсли;
		
	КонецЦикла;
		
	ЗначениеВДанныеФормы(ДобавитьКонревойЭлементДерева(Дерево), ДеревоЭлементовОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	УстановитьИспользованиеРодителей(ДеревоЭлементовОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	УправляемыеФормы_Клиент_ат.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элемент.Имя]);
	
КонецФункции

&НаСервере
Функция ДобавитьКонревойЭлементДерева(ИсходноеДерево)
	
	НовоеДерево = Новый ДеревоЗначений;
	
	Для Каждого Колонка Из ИсходноеДерево.Колонки Цикл
		
		НовоеДерево.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	НоваяСтрока = НовоеДерево.Строки.Добавить();
	
	ПереместитьСтрокиДереваРекурсивно(НоваяСтрока, ИсходноеДерево.Строки);
	
	Возврат НовоеДерево;
	
КонецФункции

&НаСервере
Процедура ПереместитьСтрокиДереваРекурсивно(Родитель, СтрокиИсходногоДерева)
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		НоваяСтрока = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходногоДерева,, "Родитель");
		ПереместитьСтрокиДереваРекурсивно(НоваяСтрока, СтрокаИсходногоДерева.Строки)
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьИспользованиеРодителей(ТекущийЭлементДерева)
	
	ЭлементыДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ИспользоватьИ Тогда
			
			УстановитьИспользованиеРодителя(ЭлементДерева.ПолучитьРодителя(), "ИспользоватьИ");
			
		ИначеЕсли ЭлементДерева.ИспользоватьИЛИ Тогда
			
			УстановитьИспользованиеРодителя(ЭлементДерева.ПолучитьРодителя(), "ИспользоватьИЛИ");
			
		ИначеЕсли ЭлементДерева.ИспользоватьНЕ Тогда
			
			УстановитьИспользованиеРодителя(ЭлементДерева.ПолучитьРодителя(), "ИспользоватьНЕ");
			
		Иначе
			
			УстановитьИспользованиеРодителей(ЭлементДерева);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

&НаКлиенте
Процедура УстановитьИспользованиеРодителя(Родитель, ИмяРеквизитаПометки = "Использовать", Использовать = Истина)
	
	Если НЕ Родитель = Неопределено Тогда
		
		Если НЕ Использовать Тогда
			
			Если ПодчиненныеИспользуются(Родитель, ИмяРеквизитаПометки) Тогда
				Использовать = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Родитель[ИмяРеквизитаПометки] = Использовать;
		УстановитьИспользованиеРодителя(Родитель.ПолучитьРодителя(), ИмяРеквизитаПометки, Использовать);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодчиненныеИспользуются(ТекущийЭлементДерева, ИмяРеквизитаПометки)
	
	ЭлементыДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненныйЭлемент Из ЭлементыДерева Цикл
		Если ПодчиненныйЭлемент[ИмяРеквизитаПометки] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ИзменитьИспользованиеОтборовВТаблице()
	
	Дерево = ДанныеФормыВЗначение(ДеревоЭлементовОтбора, Тип("ДеревоЗначений"));
	
	ТаблицаЗначенийОтбора = Новый Массив; // Массив структур, чтобы можно было передавать с клиента на сервер.
	
	Для Каждого СтрокаТаблицыЗначенийОтбора Из Параметры.ТаблицаЗначенийОтбора Цикл
		
		СтрокаДерева = Дерево.Строки.Найти(СтрокаТаблицыЗначенийОтбора.Значение,, Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			
			СтрокаТаблицыЗначенийОтбора.Вставить("ИспользоватьИ",	СтрокаДерева.ИспользоватьИ);
			СтрокаТаблицыЗначенийОтбора.Вставить("ИспользоватьИЛИ", СтрокаДерева.ИспользоватьИЛИ);
			СтрокаТаблицыЗначенийОтбора.Вставить("ИспользоватьНЕ",	СтрокаДерева.ИспользоватьНЕ);
			
			ТаблицаЗначенийОтбора.Добавить(СтрокаТаблицыЗначенийОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийОтбора;
	
КонецФункции

&НаСервере
Процедура ИзменитьПометкиСпискаЗначенийОтбора()
	
	Дерево = ДанныеФормыВЗначение(ДеревоЭлементовОтбора, Тип("ДеревоЗначений"));
	
	Для Каждого ЭлементСпискаЗначенийОтбора Из Параметры.СписокЗначенийОтбора Цикл
		
		СтрокаДерева = Дерево.Строки.Найти(ЭлементСпискаЗначенийОтбора.Значение,, Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			ЭлементСпискаЗначенийОтбора.Пометка = СтрокаДерева.Использовать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкиДерева(ТекущийЭлементДерева, ИмяРеквизитаПометки = "Использовать", Пометка, ЭтоУстановкаПометокВсемЭлементам = Ложь)
	
	ЭлементыДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		
		Если ЭтоУстановкаПометокВсемЭлементам
		 ИЛИ ЭлементДерева.Значение = Элементы.ДеревоЭлементовОтбора.ТекущиеДанные.Значение Тогда
		   
			УстановитьПометкиПодчиненных(ЭлементДерева, ИмяРеквизитаПометки, Пометка);
			ЭлементДерева[ИмяРеквизитаПометки] = Пометка;
			
		Иначе
			
			ИзменитьПометкиДерева(ЭлементДерева, ИмяРеквизитаПометки, Пометка, ЭтоУстановкаПометокВсемЭлементам);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекущийЭлемент, ИмяРеквизитаПометки, Пометка)
	
	ЭлементыДерева = ТекущийЭлемент.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ЭлементДерева[ИмяРеквизитаПометки] = Пометка;
		УстановитьПометкиПодчиненных(ЭлементДерева, ИмяРеквизитаПометки, Пометка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе()
	
   тЭлементы = ДеревоЭлементовОтбора.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
      Элементы.ДеревоЭлементовОтбора.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
  КонецЦикла;
  
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭлементовОтбораИспользоватьИПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоЭлементовОтбора.ТекущиеДанные;
	ПриИзмененииИспользования("ИспользоватьИ", ТекущаяСтрокаДерева);
	СнятьСоседниеПометки("ИспользоватьИ", ТекущаяСтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭлементовОтбораИспользоватьИЛИПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоЭлементовОтбора.ТекущиеДанные;
	ПриИзмененииИспользования("ИспользоватьИЛИ", ТекущаяСтрокаДерева);
	СнятьСоседниеПометки("ИспользоватьИЛИ", ТекущаяСтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭлементовОтбораИспользоватьНЕПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоЭлементовОтбора.ТекущиеДанные;
	ПриИзмененииИспользования("ИспользоватьНЕ", ТекущаяСтрокаДерева);
	СнятьСоседниеПометки("ИспользоватьНЕ", ТекущаяСтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользования(ИмяТекущейПометки, ТекущаяСтрокаДерева)
	
	Использовать = ТекущаяСтрокаДерева[ИмяТекущейПометки];
	ИзменитьПометкиДерева(ДеревоЭлементовОтбора, ИмяТекущейПометки, Использовать);
	УстановитьИспользованиеРодителя(ТекущаяСтрокаДерева.ПолучитьРодителя(), ИмяТекущейПометки, Использовать);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСоседниеПометки(ИмяТекущейПометки, ТекущаяСтрокаДерева)
		
	Если ИмяТекущейПометки = "ИспользоватьИ"
		И ТекущаяСтрокаДерева.ИспользоватьИ Тогда
		
		ТекущаяСтрокаДерева.ИспользоватьИЛИ = Ложь;
		ПриИзмененииИспользования("ИспользоватьИЛИ", ТекущаяСтрокаДерева);
		ТекущаяСтрокаДерева.ИспользоватьНЕ	= Ложь;
		ПриИзмененииИспользования("ИспользоватьНЕ", ТекущаяСтрокаДерева);
		
	ИначеЕсли ИмяТекущейПометки = "ИспользоватьИЛИ"
		И ТекущаяСтрокаДерева.ИспользоватьИЛИ  Тогда
		
		ТекущаяСтрокаДерева.ИспользоватьИ	= Ложь;
		ПриИзмененииИспользования("ИспользоватьИ", ТекущаяСтрокаДерева);
		ТекущаяСтрокаДерева.ИспользоватьНЕ	= Ложь;
		ПриИзмененииИспользования("ИспользоватьНЕ", ТекущаяСтрокаДерева);
		
	ИначеЕсли ИмяТекущейПометки = "ИспользоватьНЕ"
		И ТекущаяСтрокаДерева.ИспользоватьНЕ  Тогда
		
		ТекущаяСтрокаДерева.ИспользоватьИ	= Ложь;
		ПриИзмененииИспользования("ИспользоватьИ", ТекущаяСтрокаДерева);
		ТекущаяСтрокаДерева.ИспользоватьИЛИ	= Ложь;
		ПриИзмененииИспользования("ИспользоватьИЛИ", ТекущаяСтрокаДерева);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Дерево = РеквизитФормыВЗначение("ДеревоЭлементовОтбора");
	
	ЗаполнитьТабличнуюЧастьСохраненныхМетокРекурсивно(ТекущийОбъект.ВыбранныеМетки, ДеревоЭлементовОтбора.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьСохраненныхМетокРекурсивно(ВыбранныеМетки, СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если НЕ СтрокаДерева.Значение = Неопределено И НЕ СтрокаДерева.Значение.ЭтоГруппа Тогда
			
			НоваяСтрока = ВыбранныеМетки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
		КонецЕсли;
		
		ЗаполнитьТабличнуюЧастьСохраненныхМетокРекурсивно(ВыбранныеМетки, СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры




