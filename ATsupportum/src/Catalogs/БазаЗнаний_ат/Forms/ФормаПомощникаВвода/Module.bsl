
&НаКлиенте
Перем КоординатыЗаменяемогоСлова;

&НаКлиенте
Перем СоответствиеКомандЗаменыСловам;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Основание = Параметры.Основание;
	
	СписокМеток = Метки_Сервер_ат.ПолучитьСписокЗначенийМеток(Основание.Ссылка,
		"Справочник.Метки_ат", ТипЗнч(Основание.Ссылка), Тип("СправочникСсылка.Метки_ат"), СписокМеток);
		
	Дерево = Метки_Сервер_ат.ПолучитьТаблицуСсылокНаИсточникиЗначенийВыбора("Справочник.Метки_ат",, Истина);
		
	Для Каждого ЭлементСпискаМеток Из СписокМеток Цикл
		
		СтрокаДерева = Дерево.Строки.Найти(ЭлементСпискаМеток.Значение,, Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			СтрокаДерева.Использовать = ЭлементСпискаМеток.Пометка;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, Метки);
	
	ТекстВопроса = Основание.ТекстЗаявкиВHTML;
	СтруктураЗаявки = Планирование_Сервер_ат.ПолучитьСвойстваЗаявки(Основание);
	Если СтруктураЗаявки.Свойство("РезультатВыполненияВHTML") Тогда
		
		ТекстРешения = СтруктураЗаявки.РезультатВыполненияВHTML;
		
	КонецЕсли;
	
	НаименованиеВопроса = Основание.Тезис;
	НаименованиеРешения = НаименованиеВопроса;
	СостояниеРешения	= Перечисления.СостоянияРешений_ат.Предварительное;
	
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Основание, "ТекстВопроса", ЭтаФорма, Истина);
	РаботаСHTML_Сервер_ат.СоздатьВременныеФайлыКартинокТекста(Основание, "ТекстРешения", ЭтаФорма, Истина);
	
	РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомманднаяПанельКнопокРедактированияHTML_Вопрос,
		"ОбработчикКомандРаботыСHTML_Вопрос", Истина, Элементы.ТекстВопросаКонтекстноеМеню);
		
	РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомманднаяПанельКнопокРедактированияHTML_Решение,
		"ОбработчикКомандРаботыСHTML_Решение", Истина, Элементы.ТекстРешенияКонтекстноеМеню);
		
КонецПроцедуры

&НаКлиенте
Процедура МеткиИспользоватьПриИзменении(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.Метки.ТекущиеДанные;
	Использовать = ТекущаяСтрокаДерева.Использовать;
	ИзменитьПометкиДерева(Метки, Использовать);
	УстановитьИспользованиеРодителя(ТекущаяСтрокаДерева.ПолучитьРодителя(), Использовать);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкиСпискаЗначенийОтбора()
	
	Дерево = ДанныеФормыВЗначение(Метки, Тип("ДеревоЗначений"));
	
	Для Каждого ЭлементСпискаМеток Из СписокМеток Цикл
		
		СтрокаДерева = Дерево.Строки.Найти(ЭлементСпискаМеток.Значение,, Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			ЭлементСпискаМеток.Пометка = СтрокаДерева.Использовать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкиДерева(ТекущийЭлементДерева, Пометка, ЭтоУстановкаПометокВсемЭлементам = Ложь)
	
	ЭлементыДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭтоУстановкаПометокВсемЭлементам
		 ИЛИ ЭлементДерева.Значение = Элементы.Метки.ТекущиеДанные.Значение Тогда
		   
			УстановитьПометкиПодчиненных(ЭлементДерева, Пометка);
			ЭлементДерева.Использовать = Пометка;
			
		Иначе
			
			ИзменитьПометкиДерева(ЭлементДерева, Пометка, ЭтоУстановкаПометокВсемЭлементам);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиПодчиненных(ТекущийЭлемент, Пометка)
	
	ЭлементыДерева = ТекущийЭлемент.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ЭлементДерева.Использовать = Пометка;
		УстановитьПометкиПодчиненных(ЭлементДерева, Пометка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьИспользованиеРодителей(ТекущийЭлементДерева)
	
	ЭлементыДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Использовать Тогда
			
			УстановитьИспользованиеРодителя(ЭлементДерева.ПолучитьРодителя());
			
		Иначе
			
			УстановитьИспользованиеРодителей(ЭлементДерева);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

&НаКлиенте
Процедура УстановитьИспользованиеРодителя(Родитель, Использовать = Истина)
	
	Если НЕ Родитель = Неопределено Тогда
		
		Если НЕ Использовать Тогда
			
			Если ПодчиненныеИспользуются(Родитель) Тогда
				Использовать = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Родитель.Использовать = Использовать;
		УстановитьИспользованиеРодителя(Родитель.ПолучитьРодителя(), Использовать);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодчиненныеИспользуются(ТекущийЭлементДерева)
	
	ЭлементыДерева = ТекущийЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненныйЭлемент Из ЭлементыДерева Цикл
		Если ПодчиненныйЭлемент.Использовать Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область HTMLВопрос

&НаКлиенте
Процедура ОбработчикКомандРаботыСHTML_Вопрос(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.ТекстВопроса, Элементы.КомманднаяПанельКнопокРедактированияHTML_Вопрос,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВопросаДокументСформирован(Элемент)
	
	ТекстВопросаСформирован = Истина;
	
	//Элемент.Документ.Body.InnerHTML = ТекстВопроса;
	
	//ДобавитьОбработчик Элемент.Документ.Body.OnContextMenu, ОбработчикСобытийПоляHTML_Вопрос;
	//ДобавитьОбработчик Элемент.Документ.Body.OnPaste, ОбработчикСобытийПоляHTML_Вопрос;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомманднаяПанельКнопокРедактированияHTML_Вопрос,
		Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийПоляHTML_Вопрос(Событие) Экспорт
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.ТекстВопроса);
		
		Для Каждого ЭлементКонтекстногоМеню Из Элементы.ПредставлениеТекстаЗаявкиВHTML.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "ТекстВопроса_КонтекстноеМеню_ВключитьВозможностьРедактирования"
			   И НЕ ЭлементКонтекстногоМеню.Имя = "ТекстВопроса_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда	

			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Вопрос(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Вопрос(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Вопрос(Неопределено, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Событие.type = "paste" Тогда
		
		ИдентификаторыКартинок.ЗагрузитьЗначения(РаботаСHTML_Клиент_ат.ПолучитьИдентификаторыКартинок(Элементы.ТекстВопроса.Документ));
		ПодключитьОбработчикОжидания("УдалитьКартинкиВставленныеКопированием_Вопрос", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинкиВставленныеКопированием_Вопрос() Экспорт
	
	РаботаСHTML_Клиент_ат.УдалитьКартинкиВставленныеКопированием(Элементы.ТекстВопроса.Документ,
																	ИдентификаторыКартинок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Вопрос(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.ТекстВопроса.КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ТолькоОчистить, "ОбработчикКомандРаботыСHTML_Вопрос");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстВопросаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомманднаяПанельКнопокРедактированияHTML_Вопрос, Элементы.ТекстВопроса.Документ);	
	
	РаботаСHTML_Клиент_ат.ПерейтиПоСсылке(ДанныеСобытия.href);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область HTMLРешение

&НаКлиенте
Процедура ОбработчикКомандРаботыСHTML_Решение(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.ТекстРешения, Элементы.КомманднаяПанельКнопокРедактированияHTML_Решение,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстРешенияДокументСформирован(Элемент)
	
	ТекстРешенияСформирован = Истина;
	
	//Элемент.Документ.Body.InnerHTML = ТекстРешения;
	
	ДобавитьОбработчик Элемент.Документ.Body.OnContextMenu, ОбработчикСобытийПоляHTML_Решение;
	ДобавитьОбработчик Элемент.Документ.Body.OnPaste, ОбработчикСобытийПоляHTML_Решение;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомманднаяПанельКнопокРедактированияHTML_Решение,
		Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийПоляHTML_Решение(Событие) Экспорт
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.ТекстРешения);
		
		Для Каждого ЭлементКонтекстногоМеню Из Элементы.ПредставлениеТекстаЗаявкиВHTML.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "ТекстРешения_КонтекстноеМеню_ВключитьВозможностьРедактирования"
			   И НЕ ЭлементКонтекстногоМеню.Имя = "ТекстРешения_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда	

			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Решение(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Решение(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Решение(Неопределено, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Событие.type = "paste" Тогда
		
		//ИдентификаторыКартинок.ЗагрузитьЗначения(РаботаСHTML_Клиент_ат.ПолучитьИдентификаторыКартинок(Элементы.ТекстРешения.Документ));
		//ПодключитьОбработчикОжидания("УдалитьКартинкиВставленныеКопированием_Решение", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинкиВставленныеКопированием_Решение() Экспорт
	
	РаботаСHTML_Клиент_ат.УдалитьКартинкиВставленныеКопированием(Элементы.ТекстРешения.Документ,
																	ИдентификаторыКартинок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML_Решение(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.ТекстРешения.КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ТолькоОчистить, "ОбработчикКомандРаботыСHTML_Решение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстРешенияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомманднаяПанельКнопокРедактированияHTML_Решение, Элементы.ТекстРешения.Документ);	
	
	РаботаСHTML_Клиент_ат.ПерейтиПоСсылке(ДанныеСобытия.href);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОКНаСервере(Знач пТекстВопроса, Знач пТекстРешения)
	
	Вопрос = Справочники.БазаЗнаний_ат.СоздатьЭлемент();
	Вопрос.ОбластьЗнаний = ОбластьЗнаний;
	Вопрос.Основание = Основание;
	Вопрос.Наименование = НаименованиеВопроса;
	Вопрос.Содержание = ?(ТекстВопросаСформирован, пТекстВопроса, ТекстВопроса);
	Вопрос.Записать();
	
	Метки_Сервер_ат.ЗаписатьЗначенияМетокВРегистр(Вопрос.Ссылка, СписокМеток, Тип("СправочникСсылка.Метки_ат"));
	
	Решение = Справочники.Решения_ат.СоздатьЭлемент();
	Решение.Владелец = Вопрос.Ссылка;
	Решение.Наименование = НаименованиеРешения;
	Решение.Состояние = СостояниеРешения;
	Решение.Содержание = ?(ТекстРешенияСформирован, пТекстРешения, ТекстРешения);
	Решение.Записать();
	
	Вопрос.ОсновноеРешение = Решение.Ссылка;
	Вопрос.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОКНаСервере(Элементы.ТекстВопроса.Документ.Body.InnerHTML, Элементы.ТекстРешения.Документ.Body.InnerHTML);
	Закрыть();
	
КонецПроцедуры

#КонецОбласти 