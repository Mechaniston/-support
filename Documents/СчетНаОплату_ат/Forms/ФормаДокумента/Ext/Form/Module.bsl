
#Область  ЛокальныеПеременные

#Область  Комментарии

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

#КонецОбласти

#КонецОбласти

#Область  ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Ложь);
	
	#КонецОбласти
	
	ОбновитьСтатусОплаты();
	ПрочитатьДанныеСтатусаОтправки();
	ПересчитатьДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#Область Комментарии
	
	ЗагрузитьКомментарии(Истина);
	
	#КонецОбласти
	
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Параметры.ЗначенияЗаполнения.Свойство("КомментарийСинхронизируемый", КомментарийСинхронизируемый);
		ЗаполнитьНовыйДокумент();
		
	КонецЕсли;
	
	БезНДС = Перечисления.СтавкиНДС_ат.БезНДС;
	
	ПредставлениеПериода = Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Объект.Период);
	
	// Если счет введён на основании, редактировать услуги нельзя.
	Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ОрганизацияФинансы_ат") Тогда
		Элементы.Услуги.ТолькоПросмотр = Объект.Основания.Количество() > 0;
	КонецЕсли;
	
	ОбновитьОтборПоВидуДоговора();
	
	Элементы.Договор.АвтоОтметкаНезаполненного = Константы.СоздаватьДоговорДляКаждогоСчета_ат.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтотОбъект, Отказ);
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленыДанныеОплаты" И Объект.Ссылка = Параметр Тогда
		ОбновитьСтатусОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтотОбъект,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок)
		И НЕ ЗначениеЗаполнено(КомментарийСтатусаОтправки) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для данного статуса отправки необходимо заполнить комментарий."
			+ Символы.ПС + "(Кнопка """ + Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок + """)";
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
	Если ЭтотОбъект.ТолькоПросмотр И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Отказ = Истина;
		
		ЗаписатьВнешниеДанные(Объект, ПараметрыЗаписи);
		ПослеЗаписи(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("КомментарийСинхронизируемый", КомментарийСинхронизируемый);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаписатьВнешниеДанные(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Если ПараметрыЗаписи.Свойство("ОповеститьОбИзмененииСтатусаОтправки") Тогда
		
		Оповестить("ИзменениеСтатусаОтправки",, Объект.Ссылка);
		ПрочитатьДанныеСтатусаОтправки();
		
	КонецЕсли;
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПересчитатьДоступностьФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиДействийПользователя

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьПланируемуюДатуОплаты(Объект.ДатаОплатыПланируемая, Объект.Дата, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВыполнитьУстановкуНовогоНомера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменениеДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ИзменениеДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ИзменениеДоговораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОплатыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтатусОплатыИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	СтатусОтправкиИзменен = Истина;
	КомментарийСтатусаОтправки = "";
	
	Если КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок) Тогда
		ОткрытьКомментарийСтатусаОтправки(Команды.ОткрытьКомментарийСтатусаОтправки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПредставлениеПериода) Тогда
		Объект.Период = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Даты_Клиент_ат.ВыбратьМесяц(ЭтотОбъект, Объект.Период, "Объект.Период", "ПредставлениеПериода");
	
КонецПроцедуры

&НаКлиенте
Процедура КосвенныеСвязиЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элементы.КосвенныеСвязиЗаданий.ТекущиеДанные.Заявка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Основание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПриИзменениях(Элемент)
	
	ОбновитьУслугиПоОснованиямНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияОснованиеПриИзменении(Элемент)
	
	ОбновитьУслугиПоОснованиямНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиСобытийЭлементовТаблицыФормы_Услуги

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УправляемыеФормы_Клиент_ат.ТолькоПросмотр(Элемент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = БезНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	УслугиНоменклатураПриИзмененииНаСервере(Элемент.ТекущиеДанные.Номенклатура,
		Элемент.ТекущиеДанные.Содержание, Объект.Договор, Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура УслугиНоменклатураПриИзмененииНаСервере(Номенклатура, Содержание, Договор, Период)
	
	Содержание = Финансы_ат.ПолучитьСодержаниеНоменклатурыДляСчета(Номенклатура, Договор,
		Даты_КлиентСервер_ат.ПолучитьПредставлениеМесяца(Период), Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуУслуги("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ПересчитатьСуммуУслуги("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДС("Услуги");

КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаФормыОтменитьПроведение(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКомментарийСтатусаОтправки(Команда)
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникКлиента() Тогда
		
		ПоказатьПредупреждение(, КомментарийСтатусаОтправки, 10);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПослеИзмененияКомментарияСтатусаОтправки", ЭтотОбъект);
		ПоказатьВводСтроки(Оповещение, КомментарийСтатусаОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок, 0, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКомандаФормы(Команда)
	
	Записать();
	Оповестить("ИзменениеСтатусаОтправки");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоОснованиям(Команда)
	
	Если Объект.Основания.Количество() = 0 Тогда
		
		Предупреждение("Основания для счёта не указаны!", 5);
		
	Иначе
		
		Если Объект.Услуги.Количество() > 0 Тогда
			
			Если Вопрос("Список Услуг будет очищен! Продолжать?", РежимДиалогаВопрос.ДаНет, 5, //!!!!!HOTFIX
					КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ОбновитьУслугиПоОснованиямНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоРеализациям(Команда)
	
	Если Объект.Реализации.Количество() = 0 Тогда
		
		Предупреждение("Реализации для счёта не указаны!", 5);
		
	Иначе
		
		Если Объект.Услуги.Количество() > 0 Тогда
			
			Если Вопрос("Список Услуг будет очищен! Продолжать?", РежимДиалогаВопрос.ДаНет, 5, //!!!!!HOTFIX
					КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ОбновитьУслугиПоРеализациямНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНовыйДокумент()
	
	СтатусОплаты = Перечисления.СтатусыОплатыСчетов_ат.НеОплачен;
	СтатусОплатыИзменен = Истина;
	
	Объект.ВнешнийНомер = "";
	Объект.ЦифрыНомера = 0;
	Объект.ДатаОплатыПланируемая = Неопределено;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьДоступностьФормы(Форма)
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникКлиента() Тогда
		
		Форма.Элементы.ГруппаЗадания.Видимость = Ложь;
		Форма.Элементы.ГруппаТаблицы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ТолькоПросмотр = Форма.Объект.Проведен И НЕ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ТекущийПользовательИмеетРольПолныеПрава();
	Форма.Элементы.ОтменаПроведения.Доступность = Форма.Объект.Проведен;
	
КонецПроцедуры 

&НаСервере
Процедура ИзменениеДоговораНаСервере()
	
	ОбновитьОтборПоВидуДоговора();
	ЗаполнитьПланируемуюДатуОплаты(Объект.ДатаОплатыПланируемая, Объект.Дата, Объект.Договор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПланируемуюДатуОплаты(ДатаОплатыПланируемая, Дата, Договор)
	
	ДатаОплатыПланируемая = Документы.СчетНаОплату_ат.ПолучитьПланируемуюДатуОплаты(Дата, Договор);
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьСтатусОплаты()
	
	СтатусОплаты = Финансы_ат.ПолучитьСтатусОплатыСчета(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусОплаты(Ссылка)
	
	Если СтатусОплатыИзменен Тогда
		
		Финансы_ат.ИзменитьСтатусОплатыСчета(Ссылка, СтатусОплаты);
		СтатусОплатыИзменен = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеСтатусаОтправки()
	
	ДанныеСтатусаОтправки = Финансы_ат.ПолучитьДанныеТекущегоСтатусаОтправкиФинДокумента(Объект.Ссылка);
	
	СтатусОтправки = ДанныеСтатусаОтправки.Статус;
	СтатусОтправкиИзменен = Ложь;
	Элементы.СтатусОтправки.Подсказка = "Дата статуса: " + ДанныеСтатусаОтправки.ДатаСтатуса;
	
	КомментарийСтатусаОтправки = ДанныеСтатусаОтправки.Комментарий;
	КомментарийСтатусаОтправкиИзменен = Ложь;
	КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, ЗаголовокКнопкиОткрытияКомментарияСтатусаОтправки)
	
	ЗаголовокКнопкиОткрытияКомментарияСтатусаОтправки = ?(ЗначениеЗаполнено(СтатусОтправки.ПредставлениеКомментария),
		СтатусОтправки.ПредставлениеКомментария, "Комментарий"); 
	
	Возврат СтатусОтправки.КомментарийОбязателен;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияКомментарияСтатусаОтправки(Строка, Параметры) Экспорт
	
	Если Строка <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		КомментарийСтатусаОтправки = Строка;
		КомментарийСтатусаОтправкиИзменен = Истина;
		
	Иначе
		
		ПрочитатьДанныеСтатусаОтправки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусОтправки(Ссылка, ПараметрыЗаписи)
	
	Если НЕ СтатусОтправкиИзменен И НЕ КомментарийСтатусаОтправкиИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Финансы_ат.ЗаписатьСтатусОтправкиФинДокумента(Ссылка, СтатусОтправки, КомментарийСтатусаОтправки, ТекущаяДатаСеанса());
	
	ПрочитатьДанныеСтатусаОтправки();
	
	ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииСтатусаОтправки", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВнешниеДанные(Объект, ПараметрыЗаписи)
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтотОбъект, Объект.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтотОбъект, Объект.Ссылка);
	Комментарии_ат.СохранитьКомментарийКлиента(ЭтотОбъект, Объект.Ссылка);
	Комментарии_ат.СохранитьКомментарийСинхронизируемый(ЭтотОбъект, Объект.Ссылка);
	
	#КонецОбласти
	
	ЗаписатьСтатусОплаты(Объект.Ссылка);
	ЗаписатьСтатусОтправки(Объект.Ссылка, ПараметрыЗаписи);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуУслуги(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Финансы_КлиентСервер_ат.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС, 1);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	Финансы_КлиентСервер_ат.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Финансы_КлиентСервер_ат.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборПоВидуДоговора()
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Объект.Договор.ВидДоговора);
	МассивВидовДоговоров.Добавить(Справочники.ВидыДоговоров_ат.ПустаяСсылка());
	ВидыДоговора.ЗагрузитьЗначения(МассивВидовДоговоров);
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВидДоговора", "ВидыДоговора");
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.УслугиНоменклатура.СвязиПараметровВыбора = НовыеСвязи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУслугиПоРеализациямНаСервере()
	
	Объект.Услуги.Очистить();
	
	МассивРеализаций = Объект.Реализации.Выгрузить( , "Реализация").ВыгрузитьКолонку("Реализация");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Реализация_атУслуги.Ссылка КАК Счет,
		|	Реализация_атУслуги.Номенклатура,
		|	Реализация_атУслуги.Содержание,
		|	Реализация_атУслуги.Цена,
		|	Реализация_атУслуги.Количество,
		|	Реализация_атУслуги.Сумма,
		|	Реализация_атУслуги.СтавкаНДС,
		|	Реализация_атУслуги.СуммаНДС
		|ИЗ
		|	Документ.Реализация_ат.Услуги КАК Реализация_атУслуги
		|ГДЕ
		|	Реализация_атУслуги.Ссылка.Проведен
		|	И Реализация_атУслуги.Ссылка В(&Реализации)";
	
	Запрос.УстановитьПараметр("Реализации", МассивРеализаций);
	
	ТаблицаПоРеализациям = Запрос.Выполнить().Выгрузить();
	
	//!!!!!!!!!!!!!!!!!!!!!!!!!!
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУстановкуНовогоНомера()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.УстановитьНовыйНомер();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение()
	
	ПолныеПрава = ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.ТекущийПользовательИмеетРольПолныеПрава();
	
	Элементы.ОбновитьПоОснованиям.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр ИЛИ ПолныеПрава;
	Элементы.ОбновитьПоРеализациям.Доступность = НЕ ЭтотОбъект.ТолькоПросмотр ИЛИ ПолныеПрава;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУслугиПоОснованиямНаСервере()
	
	Объект.Услуги.Очистить();
	Объект.КосвенныеСвязиЗаданий.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьСчетПоОснованиям();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область  УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтотОбъект, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти

#Область  Комментарии //TODO !!!!! - наименования процедур изменены, надо скопировать на все формы

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтотОбъект, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийКлиента(ЭтотОбъект, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийСинхронизируемый(ЭтотОбъект, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтотОбъект, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтотОбъект, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКлиентаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, КомментарийВнутренний_ОбработчикСобытий;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикСобытий(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтотОбъект, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаСервере
Процедура КомментарийВнутренний_ИзменитьКонтестноеМенюЗаменыСлов(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтотОбъект,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

#КонецОбласти
