
&НаКлиенте
Перем КоординатыЗаменяемогоСлова;

&НаКлиенте
Перем СоответствиеКомандЗаменыСловам;

#Область  ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Основание = Параметры.Основание;
	
	ЗаполнитьПоОснованию();
	
	РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомманднаяПанельКнопокРедактированияHTML,
		"ОбработчикКомандРаботыСHTML", Истина, Элементы.СодержаниеКонтекстноеМеню);
		
	ОбновитьОтображение();
	
КонецПроцедуры

#КонецОбласти

#Область  HTML

&НаКлиенте
Процедура ОбработчикКомандРаботыСHTML(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.Содержание, Элементы.КомманднаяПанельКнопокРедактированияHTML,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДокументСформирован(Элемент)
	
	//ДобавитьОбработчик Элемент.Документ.Body.OnContextMenu, ОбработчикСобытийПоляHTML;
	//ДобавитьОбработчик Элемент.Документ.Body.OnPaste, ОбработчикСобытийПоляHTML;
	
	РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
		Элементы.Содержание, Элементы.КомманднаяПанельКнопокРедактированияHTML, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийПоляHTML(Событие) Экспорт
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.Содержание);
		
		Для Каждого ЭлементКонтекстногоМеню Из Элементы.Содержание.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "Содержание_КонтекстноеМеню_ВключитьВозможностьРедактирования"
			   И НЕ ЭлементКонтекстногоМеню.Имя = "Содержание_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Неопределено, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Событие.type = "paste" Тогда
		
		ИдентификаторыКартинок.ЗагрузитьЗначения(РаботаСHTML_Клиент_ат.ПолучитьИдентификаторыКартинок(Элементы.Содержание.Документ));
		ПодключитьОбработчикОжидания("УдалитьКартинкиВставленныеКопированием", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКартинкиВставленныеКопированием() Экспорт
	
	РаботаСHTML_Клиент_ат.УдалитьКартинкиВставленныеКопированием(Элементы.Содержание.Документ,
																	ИдентификаторыКартинок.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.Содержание.КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ТолькоОчистить, "ОбработчикКомандРаботыСHTML");
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомманднаяПанельКнопокРедактированияHTML, Элементы.Содержание.Документ);	
	
	РаботаСHTML_Клиент_ат.ПерейтиПоСсылке(ДанныеСобытия.href);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеРешениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область  ОбработчикиКоманд

&НаКлиенте
Процедура Отправить(Команда)
	
	РаботаСHTML_Клиент_ат.ОбработатьHTMLПередЗаписью(Элементы.Содержание);
	Элементы.Содержание.Документ.body.InnerHTML =
		ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.Содержание.Документ.body.InnerHTML);
	Содержание = Элементы.Содержание.Документ.documentElement.outerHTML;
	
	Если Отправить_НаСервере() Тогда
		
		ПоказатьПредупреждение(, "Письмо отправлено", 5);
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   Отправить_НаСервере()
	
	НачатьТранзакцию();
	
	Попытка
		
		ОтправитьТиповоеПисьмо = ОбычноеПисьмо;
		
		Вложения = Новый ТаблицаЗначений;
		Вложения.Колонки.Добавить("АдресВоВременномХранилище");
		Вложения.Колонки.Добавить("ИмяФайлаСРасширением");
		
		Для Каждого СтрокаФайлов Из Файлы Цикл
			
			Если СтрокаФайлов.Отправлять Тогда
				
				НоваяСтрока = Вложения.Добавить();
				
				Если ЗначениеЗаполнено(СтрокаФайлов.Файл) Тогда
					
					ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СтрокаФайлов.Файл);
					АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					
				Иначе
					
					АдресВоВременномХранилище = СтрокаФайлов.АдресВоВременномХранилище;
					
				КонецЕсли;
				
				НоваяСтрока.АдресВоВременномХранилище = АдресВоВременномХранилище;
				ИмяФайла = СтрокаФайлов.ИмяФайла;
				НоваяСтрока.ИмяФайлаСРасширением = ИмяФайла;
				
			КонецЕсли;
			
			Если СтрокаФайлов.ДобавлятьВЗаявку Тогда
				ПрисоединенныеФайлы.ДобавитьФайл(Заявка, ИмяФайла,,,, АдресВоВременномХранилище);
			КонецЕсли;
			
		КонецЦикла;
		
		СтатусЗаявки = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Заявка);
		
		Если НЕ ОтправитьТиповоеПисьмо Тогда
			
			Если СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.НаПриемке Тогда
				
				Уведомления_ат.СоздатьПисьмоДляПриемкиЗаявки(Заявка, Содержание, Вложения);
				ОтправитьТиповоеПисьмо = Ложь;
				
			ИначеЕсли СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.НаСогласовании Тогда
				
				Согласование = Согласование_ат.ПолучитьПоследнееСогласованиеПоЗаявке(Заявка);
				
				Если Согласование = Неопределено Тогда
					
					ОтправитьТиповоеПисьмо = Истина;
					
				Иначе
					
					Уведомления_ат.СоздатьПисьмоДляСогласованияЗаявки(Согласование, Содержание, Вложения); //????????
					ОтправитьТиповоеПисьмо = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтправитьТиповоеПисьмо Тогда
			
			ТаблицаПолучателей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(Получатель);
			ТаблицаПолучателейКопий = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТаблицуАдресовДляУведомленийПользователей(ПолучателиКопий);
			
			Если ТаблицаПолучателей.Количество() = 0 И ТаблицаПолучателейКопий.Количество() = 0 Тогда
				
				Сообщить("Не выбраны получатели письма");
				Возврат Ложь;
				
			КонецЕсли;
			
			Получатели = ТаблицаПолучателей.ВыгрузитьКолонку("Контакт");
			
			Для Каждого ПолучательКопии Из ТаблицаПолучателейКопий.ВыгрузитьКолонку("Контакт")  Цикл
				
				Если Получатели.Найти(ПолучательКопии) = Неопределено Тогда
					Получатели.Добавить(ПолучательКопии);
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(Содержание);
			
			ОписаниеЗаявки = Уведомления_ат.СоздатьДокументHTMLСОписаниемЗаявки(Заявка,, Ложь, Получатели);
			
			ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
			ДокументHTML.Тело.ДобавитьДочерний(ЭлементБлок);
			
			РаботаСHTML_Сервер_ат.ИмпортироватьДокументВЭлемент(ДокументHTML, ЭлементБлок, ОписаниеЗаявки);
			
			Уведомления_ат.СоздатьПисьмо(ДокументHTML, Основание, Уведомления_ат.ПолучитьТемуПисьмаОСменеСтатуса(Заявка),
				ТаблицаПолучателей, ТаблицаПолучателейКопий, Истина,, ОжидатьОтвета,
				Перечисления.ТипыУведомлений_ат.ВнешнееПоЗаявке, Истина, Вложения);
			
			Если ОжидатьОтвета
				И НЕ СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Закрыта
				И НЕ СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отклонена
				И НЕ СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
				
				Планирование_Сервер_ат.УстановитьСтатус(Заявка, Перечисления.СтатусыЗаявок_ат.ВОжиданииОтвета, ТекущаяДатаСеанса(), Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область  СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьОтображение()
	
	СтатусЗаявки = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Заявка);
	ПростойОтвет = (СтатусЗаявки <> Перечисления.СтатусыЗаявок_ат.НаПриемке
		И СтатусЗаявки <> Перечисления.СтатусыЗаявок_ат.НаСогласовании);
	
	Элементы.ПолучателиКопий.Видимость = ПростойОтвет;
	Элементы.ОжидатьОтвета.Видимость = ПростойОтвет;
	Элементы.ОжидатьОтвета.ТолькоПросмотр = НЕ ПростойОтвет;
	
	Если ПростойОтвет Тогда
		
		ОбычноеПисьмо = Истина;
		Элементы.ОбычноеПисьмо.Видимость = Ложь;
		
	ИначеЕсли НЕ ПростойОтвет И СтатусЗаявки = Перечисления.СтатусыЗаявок_ат.НаПриемке Тогда
		
		Элементы.ОбычноеПисьмо.ФорматРедактирования = "БЛ='На приемку'; БИ='Обычное письмо'";
		
	Иначе
		
		Элементы.ОбычноеПисьмо.ФорматРедактирования = "БЛ='На согласование'; БИ='Обычное письмо'";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованию()
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		Заявка = Основание;
		Задание = ПолучитьПоследнееЗаданиеПоЗаявке(Заявка);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		
		Заявка = ПолучитьЗаявкуПоПисьму(Основание);
		Задание = ПолучитьПоследнееЗаданиеПоЗаявке(Заявка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		
		Пользователь = Заявка.Сотрудник;
		Обработки.ФинализацияЗиЗ_ат.ЗаполнитьФайлы(Файлы, Заявка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция   ПолучитьПоследнееЗаданиеПоЗаявке(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвязиОбъектов_ат.Объект
	|ИЗ
	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданий_атСрезПоследних
	|		ПО СвязиОбъектов_ат.Объект = ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка
	|ГДЕ
	|	СвязиОбъектов_ат.Предок = &Предок
	|	И СвязиОбъектов_ат.Предок ССЫЛКА Документ.Заявка_ат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияСтатусовЗаданий_атСрезПоследних.Период УБЫВ";
	Запрос.УстановитьПараметр("Предок", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Объект;
		
	КонецЕсли;
	
	
КонецФункции

Функция   ПолучитьЗаявкуПоПисьму(Письмо)
	
	ВзаимодействияПоПисьму = Взаимодействия.ПолучитьВзаимодействияИзЦепочки(Письмо, Письмо);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПредметыВзаимодействий.Взаимодействие КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовЗаявок_атСрезПоследних
	|		ПО ПредметыВзаимодействий.Взаимодействие = ИсторияСтатусовЗаявок_атСрезПоследних.Ссылка
	|ГДЕ
	|	ПредметыВзаимодействий.Предмет В(&Предметы)
	|	И ПредметыВзаимодействий.Взаимодействие ССЫЛКА Документ.Заявка_ат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияСтатусовЗаявок_атСрезПоследних.Период УБЫВ";
	
	Предметы = Новый Массив;
	Предметы.Добавить(Письмо);
	Предметы.Добавить(Взаимодействия.ПолучитьЗначениеПредмета(Письмо));
	
	Запрос.УстановитьПараметр("Предметы", Предметы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаявкаПриИзменении(Элемент)
	ЗаявкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаявкаПриИзмененииНаСервере()
	
	ОбновитьОтображение();
	Пользователь = Заявка.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Заголовок = "Выберите файл";
	Диалог.ПолноеИмяФайла = Элементы.Файлы.ТекущиеДанные.ПутьКФайлу;
	
	Если Диалог.Выбрать() Тогда
		
		ПутьКФайлу = Диалог.ВыбранныеФайлы[0];
		
		Файл = Новый Файл(ПутьКФайлу);
		Элементы.Файлы.ТекущиеДанные.ИмяФайла = Файл.Имя;
		Элементы.Файлы.ТекущиеДанные.ПутьКФайлу = ПутьКФайлу;
		Элементы.Файлы.ТекущиеДанные.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавлятьВЗаявкуПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Файлы.ТекущиеДанные.Файл) Тогда
		Элементы.Файлы.ТекущиеДанные.ДобавлятьВЗаявку = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти