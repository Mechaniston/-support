
Перем Вложения Экспорт;

Перем СоответствиеИменФайловИдентификаторам;
Перем ЭтоНовый;

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если Дата = Дата(1, 1, 1) Тогда
		
		Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		ЗаполнитьНаОснованииЗаявки(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ФиксацияРабот_ат") Тогда
		
		ЗаполнитьНаОснованииФиксации(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Согласование_ат") Тогда
		
		ЗаполнитьНаОснованииСогласования(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ЗаполнитьСодержание();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Взаимодействия.УстановитьПредмет(Ссылка, Ссылка);
	КонецЕсли;
	
	РаботаСHTML_Сервер_ат.ЗаписатьПрикрепленныеФайлыКартинок(Ссылка, СоответствиеИменФайловИдентификаторам);
	
	Если НЕ ПометкаУдаления И СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято Тогда
		ОбновитьСвойстваСогласованнойЗаявки();
	КонецЕсли;
	
	ПровестиДвиженияДокументаПоРегистрам(Отказ);
	
	//Если ФлагВнутреннего Тогда //TODO
	//	ИзменитьСодержанияРаботЗаданий();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = ЭтоНовый();
	
	//Если ФлагВнутреннего
	//	И ТипСогласования <> Перечисления.ТипыСогласований_ат.Техническое
	//	И ТипСогласования <> Перечисления.ТипыСогласований_ат.ПереносДат Тогда
	//	
	//	Отказ = Истина;
	//	Сообщить("Внутренним Согласованием может быть только 'Техническое' или 'Переноса дат'!");
	//	Возврат;
	//	
	//КонецЕсли;
	
	// автозаполнение зависимых полей
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Если Заявка.Клиент <> Договор.Владелец Тогда
			Договор = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Клиент = Заявка.Клиент;
	Проект = Заявка.Проект;
	
	//
	
	Если СтатусСогласования = Перечисления.СтатусыСогласований_ат.ОжиданиеОтвета Тогда
		
		СогласованиеОтклонено = Ложь;
		
		Для Каждого Согласующий Из Согласующие Цикл
			
			СогласованиеОтклонено = (Согласующий.Согласовано = Перечисления.РешенияОСогласовании.Отклонено);
			Если СогласованиеОтклонено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СогласованиеОтклонено Тогда
			СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отклонено;
		КонецЕсли;
		
	КонецЕсли;
	
	// установка даты согласования
	
	Если СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято
		ИЛИ СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отклонено Тогда
		
		Если ДатаСогласования = Дата(1, 1, 1) Тогда
			ДатаСогласования = ТекущаяДатаСеанса();
		КонецЕсли;
		
		// выравнивание, на всякий
		
		МинДата = Дата(2999, 1, 1);
		МаксДата = Дата(1, 1, 1);
		
		Для Каждого Согласующий Из Согласующие Цикл
			
			Если ЗначениеЗаполнено(Согласующий.Согласовано) Тогда
				
				Если ЗначениеЗаполнено(Согласующий.ДатаВремяСогласования)
					И Согласующий.ДатаВремяСогласования < МинДата Тогда
					
					МинДата = Согласующий.ДатаВремяСогласования;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Согласующий.ДатаВремяСогласования)
					И Согласующий.ДатаВремяСогласования > МаксДата Тогда
					
					МаксДата = Согласующий.ДатаВремяСогласования;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МинДата <> Дата(2999, 1, 1) И ДатаСогласования < МинДата Тогда
			ДатаСогласования = МинДата;
		КонецЕсли;
		
		Если МаксДата <> Дата(1, 1, 1) И ДатаСогласования > МаксДата Тогда
			ДатаСогласования = МаксДата;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	
	СоответствиеИменФайловИдентификаторам = Новый Соответствие;
	
	РаботаСHTML_Сервер_ат.ЗаменитьИменаКартинокНаИдентификаторыВHTML(
		ТекстСогласования, СоответствиеИменФайловИдентификаторам);
	
	//
	
	Если СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отклонено
		ИЛИ СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отменено Тогда
		Согласование_ат.ПопыткаЗакрытияЗаявкиПриОтклоненииСогласования(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииЗаявки(ДанныеЗаполнения)
	
	Основание = Неопределено;
	Заявка = ДанныеЗаполнения;
	Клиент = ДанныеЗаполнения.Клиент;
	Проект = ДанныеЗаполнения.Проект;
	
	ТекстСогласования = ДанныеЗаполнения.ТекстЗаявкиВHTML;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииФиксации(ДанныеЗаполнения) //!!!!!TODO??
	
	Клиент = ДанныеЗаполнения.Клиент;
	Договор = ДанныеЗаполнения.Договор;
	Проект = ДанныеЗаполнения.Проект;
	//
	ДокументОснование = ДанныеЗаполнения;
	//
	//Заявки.Загрузить(ДанныеЗаполнения.Заявки.Выгрузить());
	//
	//Для Каждого СтрокаУслуг Из ДанныеЗаполнения.Услуги Цикл
	//	
	//	Если СтрокаУслуг.ВводитьДополнительноеСогласование Тогда
	//		
	//		ПерерасходВремени = СтрокаУслуг.ОтчетноеКоличество - СтрокаУслуг.СогласованноеКоличество;
	//		ПерерасходСредств = СтрокаУслуг.ОтчетнаяСтоимость - СтрокаУслуг.СогласованнаяСтоимость;
	//		
	//		Если ПерерасходВремени > 0 Тогда
	//			
	//			НоваяСтрока = СодержаниеСогласования.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуг);
	//			
	//			НоваяСтрока.Количество = ПерерасходВремени;
	//			НоваяСтрока.КоличествоДляОтображения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(ПерерасходВремени);
	//			
	//			Цена = Финансы_ат.ПолучитьЦенуНоменклатуры(ТекущаяДата(), СтрокаУслуг.Номенклатура, СтрокаУслуг.Договор.Организация,
	//				СтрокаУслуг.Договор.ВидДоговора, СтрокаУслуг.Договор.Владелец, СтрокаУслуг.Договор, СтрокаУслуг.Проект);
	//			
	//			НоваяСтрока.Сумма = Цена * ПерерасходВремени;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииСогласования(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.ТипСогласования = Перечисления.ТипыСогласований_ат.Техническое Тогда
		
		ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое;
		
	Иначе
		
		ВызватьИсключение "Можно только создать фин. согласование на основании технического, никак иначе";
		
	КонецЕсли;
	
	//!!!!!TODO - отдельный алгоритм для создания обычного Согласования на основании внутреннего
	// пока так:
	Если ДанныеЗаполнения.ФлагВнутреннего Тогда
		
		ОбъектыСогласования.Загрузить(ДанныеЗаполнения.ОбъектыСогласования.Выгрузить());
		СодержаниеСогласования.Загрузить(ДанныеЗаполнения.СодержаниеСогласования.Выгрузить());
		
	КонецЕсли;
	
	Согласующие.Загрузить(ДанныеЗаполнения.Согласующие.Выгрузить());
	
	// Должно заполниться по плану.
	//СодержаниеСогласования.Загрузить(ДанныеЗаполнения.СодержаниеСогласования.Выгрузить());
	
	Заявка = ДанныеЗаполнения.Заявка;
	Клиент = ДанныеЗаполнения.Клиент;
	Договор = ДанныеЗаполнения.Договор;
	Проект = ДанныеЗаполнения.Проект;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

Процедура ПровестиДвиженияДокументаПоРегистрам(Отказ)
	
	Если НЕ ПометкаУдаления И СодержаниеСогласования.Количество() = 0 Тогда
		
		Сообщить("Не заполнено Содержание Согласования");
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ФинДвижения = НЕ ФлагВнутреннего
		И (ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое
			ИЛИ ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое);
	
	Если НЕ ПометкаУдаления И СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято Тогда
		
		Согласование_ат.ПровестиСогласованиеПоОперативномуБалансу(Ссылка, ФинДвижения);
		
		Если ОбъектыСогласования.Количество() = 0 Тогда
			
			Для Каждого СтрокаСодержанияСогласования Из СодержаниеСогласования Цикл
				
				Согласование_ат.ЗаписатьКосвеннуюСвязьЗадания(Неопределено,
					Заявка, Ссылка,,,,,, Клиент, СтрокаСодержанияСогласования.СодержаниеРабот);
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаОбъектовСогласования Из ОбъектыСогласования Цикл
				
				Согласование_ат.ЗаписатьКосвеннуюСвязьЗадания(СтрокаОбъектовСогласования.Задание,
					Заявка, Ссылка,,,,,, Клиент, СтрокаОбъектовСогласования.СодержаниеРабот);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Запись в РН КСУР
		НаборЗаписей = РегистрыНакопления.КоличественноСуммовойУчетРабот_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Для Каждого СтрокаСодержанияСогласования Из СодержаниеСогласования Цикл
			
			Если ТипСогласования = Перечисления.ТипыСогласований_ат.Техническое
				ИЛИ ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое Тогда
				
				Согласование_ат.СоздатьДвиженияПоРегиструКоличественноСуммовогоУчетаРабот(
					НаборЗаписей, ВидДвиженияНакопления.Приход, Ссылка, ДатаСогласования, Заявка,
					Договор, Проект, СтрокаСодержанияСогласования.СодержаниеРабот, СтрокаСодержанияСогласования.Номенклатура,
					СтрокаСодержанияСогласования.Количество, );
					
			КонецЕсли;
			
			Если ФинДвижения Тогда
				
				Согласование_ат.СоздатьДвиженияПоРегиструКоличественноСуммовогоУчетаРабот(
					НаборЗаписей, ВидДвиженияНакопления.Приход, Ссылка, ДатаСогласования, Заявка,
					Договор, Проект, СтрокаСодержанияСогласования.СодержаниеРабот, СтрокаСодержанияСогласования.Номенклатура,
					, СтрокаСодержанияСогласования.Сумма);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		// Запись в РН Времена
		
		НаборЗаписей = РегистрыНакопления.ВременаРабот_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Для Каждого СтрокаСодержанияСогласования Из СодержаниеСогласования Цикл
			
			Согласование_ат.СоздатьДвижениеПоРегиструУчетаВременРабот(
				НаборЗаписей, Ссылка, ДатаСогласования, Заявка, СтрокаСодержанияСогласования.СодержаниеРабот,
				,,, СтрокаСодержанияСогласования.Количество);
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		//
		
		Если ФинДвижения Тогда
			
			Уведомления_ат.УведомитьОСписанииСОперативногоБаланса(Ссылка, ДополнительныеСвойства.Свойство("Уведомлять"));
			Финансы_ат.ПолучитьИлиСоздатьСчетПоСогласованию(Ссылка, ДополнительныеСвойства.Свойство("Уведомлять"));
			
		КонецЕсли;
		
	Иначе//Если СтатусСогласования = Перечисления.СтатусыСогласований_ат.НеСогласовано Тогда
		
		Для Каждого Движение Из Движения Цикл
			
			Движение.Очистить();
			Движение.Записать();
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.КосвенныеСвязиЗаданий_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заявка.Установить(Заявка);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.Согласование = Ссылка Тогда
				Запись.Согласование = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
		//
		
		Если ПометкаУдаления И Ссылка.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято
			И (НЕ Ссылка.ПометкаУдаления ИЛИ СтатусСогласования <> Перечисления.СтатусыСогласований_ат.Принято) Тогда
			
			Уведомления_ат.УведомитьОСписанииСОперативногоБаланса(Ссылка, ДополнительныеСвойства.Свойство("Уведомлять"), Истина);
			
			//!!!!!!!!!!TODO: удалить счёт
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСодержанияРаботЗаданий()
	
	Если ((НЕ СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято
		И НЕ СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отклонено
		И НЕ СтатусСогласования = Перечисления.СтатусыСогласований_ат.Отменено)
		ИЛИ ПометкаУдаления) И НЕ ФлагВнутреннего Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияСодержанийРаботВоВнутреннихСогласованиях_ат.СодержаниеРаботДляЗамены,
	|	ВложенныйЗапрос.Задание
	|ИЗ
	|	РегистрСведений.СоответствияСодержанийРаботВоВнутреннихСогласованиях_ат КАК СоответствияСодержанийРаботВоВнутреннихСогласованиях_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СвязиОбъектов_ат.Объект КАК Задание,
	|			СвязиОбъектов_ат.Предок КАК Заявка,
	|			Задание_ат.СодержаниеРабот КАК СодержаниеРабот
	|		ИЗ
	|			РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задание_ат КАК Задание_ат
	|				ПО СвязиОбъектов_ат.Объект = Задание_ат.Ссылка
	|		ГДЕ
	|			СвязиОбъектов_ат.Предок = &Заявка) КАК ВложенныйЗапрос
	|		ПО СоответствияСодержанийРаботВоВнутреннихСогласованиях_ат.Заявка = ВложенныйЗапрос.Заявка
	|			И СоответствияСодержанийРаботВоВнутреннихСогласованиях_ат.СодержаниеРаботВСогласовании = ВложенныйЗапрос.СодержаниеРабот
	|ГДЕ
	|	СоответствияСодержанийРаботВоВнутреннихСогласованиях_ат.Заявка = &Заявка
	|	И НЕ ВложенныйЗапрос.Задание ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаданиеОбъект = Выборка.Задание.ПолучитьОбъект();
		ЗаданиеОбъект.СодержаниеРабот = Выборка.СодержаниеРаботДляЗамены;
		ЗаданиеОбъект.ОбменДанными.Загрузка = Истина;
		ЗаданиеОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСвойстваСогласованнойЗаявки()
	
	Если Планирование_Сервер_ат.ПолучитьОжидаемуюДатуЗавершенияЗаявки(Заявка, ДатаСогласования) < ОжидаемаяДатаЗавершения Тогда
		Планирование_Сервер_ат.УстановитьОжидаемуюДатуЗавершенияЗаявки(Заявка, ОжидаемаяДатаЗавершения, ДатаСогласования);
	КонецЕсли;
	
	Статус = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Заявка); //!!!!!TODO - не текущий, а на ДатуСогласования
	
	Если НЕ Статус = Перечисления.СтатусыЗаявок_ат.Закрыта
		И НЕ Статус = Перечисления.СтатусыЗаявок_ат.НаПриемке
		И НЕ Статус = Перечисления.СтатусыЗаявок_ат.ВОжиданииОтвета Тогда
		
		Планирование_Сервер_ат.УстановитьСтатус(Заявка, Перечисления.СтатусыЗаявок_ат.ВОчереди, ДатаСогласования,
			ДополнительныеСвойства.Свойство("Уведомлять"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьСвойстваСогласуемыхЗаданийПоЗаявке(Заявка, ТекущееСогласование = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиОбъектов.Объект КАК Задание,
		|	СвязиОбъектов.Объект.СодержаниеРабот КАК СодержаниеРабот,
		|	СвязиОбъектов.Объект.ЭкземплярПродукта КАК ЭкземплярПродукта,
		|	ЕСТЬNULL(СпецификацияЭП_Конфигурация1С.СостояниеПоддержки, НЕОПРЕДЕЛЕНО) КАК СостояниеПоддержкиЭП_Конфигурация1С,
		|	ЕСТЬNULL(СвойстваЗаданий.ПланируемоеВремяВыполнения, 0) КАК ПланируемоеВремяВыполнения,
		|	ЕСТЬNULL(СвойстваЗаданий.ФактическоеВремяВыполнения, 0) КАК ФактическоеВремяВыполнения,
		|	МАКСИМУМ(СвойстваЗаданий.ПланируемаяДатаОкончания) КАК ПланируемаяДатаОкончания
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ПО СвязиОбъектов.Объект = СвойстваЗаданий.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданийСрезПоследних
		|		ПО СвязиОбъектов.Объект = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияЭП_Конфигурация1С_ат КАК СпецификацияЭП_Конфигурация1С
		|		ПО СвязиОбъектов.Объект.ЭкземплярПродукта.ТекущийПродукт.ТипПродукта = ЗНАЧЕНИЕ(Перечисление.ТипыПродуктов_ат.Конфигурация1С)
		|			И СвязиОбъектов.Объект.ЭкземплярПродукта = СпецификацияЭП_Конфигурация1С.ЭкземплярПродукта
		|ГДЕ
		|	СвязиОбъектов.Предок = &Заявка
		|	И СвязиОбъектов.Объект ССЫЛКА Документ.Задание_ат
		|	И НЕ СвязиОбъектов.Объект.ПометкаУдаления
		|	И НЕ ЕСТЬNULL(ИсторияСтатусовЗаданийСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено)
		|	И НЕ СвойстваЗаданий.Ссылка.СодержаниеРабот.Исправление
		|	И НЕ СвязиОбъектов.Объект В
		|		(ВЫБРАТЬ
		|			СогласованиеОбъектыСогласования.Задание
		|		ИЗ
		|			Документ.Согласование_ат КАК Согласование
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.Согласование_ат.ОбъектыСогласования КАК СогласованиеОбъектыСогласования
		|				ПО
		|					СогласованиеОбъектыСогласования.Ссылка = Согласование.Ссылка
		|		ГДЕ
		|			Согласование.Заявка = &Заявка
		|			И НЕ Согласование.ПометкаУдаления
		|			И НЕ Согласование.СтатусСогласования = Значение(Перечисление.СтатусыСогласований_ат.Отклонено)
		|		И ВЫБОР
		|			КОГДА &ИсключатьТекущееСогласование
		|				ТОГДА НЕ Согласование.Ссылка = &ТекущееСогласование
		|			ИНАЧЕ
		|				ИСТИНА
		|			КОНЕЦ
		|		)
		|
		|СГРУППИРОВАТЬ ПО
		|	СвязиОбъектов.Объект,
		|	СвязиОбъектов.Объект.СодержаниеРабот,
		|	СвязиОбъектов.Объект.СодержаниеРабот.Номенклатура,
		|	ЕСТЬNULL(СпецификацияЭП_Конфигурация1С.СостояниеПоддержки, НЕОПРЕДЕЛЕНО),
		|	ЕСТЬNULL(СвойстваЗаданий.ПланируемоеВремяВыполнения, 0),
		|	ЕСТЬNULL(СвойстваЗаданий.ФактическоеВремяВыполнения, 0)";
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ТекущееСогласование", ТекущееСогласование);
	Запрос.УстановитьПараметр("ИсключатьТекущееСогласование", ТекущееСогласование <> Неопределено);
	
	УказателиВыборкиСвойствЗаданий = Запрос.Выполнить().Выбрать();
	
	МассивСвойствЗаданий = Новый Массив;
	
	Пока УказателиВыборкиСвойствЗаданий.Следующий() Цикл
		
		СтруктураЗадания = Новый Структура;
		СтруктураЗадания.Вставить("Задание", УказателиВыборкиСвойствЗаданий.Задание);
		СтруктураЗадания.Вставить("СодержаниеРабот", УказателиВыборкиСвойствЗаданий.СодержаниеРабот);
		СтруктураЗадания.Вставить("ЭкземплярПродукта", УказателиВыборкиСвойствЗаданий.ЭкземплярПродукта);
		СтруктураЗадания.Вставить("СостояниеПоддержкиЭП_Конфигурация1С", УказателиВыборкиСвойствЗаданий.СостояниеПоддержкиЭП_Конфигурация1С);
		СтруктураЗадания.Вставить("ПланируемоеВремяВыполнения", УказателиВыборкиСвойствЗаданий.ПланируемоеВремяВыполнения);
		СтруктураЗадания.Вставить("ФактическоеВремяВыполнения", УказателиВыборкиСвойствЗаданий.ФактическоеВремяВыполнения);
		СтруктураЗадания.Вставить("ПланируемаяДатаОкончания", УказателиВыборкиСвойствЗаданий.ПланируемаяДатаОкончания);
		
		Если ЗначениеЗаполнено(УказателиВыборкиСвойствЗаданий.ФактическоеВремяВыполнения) Тогда
			
			СтруктураЗадания.Вставить("Количество", УказателиВыборкиСвойствЗаданий.ФактическоеВремяВыполнения);
			//СтруктураЗадания.Вставить("КоличествоДляОтображения",
			//	ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(Выборка.ФактическоеВремяВыполнения));
			
		Иначе
			
			СтруктураЗадания.Вставить("Количество", УказателиВыборкиСвойствЗаданий.ПланируемоеВремяВыполнения);
			//СтруктураЗадания.Вставить("КоличествоДляОтображения",
			//	ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(Выборка.ПланируемоеВремяВыполнения));
			
		КонецЕсли;
		
		МассивСвойствЗаданий.Добавить(СтруктураЗадания);
		
	КонецЦикла;
	
	Возврат МассивСвойствЗаданий;
	
КонецФункции

Процедура ЗаполнитьСодержание() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Финансы_ат.ПолучитьДоговорПоЗаявке(Заявка, Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Если Договор.Владелец <> Заявка.Клиент Тогда
			ВызватьИсключение "Различаются Клиент в Заявке и в Договоре!";
		Иначе
			Клиент = Договор.Владелец;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Клиент) Тогда
		Клиент = Заявка.Клиент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Проект = Заявка.Проект;
	КонецЕсли;
	
	СвойстваОбъектовСогласования = ПолучитьСвойстваСогласуемыхЗаданийПоЗаявке(
		Заявка, ?(Ссылка.Пустая(), Неопределено, Ссылка));
	
	ОжидаемаяДатаЗавершения = Дата(1, 1, 1);
	
	МассивНоменклатур = Новый Массив;
	
	Для Каждого СвойстваОбъектаСогласования Из СвойстваОбъектовСогласования Цикл
		
		Если ОжидаемаяДатаЗавершения < СвойстваОбъектаСогласования.ПланируемаяДатаОкончания Тогда
			ОжидаемаяДатаЗавершения = СвойстваОбъектаСогласования.ПланируемаяДатаОкончания;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Задание", СвойстваОбъектаСогласования.Задание);
		
		Если ОбъектыСогласования.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъектаСогласования = ОбъектыСогласования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОбъектаСогласования, СвойстваОбъектаСогласования);
		СодержаниеРабот = СвойстваОбъектаСогласования.СодержаниеРабот;
		
		//!!!!!!!! криво, неправильно, переписать
		
		Номенклатура = Неопределено;
		
		Если ЗначениеЗаполнено(Договор) Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	НоменклатураДеятельностиПоДоговорам_ат.Номенклатура КАК Номенклатура
				|ИЗ
				|	РегистрСведений.НоменклатураДеятельностиПоДоговорам_ат КАК НоменклатураДеятельностиПоДоговорам_ат
				|ГДЕ
				|	НоменклатураДеятельностиПоДоговорам_ат.ВидДеятельности = &ВидДеятельности
				|	И НоменклатураДеятельностиПоДоговорам_ат.ВидДоговора = &ВидДоговора
				|	И НоменклатураДеятельностиПоДоговорам_ат.СпецификаПоддержкиКонфигурации = &СпецификаПоддержкиКонфигурации
				|");
			Запрос.УстановитьПараметр("ВидДеятельности", СодержаниеРабот);
			Запрос.УстановитьПараметр("ВидДоговора", Договор.ВидДоговора);
			Запрос.УстановитьПараметр("СпецификаПоддержкиКонфигурации", 
				?(СвойстваОбъектаСогласования.СостояниеПоддержкиЭП_Конфигурация1С = Неопределено, Перечисления.СостояниеПоддержки_ат.ПустаяСсылка(),
					СвойстваОбъектаСогласования.СостояниеПоддержкиЭП_Конфигурация1С));
			
			УказателиВыборкиНоменклатуры = Запрос.Выполнить().Выбрать();
			
			Если УказателиВыборкиНоменклатуры.Следующий() И НЕ УказателиВыборкиНоменклатуры.Номенклатура.Пустая() Тогда
				
				Номенклатура = УказателиВыборкиНоменклатуры.Номенклатура;
				
				Если МассивНоменклатур.Найти(Номенклатура) = Неопределено Тогда
					МассивНоменклатур.Добавить(Номенклатура);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураОтбораССПоВД = Новый Структура("СодержаниеРабот", СодержаниеРабот);
		НайденныеСтрокиСодержанияСогласования = СодержаниеСогласования.НайтиСтроки(СтруктураОтбораССПоВД);
		
		Если НайденныеСтрокиСодержанияСогласования.Количество() = 0 Тогда // Исключаются повторы
			
			СтрокаСодержанияСогласования = СодержаниеСогласования.Добавить();
			СтрокаСодержанияСогласования.СодержаниеРабот = СодержаниеРабот;
			СтрокаСодержанияСогласования.Номенклатура = Номенклатура;
			
		Иначе
			
			СтрокаСодержанияСогласования = НайденныеСтрокиСодержанияСогласования[0];
			
		КонецЕсли;
		
		СтрокаСодержанияСогласования.Количество = СтрокаСодержанияСогласования.Количество
			+ СвойстваОбъектаСогласования.Количество;
		
	КонецЦикла;
	
	КоличествоДокумента = 0;
	
	Для Каждого СтрокаСодержанияСогласования Из СодержаниеСогласования Цикл
		
		Если СтрокаСодержанияСогласования.Количество > 0 Тогда
			
			СтрокаСодержанияСогласования.Количество = Числа_КлиентСервер_ат.ПривестиЧислоКБазе(СтрокаСодержанияСогласования.Количество,
				ПродолжительностьПроцессов_Сервер_ат.ПолучитьМинимальныйИнтервалДеятельности());
			
		КонецЕсли;
		
		КоличествоДокумента = КоличествоДокумента + СтрокаСодержанияСогласования.Количество;
		
	КонецЦикла;
	
	СуммаДокумента = 0;
	
	Если МассивНоменклатур.Количество() > 0 Тогда
		
		ЗначениеВыбораТарифногоПлана_ = Неопределено;
		ТарифныйПлан = "";
		
		ТаблицаЦен = Финансы_ат.ПолучитьЦеныНоменклатур(Дата, МассивНоменклатур,
			Договор.Организация, Договор.ВидДоговора, Клиент, Договор, Проект, ЗначениеВыбораТарифногоПлана_,, Тариф, ТарифныйПлан);
		
		ЗначениеВыбораТарифногоПлана = ЗначениеВыбораТарифногоПлана_;
		
		Для Каждого СтрокаТаблицыЦен Из ТаблицаЦен Цикл
			
			СтруктураОтбораНоменклатуры = Новый Структура("Номенклатура", СтрокаТаблицыЦен.Номенклатура);
			НайденныеСтрокиССПоНоменклатуре = СодержаниеСогласования.НайтиСтроки(СтруктураОтбораНоменклатуры);
			
			Для Каждого СтрокаССПоНоменклатуре Из НайденныеСтрокиССПоНоменклатуре Цикл
				
				СтрокаССПоНоменклатуре.Цена = СтрокаТаблицыЦен.Цена;
				СтрокаССПоНоменклатуре.Сумма = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
					СтрокаССПоНоменклатуре.Количество) * СтрокаССПоНоменклатуре.Цена;
				
				СуммаДокумента = СуммаДокумента + СтрокаССПоНоменклатуре.Сумма;
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		Если Заявка.Клиент <> Договор.Владелец Тогда
			Договор = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Клиент = Заявка.Клиент;
	Проект = Заявка.Проект;
	
КонецПроцедуры


Вложения = Неопределено;
