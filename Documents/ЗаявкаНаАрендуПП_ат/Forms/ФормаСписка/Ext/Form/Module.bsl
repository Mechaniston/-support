&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	РолиПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Роли;
	Если РолиПользователя.Содержит(Метаданные.Роли.ПолныеПрава)
		ИЛИ РолиПользователя.Содержит(Метаданные.Роли.ОрганизацияАдминистраторСерверов_ат)Тогда
		Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.СоздатьНаОсновании.Видимость = истина;
		Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.ФормаИзменитьСтатусВручную.Видимость = Истина;
	Иначе 
		//	УстановитьОтборыСписка(ТекущийПользователь);
		Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.СоздатьНаОсновании.Видимость = Ложь;
		Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы.ФормаИзменитьСтатусВручную.Видимость = ложь;
		
	КонецЕсли;
КонецПроцедуры

//&НаСервере
//Процедура УстановитьОтборыСписка(Пользователь)
//
//Запрос = Новый Запрос;
//Запрос.Текст = 
//"ВЫБРАТЬ
//|	СпецификацияПользователей.Контрагент,
//|	СпецификацияПользователей.Пользователь,
//|	СпецификацияПользователей.Подразделение,
//|	СпецификацияПользователей.РуководительКлиента,
//|	СпецификацияПользователей.РуководительПодразделения
//|ИЗ
//|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей
//|ГДЕ
//|	СпецификацияПользователей.Пользователь = &Пользователь";
//
//Запрос.УстановитьПараметр("Пользователь", Пользователь);
////СписокКлиентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
////СписокКлиентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
//	РезультатЗапроса = Запрос.Выполнить();
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
//	ВыборкаДетальныеЗаписи.Следующий();
//
//Если  ВыборкаДетальныеЗаписи.РуководительКлиента = истина тогда
//	
//	ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
//	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
//	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
//	ГруппаОтбора.Использование = Истина;
//	
//	ОтборПоКлиентам = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//	ОтборПоКлиентам.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Клиент");
//	ОтборПоКлиентам.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//	ОтборПоКлиентам.ПравоеЗначение = ВыборкаДетальныеЗаписи.Контрагент;
//	ОтборПоКлиентам.Использование = Истина;
//	
//Иначе 
//	Если ВыборкаДетальныеЗаписи.РуководительПодразделения = Истина тогда
//		
//		
//		//ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
//		ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
//		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
//		ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
//		ГруппаОтбора.Использование = Истина;
//		
//		ОтборПоКлиентам = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//		ОтборПоКлиентам.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Клиент");
//		ОтборПоКлиентам.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
//		ОтборПоКлиентам.ПравоеЗначение = ВыборкаДетальныеЗаписи.Контрагент;
//		ОтборПоКлиентам.Использование = Истина;
//		
//		
//		ОтборПоПодразделению = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//		ОтборПоПодразделению.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
//		ОтборПоПодразделению.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//		ОтборПоПодразделению.ПравоеЗначение = ВыборкаДетальныеЗаписи.Подразделение;
//		ОтборПоПодразделению.Использование = Истина;
//		
//	Иначе
//		
//		ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
//		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
//		ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
//		ГруппаОтбора.Использование = Истина;
//		
//		ОтборПоСотруднику = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
//		ОтборПоСотруднику.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник");
//		ОтборПоСотруднику.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
//		ОтборПоСотруднику.ПравоеЗначение = Пользователь;
//		ОтборПоСотруднику.Использование = Истина;
//	КонецЕсли;
//КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура СоздатьСогласование(Команда)
	
	//если РаботаССерверами_ат.ПроверкаПометкиУдаления(Элементы.Список.ТекущаяСтрока) тогда 
	//	// HARDCODED!!!!
	//	СБ = Новый СообщениеПользователю;
	//	Сб.Текст = "Этот документ помечен на удаление! нельзя создавать документ согласования";
	//	СБ.Поле = "Элементы.Список.ТекущаяСтрока";
	//	СБ.Сообщить();
	//Иначе
	статус = Аренда_ат.ПолучитьПоследнийСтатусЗаявки(Элементы.Список.ТекущиеДанные.ссылка);
	Если статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.ВОбработке") 
		или  статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаТехническомСогласовании") 
		или  статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаФинансовомСогласовании")
		тогда
		
		ДокСогласования = Аренда_ат.ПолучаемАктивныйДокументСогласования(Элементы.Список.ТекущаяСтрока);
		Если ДокСогласования = Неопределено тогда
			
			ДокументСогласования = Аренда_ат.СоздатьСогласование(Элементы.Список.ТекущаяСтрока);
			ФормаНового	= ПолучитьФорму("Документ.Согласование_ат.Форма.ФормаДокумента"); 
			ДанныеФормы 	= ФормаНового.Объект;
			СоздатьСогласованиеЗаявкиНаСервере(ДанныеФормы); 
			копироватьДанныеФормы(ДанныеФормы, ФормаНового.Объект); 
			ФормаНового.Открыть();
			
			//Если НЕ ДокументСогласования = Неопределено тогда
			//	ОткрытьЗначение(ДокументСогласования);
			//	
			//Иначе
			//	Сообщить("ошибка: Не получена ссылка на документ согласования"+ Символы.ПС + 
			//	"возможно документ согласования уже был создан ранее кем-то другим!", СтатусСообщения.ОченьВажное);
			//КонецЕсли;
			
		Иначе 
			//ответ = Вопрос("У документа уже имеется активный документ согласования! открыть его?", РежимДиалогаВопрос.ДаНет);
			//Сообщить("статус изменен!, обновите список!");
			значения = Новый СписокЗначений;
			значения.Добавить("СоздатьНовый",	"Создать новый?");
			значения.Добавить("Открыть",		"Открыть согласование?");
			значения.Добавить("отмена",			"Отмена");
			
			///	ДокументСогласования = УчетУслуг_ат.СоздатьСогласование(Элементы.Список.ТекущаяСтрока);
			ответ = Вопрос("У документа уже имеется активный документ согласования!", Значения);
			Если ответ = "СоздатьНовый" тогда
				
				//	ДокументСогласования = УчетУслуг_ат.СоздатьСогласование(Элементы.Список.ТекущаяСтрока);
				ФормаНового	= ПолучитьФорму("Документ.Согласование_ат.Форма.ФормаДокумента"); 
				ДанныеФормы 	= ФормаНового.Объект;
				СоздатьСогласованиеЗаявкиНаСервере(ДанныеФормы); 
				копироватьДанныеФормы(ДанныеФормы, ФормаНового.Объект); 
				ФормаНового.Открыть();
				
				//ДокументСогласования = УчетУслуг_ат.СоздатьСогласование(Элементы.Список.ТекущаяСтрока);
				//Если НЕ ДокументСогласования = Неопределено тогда
				//	ОткрытьЗначение(ДокументСогласования);
				//	
				//Иначе
				//	Сообщить("ошибка: Не получена ссылка на документ согласования"+ Символы.ПС + 
				//	"возможно документ согласования уже был создан ранее кем-то другим!", СтатусСообщения.ОченьВажное);
				//КонецЕсли;
				
			ИначеЕсли ответ = "Открыть" тогда
				ОткрытьЗначение(ДокСогласования);		
			Иначе 
				
			КонецЕсли;
			
			
		КонецЕсли;
		
		
		
		
	ИначеЕсли статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.Отклонена") тогда
		Сообщить("Этот документ ОТКЛОНЕН!!!, Для него нельзя создать догласование",СтатусСообщения.ОченьВажное);
	ИначеЕсли статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаРассмотрении") тогда
		Сообщить("Этот документ не находится в обработке" + Символы.ПС + "Необходимо создать документ Выполение Заявки...");
	Иначе
		Сообщить("Этот документ прошел все стадии согласования, сейчас его статус " + статус ,СтатусСообщения.ОченьВажное);
		
		
	КонецЕсли;
	//КонецЕсли;
	
	//Элементы.Список.ТекущаяСтрока = неопределено;
	//Элементы.Список.ВыделенныеСтроки = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыполнениеЗаявки(Команда)
	док = Элементы.Список.ТекущаяСтрока;
	//если РаботаССерверами_ат.ПроверкаПометкиУдаления(док) тогда 
	//	СБ = Новый СообщениеПользователю;
	//	Сб.Текст = "Этот документ помечен на удаление! нельзя создавать документ выполнения";
	//	СБ.Поле = "Элементы.Список.ТекущаяСтрока";
	//	СБ.Сообщить();
	//Иначе 
		ДокументВыполнениеЗаявки = Аренда_ат.ПолучаемАктивныйДокументВыполненияЗаявки(Элементы.Список.ТекущаяСтрока);
		Если ДокументВыполнениеЗаявки = Неопределено тогда
			ФормаНового   = ПолучитьФорму("Документ.ВыполнениеЗаявкиНаАрендуПП_ат.Форма.ФормаДокумента"); 
			ДанныеФормы = ФормаНового.Объект;
			СоздатьВыполнениеЗаявкиНаСервере(ДанныеФормы); 
			копироватьДанныеФормы(ДанныеФормы, ФормаНового.Объект); 
			ФормаНового.Открыть();
			
		Иначе
			ответ = Вопрос("У документа уже есть подчиненный документ " + ДокументВыполнениеЗаявки + Символы.ПС + 
			" открыть его для просмотра?",РежимДиалогаВопрос.ДаНет);
			Если ответ = КодВозвратаДиалога.Да тогда
				ОткрытьЗначение(ДокументВыполнениеЗаявки);			
			КонецЕсли;
		КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   СоздатьВыполнениеЗаявкиНаСервере(ДанныеФормы)
	документ = Документы.ВыполнениеЗаявкиНаАрендуПП_ат.СоздатьДокумент();
	документ.Заполнить(Элементы.Список.ТекущаяСтрока);
	
	ЗначениеВДанныеФормы(документ, ДанныеФормы); 
	
КонецФункции

&НаСервере
Функция   СоздатьСогласованиеЗаявкиНаСервере(ДанныеФормы)
	
	документ = Документы.Согласование_ат.СоздатьДокумент();
	документ.Заполнить(Элементы.Список.ТекущаяСтрока);
	ЗначениеВДанныеФормы(документ, ДанныеФормы); 
	
КонецФункции

&НаКлиенте
Процедура ИзменитьСтатусВручную(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",Элементы.Список.ТекущиеДанные.ссылка);
	//ПараметрыФормы.Вставить("ОкноКлиентскогоПриложения", ВариантОткрытияОкна.ОтдельноеОкно);
	ОткрытьФорму("ОбщаяФорма.ФормаСменыСтатусаЗаявкиНаАренду_ат",ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно);
	
	//ИзменитьСтатусВручнуюНаСервере()
КонецПроцедуры

//&НаСервере
//Процедура ИзменитьСтатусВручнуюНаСервере()
//	//Параметры = Новый Структура;
//	//Параметры.Вставить("Документ",Элементы.Список.ТекущиеДанные.ссылка);
//	//ОткрытьФорму("ОбщаяФорма.ФормаСменыСтатусаЗаявки_ат",Параметры);
//КонецПроцедуры

//&НаСервере
//процедура СписокСоздатьСогласованиеНаСервере()
//	//		 
//	Если НЕ (РольДоступна("ПолныеПрава") или РольДоступна("ОрганизацияАдминистраторСерверов_ат")) тогда
//		Элементы.СоздатьСогласование.Видимость 	= ложь;
//	Иначе Элементы.СоздатьСогласование.Видимость 	= Истина;
//	конецЕсли;
//	
//КонецПроцедуры

////&НаСервере
////процедура СписокСоздатьВыполнениеЗаявкиНаСервере()
////	//		 
////	Если НЕ (РольДоступна("ПолныеПрава") или РольДоступна("ОрганизацияАдминистраторСерверов_ат")) тогда
////			Элементы.СоздатьВыполнениеЗаявки.Видимость = ложь;
////	Иначе 	Элементы.СоздатьВыполнениеЗаявки.Видимость = истина;
////		
////	конецЕсли;
////	
////КонецПроцедуры

//статус = СерверныеКоманды_ат.ПолучитьПоследнийСтатусЗаявки(Элементы.Список.ТекущиеДанные.ссылка);
//Если статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.ОжиданиеОплаты") тогда
//	ДокументВыполнение = УчетУслуг_ат.СоздатьВыполнениеЗаявки(Элементы.Список.ТекущаяСтрока);
//	Если НЕ ДокументВыполнение = Неопределено тогда
//		ОткрытьЗначение(ДокументВыполнение);
//	Иначе
//		Сообщить("Не получена ссылка на документ ВыполнениеЗаявки"+ Символы.ПС + 
//		"возможно документ уже был создан ранее кем-то другим!", СтатусСообщения.ОченьВажное);
//	КонецЕсли;
//Иначе Сообщить("статус изменен!, обновите список!");
//	Элементы.Список.ТекущаяСтрока = неопределено;
//КонецЕсли;

//&НаКлиенте
//Процедура СписокПриАктивизацииСтроки(Элемент)
////Если (Элементы.Список.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаРассмотрении") 
////или	  Элементы.Список.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаТехническомСогласовании")) 
//статус = СерверныеКоманды_ат.ПолучитьПоследнийСтатусЗаявки(Элементы.Список.ТекущиеДанные.ссылка);
//Если (статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаРассмотрении")
//или   статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаТехническомСогласовании"))
//И 	 Элементы.Список.ТекущиеДанные.ПометкаУдаления = ложь тогда	
//		//СписокСоздатьСогласованиеНаСервере();
//		Элементы.СоздатьСогласование.Видимость = СерверныеКоманды_ат.ПроверкаРолиСменыСтатусов();
//Иначе
//		Элементы.СоздатьСогласование.Видимость = ложь;
//конецЕсли;
//	
//		//Если Элементы.Список.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.ОжиданиеОплаты")
//Если Статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.ОжиданиеОплаты")
//тогда 
//	//СписокСоздатьВыполнениеЗаявкиНаСервере();
//	Элементы.СоздатьВыполнениеЗаявки.Видимость = СерверныеКоманды_ат.ПроверкаРолиСменыСтатусов();
//Иначе Элементы.СоздатьВыполнениеЗаявки.Видимость = ложь;
//КонецЕсли;
////Элементы.Список.ТекущаяСтрока = Неопределено;
//	Элементы.ИзменитьСтатусВручную.Видимость = СерверныеКоманды_ат.ПроверкаРолиСменыСтатусов();	
//
//Если Элементы.Список.ТекущиеДанные.ПометкаУдаления тогда
//	 Элементы.СоздатьНаОсновании.Доступность = ложь;
//Иначе
//	 Элементы.СоздатьНаОсновании.Доступность = Истина;
//	 
//	 Если статус = ПредопределенноеЗначение("Перечисление.ТипыСтатусовЗаявокНаАренду_ат.НаРассмотрении") тогда
//		 Элементы.СоздатьВыполнение.Доступность = Истина;
//	 Иначе
//		 Элементы.СоздатьВыполнение.Доступность = Ложь;
//	 КонецЕсли;
// КонецЕсли;
//	 
//КонецПроцедуры
