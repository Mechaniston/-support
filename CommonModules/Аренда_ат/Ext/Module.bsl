
&НаСервере
Функция   ФормированиеДопДоговора(Договор, Основание) Экспорт
	
	Если Не Договор.ПометкаУдаления тогда
		
		Попытка
			
			доп = Справочники.Договоры_ат.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(доп, Договор);
			доп.ДатаДоговора 		= ТекущаяДатаСеанса();
			доп.Родитель			= Договор.Ссылка;
			доп.Основание			= Основание;
			доп.Записать();
			
		Исключение
			Возврат ложь;
		КонецПопытки;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
Возврат Истина;

КонецФункции // ФормированиеДопДоговора()

&НаСервере
Функция   СоздатьСогласование(Основание, ТекущийДокумент) Экспорт
	
	статус = ПолучитьПоследнийСтатусЗаявки(Основание);
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаАрендуОборудования_ат") Тогда
		
		Если РаботаССерверами_ат.ПроверкаНаличияРесурсовДляВыделенногоСервера(Основание) = Неопределено тогда
			
			Сообщить("Не удалось создать документ согласования для документа " + Основание + Символы.ПС + 
			"нет ресурсов на сервере" + Символы.ПС + "документ согласования не сформирован!", СтатусСообщения.Важное);
			
			ЗаписьСтатуса = РегистрыСведений.СтатусыЗаявокНаАренду_ат.СоздатьНаборЗаписей();
			ЗаписьСтатуса.Отбор.Заявка.Установить(Основание);
			НаборСведений		 		= ЗаписьСтатуса.Добавить();
			НаборСведений.Заявка 		= Основание;
			НаборСведений.Период 		= ТекущаяДатаСеанса();
			НаборСведений.Статус 		= Перечисления.ТипыСтатусовЗаявокНаАренду_ат.Отклонена;	
			НаборСведений.Пользователь 	= ПараметрыСеанса.ТекущийПользователь;
			НаборСведений.Регистратор 	= Основание;
			ЗаписьСтатуса.Записать(Ложь);
			
			Возврат Неопределено;
			
		Иначе
			
			Попытка
				
				докСогласования = Документы.Согласование_ат.СоздатьДокумент();
				докСогласования.Дата = ТекущаяДатаСеанса();
				докСогласования.Основание = Основание;
				
				Если  Основание.Действие = Перечисления.ДействияПоЗаявкеНаАрендуОборудования_ат.АрендаНовогоСервера тогда
					докСогласования.ТекстСогласования = "" + Основание + Символы.ПС +" Заказан НОВЫЙ выделенный сервер со следующими параметрами:" + 
					Символы.ПС + "Кол-во процессоров: " 				+ Основание.ВыделениеCPU + 
					Символы.ПС + "Объём оперативной памяти (в Гб): " 	+ Основание.ОбъемПамяти + 
					Символы.ПС + "Объём дисковой памяти (в Гб): "		+ Основание.ОбъемHDD +
					Символы.ПС + "РольСервера: "						+ Основание.РольСервера;
					докСогласования.клиент = Основание.клиент;
				КонецЕсли;
				
				докСогласования.Записать();
				
				Если статус =  Перечисления.ТипыСтатусовЗаявокНаАренду_ат.НаРассмотрении тогда
					ЗаписьСтатуса = РегистрыСведений.СтатусыЗаявокНаАренду_ат.СоздатьНаборЗаписей();
					ЗаписьСтатуса.Отбор.Заявка.Установить(Основание);
					
					НаборСведений		 		= ЗаписьСтатуса.Добавить();
					НаборСведений.Заявка 		= Основание;
					НаборСведений.Период 		= ТекущаяДатаСеанса();
					НаборСведений.Статус 		= Перечисления.ТипыСтатусовЗаявокНаАренду_ат.НаТехническомСогласовании;
					НаборСведений.Пользователь 	= ПараметрыСеанса.ТекущийПользователь;
					НаборСведений.Регистратор 	= Основание;
					ЗаписьСтатуса.Записать(ложь);
				КонецЕсли;
				
				Возврат докСогласования.Ссылка;
				
			Исключение
				Сообщить("Не удалось создать документ согласования для докуммента " + Основание, СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаАрендуПП_ат") Тогда
		
		// запись статуса  - пишется только один раз - пока документ еще в статусе "в обработке"
		Если статус =  Перечисления.ТипыСтатусовЗаявокНаАренду_ат.ВОбработке тогда
			//ЗаписьСтатуса = РегистрыСведений.СтатусыЗаявокНаАренду_ат.СоздатьНаборЗаписей();
			//ЗаписьСтатуса.Отбор.Заявка.Установить(Основание);
			//
			//НаборСведений		 		= ЗаписьСтатуса.Добавить();
			//НаборСведений.Заявка 		= Основание;
			//НаборСведений.Период 		= ТекущаяДатаСеанса();
			//НаборСведений.Статус 		= Перечисления.ТипыСтатусовЗаявокНаАренду_ат.НаТехническомСогласовании;
			//НаборСведений.Пользователь 	= ПараметрыСеанса.ТекущийПользователь;
			//НаборСведений.Регистратор 	= Основание;
			
			//	докСогласования = Документы.Согласование_ат.СоздатьДокумент();
			//	докСогласования.Дата = ТекущаяДатаСеанса();
			//	докСогласования.Заявка = Основание;
			//	текст = "";
			//	Если Основание.Действие  = Перечисления.ДействиеПоЗаявкеНаАрендуПП_ат.ЗаказПП тогда
			//		для Каждого строка из Основание.АрендуемыеПП цикл
			//			 текст = текст + строка.ПоставкаПП + " " + строка.Количество +" шт."+ Символы.ПС; 
			//		КонецЦикла;
			//		докСогласования.ТекстСогласования = "" + Основание + Символы.ПС + текст;
			//		докСогласования.клиент = Основание.клиент;
			//	КонецЕсли;
			//	докСогласования.Записать();
			//ЗаписьСтатуса.Записать(ложь);
			
			текущийДокумент.Клиент 				= Основание.Клиент;
			текущийДокумент.ДокументОснование 	= Основание.Ссылка;
			//	текущийДокумент.Действие 			= Основание.Действие;
			
			текст = "Наобходимо согласовать заявку:" + Основание.Тикет +
				+ Символы.ПС + "Выполняется действие: " + Основание.действие + Символы.ПС
				+ "Для следующийх услуг: "+ Символы.ПС;
			
			Для Каждого ТекСтрокаАрендуемыеПП Из Основание.АрендуемыеПП Цикл
				текст = текст + ТекСтрокаАрендуемыеПП.ПоставкаПП + " кол-во: "+ТекСтрокаАрендуемыеПП.ПоставкаПП + Символы.ПС;;
				//НоваяСтрока.Количество 		 = ТекСтрокаАрендуемыеПП.Количество;
				//НоваяСтрока.ПродуктДляАренды = ТекСтрокаАрендуемыеПП.ПоставкаПП;
			КонецЦикла;
			
			ТекущийДокумент.ТекстСогласования = текст;
			текущийДокумент.Дата = ТекущаяДатаСеанса();
			//текущийДокумент.Тикет = Основание.Тикет;
			
			Попытка
				
				Если Основание.действие = Перечисления.ДействиеПоЗаявкеНаАрендуПП_ат.ЗаказПП тогда 
					//НовыйДокАренда 			= Документы.ВыполнениеЗаявкиНаАрендуПП_ат.СоздатьДокумент();
					//НовыйДокАренда.Действие = Основание.Действие;
					//НовыйДокАренда.Клиент 	= Основание.Клиент;
					//НовыйДокАренда.ДокументОснование = Основание.Ссылка;
					//Для Каждого ТекСтрокаАрендуемыеПП Из Основание.АрендуемыеПП Цикл
					//	НоваяСтрока = НовыйДокАренда.Поставки.Добавить();
					//	НоваяСтрока.Количество 		 = ТекСтрокаАрендуемыеПП.Количество;
					//	НоваяСтрока.ПродуктДляАренды = ТекСтрокаАрендуемыеПП.ПоставкаПП;
					//КонецЦикла;
					//НовыйДокАренда.Дата = ТекущаяДатаСеанса();
					//НовыйДокАренда.Тикет = Основание.Тикет;
					//НовыйДокАренда.Записать(РежимЗаписиДокумента.Запись);
					//Возврат НовыйДокАренда.Ссылка;
					
					//текущийДокумент.Клиент 				= Основание.Клиент;
					////текущийДокумент.ДокументОснование 	= Основание.Ссылка;
					//текущийДокумент.Действие 			= Основание.Действие;
					//Для Каждого ТекСтрокаАрендуемыеПП Из Основание.АрендуемыеПП Цикл
					//	НоваяСтрока = текущийДокумент.Поставки.Добавить();
					//	НоваяСтрока.Количество 		 = ТекСтрокаАрендуемыеПП.Количество;
					//	НоваяСтрока.ПродуктДляАренды = ТекСтрокаАрендуемыеПП.ПоставкаПП;
					//КонецЦикла;
					//текущийДокумент.Дата = ТекущаяДатаСеанса();
					//текущийДокумент.Тикет = Основание.Тикет;
					//текущийДокумент.Записать(РежимЗаписиДокумента.Запись);
					//Возврат текущийДокумент.Ссылка;
					
					текущийДокумент.Клиент 				= Основание.Клиент;
					текущийДокумент.ДокументОснование 	= Основание.Ссылка;
					//	текущийДокумент.Действие 			= Основание.Действие;
					
					текст	= "Наобходимо согласовать заявку:" + Основание.Тикет +
						+ Символы.ПС + "Выполняется действие: " + Основание.действие + Символы.ПС
						+ "Для следующийх услуг: "+ Символы.ПС;
					
					Для Каждого ТекСтрокаАрендуемыеПП Из Основание.АрендуемыеПП Цикл
						текст = текст + ТекСтрокаАрендуемыеПП.ПоставкаПП + " кол-во: "+ТекСтрокаАрендуемыеПП.ПоставкаПП + Символы.ПС;;
						//НоваяСтрока.Количество 		 = ТекСтрокаАрендуемыеПП.Количество;
						//НоваяСтрока.ПродуктДляАренды = ТекСтрокаАрендуемыеПП.ПоставкаПП;
					КонецЦикла;
					
					ТекущийДокумент.ТекстСогласования = текст;
					ТекущийДокумент.Дата = ТекущаяДатаСеанса();
					
				ИначеЕсли  Основание.действие = Перечисления.ДействиеПоЗаявкеНаАрендуПП_ат.ОтказПП тогда
					
					//ВАренде = Аренда_ат.ПолучитьППвАренде(
					//	РаботаССерверами_ат.ОпределениеДоговораПользователя(
					//		Основание.Клиент, Перечисления.ТипыДоговоров_ат.АрендаПрограммныхПродуктов, Истина));
					
					Возврат Неопределено;
					
				КонецЕсли;
			Исключение
				Сообщить("Ошибка в момент создания документа ""Выполнение заявки на аренду""", СтатусСообщения.ОченьВажное);
				Возврат Неопределено;
			КонецПопытки;
		ИначеЕсли статус =  Перечисления.ТипыСтатусовЗаявокНаАренду_ат.НаТехническомСогласовании тогда
			
			// статус не пишем, т.к. может быть несколько согласований одного типа
			//докСогласования = Документы.Согласование_ат.СоздатьДокумент();
			//докСогласования.Дата = ТекущаяДатаСеанса();
			//докСогласования.Заявка = Основание;
			//текст = "";
			//Если Основание.Действие  = Перечисления.ДействиеПоЗаявкеНаАрендуПП_ат.ЗаказПП тогда
			//	для Каждого строка из Основание.АрендуемыеПП цикл
			//		 текст = текст + строка.ПоставкаПП + " " + строка.Количество +" шт."+ Символы.ПС; 
			//	КонецЦикла;
			//	докСогласования.ТекстСогласования = "" + Основание + Символы.ПС + текст;
			
			//	докСогласования.клиент = Основание.клиент;
			//КонецЕсли;
			//докСогласования.Записать();
			
		КонецЕсли;
		
		//Возврат докСогласования.Ссылка;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   СоздатьВыполнениеЗаявки(Основание, текущийДокумент) Экспорт
	
	//Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаАрендуОборудования_ат") тогда	
	//	Попытка
	//		Если Основание.действие = Перечисления.ДействияПоЗаявкеНаАрендуОборудования_ат.АрендаНовогоСервера тогда	
	//			ВизСервер = РаботаССерверами_ат.ПроверкаНаличияРесурсовДляВыделенногоСервера(Основание);
	//			
	//			// создаем элемент справочника "выделенныеСерверы
	//			НовыйСервер = Справочники.ВыделенныеСерверы_ат.СоздатьЭлемент();
	//			НовыйСервер.VEID = 1 + РаботаССерверами_ат.ПолучитьПоследнийVEID() ;
	//			НовыйСервер.Наименование =  Основание.Hostname;
	//			НовыйСервер.ФизическийСервер = ВизСервер;
	//			НовыйСервер.Клиент = Основание.Клиент;
	//			НовыйСервер.Записать();
	//			
	//			// записываем параметры в регистр
	//			ЗаписьВРегистр = РегистрыСведений.ВыделенныеСерверы_ат.СоздатьНаборЗаписей();
	//			ЗаписьВРегистр.Отбор.ВыделенныйСервер.Установить(НовыйСервер.Ссылка);
	//			Ядро = ЗаписьВРегистр.Добавить();
	//			Ядро.ВыделенныйСервер = НовыйСервер.Ссылка;
	//			Ядро.Параметр = Перечисления.ТипыРесурсов_ат.Core;
	//			Ядро.Значение = Основание.ВыделениеCPU;   
	//			
	//			HD = ЗаписьВРегистр.Добавить();
	//			HD.ВыделенныйСервер = НовыйСервер.Ссылка;
	//			HD.Параметр = Перечисления.ТипыРесурсов_ат.HDD_ат;
	//			HD.Значение = СтрЗаменить(Основание.ОбъемHDD,символы.НПП,"");
	//			
	//			Память = ЗаписьВРегистр.Добавить();
	//			Память.ВыделенныйСервер = НовыйСервер.Ссылка;
	//			Память.Параметр = Перечисления.ТипыРесурсов_ат.RAM;
	//			Память.Значение = СтрЗаменить(Основание.ОбъемПамяти,символы.НПП,"");
	//			ЗаписьВРегистр.Записать(Истина);
	//			
	//			// создаем новый документ аренды
	//			НовыйДокАренда 			= Документы.ВыполнениеЗаявкиНаАрендуСервера_ат.СоздатьДокумент();
	//			НовыйДокАренда.Core 	= Основание.ВыделениеCPU;
	//			НовыйДокАренда.HDD_ат 	= Основание.ОбъемHDD;
	//			НовыйДокАренда.RAM 		= Основание.ОбъемПамяти;
	//			НовыйДокАренда.ВыделенныйСервер	= НовыйСервер.Ссылка;
	//			НовыйДокАренда.Клиент	= Основание.Клиент;
	//			НовыйДокАренда.Дата   	= ТекущаяДатаСеанса();
	//			НовыйДокАренда.Записать(РежимЗаписиДокумента.Запись);              
	//			// PS в документе аренды перед проведением проверим договор...
	//			
	//			//пишем статус заявки
	//			//ЗаписьСтатуса = РегистрыСведений.СтатусыЗаявокНаАренду_ат.СоздатьНаборЗаписей();
	//			//ЗаписьСтатуса.Отбор.Заявка.Установить(Основание.ссылка);
	//			//НаборСведений = ЗаписьСтатуса.Добавить();
	//			//НаборСведений.Заявка = Основание.ссылка;
	//			//НаборСведений.Период = ТекущаяДатаСеанса();
	//			//НаборСведений.Статус = Перечисления.ТипыСтатусовЗаявокНаАренду_ат.ВОбработке;
	//			//НаборСведений.Пользователь = Пользователи.ТекущийПользователь();
	//			//ЗаписьСтатуса.Записать(ложь);
	//		КонецЕсли;
	//		
	//		Возврат НовыйДокАренда.Ссылка;
	//		
	//	Исключение
	//		Возврат Неопределено;
	//	КонецПопытки;
	//ИначеЕсли 	ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаАрендуПП_ат") Тогда
	//	
	//	Попытка
	//		Если Основание.действие = Перечисления.ДействиеПоЗаявкеНаАрендуПП_ат.ЗаказПП тогда 
	//			
	//			//НовыйДокАренда 			= Документы.ВыполнениеЗаявкиНаАрендуПП_ат.СоздатьДокумент();
	//			//НовыйДокАренда.Действие = Основание.Действие;
	//			//НовыйДокАренда.Клиент 	= Основание.Клиент;
	//			//НовыйДокАренда.ДокументОснование = Основание.Ссылка;
	//			//Для Каждого ТекСтрокаАрендуемыеПП Из Основание.АрендуемыеПП Цикл
	//			//	НоваяСтрока = НовыйДокАренда.Поставки.Добавить();
	//			//	НоваяСтрока.Количество 		 = ТекСтрокаАрендуемыеПП.Количество;
	//			//	НоваяСтрока.ПродуктДляАренды = ТекСтрокаАрендуемыеПП.ПоставкаПП;
	//			//КонецЦикла;
	//			//НовыйДокАренда.Дата = ТекущаяДатаСеанса();
	//			//НовыйДокАренда.Тикет = Основание.Тикет;
	//			//НовыйДокАренда.Записать(РежимЗаписиДокумента.Запись);
	//			//Возврат НовыйДокАренда.Ссылка;
	//			
	//			текущийДокумент.Клиент 				= Основание.Клиент;
	//			текущийДокумент.ДокументОснование 	= Основание.Ссылка;
	//			текущийДокумент.Действие 			= Основание.Действие;
	//			
	//			Для Каждого ТекСтрокаАрендуемыеПП Из Основание.АрендуемыеПП Цикл
	//				НоваяСтрока = текущийДокумент.Поставки.Добавить();
	//				НоваяСтрока.Количество 		 = ТекСтрокаАрендуемыеПП.Количество;
	//				НоваяСтрока.ПродуктДляАренды = ТекСтрокаАрендуемыеПП.ПоставкаПП;
	//			КонецЦикла;
	//			
	//			текущийДокумент.Дата = ТекущаяДатаСеанса();
	//			текущийДокумент.Тикет = Основание.Тикет;
	//			//текущийДокумент.Записать(РежимЗаписиДокумента.Запись);
	//			//Возврат текущийДокумент.Ссылка;
	//			
	//		ИначеЕсли  Основание.действие = Перечисления.ДействиеПоЗаявкеНаАрендуПП_ат.ОтказПП Тогда
	//			
	//			 ВАренде = Аренда_ат.ПолучитьППвАренде(РаботаССерверами_ат.ОпределениеДоговораПользователя(
	//			 	Основание.Клиент,Перечисления.ТипыДоговоров_ат.АрендаПрограммныхПродуктов, Истина));

	//			Возврат Неопределено;
	//			
	//		КонецЕсли;
	//	Исключение
	//		Сообщить("Ошибка в момент создания документа ""Выполнение заявки на аренду""", СтатусСообщения.ОченьВажное);
	//			Возврат Неопределено;
	//	КонецПопытки;	
	//	
	//КонецЕсли;
	
КонецФункции // СоздатьВыполнениеЗаявки()

&НаСервере
Функция   ПолучаемАктивныйДокументВыполненияЗаявки(ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаАрендуОборудования_ат") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыполнениеЗаявкиНаАрендуОборудования_ат.Ссылка
		|ИЗ
		|	Документ.ВыполнениеЗаявкиНаАрендуОборудования_ат КАК ВыполнениеЗаявкиНаАрендуСервера_ат
		|ГДЕ
		|	ВыполнениеЗаявкиНаАрендуОборудования_ат.ПометкаУдаления = &ПометкаУдаления
		|	И ВыполнениеЗаявкиНаАрендуОборудования_ат.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Неопределено;
		Иначе 
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаАрендуПП_ат") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыполнениеЗаявкиНаАрендуПП_ат.Ссылка,
		|	ВыполнениеЗаявкиНаАрендуПП_ат.Клиент,
		|	ВыполнениеЗаявкиНаАрендуПП_ат.Проведен,
		|	ВыполнениеЗаявкиНаАрендуПП_ат.Действие
		|ИЗ
		|	Документ.ВыполнениеЗаявкиНаАрендуПП_ат КАК ВыполнениеЗаявкиНаАрендуПП_ат
		|ГДЕ
		|	ВыполнениеЗаявкиНаАрендуПП_ат.ПометкаУдаления = &ПометкаУдаления
		|	И ВыполнениеЗаявкиНаАрендуПП_ат.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.УстановитьПараметр("ПометкаУдаления", ложь);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если РезультатЗапроса.Пустой() тогда
			Возврат Неопределено;
		Иначе
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Возврат ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

&НаСервере
Функция   ПолучаемАктивныйДокументСогласования(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Согласование_ат.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Согласование_ат КАК Согласование_ат
		|ГДЕ
		|	Согласование_ат.ПометкаУдаления = &ПометкаУдаления
		|	И Согласование_ат.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции // ПолучаемАктивныйДокументСогласования()

&НаСервере
Функция   ПроверкаПометкиУдаления(ДокументОснование) Экспорт
	
	Если ДокументОснование.ПометкаУдаления = Истина Тогда
		Возврат Истина;
	Иначе 
		Возврат ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция   ПолучитьПоследнийСтатусЗаявки(ДокОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыЗаявокНаАренду_атСрезПоследних.Заявка,
	|	СтатусыЗаявокНаАренду_атСрезПоследних.Статус,
	|	СтатусыЗаявокНаАренду_атСрезПоследних.Пользователь
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаАренду_ат.СрезПоследних КАК СтатусыЗаявокНаАренду_атСрезПоследних
	|ГДЕ
	|	СтатусыЗаявокНаАренду_атСрезПоследних.Заявка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", ДокОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Статус;
	КонецЦикла;
	
КонецФункции

Функция   ПолучитьППвАренде(Договор, УказыватьНоменклатуру = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АрендаПП.ПродуктДляАренды КАК ПродуктДляАренды,
	|	АрендаПП.РесурсОстаток КАК Остаток,
	|	АрендаПП.Клиент КАК Клиент,
	|	АрендаПП.ПродуктДляАренды.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.АрендаПП_ат.Остатки КАК АрендаПП
	|ГДЕ
	|	АрендаПП.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		Возврат Неопределено;
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("ПродуктДляАренды",, "ПродуктДляАренды");
		Если УказыватьНоменклатуру = Истина Тогда
			Таблица.Колонки.Добавить("Номенклатура",, "Номенклатура");
		КонецЕсли;
		Таблица.Колонки.Добавить("ВАренде",,"В Аренде");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			стрТаб = Таблица.Добавить();
			стрТаб.ПродуктДляАренды 	= ВыборкаДетальныеЗаписи.ПродуктДляАренды;
			стрТаб.ВАренде 				= - ВыборкаДетальныеЗаписи.Остаток;
			Если УказыватьНоменклатуру Тогда
				стрТаб.Номенклатура 	= ВыборкаДетальныеЗаписи.Номенклатура;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьППвАренде

Функция   ПолучитьОборудованиеВАренде(Договор, ФизСервер = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетРесурсов_атОстатки.ВыделенныйСервер,
	|	УчетРесурсов_атОстатки.НаименованиеРесурса,
	|	УчетРесурсов_атОстатки.ЗначениеРесурсаОстаток,
	|	УчетРесурсов_атОстатки.Договор,
	|	УчетРесурсов_атОстатки.Сервер КАК ХостСервер
	|ИЗ
	|	РегистрНакопления.УчетРесурсовСерверов_ат.Остатки КАК УчетРесурсов_атОстатки
	|ГДЕ
	|	УчетРесурсов_атОстатки.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("ВыделенныйСервер", ,"Выделенный Сервер");
		Таблица.Колонки.Добавить("Ресурс",, "Ресурс");
		Таблица.Колонки.Добавить("Количество",, "Кол-во");
		
		Если ФизСервер = Истина Тогда
			Таблица.Колонки.Добавить("ХостСервер",, "Хост Сервер");
		КонецЕсли;
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			стрТаб = Таблица.Добавить();
			стрТаб.ВыделенныйСервер = ВыборкаДетальныеЗаписи.ВыделенныйСервер;
			стрТаб.Ресурс 			= ВыборкаДетальныеЗаписи.НаименованиеРесурса;
			стрТаб.количество 		= - ВыборкаДетальныеЗаписи.ЗначениеРесурсаОстаток;
			Если ФизСервер Тогда
				стрТаб.ХостСервер 	= ВыборкаДетальныеЗаписи.ХостСервер;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат  Таблица;
	
КонецФункции // ПолучитьОборудованиеВАренде()
