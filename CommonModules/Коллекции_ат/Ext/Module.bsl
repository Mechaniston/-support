
////////////////////////////////////////////////////////////////////////////////
// Работа с коллекциями
// 
// Первый автор - Вячеслав 'Mechanist' А. Павлов (с) с 2008 г.
//
//////////////////////////////////////////////////////////////////////////////// 


// Копирует значение Источник (или элементы коллекции Источник) в Применик, согласно Режиму.
// Коллекция Приемник при этом не очищается.
// Режимы определяются строкой с указанием переносимых свойств элементов, а также их порядка.
// Отсутствие строки Режим означает режим копирования "по умолчанию" для данных типов Источника
// (далее - ТИ) и Приемника (ТП).
// В строке режима могут быть следующие символы:
// 		V - Value (Значение)
// 		P - Presentation (Представление)
// 		K - Key (Ключ)
// 		I - Item (Элемент)
// Пример строки режима - "PV". В зависимости от ТИ и ТП (СЗ - СписокЗначений,
// СС - Структура/Соответствие, М - Массив):
// 		ТИ		ТП		Источник -> Приемник
//		СЗ		СЗ		Приемник.Добавить(ЭлементКоллекции.Представление, ЭлементКоллекции.Значение);
// 		СЗ		СС      Приемник.Вставить(ЭлементКоллекции.Представление, ЭлементКоллекции.Значение);
// 		СЗ		 М		Приемник.Добавить(ЭлементКоллекции.Представление);
// 		СС		СЗ		копирование не будет осуществлено из-за некорректного режима
// 		СС		СС		копирование не будет осуществлено из-за некорректного режима
// 		СС		 М		копирование не будет осуществлено из-за некорректного режима
// 		 М		СЗ		КоллекцияПриемник.Добавить(ЭлементКоллекции)
// 		 М		СС		КоллекцияПриемник.Вставить(ЭлементКоллекции)
// 		 М		 М		КоллекцияПриемник.Добавить(ЭлементКоллекции)
Процедура СкопироватьВКоллекцию(Источник, КоллекцияПриемник, Режим = "") Экспорт
	
	КИ_ТипЗнч = ТипЗнч(Источник);
	Если КИ_ТипЗнч = Тип("СписокЗначений") Тогда
		КИ_Тип = 1;
	ИначеЕсли КИ_ТипЗнч = Тип("Массив") Тогда
		КИ_Тип = 2;
	ИначеЕсли КИ_ТипЗнч = Тип("Соответствие") Или КИ_ТипЗнч = Тип("Структура") Тогда
		КИ_Тип = 3;
	Иначе
		КИ_Тип = 0;
	КонецЕсли;
	КП_ТипЗнч = ТипЗнч(КоллекцияПриемник);
	Если КП_ТипЗнч = Тип("СписокЗначений") Тогда
		КП_Тип = 1;
	ИначеЕсли КП_ТипЗнч = Тип("Массив") Тогда
		КП_Тип = 2;
	ИначеЕсли КП_ТипЗнч = Тип("Соответствие") Или КП_ТипЗнч = Тип("Структура") Тогда
		КП_Тип = 3;
	Иначе
		ВызватьИсключение "Некорректный тип параметра КоллекцияПриемник при вызове процедуры 'СкопироватьКоллекцию' из ОМ.Коллекции_ат";
	КонецЕсли;
	
	Режим_ = ВРег(Режим);
	
	Если 		КИ_Тип = 1 И КП_Тип = 1 И Режим_ = "" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Значение, ЭлементКоллекции.Представление,
				ЭлементКоллекции.Пометка, ЭлементКоллекции.Картинка);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип = 1 И Режим_ = "VP" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Значение, ЭлементКоллекции.Представление);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип = 1 И Режим_ = "PV" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Представление, ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип <> 3 И Лев(Режим_, 1) <> "P" И Режим_ <> "I" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип <> 3 И Лев(Режим_, 1) = "P" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Представление);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип <> 3 И Режим_ = "I" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип = 3 И (Режим_ = "" Или Режим_ = "VP") Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Значение, ЭлементКоллекции.Представление);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип = 3 И Режим_ = "PV" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Представление, ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип = 3 И Режим_ = "V" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип = 3 И Режим_ = "P" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Представление);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 1 И КП_Тип = 3 И Режим_ = "I" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 2 И КП_Тип <> 3 Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 2 И КП_Тип = 3 Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип = 1 И (Режим_ = "" Или Режим_ = "VK") Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Значение, ЭлементКоллекции.Ключ);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип = 1 И Режим_ = "KV" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип <> 3 И Лев(Режим_, 1) <> "K" И Режим_ <> "I" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип <> 3 И Лев(Режим_, 1) = "K" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип <> 3 И Режим_ = "I" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Добавить(ЭлементКоллекции);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип = 3 И (Режим_ = "" Или Режим_ = "VK") Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Значение, ЭлементКоллекции.Ключ);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип = 3 И Режим_ = "KV" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип = 3 И Режим_ = "K" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Ключ);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип = 3 И Режим_ = "V" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции.Значение);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 3 И КП_Тип = 3 И Режим_ = "I" Тогда
		Для Каждого ЭлементКоллекции Из Источник Цикл
			КоллекцияПриемник.Вставить(ЭлементКоллекции);
		КонецЦикла;
	ИначеЕсли 	КИ_Тип = 0 И КП_Тип = 1 Тогда
		КоллекцияПриемник.Добавить(Источник);
	ИначеЕсли 	КИ_Тип = 0 И КП_Тип = 2 Тогда
		КоллекцияПриемник.Добавить(Источник);
	ИначеЕсли 	КИ_Тип = 0 И КП_Тип = 3 Тогда
		КоллекцияПриемник.Вставить(Источник);
	Иначе
		ВызватьИсключение "Некорректное сочетание типов параметров Источник и КоллекцияПриемник,
			|и значения Режима при вызове процедуры 'СкопироватьКоллекцию' из ОМ.Коллекции_ат";
	КонецЕсли;
	
КонецПроцедуры

Функция   СкопироватьВМассив(Источник, Режим = "") Экспорт 
	
	КоллекцияПриемник = Новый Массив;
	СкопироватьВКоллекцию(Источник, КоллекцияПриемник, Режим);
	
	Возврат КоллекцияПриемник;
	
КонецФункции

Функция   СкопироватьВСписокЗначений(Источник, Режим = "") Экспорт 
	
	КоллекцияПриемник = Новый СписокЗначений;
	СкопироватьВКоллекцию(Источник, КоллекцияПриемник, Режим);
	
	Возврат КоллекцияПриемник;
	
КонецФункции

Функция   СкопироватьВСтруктуру(Источник, Режим = "") Экспорт 
	
	КоллекцияПриемник = Новый Структура;
	СкопироватьВКоллекцию(Источник, КоллекцияПриемник, Режим);
	
	Возврат КоллекцияПриемник;
	
КонецФункции

Функция   СкопироватьВСоответствие(Источник, Режим = "") Экспорт 
	
	КоллекцияПриемник = Новый Соответствие;
	СкопироватьВКоллекцию(Источник, КоллекцияПриемник, Режим);
	
	Возврат КоллекцияПриемник;
	
КонецФункции

// Параметры:
//	РезультатЗапросаИлиТаблица - результат запроса или таблица выгруженная из него, в котором есть поля с наименованиями
//			подходящими для загрузки в СписокЗначений (как минимум "Значение")
//	ИмяКолонкиЗначение = "Значение", ИмяКолонкиПредставление = "Представление", ИмяКолонкиПометка = "Пометка"
Функция   ПолучитьСписокЗначенийИзЗапроса(РезультатЗапросаИлиТаблица, ИмяКолонкиЗначение = "Значение", ИмяКолонкиПредставление = "Представление",
	ИмяКолонкиПометка = "Пометка") Экспорт
	
	Если НЕ ТипЗнч(РезультатЗапросаИлиТаблица) = Тип("ТаблицаЗначений") Тогда
		ТаблицаРезультатаЗапроса = РезультатЗапросаИлиТаблица.Выгрузить();
	Иначе
		ТаблицаРезультатаЗапроса = РезультатЗапросаИлиТаблица;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	
 	Если ТаблицаРезультатаЗапроса.Колонки.Найти(ИмяКолонкиЗначение) = Неопределено Тогда
		Возврат Список;
	КонецЕсли;
	
	КопироватьПредставление = (ТаблицаРезультатаЗапроса.Колонки.Найти(ИмяКолонкиПредставление) <> Неопределено);
	КопироватьПометку = (ТаблицаРезультатаЗапроса.Колонки.Найти(ИмяКолонкиПометка) <> Неопределено);
	
	Для Каждого Строка Из ТаблицаРезультатаЗапроса Цикл
		Список.Добавить(Строка[ИмяКолонкиЗначение],
			?(КопироватьПредставление, Строка[ИмяКолонкиПредставление], ""),
			?(КопироватьПометку, Строка[ИмяКолонкиПометка], Ложь));
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Результат - двухмерный массив. Первое измерение - все возможные неповторяющиеся комбинации
// (с учетом того, что перестановка элементов в комбинации отдельной комбинацией не считается,
// т.е. 1-2-3 и 2-1-3 считаются одинаковыми). Второе - собственно сами элементы МассиваЭлементов
// входящие в комбинацию.
// Количество комбинаций - сумма всех индексов элементов МассиваЭлементов,
// т.е. если МассивЭлементов.Количество() = 4, то результирующий массив будет иметь размерность
// 1+2+3+4 = 10, для 20 элементов будет уже 210 комбинаций.
// Размерность вложенных массивов - от 1 до МассивЭлементов.Количество().
Функция   ПолучитьМассивКомбинаций(МассивЭлементов) Экспорт
	
	Результат = Новый Массив;
	
	КоличествоЭлементов = МассивЭлементов.Количество();
	
	НулеваяБинарнаяСтрока = "";
	Для Индекс = 1 По КоличествоЭлементов Цикл
		НулеваяБинарнаяСтрока = НулеваяБинарнаяСтрока + "0";
	КонецЦикла;
	
	БинарнаяСтрока = "";
	
	Для Комбинация = 1 По Pow(2, КоличествоЭлементов) - 1 Цикл
		ИндексЕдиницы = СтрДлина(БинарнаяСтрока);
		Пока ИндексЕдиницы > 0 И Сред(БинарнаяСтрока, ИндексЕдиницы, 1) = "1" Цикл
			ИндексЕдиницы = ИндексЕдиницы - 1;
		КонецЦикла;
		
		БинарнаяСтрока = ?(ИндексЕдиницы > 0, Лев(БинарнаяСтрока, ИндексЕдиницы - 1), "") + "1"
			+ Прав(НулеваяБинарнаяСтрока, СтрДлина(БинарнаяСтрока) - ИндексЕдиницы);
		
		ДлинаБС = СтрДлина(БинарнаяСтрока);
		
		Результат_ = Новый Массив();
		Для Индекс = 1 По ДлинаБС Цикл
			Если Сред(БинарнаяСтрока, Индекс, 1) = "1" Тогда
				Результат_.Добавить(МассивЭлементов[ДлинаБС - Индекс]);
			КонецЕсли;
		КонецЦикла;
		Результат.Добавить(Результат_);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Результат - двухмерный массив. Первое измерение - все возможные неповторяющиеся комбинации
// (с учетом того, что перестановка элементов в комбинации отдельной комбинацией не считается,
// т.е. 1-2-3 и 2-1-3 считаются одинаковыми). Второе - собственно сами элементы МассиваЭлементов
// входящие в комбинацию.
// Количество комбинаций - сумма всех индексов элементов МассиваЭлементов,
// т.е. если МассивЭлементов.Количество() = 4, то результирующий массив будет иметь размерность
// 1+2+3+4 = 10, для 20 элементов будет уже 210 комбинаций.
// Размерность вложенных массивов - от 1 до МассивЭлементов.Количество().
Функция   ПолучитьМассивКомбинаций_(МассивЭлементов) Экспорт
	
	Результат = Новый Массив;
	
	КоличествоЭлементов = МассивЭлементов.Количество();
	
	НулеваяБинарнаяСтрока = "";
	Для Индекс = 1 По КоличествоЭлементов Цикл
		НулеваяБинарнаяСтрока = НулеваяБинарнаяСтрока + "0";
	КонецЦикла;
	
	БинарнаяСтрока = "";
	
	Для Комбинация = 1 По Pow(2, КоличествоЭлементов) - 1 Цикл
		ИндексЕдиницы = СтрДлина(БинарнаяСтрока);
		Пока ИндексЕдиницы > 0 И Сред(БинарнаяСтрока, ИндексЕдиницы, 1) = "1" Цикл
			ИндексЕдиницы = ИндексЕдиницы - 1;
		КонецЦикла;
		
		БинарнаяСтрока = ?(ИндексЕдиницы > 0, Лев(БинарнаяСтрока, ИндексЕдиницы - 1), "") + "1"
			+ Прав(НулеваяБинарнаяСтрока, СтрДлина(БинарнаяСтрока) - ИндексЕдиницы);
		
		ДлинаБС = СтрДлина(БинарнаяСтрока);
		
		Результат_ = Новый Массив();
		Для Индекс = 1 По ДлинаБС Цикл
			Если Сред(БинарнаяСтрока, Индекс, 1) = "1" Тогда
				Результат_.Добавить(МассивЭлементов[ДлинаБС - Индекс]);
			КонецЕсли;
		КонецЦикла;
		Результат.Добавить(Результат_);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//// Результат - двухмерный массив. Первое измерение - все возможные неповторяющиеся комбинации
//// (с учетом того, что перестановка элементов в комбинации отдельной комбинацией не считается,
//// т.е. 1-2-3 и 2-1-3 считаются одинаковыми). Второе - собственно сами элементы МассиваЭлементов
//// входящие в комбинацию.
//// Количество комбинаций - сумма всех индексов элементов МассиваЭлементов,
//// т.е. если МассивЭлементов.Количество() = 4, то результирующий массив будет иметь размерность
//// 1+2+3+4 = 10, для 20 элементов будет уже 210 комбинаций.
//// Размерность вложенных массивов - от 1 до МассивЭлементов.Количество().
//Функция   ПолучитьМассивКомбинаций_(МассивЭлементов) Экспорт
//	
//	Результат = Новый Массив;
//	
//	КоличествоЭлементов = МассивЭлементов.Количество();
//	
//	НулеваяБинарнаяСтрока = "";
//	Для Индекс = 1 По КоличествоЭлементов Цикл
//		НулеваяБинарнаяСтрока = НулеваяБинарнаяСтрока + "0";
//	КонецЦикла;
//	
//	БинарнаяСтрока = "";
//	
//	Для Каждого ЭлементМассиваЭлементов Из МассивЭлементов Цикл
//		
//		Результат_ = Новый Массив();
//		Результат_.Добавить(ЭлементМассиваЭлементов);
//		Результат.Добавить(Результат_);
//				
//	КонецЦикла;
//	
//	ПолучитьМассивКомбинацийРекурсивно(МассивЭлементов, Результат, 2);
//	
//	//Для Комбинация = 1 По Pow(2, КоличествоЭлементов) - 1 Цикл
//	//	ИндексЕдиницы = СтрДлина(БинарнаяСтрока);
//	//	Пока ИндексЕдиницы > 0 И Сред(БинарнаяСтрока, ИндексЕдиницы, 1) = "1" Цикл
//	//		ИндексЕдиницы = ИндексЕдиницы - 1;
//	//	КонецЦикла;
//	//	
//	//	БинарнаяСтрока = ?(ИндексЕдиницы > 0, Лев(БинарнаяСтрока, ИндексЕдиницы - 1), "") + "1"
//	//		+ Прав(НулеваяБинарнаяСтрока, СтрДлина(БинарнаяСтрока) - ИндексЕдиницы);
//	//	
//	//	ДлинаБС = СтрДлина(БинарнаяСтрока);
//	//	
//	//	Результат_ = Новый Массив();
//	//	Для Индекс = 1 По ДлинаБС Цикл
//	//		Если Сред(БинарнаяСтрока, Индекс, 1) = "1" Тогда
//	//			Результат_.Добавить(МассивЭлементов[ДлинаБС - Индекс]);
//	//		КонецЕсли;
//	//	КонецЦикла;
//	//	Результат.Добавить(Результат_);
//	//КонецЦикла;
//	//
//	//Возврат Результат;
//	
//КонецФункции

//Процедура ПолучитьМассивКомбинацийРекурсивно(МассивЭлементов, Результат, Знач ЧислоЭлементовКомбинации, МассивКомбинации = Неопределено)
//	
//	Если ЧислоЭлементовКомбинации < МассивЭлементов.Количество Тогда
//	
//		Для Каждого ЭлементМассиваЭлементов Из МассивЭлементов Цикл
//			
//			Если МассивКомбинации = Неопределено Тогда
//				
//				Результат_ = Новый Массив();
//				Результат_.Добавить(ЭлементМассиваЭлементов);
//				
//			Иначе
//				
//				Результат_ = МассивКомбинации;
//				
//			КонецЕсли;
//			
//			ПолучитьМассивКомбинацийРекурсивно(МассивЭлементов, Результат, ЧислоЭлементовКомбинации + 1, Результат_);
//			Результат.Добавить(Результат_);
//			
//		КонецЦикла;
//		
//	КонецЕсли;	
//	
//	ПолучитьМассивКомбинацийРекурсивно(МассивЭлементов, Результат_, ЧислоЭлементовКомбинации + 1);
//	
//КонецПроцедуры
