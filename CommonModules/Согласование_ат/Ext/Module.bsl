
Процедура ДобавитьОбъектСогласованияВСогласование(Задание, Заявка, Согласование, ПланируемаяДлительностьЗадания = Неопределено) Экспорт //!!!!!!
	
	Если Согласование = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланируемаяДлительностьЗадания = Неопределено Тогда
		
		СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
		Если СвойстваЗадания.Свойство("ПланируемоеВремяВыполнения") Тогда
			ПланируемаяДлительностьЗадания = СвойстваЗадания.ПланируемоеВремяВыполнения;
		Иначе
			ПланируемаяДлительностьЗадания = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	СогласованиеОбъект = Согласование.ПолучитьОбъект();
	
	НоваяСтрока = СогласованиеОбъект.ОбъектыСогласования.Добавить();
	
	НоваяСтрока.Задание = Задание;
	НоваяСтрока.Заявка = Заявка;
	НоваяСтрока.СодержаниеРабот = Задание.СодержаниеРабот;
	НоваяСтрока.Количество = ПланируемаяДлительностьЗадания;
	//НоваяСтрока.КоличествоДляОтображения =
	//	ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(ПланируемаяДлительностьЗадания);
	
	СтрокаСодержаниеСогласования = СогласованиеОбъект.СодержаниеСогласования.Найти(Задание.СодержаниеРабот,
		"СодержаниеРабот");
	
	Если НЕ ЗначениеЗаполнено(Согласование.Дата) Тогда
		
		СогласованиеОбъект.Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	Договор = Финансы_ат.ПолучитьДоговорПоЗаявке(Заявка, СогласованиеОбъект.Дата);
	Проект = Заявка.Проект;
	
	Если Согласование.Договор.Пустая() Тогда
		
		СогласованиеОбъект.Договор = Договор;
		СогласованиеОбъект.Проект = Проект;
		
	ИначеЕсли Согласование.Договор <> Договор ИЛИ Согласование.Проект <> Проект Тогда
		
		Сообщить("Нельзя добавить Задание в данное Согласование, так как не совпадают Проект и/или Договор!", СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;
	
	Договор = СогласованиеОбъект.Договор;
	
	Цена = Финансы_ат.ПолучитьЦенуНоменклатуры(СогласованиеОбъект.Дата, Задание.СодержаниеРабот.Номенклатура,
		Договор.Организация,
		Договор.ВидДоговора,
		Договор.Владелец, Договор, Проект);
	
	Если СтрокаСодержаниеСогласования = Неопределено Тогда
		
		СтрокаСодержаниеСогласования = СогласованиеОбъект.СодержаниеСогласование.Добавить();
		
		Количество = ПланируемаяДлительностьЗадания;
		
	Иначе
		
		Количество = СтрокаСодержаниеСогласования.КоличествоПоСубъекту + ПланируемаяДлительностьЗадания;
		
	КонецЕсли;
	
	КоличествоДляОтображения = ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(Количество);
	КоличествоДесятичнойДробью = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(Количество);
	
	СтрокаСодержаниеСогласования.Количество = Количество;
	//СтрокаСодержаниеСогласования.КоличествоДляОтображения = КоличествоДляОтображения;
	СтрокаСодержаниеСогласования.Сумма = КоличествоДесятичнойДробью * ?(Цена = Неопределено, 0, Цена);
	
	СогласованиеОбъект.Записать();
	
КонецПроцедуры

Функция   ПолучитьОткрытоеСогласование(Заявка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Согласование_ат.Ссылка
	|ИЗ
	|	Документ.Согласование_ат КАК Согласование_ат
	|ГДЕ
	|	Согласование_ат.Заявка = &Заявка
	|	И Согласование_ат.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.Подготовка)
	|	И НЕ Согласование_ат.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция   ЗаданиеНужноСогласовывать(Задание, ТехническоеСогласование = Истина) Экспорт //!!!!!HOTFIX
	
	Если НЕ Константы.ИспользоватьСогласования_ат.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Задание.СодержаниеРабот.Исправление ИЛИ НЕ Задание.СодержаниеРабот.ТребуетсяСогласование Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК УжеЕстьСогласованиеПоДанномуЗаданию
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	КосвенныеСвязиЗаданий_ат.Задание = &Ссылка
	|	И КосвенныеСвязиЗаданий_ат.Согласование <> ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Задание);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда;
		
		Возврат Ложь;
		
	Иначе
		
		Заявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
		
		Если Заявки.Количество() > 0 Тогда
			Возврат ЗаявкуНужноСогласовывать(Заявки[0], ТехническоеСогласование);
		КонецЕсли;
		
	КонецЕсли;
	
	//!!!TODO - это надо делать не тут и не так, а при сохранении Задания ему должно назначаться специальный ВидДеятельности по
	// РС.ПолитикаКраткосрочныхЗаданий_ат, который уже и определяет тот факт, что данное Задание не согласуемое (точнее - не оплачиваемое)
	//Заявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	//Если Заявки.Количество() > 0 Тогда
	//	Заявка = Заявки[0];
	//Иначе
	//	Возврат;
	//КонецЕсли;
	//
	//	Договор = Финансы_ат.ПолучитьДоговорПоЗаявке(Заявка, ТекущаяДатаСеанса());
	//	
	//	КраткосрочноеВремя = 0;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст =
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	ПолитикаКраткосрочныхЗаданий_ат.КраткосрочноеВремя
	//	|ИЗ
	//	|	РегистрСведений.ПолитикаКраткосрочныхЗаданий_ат КАК ПолитикаКраткосрочныхЗаданий_ат
	//	|ГДЕ
	//	|	ПолитикаКраткосрочныхЗаданий_ат.Контрагент = &Контрагент
	//	|	И (ПолитикаКраткосрочныхЗаданий_ат.Договор В ИЕРАРХИИ (&Договор)
	//	|		ИЛИ ПолитикаКраткосрочныхЗаданий_ат.Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка))";
	//	
	//	Запрос.УстановитьПараметр("Контрагент", Заявка.Клиент);
	//	Запрос.УстановитьПараметр("Договор", Договор);
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	Если Выборка.Следующий() Тогда
	//		КраткосрочноеВремя = Выборка.КраткосрочноеВремя;
	//	Иначе
	//		Возврат ЗаявкуНужноСогласовывать(Заявка, ТехническоеСогласование);
	//	КонецЕсли;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст =
	//	"ВЫБРАТЬ ПЕРВЫЕ 1
	//	|	СвойстваЗаданий_ат.ПланируемоеВремяВыполнения КАК ПланируемоеВремяВыполнения
	//	|ИЗ
	//	|	РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	//	|ГДЕ
	//	|	СвойстваЗаданий_ат.Ссылка = &Ссылка";
	//	
	//	Запрос.УстановитьПараметр("Ссылка", Задание);
	//	
	//	РезультатЗапроса = Запрос.Выполнить();
	//	
	//	Если РезультатЗапроса.Пустой() Тогда
	//		
	//		Возврат ЗаявкуНужноСогласовывать(Заявка, ТехническоеСогласование);
	//		
	//	Иначе
	//		
	//		Выборка = РезультатЗапроса.Выбрать();
	//		Выборка.Следующий();
	//		
	//		Возврат (Выборка.ПланируемоеВремяВыполнения > КраткосрочноеВремя) И ЗаявкуНужноСогласовывать(Заявка, ТехническоеСогласование);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецФункции

Функция   ЗаявкуНужноСогласовывать(Заявка, ТехническоеСогласование = Истина) Экспорт //!!!!!HOTFIX
	
	Если НЕ Константы.ИспользоватьСогласования_ат.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверка на наличие Согласующих
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Индикатор
	|ИЗ
	|	РегистрСведений.УведомлятьИСогласовывать_ат КАК УведомлятьИСогласовывать_ат
	|ГДЕ
	|	УведомлятьИСогласовывать_ат.Клиент = &Клиент
	|	И (УведомлятьИСогласовывать_ат.Проект = &Проект
	|		ИЛИ УведомлятьИСогласовывать_ат.Проект = Значение(Справочник.Проекты_ат.ПустаяСсылка))
	|	И " + ?(ТехническоеСогласование,
				"УведомлятьИСогласовывать_ат.Согласования = Истина",
				"УведомлятьИСогласовывать_ат.ФинансовыеСогласования = Истина");
	
	Запрос.УстановитьПараметр("Клиент", Заявка.Клиент);
	Запрос.УстановитьПараметр("Проект", Заявка.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция   БылоВнутреннееСогласованиеПоЗаданию(Задание)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Индикатор
	|ИЗ
	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|		ПО (СвязиОбъектов_ат.Объект = КосвенныеСвязиЗаданий_ат.Задание
	|				ИЛИ СвязиОбъектов_ат.Предок = КосвенныеСвязиЗаданий_ат.Задание)
	|ГДЕ
	|	КосвенныеСвязиЗаданий_ат.Согласование.ФлагВнутреннего
	|	И СвязиОбъектов_ат.Объект = &Задание";
	
	Запрос.УстановитьПараметр("Задание", Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция   ПолучитьВремяЗаявкиПоВиду(Заявка, ВидВремениСтрокой = "ПланируемоеВремя") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ Первые 1
	|	ВЫБОР
	|		КОГДА &ВидВремени = ""ПланируемоеВремя""
	|			ТОГДА ВременаРабот_атОбороты.ПланируемоеВремяОборот
	|		КОГДА &ВидВремени = ""ФактическоеВремя""
	|			ТОГДА ВременаРабот_атОбороты.ФактическоеВремяОборот
	|		КОГДА &ВидВремени = ""ОтчетноеВремя""
	|			ТОГДА ВременаРабот_атОбороты.ОтчетноеВремяОборот
	|		КОГДА &ВидВремени = ""СогласованноеВремя""
	|			ТОГДА ВременаРабот_атОбороты.СогласованноеВремяОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяВыполнения
	|ИЗ
	|	РегистрНакопления.ВременаРабот_ат.Обороты(, , , Заявка = &Заявка) КАК ВременаРабот_атОбороты";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ВидВремени", ВидВремениСтрокой);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат 0;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ВремяВыполнения;
		
	КонецЕсли;
	
КонецФункции

Процедура ПровестиЗаданиеПоРегистрам(Задание, СвойстваЗадания, СтатусЗадания = Неопределено) Экспорт //!!!!!HOTFIX
	
	Если СтатусЗадания = Неопределено Тогда
		СтатусЗадания = Планирование_Сервер_ат.ПолучитьТекущийСтатус(Задание);
	КонецЕсли;
	
	СодержаниеРабот = Задание.СодержаниеРабот;
	Номенклатура = СодержаниеРабот.Номенклатура;
	
	Заявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	
	НаборЗаписей_ВременаРабот = РегистрыНакопления.ВременаРабот_ат.СоздатьНаборЗаписей();
	НаборЗаписей_ВременаРабот.Отбор.Регистратор.Установить(Задание);
	НаборЗаписей_ВременаРабот.Прочитать();
	НаборЗаписей_ВременаРабот.Очистить();
	
	НаборЗаписей_КСУР = РегистрыНакопления.КоличественноСуммовойУчетРабот_ат.СоздатьНаборЗаписей();
	НаборЗаписей_КСУР.Отбор.Регистратор.Установить(Задание);
	НаборЗаписей_КСУР.Прочитать();
	НаборЗаписей_КСУР.Очистить();
	
	Если НЕ Задание.ПометкаУдаления Тогда
		
		Для Каждого Заявка Из Заявки Цикл //TODO - only one!
			
			//!!!!!_КИСУР
			//Договор = Финансы_ат.ПолучитьДоговорПоЗаявке(Заявка);
			//
			//Если Договор = Неопределено ИЛИ Договор.Пустая() Тогда
			//	
			//	Сообщить("Ошибка определения Договора!", СтатусСообщения.ОченьВажное);
			//	Возврат;
			//	
			//КонецЕсли;
			//
			//Организация = Договор.Организация;
			//ВидДоговора = Договор.ВидДоговора;
			//Клиент = Договор.Владелец;
			//Проект = Заявка.Проект;
			//
			//Цена = Финансы_ат.ПолучитьЦенуНоменклатуры(ТекущаяДатаСеанса(), Номенклатура, Организация, ВидДоговора, Клиент, Договор, Проект);
			//КоличествоДесятичнойДробью = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(
			//	ФактическоеВремяВыполнения);
			
			//Если ФактическоеВремяВыполнения = 0 Тогда
			
			Если СвойстваЗадания.ПланируемоеВремяВыполнения > 0 И СвойстваЗадания.ПланируемаяДатаНачала > Дата(1, 1, 1) Тогда
				
				СоздатьДвижениеПоРегиструУчетаВременРабот(НаборЗаписей_ВременаРабот, Задание,
					СвойстваЗадания.ПланируемаяДатаНачала, Заявка, СодержаниеРабот, СвойстваЗадания.ПланируемоеВремяВыполнения);
				
			КонецЕсли;
			
			Если СвойстваЗадания.ФактическоеВремяВыполнения > 0 И СвойстваЗадания.ФактическаяДатаОкончания > Дата(1, 1, 1) Тогда
				
				СоздатьДвижениеПоРегиструУчетаВременРабот(НаборЗаписей_ВременаРабот, Задание,
					СвойстваЗадания.ФактическаяДатаОкончания, Заявка, СодержаниеРабот,, СвойстваЗадания.ФактическоеВремяВыполнения);
				
				СоздатьДвиженияПоРегиструКоличественноСуммовогоУчетаРабот(НаборЗаписей_КСУР, ВидДвиженияНакопления.Расход, Задание,
					СвойстваЗадания.ФактическаяДатаОкончания, Заявка,, Заявка.Проект, СодержаниеРабот,
					СодержаниеРабот.Номенклатура, СвойстваЗадания.ФактическоеВремяВыполнения);
				
			КонецЕсли;
				
			//Иначе
			
			//!!!!!_КИСУР
			//СоздатьДвиженияПоРегиструКоличественноСуммовогоУчетаРабот(НаборЗаписей_КСУР, ВидДвиженияНакопления.Расход, Задание,
			//	Заявка, Клиент, Договор, Проект, СодержаниеРабот,
			//	Номенклатура, ФактическоеВремяВыполнения,
			//	?(Цена = Неопределено, 0, Цена) * КоличествоДесятичнойДробью);
																			
			//Если СтатусЗадания = Перечисления.СтатусыЗаданий_ат.Прервано ИЛИ СтатусЗадания = Перечисления.СтатусыЗаданий_ат.Отменено Тогда
			//	
			//	СоздатьДвижениеПоРегиструУчетаВременРабот(НаборЗаписей_ВременаРабот, ВидДвиженияНакопления.Расход, Задание,
			//		СвойстваЗадания.ФактическаяДатаОкончания,
			//		Заявка, СодержаниеРабот, ФактическоеВремяВыполнения - ПланируемоеВремяВыполнения);
			//	
			//Иначе
			//	
			//	СоздатьДвижениеПоРегиструУчетаВременРабот(НаборЗаписей_ВременаРабот, ВидДвиженияНакопления.Расход, Задание,
			//		СвойстваЗадания.ФактическаяДатаОкончания,
			//		Заявка, СодержаниеРабот,, ФактическоеВремяВыполнения);
			//	
			//КонецЕсли;
				
			//КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей_ВременаРабот.Записать();
	НаборЗаписей_КСУР.Записать();
	
КонецПроцедуры

Процедура СоздатьДвиженияПоРегиструКоличественноСуммовогоУчетаРабот(НаборЗаписей, ВидДвижения, Регистратор, УчетнаяДата,
	Заявка, Договор = Неопределено, Проект = Неопределено, СодержаниеРабот, Номенклатура, Количество = 0, Сумма = 0) Экспорт
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.ВидДвижения = ВидДвижения;
	НоваяЗапись.Регистратор = Регистратор;
	НоваяЗапись.Период = УчетнаяДата;
	
	НоваяЗапись.Заявка = Заявка;
	
	Если Договор <> Неопределено Тогда
		
		Договор = ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель);
		
		НоваяЗапись.Договор = Договор;
		НоваяЗапись.Клиент = Договор.Владелец;
		
	КонецЕсли;
	
	Если Проект <> Неопределено Тогда
		
		НоваяЗапись.Проект = Проект;
		
	КонецЕсли;
	
	НоваяЗапись.СодержаниеРабот = СодержаниеРабот;
	
	НоваяЗапись.Количество = Количество;
	НоваяЗапись.Сумма = Сумма;
	
	НоваяЗапись.ДатаЗаписи = ТекущаяДатаСеанса();
	НоваяЗапись.АвторЗаписи = Пользователи_Переопределяемый_ат.ТекущийПользователь();
	
КонецПроцедуры

Процедура СоздатьДвижениеПоРегиструУчетаВременРабот(НаборЗаписей, Регистратор, УчетнаяДата, Заявка, СодержаниеРабот,
	ПланируемоеВремя = 0, ФактическоеВремя = 0, ОтчетноеВремя = 0, СогласованноеВремя = 0) Экспорт
	
	Запись = НаборЗаписей.Добавить();
	
	Запись.Регистратор	= Регистратор;
	
	Запись.Период		= УчетнаяДата;
	//Запись.УчетнаяДата		= 
	
	Запись.Заявка 			= Заявка;
	Запись.СодержаниеРабот	= СодержаниеРабот;
	
	Запись.ПланируемоеВремя		= ПланируемоеВремя;
	Запись.ФактическоеВремя		= ФактическоеВремя;
	Запись.ОтчетноеВремя		= ОтчетноеВремя;
	Запись.СогласованноеВремя	= СогласованноеВремя;
	
	Запись.ДатаЗаписи = ТекущаяДатаСеанса();
	Запись.АвторЗаписи = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ЗаписатьКосвеннуюСвязьЗадания(Задание, Заявка,
 Согласование = Неопределено, ФиксацияРабот = Неопределено,
 Счет = Неопределено, Реализация = Неопределено,
 Поступление = Неопределено, Списание = Неопределено,
 Клиент = Неопределено, СодержаниеРабот = Неопределено) Экспорт
 
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить("Согласование");
	МассивПараметров.Добавить("ФиксацияРабот");
	МассивПараметров.Добавить("Счет");
	МассивПараметров.Добавить("Реализация");
	МассивПараметров.Добавить("Поступление");
	МассивПараметров.Добавить("Списание");
	МассивПараметров.Добавить("Клиент");
	МассивПараметров.Добавить("СодержаниеРабот");
	
	НаборЗаписейБезЗадания = РегистрыСведений.КосвенныеСвязиЗаданий_ат.СоздатьНаборЗаписей();
	НаборЗаписейБезЗадания.Отбор.Заявка.Установить(Заявка);
	НаборЗаписейБезЗадания.Отбор.Задание.Установить(Документы.Задание_ат.ПустаяСсылка());
	НаборЗаписейБезЗадания.Прочитать();
	
	Если НаборЗаписейБезЗадания.Количество() > 0 Тогда // есть запись без Задания
		
		ЗаписьБезЗадания = НаборЗаписейБезЗадания[0];
		
		Если НЕ ЗначениеЗаполнено(Задание) Тогда // конкретное Задание не указано
			
			// заполняем данные из параметров
			Для Каждого Параметр Из МассивПараметров Цикл
				
				ЗначениеПараметра = Неопределено;
				Выполнить("ЗначениеПараметра = " + Параметр);
				
				Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					
					Если НЕ ЗначениеЗаполнено(ЗаписьБезЗадания[Параметр]) Тогда
						
						ЗаписьБезЗадания[Параметр] = ЗначениеПараметра;
						
					ИначеЕсли ЗначениеЗаполнено(ЗаписьБезЗадания[Параметр]) И ЗначениеПараметра <> ЗаписьБезЗадания[Параметр] Тогда
						
						//ВызватьИсключение "Попытка записи различных документов одного типа по Заявке " + Заявка + " без указания Заданий!";
						Сообщить("Для " + Заявка + " перезаписано значение связи <" + Параметр + "> с {" + ЗаписьБезЗадания[Параметр]
							+ "} на {" + ЗначениеПараметра + "}");
						ЗаписьБезЗадания[Параметр] = ЗначениеПараметра;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейБезЗадания.Записать();
			
		Иначе // конкретное Задание УКАЗАНО!
			
			НаборЗаписей = РегистрыСведений.КосвенныеСвязиЗаданий_ат.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Заявка);
			НаборЗаписей.Отбор.Задание.Установить(Задание);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда // записи по этому Заданию нет
				
				Запись = НаборЗаписей.Добавить();
//				ЗаполнитьЗначенияСвойств(Запись, ЗаписьБезЗадания); // копируем данные из записи без указания Задания
				Запись.Задание = Задание;
				Запись.Заявка = Заявка;
				
				// заполняем данные из параметров
				Для Каждого Параметр Из МассивПараметров Цикл
					
					ЗначениеПараметра = Неопределено;
					Выполнить("ЗначениеПараметра = " + Параметр);
					
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						
						Если НЕ ЗначениеЗаполнено(Запись[Параметр]) Тогда
							
							Запись[Параметр] = ЗначениеПараметра;
							
						ИначеЕсли ЗначениеЗаполнено(Запись[Параметр]) И ЗначениеПараметра <> Запись[Параметр] Тогда
							
							//ВызватьИсключение "Попытка записи различных документов одного типа по " + Заявка
							//	+ " и " + Задание + " при наличии документов без указания Задания!";
							Сообщить("Для " + Заявка + " и " + Задание + " перезаписано значение связи <"
								+ Параметр + "> с {" + Запись[Параметр]
								+ "} на {" + ЗначениеПараметра + "}");
							Запись[Параметр] = ЗначениеПараметра;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
//				НаборЗаписейБезЗадания.Очистить();
//				НаборЗаписейБезЗадания.Записать(); // удаляем запись без задания
				НаборЗаписей.Записать();
				
			Иначе // есть запись по указанному Заданию. И при этом есть пустая - архитектурная ошибка!
//сейчас считаем, что нет..				
				Запись = НаборЗаписей[0];
				
				Для Каждого Параметр Из МассивПараметров Цикл
					
					ЗначениеПараметра = Неопределено;
					Выполнить("ЗначениеПараметра = " + Параметр);
					
//					Если ЗначениеЗаполнено(Запись[Параметр]) И ЗначениеЗаполнено(ЗаписьБезЗадания[Параметр])
//						И Запись[Параметр] <> ЗаписьБезЗадания[Параметр] Тогда
//						
//						//ВызватьИсключение "По " + Заявка + " и " + Задание
//						//	+ " обнаружены иные документы без указания Задания!";
//						
//						Если ЗначениеПараметра <> ЗаписьБезЗадания[Параметр] Тогда
//							
//							Сообщить("По " + Заявка + " стёрто указанное без конкретного Задания значение связи <"
//								+ Параметр + "> {" + ЗаписьБезЗадания[Параметр] + "}");
//								
//							Если ЗначениеПараметра <> Запись[Параметр] Тогда
//								
//								Сообщить("Для " + Заявка + " и " + Задание + " перезаписано значение связи <"
//									+ Параметр + "> с {" + Запись[Параметр]
//									+ "} на {" + ЗначениеПараметра + "}");
//								Запись[Параметр] = ЗначениеПараметра;
//								
//							КонецЕсли;
//							
//						Иначе
//							
//							Сообщить("Для " + Заявка + " и " + Задание + " перезаписано значение связи <"
//								+ Параметр + "> с {" + Запись[Параметр]
//								+ "} на {" + ЗначениеПараметра + "}");
//							Запись[Параметр] = ЗначениеПараметра;
//							
//						КонецЕсли;
//						
//					КонецЕсли;
						
					Если (ЗначениеЗаполнено(Запись[Параметр]) И ЗначениеЗаполнено(ЗначениеПараметра)
						И ЗначениеПараметра <> Запись[Параметр]) Тогда
						
						//ИЛИ (ЗначениеЗаполнено(ЗаписьБезЗадания[Параметр]) И ЗначениеЗаполнено(ЗначениеПараметра)
						//	И ЗначениеПараметра <> ЗаписьБезЗадания[Параметр]) Тогда
						//
						//ВызватьИсключение "Попытка записи различных документов одного типа по Заявке " + Заявка
						//	+ " и Заданию " + Задание + " при наличии документов без указания Задания!";
						
						Сообщить("Для " + Заявка + " и " + Задание + " перезаписано значение связи <"
							+ Параметр + "> с {" + Запись[Параметр]
							+ "} на {" + ЗначениеПараметра + "}");
						Запись[Параметр] = ЗначениеПараметра;
						
					КонецЕсли;
					
					//Если ЗначениеЗаполнено(ЗаписьБезЗадания[Параметр]) Тогда
					//	Запись[Параметр] = ЗаписьБезЗадания[Параметр];
					//ИначеЕсли ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					//	Запись[Параметр] = ЗначениеПараметра;
					//КонецЕсли;
					
				КонецЦикла;
				
//				НаборЗаписейБезЗадания.Очистить();
//				НаборЗаписейБезЗадания.Записать(); // удаляем запись без задания
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // запись без Задания отсутствует
		
		Если НЕ ЗначениеЗаполнено(Задание) Тогда // конкретное Задание не указано
			
			ЗаписьБезЗадания = НаборЗаписейБезЗадания.Добавить();
			ЗаписьБезЗадания.Заявка = Заявка;
			
			// заполняем данные из параметров
			Для Каждого Параметр Из МассивПараметров Цикл
				
				ЗначениеПараметра = Неопределено;
				Выполнить("ЗначениеПараметра = " + Параметр);
				ЗаписьБезЗадания[Параметр] = ЗначениеПараметра;
				
			КонецЦикла;
			
			НаборЗаписейБезЗадания.Записать();
			
		Иначе // конкретное Задание УКАЗАНО!
			
			НаборЗаписей = РегистрыСведений.КосвенныеСвязиЗаданий_ат.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заявка.Установить(Заявка);
			НаборЗаписей.Отбор.Задание.Установить(Задание);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда // записи по этому Заданию нет
				
				Запись = НаборЗаписей.Добавить();
				Запись.Задание = Задание;
				Запись.Заявка = Заявка;
				
				// заполняем данные из параметров
				Для Каждого Параметр Из МассивПараметров Цикл
					
					ЗначениеПараметра = Неопределено;
					Выполнить("ЗначениеПараметра = " + Параметр);
					Запись[Параметр] = ЗначениеПараметра;
					
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
			Иначе // есть запись по указанному Заданию
				
				Запись = НаборЗаписей[0];
				
				Для Каждого Параметр Из МассивПараметров Цикл
					
					ЗначениеПараметра = Неопределено;
					Выполнить("ЗначениеПараметра = " + Параметр);
					
					Если (ЗначениеЗаполнено(Запись[Параметр]) И ЗначениеЗаполнено(ЗначениеПараметра)
						И ЗначениеПараметра <> Запись[Параметр]) Тогда
						
						//ВызватьИсключение "Попытка записи различных документов одного типа по Заявке " + Заявка
						//	+ " и Заданию " + Задание + "!";
						Сообщить("Для " + Заявка + " и " + Задание + " перезаписано значение связи <"
							+ Параметр + "> с {" + Запись[Параметр]
							+ "} на {" + ЗначениеПараметра + "}");
						Запись[Параметр] = ЗначениеПараметра;
						
					ИначеЕсли ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						
						Запись[Параметр] = ЗначениеПараметра;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//НаборЗаписей = РегистрыСведений.КосвенныеСвязиЗаданий_ат.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	//
	//ЕстьЗаписьБезЗадания = Ложь;
	//
	//Если ЗначениеЗаполнено(Задание) Тогда
	//	
	//	НаборЗаписей.Отбор.Задание.Установить(Задание);
	//	
	//	НаборЗаписейБезЗадания = РегистрыСведений.КосвенныеСвязиЗаданий_ат.СоздатьНаборЗаписей();
	//	НаборЗаписейБезЗадания.Отбор.Заявка.Установить(Заявка);
	//	НаборЗаписейБезЗадания.Отбор.Задание.Установить(Документы.Задание_ат.ПустаяСсылка());
	//	НаборЗаписейБезЗадания.Прочитать();
	//	
	//	Если НаборЗаписейБезЗадания.Количество() > 0 Тогда
	//		
	//		ЗаписьБезЗадания = НаборЗаписейБезЗадания[0];
	//		ЕстьЗаписьБезЗадания = Истина;
	//		
	//	Иначе
	//		
	//		ЗаписьБезЗадания = Неопределено;
	//		ЕстьЗаписьБезЗадания = Ложь;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//НаборЗаписей.Прочитать();
	//
	//Если НаборЗаписей.Количество() = 0 Тогда
	//	Запись = НаборЗаписей.Добавить();
	//Иначе
	//	Запись = НаборЗаписей[0];
	//КонецЕсли;
	//
	//Запись.Задание = Задание;
	//Запись.Заявка = Заявка;
	//
	//Для Каждого ИмяДокумента Из МассивИменДокументов Цикл
	//	
	//	ЗначениеПараметра = Неопределено;
	//	Выполнить("ЗначениеПараметра = " + ИмяДокумента);
	//	
	//	ЗначениеРесурса = Запись[ИмяДокумента];
	//	
	//	Если НЕ ЗначениеПараметра = Неопределено Тогда
	//		
	//		Если ЗначениеЗаполнено(ЗначениеРесурса) Тогда
	//			
	//			Продолжить;
	//			
	//		Иначе
	//			
	//			Запись[ИмяДокумента] = ЗначениеПараметра;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Если НЕ ЗначениеЗаполнено(ЗначениеРесурса) И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
	//		Запись[ИмяДокумента] = ЗначениеПараметра;
	//	КонецЕсли;
	//	
	//	Если ЕстьЗаписьБезЗадания Тогда
	//		
	//		Если ЗначениеЗаполнено(Запись[ИмяДокумента]) И НЕ ЗначениеЗаполнено(ЗаписьБезЗадания[ИмяДокумента]) Тогда
	//			
	//			ЗаписьБезЗадания[ИмяДокумента] = Запись[ИмяДокумента];
	//			
	//		// Задание в документах из другой записи не учавствует!
	//		//ИначеЕсли ЗначениеЗаполнено(ЗаписьБезЗадания[ИмяДокумента]) И НЕ ЗначениеЗаполнено(Запись[ИмяДокумента]) Тогда
	//		//	
	//		//	Запись[ИмяДокумента] = ЗаписьБезЗадания[ИмяДокумента];
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Если НЕ Клиент = Неопределено Тогда
	//	Запись.Клиент = Клиент;
	//КонецЕсли;
	//
	//Если НЕ СодержаниеРабот = Неопределено Тогда
	//	Запись.СодержаниеРабот = СодержаниеРабот;
	//КонецЕсли;
	//
	//Если ЕстьЗаписьБезЗадания Тогда
	//	
	//	Если НЕ Клиент = Неопределено Тогда
	//		ЗаписьБезЗадания.Клиент = Клиент;
	//	КонецЕсли;
	//	
	//	Если НЕ СодержаниеРабот = Неопределено Тогда
	//		ЗаписьБезЗадания.СодержаниеРабот = СодержаниеРабот;
	//	КонецЕсли;
	//	
	//	НаборЗаписейБезЗадания.Записать();
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПровестиСогласованиеПоОперативномуБалансу(Согласование, Проводить = Истина) Экспорт
	
	НаборЗаписей = РегистрыБухгалтерии.Клиентский_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Согласование);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Если Согласование.ОбъектыСогласования.Количество() > 0 Тогда
		
		//!!!!!HOTFIX
		//СторнироватьЗаписиПоОбъекту(НаборЗаписей, Ссылка, Ссылка.ОбъектыСогласования.ВыгрузитьКолонку("Задание"), Проводить);
		
	// [Макс] Согласования без заданий нельзя сторнировать, поскольку
	// если по заявке несколько таких согласований - движения останутся только у последнего, а надо все.
	// Сторно допустимо только по одинаковым заданиям (пересогласовываем конкретное).
		
	//Иначе
	//	
	//	СторнироватьЗаписиПоОбъекту(НаборЗаписей, Ссылка, Ссылка.СодержаниеСогласования.ВыгрузитьКолонку("СодержаниеРабот"), Проводить);
		
	КонецЕсли;
	
	Если Проводить Тогда
		
		//!!!!!HOTFIX
		//Если Ссылка.ОбъектыСогласования.Количество() > 0 Тогда
		//
		//	Для Каждого СтрокаЗаданий Из Ссылка.ОбъектыСогласования Цикл
		//		
		//		СоздатьДвижениеПоОперативномуБалансу(НаборЗаписей, Ссылка, Ссылка.Дата, ВидДвиженияБухгалтерии.Кредит,
		//			Ссылка.Договор, Ссылка, СтрокаЗаданий.Задание,
		//			СтрокаЗаданий.Стоимость);
		//		
		//	КонецЦикла;
		//	
		//Иначе
			
			Для Каждого СтрокаСодержанияСогласования Из Согласование.СодержаниеСогласования Цикл
				
				СоздатьДвижениеПоОперативномуБалансу(НаборЗаписей, Согласование, Согласование.ДатаСогласования,
					ВидДвиженияБухгалтерии.Кредит,
					Согласование.Договор, Согласование, СтрокаСодержанияСогласования.СодержаниеРабот,
					СтрокаСодержанияСогласования.Сумма);
				
			КонецЦикла;
			
		//КонецЕсли;
	
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПровестиФиксациюПоОперативномуБалансу(Фиксация, Проводить = Истина, Автор = Неопределено) Экспорт //!!!!!УДАЛИТЬ - никаких движений
// сама Фиксация/Завтрие делать не должна (нужен отдельный документ Сторнирование)
	
	//НаборЗаписей = РегистрыБухгалтерии.Клиентский_ат.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Регистратор.Установить(Фиксация);
	//НаборЗаписей.Прочитать();
	//НаборЗаписей.Очистить();
	//
	//СторнироватьЗаписиПоОбъекту(НаборЗаписей, Ссылка, ОбъектыДвижения, Проводить);
	//
	//Если Проводить Тогда
	//	
	//	Для Каждого СтрокаУслуг Из Фиксация.Услуги Цикл
	//		
	//		СоздатьДвижениеПоОперативномуБалансу(НаборЗаписей, Фиксация, Фиксация.Дата, ВидДвиженияБухгалтерии.Кредит,
	//			Фиксация.Договор, Фиксация,, СтрокаУслуг.Сумма);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	//
	//НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СоздатьДвижениеПоОперативномуБалансу(НаборЗаписей, Регистратор, Период, ВидДвижения, Субконто1, Субконто2,
	Субконто3 = Неопределено, Сумма)
	
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Договор = Регистратор.Договор;
	ДоговорОсновной = ?(Договор.Родитель.Пустая(), Договор, Договор.Родитель);
	ТекПользователь = Пользователи.ТекущийПользователь();
	ТекДата = ТекущаяДатаСеанса();
	ДоговорСубконто = ПланыВидовХарактеристик.ВидыСубконто_ат.Договор;
	ДокументСубконто = ПланыВидовХарактеристик.ВидыСубконто_ат.Документ;
	ОбъектСубконто = ПланыВидовХарактеристик.ВидыСубконто_ат.Объект;
	
	ДвижениеОпер = НаборЗаписей.Добавить();
	
	ДвижениеОпер.Активность 					= Истина;
	ДвижениеОпер.Регистратор 					= Регистратор;
	ДвижениеОпер.Период 						= Период;
	ДвижениеОпер.Клиент 						= Договор.Владелец;
	ДвижениеОпер.Счет 							= ПланыСчетов.Клиентский_ат.Оперативный;
	ДвижениеОпер.ВидДвижения 					= ВидДвижения;
	
	ДвижениеОпер.Субконто[ДоговорСубконто] 		= ДоговорОсновной;
	ДвижениеОпер.Субконто[ДокументСубконто] 	= Субконто2;
	
	Если НЕ Субконто3 = Неопределено Тогда
		ДвижениеОпер.Субконто[ОбъектСубконто] 	= Субконто3;
	КонецЕсли;
	
	ДвижениеОпер.Сумма 							= Сумма;
	
	ДвижениеОпер.Организация 					= Договор.Организация;
	ДвижениеОпер.Договор 						= Договор;
	
	ДвижениеОпер.АвторИзменения 				= ТекПользователь;
	ДвижениеОпер.ДатаИзменения 					= ТекДата;
	
КонецПроцедуры

Функция   ПолучитьРеализациюПоФиксации(Фиксация) Экспорт //!!!перенести в Финансы
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Реализация_атОснования.Ссылка
	|ИЗ
	|	Документ.Реализация_ат.Основания КАК Реализация_атОснования
	|ГДЕ
	|	Реализация_атОснования.Основание = &Основание
	|	И Реализация_атОснования.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Основание", Фиксация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Реализация = Документы.Реализация_ат.СоздатьДокумент();
		Реализация.Заполнить(Фиксация);
		Реализация.Дата = ТекущаяДатаСеанса();
		Реализация.Организация = Фиксация.Договор.Организация;
		Реализация.Договор = Фиксация.Договор;
		//!!!!!HOTFIX
		//Реализация.Клиент = Фиксация.Договор.Владелец;
		Реализация.Клиент = Фиксация.Клиент;
		
		Попытка
			
			Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			Сообщить("Создана " + Реализация);
			ЗаписьЖурналаРегистрации("Автосоздание документов.Реализация", УровеньЖурналаРегистрации.Информация,, Реализация.Ссылка, "Основание: " + Фиксация);
			Уведомления_ат.УведомитьОСозданииФинансовогоДокумента(Реализация.Ссылка, Фиксация);
			
			Возврат Реализация.Ссылка;
			
		Исключение
			
			Ошибка = ОписаниеОшибки();
			Сообщить("Ошибка автосоздания Реализации по документу " + Фиксация + ": " + Ошибка);
			ЗаписьЖурналаРегистрации("Автосоздание документов.Реализация", УровеньЖурналаРегистрации.Ошибка,, Фиксация.Ссылка, Ошибка);
			
			Уведомления_ат.УведомитьОСозданииФинансовогоДокумента(Документы.Реализация_ат.ПустаяСсылка(), Фиксация, ОписаниеОшибки());
			
			Возврат Реализация.Ссылка;
			
		КонецПопытки;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Процедура СторнироватьЗаписиПоОбъекту(НаборЗаписей, Ссылка, Объекты, Проводить) //!!!!!TODO - написана какоя-то дичь!
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Клиентский_атДвиженияССубконто.Субконто1,
		|	Клиентский_атДвиженияССубконто.Субконто2,
		|	Клиентский_атДвиженияССубконто.Субконто3,
		|	Клиентский_атДвиженияССубконто.Сумма,
		|	КосвенныеСвязиЗаданий_ат.Заявка
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.ДвиженияССубконто(
		|			,
		|			,
		|			Субконто3 В (&Объекты)
		|				И Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный)
		|				И Клиент = &Клиент,
		|			,
		|			) КАК Клиентский_атДвиженияССубконто
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			(ВЫБРАТЬ
		|				ДокументСогласование_ат.Ссылка КАК Ссылка,
		|				ДокументСогласование_ат.Заявка КАК Заявка
		|			ИЗ
		|				Документ.Согласование_ат КАК ДокументСогласование_ат
		|				
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ДокументФиксацияРабот_ат.Ссылка,
		|				ДокументФиксацияРабот_ат.Заявка
		|			ИЗ
		|				Документ.ФиксацияРабот_ат КАК ДокументФиксацияРабот_ат
		|			) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
		|				ПО ВложенныйЗапрос.Заявка = КосвенныеСвязиЗаданий_ат.Заявка
		|			ПО Клиентский_атДвиженияССубконто.Регистратор = ВложенныйЗапрос.Ссылка
		|ГДЕ
		|	НЕ Клиентский_атДвиженияССубконто.Регистратор = &Регистратор
		|	И Клиентский_атДвиженияССубконто.Период < &Период");
	Запрос.УстановитьПараметр("Объекты", 	 Объекты);
	Запрос.УстановитьПараметр("Клиент", 	 Ссылка.Клиент);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Период", 	 Ссылка.Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Ссылка.Заявка <> Выборка.Заявка Тогда
			
			СоздатьДвижениеПоОперативномуБалансу(НаборЗаписей, Ссылка, Ссылка.Дата,
				ВидДвиженияБухгалтерии.Дебет,
				Выборка.Субконто1, Выборка.Субконто2, Выборка.Субконто3, Выборка.Сумма);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ЕстьСогласованноеВремя(Задание, ПоПлану = Истина, ВремяВыполнения = Неопределено) Экспорт
	
	Если НЕ ЗаданиеНужноСогласовывать(Задание) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Заявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	
	Если ВремяВыполнения = Неопределено Тогда
		
		СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
		ВремяДляСравнения = ?(ПоПлану, СвойстваЗадания.ПланируемоеВремяВыполнения, СвойстваЗадания.ФактическоеВремяВыполнения);
		
	Иначе
		
		ВремяДляСравнения = ВремяВыполнения;
		
	КонецЕсли;
	
	Для Каждого Заявка Из Заявки Цикл //TODO - only one!
		
		Запрос = Новый Запрос;
		
		// Условия по клиенту и договору не нужны. Пара Заявка-Задание всегда имеет одного и того же клиента с договором.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КоличественноСуммовойУчетРабот_атОстатки.КоличествоОстаток КАК ВремяОстаток
		|ИЗ
		|	РегистрНакопления.КоличественноСуммовойУчетРабот_ат.Остатки(,
		|		Заявка = &Заявка
		|		И СодержаниеРабот = &СодержаниеРабот) КАК КоличественноСуммовойУчетРабот_атОстатки
		|ГДЕ
		|	КоличественноСуммовойУчетРабот_атОстатки.СодержаниеРабот.ТребуетсяСогласование";
		
		Запрос.УстановитьПараметр("Заявка", Заявка);
		Запрос.УстановитьПараметр("СодержаниеРабот", Задание.СодержаниеРабот);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ВремяОстаток >= ВремяДляСравнения;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция   ДостаточноСредствДляВыполненияЗадания(Задание, ПоПлану = Истина, ВремяВыполнения = Неопределено) Экспорт
	
	Если НЕ ЗаданиеНужноСогласовывать(Задание, Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БылоВнутреннееСогласованиеПоЗаданию(Задание) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СредствДостаточно = Истина;
	
	Заявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	
	Если ВремяВыполнения = Неопределено Тогда
	
		СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
		ВремяДляСравнения = ?(ПоПлану, СвойстваЗадания.ПланируемоеВремяВыполнения, СвойстваЗадания.ФактическоеВремяВыполнения);
		
	Иначе
		
		ВремяДляСравнения = ВремяВыполнения;
		
	КонецЕсли;
		
	ЦенаЗадания = 0;
	СодержаниеРабот = Задание.СодержаниеРабот;
	КоличествоДесятичнойДробью = ПродолжительностьПроцессов_КлиентСервер_ат.ПеревестиВремяДляХраненияВДесятичнуюСистему(ВремяДляСравнения);
	
	Для Каждого Заявка Из Заявки Цикл //TODO - only one!
		
		Договор = Финансы_ат.ПолучитьДоговорПоЗаявке(Заявка);
		Организация = Договор.Организация;
		ВидДоговора = Договор.ВидДоговора;
		Клиент = Договор.Владелец;
		Проект = Заявка.Проект;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.СуммаОстаток КАК ОстатокСтоимостиЗаявки,
			|	КоличественноСуммовойУчетРабот_атОстатки.Договор.ЛимитСуммыПриПостоплате + КоличественноСуммовойУчетРабот_атОстатки.СуммаОстаток + ЕСТЬNULL(Клиентский_атОстатки.СуммаОстаток, 0) КАК ДоступноСредствПоЗаявке
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(КоличественноСуммовойУчетРабот_атОстатки.СуммаОстаток) КАК СуммаОстаток,
			|		КоличественноСуммовойУчетРабот_атОстатки.Заявка КАК Заявка
			|	ИЗ
			|		РегистрНакопления.КоличественноСуммовойУчетРабот_ат.Остатки(,
			|			Заявка = &Заявка
			|			И СодержаниеРабот.ТребуетсяСогласование) КАК КоличественноСуммовойУчетРабот_атОстатки
			|	
			|	СГРУППИРОВАТЬ ПО
			|		КоличественноСуммовойУчетРабот_атОстатки.Заявка) КАК ВложенныйЗапрос
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КоличественноСуммовойУчетРабот_ат.Остатки(,
			|			Заявка = &Заявка
			|				И СодержаниеРабот.ТребуетсяСогласование) КАК КоличественноСуммовойУчетРабот_атОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Клиентский_ат.Остатки(,
			|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный),,
			|			Клиент = &Клиент
			|				И Субконто1 = &Договор) КАК Клиентский_атОстатки
			|			ПО КоличественноСуммовойУчетРабот_атОстатки.Клиент = Клиентский_атОстатки.Клиент
			|				И (КоличественноСуммовойУчетРабот_атОстатки.Договор = Клиентский_атОстатки.Субконто1
			|					ИЛИ КоличественноСуммовойУчетРабот_атОстатки.Договор.Родитель = Клиентский_атОстатки.Субконто1)
			|		ПО (КоличественноСуммовойУчетРабот_атОстатки.Заявка = ВложенныйЗапрос.Заявка)");
		Запрос.УстановитьПараметр("Клиент", 	Клиент);
		Запрос.УстановитьПараметр("Договор", 	Договор);
		Запрос.УстановитьПараметр("Заявка", 	Заявка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ДоступноСредствПоЗаявке < Выборка.ОстатокСтоимостиЗаявки Тогда
				СредствДостаточно = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если СредствДостаточно Тогда
		ПривязатьЗаданиеКСогласованию(Задание, Заявки);
	КонецЕсли;
	
	Возврат СредствДостаточно;
	
КонецФункции

Функция   ПолучитьДоступныеЗадания(СвязанныеЗаявки, ВидДокументаСтрокой) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвязиОбъектов_ат.Объект КАК Задание
	|ИЗ
	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|		ПО СвязиОбъектов_ат.Объект = КосвенныеСвязиЗаданий_ат.Задание
	|			И КосвенныеСвязиЗаданий_ат.Заявка В (&Заявки)
	|		
	|ГДЕ
	|	СвязиОбъектов_ат.Предок В(&Заявки)
	|	И СвязиОбъектов_ат.Объект ССЫЛКА Документ.Задание_ат
	|	И (ВЫБОР
	|			КОГДА &ВидДокумента = ""Счет""
	|				ТОГДА КосвенныеСвязиЗаданий_ат.Счет = ЗНАЧЕНИЕ(Документ.СчетНаОплату_ат.ПустаяСсылка)
	|			КОГДА &ВидДокумента = ""Поступление""
	|				ТОГДА КосвенныеСвязиЗаданий_ат.Поступление = ЗНАЧЕНИЕ(Документ.ПоступлениеНаСчетКлиента_ат.ПустаяСсылка)
	|			КОГДА &ВидДокумента = ""Списание""
	|				ТОГДА КосвенныеСвязиЗаданий_ат.Списание = ЗНАЧЕНИЕ(Документ.СписаниеСоСчетаКлиента_ат.ПустаяСсылка)
	|			КОГДА &ВидДокумента = ""Реализация""
	|				ТОГДА КосвенныеСвязиЗаданий_ат.Реализация = ЗНАЧЕНИЕ(Документ.Реализация_ат.ПустаяСсылка)
	|			КОНЕЦ
	|		ИЛИ КосвенныеСвязиЗаданий_ат.Задание ЕСТЬ NULL)";
	
	Запрос.УстановитьПараметр("Заявки", СвязанныеЗаявки);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСтрокой);
	
	ДоступныеЗадания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задание");
	
	Возврат ДоступныеЗадания;
	
КонецФункции

Процедура КопироватьКосвенныеСвязиЗадания(Источник, Приемник) Экспорт
	
	Если НЕ ЗаданиеНужноСогласовывать(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КосвенныеСвязиЗаданий_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задание.Установить(Источник);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ЗаписьИсточник = НаборЗаписей[0];
		НаборЗаписей.Отбор.Задание.Установить(Приемник);
		НаборЗаписей.Прочитать();
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьИсточник);
		НоваяЗапись.Задание = Приемник;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьСодержанияРаботВЗаданияхПоВнутреннемуСогласованию(Согласование) Экспорт
	
	
	
	
	
КонецПроцедуры

Процедура ПривязатьЗаданиеКСогласованию(Задание, Заявки)
	
	Если ЗаданиеПривязаноКСогласованию(Задание) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КосвенныеСвязиЗаданий_ат.Согласование,
	|	КосвенныеСвязиЗаданий_ат.Заявка
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	КосвенныеСвязиЗаданий_ат.Заявка В(&Заявки)
	|	И НЕ КосвенныеСвязиЗаданий_ат.Согласование = ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Заявки", Заявки);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Согласование = Выборка.Согласование;
		Заявка = Выборка.Заявка;
		ЗаписатьКосвеннуюСвязьЗадания(Задание, Заявка, Согласование,,,,,, Заявка.Клиент, Задание.СодержаниеРабот);
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ЗаданиеПривязаноКСогласованию(Задание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Индикатор
		|ИЗ
		|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
		|ГДЕ
		|	КосвенныеСвязиЗаданий_ат.Задание = &Задание
		|	И НЕ КосвенныеСвязиЗаданий_ат.Согласование = ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Задание", Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Функция   ПолучитьПоследнееСогласованиеПоЗаявке(Заявка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументСогласование_ат.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Согласование_ат КАК ДокументСогласование_ат
	|ГДЕ
	|	ДокументСогласование_ат.Заявка = &Заявка
	|	И НЕ ДокументСогласование_ат.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСогласование_ат.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьМассивСогласованийПоЗаданию(Задание) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Согласование_ат.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Согласование_ат КАК Согласование_ат
		|ГДЕ
		|	НЕ Согласование_ат.ПометкаУдаления
		|	И Согласование_ат.ОбъектыСогласования.Задание = &Задание");
	Запрос.УстановитьПараметр("Задание", Задание);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

#Область  ОбработкаУведомлений

Процедура ПроверитьОтветыНаСогласованияВходящихПисем(Знач Письма) Экспорт
	
	Для Каждого Письмо Из Письма Цикл
		
		Если Уведомления_ат.ПроверитьВалидностьПисьма(Документы.Согласование_ат, Письмо.Тема) Тогда
			
			ПараметрыВходящегоПисьма = Уведомления_ат.ПолучитьПараметрыВходящегоПисьма(Письмо, "Agreement");
			
			Если НЕ ПараметрыВходящегоПисьма.Свойство("Ошибка") Тогда
				Ошибки = Уведомления_ат.ВыполнитьАвтоматическиеДействияПоПисьму(ПараметрыВходящегоПисьма);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Ошибки) Тогда
				
				Если НЕ ПараметрыВходящегоПисьма.Свойство("Ошибка") Тогда
					ПараметрыВходящегоПисьма.Вставить("Ошибка", Ошибки);
				Иначе
					ПараметрыВходящегоПисьма.Ошибка = ПараметрыВходящегоПисьма.Ошибка + Символы.ПС + Символы.ПС + Ошибки;
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации("Ошибка обработки ответа на письмо о согласовании <" + Письмо + ">" + Символы.ПС,,,, Ошибки);
				Уведомления_ат.УведомитьОПолучениПисьмаОПриемке(Неопределено, ПараметрыВходящегоПисьма);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРешениеВСогласовании(Согласование, РешениеОСогласовании, Согласующий, Письмо = Неопределено,
	Комментарий = "", УведомлятьВнешних = Ложь) Экспорт
	
	Если НЕ Согласование.СтатусСогласования = Перечисления.СтатусыСогласований_ат.ОжиданиеОтвета Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	СогласованоВсеми = Ложь;
	
	СогласованиеОбъект = Согласование.ПолучитьОбъект();
	СтрокаСогласующего = СогласованиеОбъект.Согласующие.Найти(Согласующий, "Согласующий");
	
	Если СтрокаСогласующего = Неопределено Тогда
		
		ОписаниеОшибки = "Вы не указаны как согласующий по данному Согласованию!";
		
		Если Письмо <> Неопределено Тогда
			Уведомления_ат.ОтправитьАвтоответ(Письмо, ОписаниеОшибки);
		Иначе
			Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		
	ИначеЕсли СтрокаСогласующего.Согласовано = Перечисления.РешенияОСогласовании.Согласовано Тогда
		
		ОписаниеОшибки = "Вами уже было принято положительное решение по Согласованию!";
		
		Если Письмо <> Неопределено Тогда
			Уведомления_ат.ОтправитьАвтоответ(Письмо, ОписаниеОшибки);
		Иначе
			Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		
	Иначе
		
		СтрокаСогласующего.Согласовано = РешениеОСогласовании;
		СтрокаСогласующего.ДатаВремяСогласования = ТекущаяДатаСеанса();
		СтрокаСогласующего.ОснованиеСогласования = Письмо;
		СтрокаСогласующего.Комментарий = Комментарий;
		
		//
		
		Если УведомлятьВнешних Тогда
			СогласованиеОбъект.ДополнительныеСвойства.Вставить("Уведомлять");
		КонецЕсли;
		
		Если СогласованоВсеми(СогласованиеОбъект) Тогда
			
			Если СогласованиеАктуально(СогласованиеОбъект) Тогда
				СогласованиеОбъект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.Принято;
			Иначе
				СогласованиеОбъект.СтатусСогласования = Перечисления.СтатусыСогласований_ат.ОбработкаОтвета;
			КонецЕсли;
			
		КонецЕсли;
		
		СогласованиеОбъект.Записать();
		
		Уведомления_ат.ОповеститьОПринятииРешенияПоСогласованию(СогласованиеОбъект.Ссылка, Согласующий, РешениеОСогласовании, УведомлятьВнешних); // перенести в функцию установки Статуса
		
	КонецЕсли;
	
КонецПроцедуры

Функция   СогласованиеАктуально(Согласование)
	
	Задания = Согласование.ОбъектыСогласования.ВыгрузитьКолонку("Задание");
	
	ПланируемаяДатаНачала = '39991130';
	
	Если Задания.Количество() = 0 Тогда
		
		ОбщееВремяРабот = 0;
		
		Для Каждого СтрокаСодержанияСогласования Из Согласование.СодержаниеСогласования Цикл
			ОбщееВремяРабот = ОбщееВремяРабот + СтрокаСодержанияСогласования.Количество;
		КонецЦикла;
		
		СмещениеПлановогоНачала = Окр(ОбщееВремяРабот/6*60*60) * 24*60*60;
		ПланируемаяДатаНачала = Согласование.ОжидаемаяДатаЗавершения - СмещениеПлановогоНачала;
		
	Иначе
		
		Для Каждого Задание Из Задания Цикл
			
			СвойстваЗадания = Планирование_Сервер_ат.ПолучитьСвойстваЗадания(Задание);
			
			Если ЗначениеЗаполнено(СвойстваЗадания.ПланируемаяДатаНачала) Тогда
				ПланируемаяДатаНачала = ?(СвойстваЗадания.ПланируемаяДатаНачала < ПланируемаяДатаНачала, СвойстваЗадания.ПланируемаяДатаНачала, ПланируемаяДатаНачала);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПланируемаяДатаНачала = '39991130' ИЛИ НачалоДня(ПланируемаяДатаНачала) <= НачалоДня(ТекущаяДата());
	
КонецФункции

Функция   СогласованоВсеми(Согласование)
	
	СогласованоВсеми = Истина;
	
	Для Каждого СтрокаСогласующих Из Согласование.Согласующие Цикл
		
		Если НЕ СтрокаСогласующих.Согласовано = Перечисления.РешенияОСогласовании.Согласовано Тогда
			
			СогласованоВсеми = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СогласованоВсеми;
	
КонецФункции

Процедура ПопыткаЗакрытияЗаявкиПриОтклоненииСогласования(Согласование) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Согласование.Заявка)
		ИЛИ Планирование_Сервер_ат.ПолучитьТекущийСтатус(Согласование.Заявка) <> Перечисления.СтатусыЗаявок_ат.НаСогласовании Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//+см. док.Заявка.ФД.Процедура ОтменитьЗаявкуНаСервере{976}
	Если Планирование_Сервер_ат.ЕстьНеЗакрытыеЗаданияПоЗаявке(Согласование.Заявка, Согласование.Ссылка) Тогда
		
		Сообщить("Заявка не отменена, т.к. есть незакрытые Задания по ней!", СтатусСообщения.Информация);
		Возврат;
		
	КонецЕсли;
	
	ФиксацияФиктивная = Документы.ФиксацияРабот_ат.СоздатьДокумент();
	ФиксацияФиктивная.Дата = ТекущаяДатаСеанса();
	ФиксацияФиктивная.Заполнить(Согласование.Заявка);
	
	Если ФиксацияФиктивная.Услуги.Количество() > 0 Тогда
		
		Сообщить("Заявка не отменена, т.к. по ней осуществлялась деятельность требующая закрытия!");
		Возврат;
		
	КонецЕсли;
	//-
	
	Комментарий = "Автоматическая отмена Заявки по факту отказа в её Согласовании №" + Строка(Число(Согласование.Номер)) + " от "
		+ Формат(Согласование.Дата, "ДФ=dd.MM.yyyy");
	
	ПервыйОтказавший = Неопределено;
	
	Для Каждого СтрокаСогласующих Из Согласование.Согласующие Цикл
		
		Если СтрокаСогласующих.Согласовано = Перечисления.РешенияОСогласовании.Отклонено Тогда
			
			Если ПервыйОтказавший = Неопределено Тогда
				
				Комментарий = Комментарий + " пользователями:";
				ПервыйОтказавший = СтрокаСогласующих.Согласующий;
				
			КонецЕсли;
			
			Комментарий = Комментарий + Символы.ПС + СтрокаСогласующих.Согласующий;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Комментарии_ат.ДобавитьАвтокомментарийПоВиду(Согласование.Заявка, Комментарий);
	
	Планирование_Сервер_ат.УстановитьСтатус(Согласование.Заявка, Перечисления.СтатусыЗаявок_ат.Отменена, ТекущаяДатаСеанса(), Истина, ПервыйОтказавший);
	Уведомления_ат.УведомитьОСменеСтатуса(Согласование.Заявка, Перечисления.СтатусыЗаявок_ат.Отменена,, Истина);
	
КонецПроцедуры

Функция   ПолучитьСтруктуруОтвета(Письмо) //УДАЛИТЬ
	//
	//СтруктураОтвета = Новый Структура;
	//Индикатор_Согласование = "#Согласование: #";
	//Индикатор_КонтрольнаяСумма = "#Контрольная сумма: #";
	//
	//АдресПочтыОтправителя = Письмо.ОтправительАдрес;
	//
	//Контакты = Взаимодействия.ПолучитьВсеКонтактыПоEmail(АдресПочтыОтправителя);
	//
	//Для Каждого Контакт Из Контакты Цикл
	//	
	//	Если НЕ Контакт.Контакт.Пустая() Тогда
	//		
	//		Сотрудник = Контакт.Контакт;
	//		
	//		Прервать;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Если Сотрудник = Неопределено Тогда
	//	
	//	СтруктураОтвета.Вставить("Ошибка", "Согласующий не найден");
	//	Возврат СтруктураОтвета;
	//	
	//КонецЕсли;
	//
	//ТекстПисьма = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(Письмо);
	//
	//НомерСогласования = Уведомления_ат.ПолучитьЗначениеИндикатора(ТекстПисьма, Индикатор_Согласование, СтруктураОтвета);
	//КонтрольнаяСумма = Уведомления_ат.ПолучитьЗначениеИндикатора(ТекстПисьма, Индикатор_КонтрольнаяСумма, СтруктураОтвета);
	//
	//Если СтруктураОтвета.Свойство("Ошибка") Тогда
	//	Возврат СтруктураОтвета;
	//КонецЕсли;
	//
	//Согласование = ПолучитьСогласованиеПоНомеру(НомерСогласования);
	//
	//Если Согласование = Неопределено Тогда
	//	
	//	СтруктураОтвета.Вставить("Ошибка", "Не найдено активное согласование");
	//	Возврат СтруктураОтвета;
	//	
	//КонецЕсли;
	//
	//РешениеОСогласовании = ПолучитьРешениеОСогласованииПоКонтрольнойСумме(КонтрольнаяСумма);
	//
	//Если РешениеОСогласовании = Неопределено Тогда
	//	
	//	СтруктураОтвета.Вставить("Ошибка", "Неопределено решение о согласовании");
	//	Возврат СтруктураОтвета;
	//	
	//КонецЕсли;
	//
	//Если Согласование.ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое Тогда
	//	
	//	ПроверитьПинКод(ТекстПисьма, Сотрудник, СтруктураОтвета);
	//	
	//ИначеЕсли Согласование.ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое Тогда
	//	
	//	НайденныеСтроки = Согласование.Согласующие.НайтиСтроки(Новый Структура("Согласующий", Сотрудник));
	//	
	//	Если НайденныеСтроки.Количество() > 0 Тогда
	//		
	//		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	//			
	//			Если НайденнаяСтрока.ТипСогласования = Перечисления.ТипыСогласований_ат.Финансовое
	//				ИЛИ НайденнаяСтрока.ТипСогласования = Перечисления.ТипыСогласований_ат.ТехническоеИФинансовое Тогда
	//				
	//				ПроверитьПинКод(ТекстПисьма, Сотрудник, СтруктураОтвета);
	//				Прервать;
	//				
	//			КонецЕсли;
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//СтруктураОтвета.Вставить("Согласование",		 Согласование);
	//СтруктураОтвета.Вставить("РешениеОСогласовании", РешениеОСогласовании);
	//СтруктураОтвета.Вставить("Сотрудник",			 Сотрудник);
	//СтруктураОтвета.Вставить("Комментарий",			 ПолучитьКоментарийИзТекстаПисьма(ТекстПисьма, Письмо.ТипТекста));
	//
	//Возврат СтруктураОтвета;
	//
КонецФункции

Функция   ПолучитьКоментарийИзТекстаПисьма(ТекстПисьма, ТипТекста)
	
	Если ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
	 ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
		
		ТекстПисьма = РаботаСHTML_КлиентСервер_ат.ПолучитьОбычныйТекстИзHTML(ТекстПисьма);
		
	КонецЕсли;
	
	НачалоТехническойИнформации = СтрНайти(ТекстПисьма, "__________________");
	
	Если НачалоТехническойИнформации > 0 Тогда
		
		ТекстПисьма = Лев(ТекстПисьма, НачалоТехническойИнформации - 1);
		
	КонецЕсли;
	
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "ОБЯЗАТЕЛЬНО укажите PIN-код для подтверждения!", "");
	ТекстПисьма = СтрЗаменить(ТекстПисьма, "Пожалуйста, укажите причину отклонения согласования!", "");
	
	Возврат ТекстПисьма;
	
КонецФункции

Функция   ПроверитьПинКод(Текст, ПараметрыПисьма) Экспорт
	
	ВерныйПинКод = Истина;
	
	ПинКод = "";
	
	// TODO: когда появятся другие способы проверки - допилить.
	Если Константы.СпособПроверкиФинансовогоСогласования_ат.Получить() = Перечисления.СпособыПроверкиФинансовыхСогласований_ат.ПостоянныйPin Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпецификацияПользователей_ат.ПостоянныйPIN
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	СпецификацияПользователей_ат.Пользователь = &Пользователь";
		
		Запрос.УстановитьПараметр("Пользователь", ПараметрыПисьма.Ответчик);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ПинКод = Выборка.ПостоянныйPIN;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПинКод) Тогда
		
		Если СтрНайти(Текст, ПинКод) = 0 Тогда
			
			ПараметрыПисьма.Вставить("Ошибка", "Указан неверный пин-код!");
			ВерныйПинКод = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерныйПинКод;
	
КонецФункции

Функция   ПолучитьРешениеОСогласованииПоКонтрольнойСумме(КонтрольнаяСумма)
	
	Если СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Согласовано")), Символы.НПП, "") = КонтрольнаяСумма Тогда
		Возврат Перечисления.РешенияОСогласовании.Согласовано;
	ИначеЕсли СтрЗаменить(Строка(Системный_Сервер_Переопределяемый_ат.ПолучитьЧислокод("Отклонено")), Символы.НПП, "") = КонтрольнаяСумма Тогда
		Возврат Перечисления.РешенияОСогласовании.Отклонено;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьПараметрыКомандыПечатиСчета() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ Первые 1
		|	СинхронизированныеПечатныеФормы_ат.Ссылка,
		|	СинхронизированныеПечатныеФормы_ат.ВерсияДанных,
		|	СинхронизированныеПечатныеФормы_ат.ПометкаУдаления,
		|	СинхронизированныеПечатныеФормы_ат.Код,
		|	СинхронизированныеПечатныеФормы_ат.Наименование,
		|	СинхронизированныеПечатныеФормы_ат.ВнешняяПечатнаяФорма,
		|	СинхронизированныеПечатныеФормы_ат.ИмяМакета,
		|	СинхронизированныеПечатныеФормы_ат.Порядок,
		|	СинхронизированныеПечатныеФормы_ат.РегистрСинхронизации,
		|	СинхронизированныеПечатныеФормы_ат.ИспользоватьДляОтправки,
		|	СинхронизированныеПечатныеФормы_ат.ТипФайлаПоУмолчаниюСтрокой,
		|	СинхронизированныеПечатныеФормы_ат.ШаблонТекстаПисьма,
		|	СинхронизированныеПечатныеФормы_ат.ОсновнойПоДокументу,
		|	СинхронизированныеПечатныеФормы_ат.Предопределенный,
		|	СинхронизированныеПечатныеФормы_ат.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.СинхронизированныеПечатныеФормы_ат КАК СинхронизированныеПечатныеФормы_ат
		|ГДЕ
		|	СинхронизированныеПечатныеФормы_ат.РегистрСинхронизации = &РегистрСинхронизации
		|	И СинхронизированныеПечатныеФормы_ат.ОсновнойПоДокументу
		|	И НЕ СинхронизированныеПечатныеФормы_ат.ПометкаУдаления");
	Запрос.УстановитьПараметр("РегистрСинхронизации", Перечисления.РегистрыСинхронизацииДокументов_ат.СинхронизацияСчетовНаОплату_ат);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
	
		СтрокаКоманды = Запрос.Выполнить().Выгрузить()[0];
		
		СтрокаКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаКоманды);
		
		СтрокаКоманды.Вставить("ДополнительныеПараметры", Новый Структура);
		
		СтрокаКоманды.ДополнительныеПараметры.Вставить("РегистрСинхронизации", 		СтрокаКоманды.РегистрСинхронизации);
		СтрокаКоманды.ДополнительныеПараметры.Вставить("ВнешняяПечатнаяФорма", 		СтрокаКоманды.ВнешняяПечатнаяФорма);
		СтрокаКоманды.ДополнительныеПараметры.Вставить("ИспользоватьДляОтправки", 	СтрокаКоманды.ИспользоватьДляОтправки);
		
		Если НЕ ПустаяСтрока(СтрокаКоманды.ШаблонТекстаПисьма) Тогда
			СтрокаКоманды.ДополнительныеПараметры.Вставить("ШаблонТекстаПисьма", 	СтрокаКоманды.ШаблонТекстаПисьма);
		КонецЕсли;
		
		Возврат СтрокаКоманды;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
