
#Область  ВыполнениеЗаявок

Функция   ЗакрытьЗаявку(Заявка, ОтправлятьУведомления, Автор = Неопределено) Экспорт
	
	Если ЕстьНеЗакрытыеЗаданияПоЗаявке(Заявка) Тогда
		Возврат "Заявка не может быть закрыта, т.к. по ней есть не завершённые Задания!";
	КонецЕсли;
	
	ПересчитатьСвойстваЗаявки(Заявка);
	СоздатьДокументЗакрытияЗаявки(Заявка, ОтправлятьУведомления,, Автор);
	УстановитьСтатус(Заявка, Перечисления.СтатусыЗаявок_ат.Закрыта, ТекущаяДатаСеанса(), ОтправлятьУведомления, Автор);
	
	Уведомления_ат.УведомитьОСменеСтатуса(Заявка, Перечисления.СтатусыЗаявок_ат.Закрыта,, ОтправлятьУведомления);
	
КонецФункции

Процедура СоздатьДокументЗакрытияЗаявки(Заявка, ОтправлятьУведомления = Ложь, Вложения = Неопределено,
	Автор = Неопределено, ЗакрытиеЗаявки = Неопределено) Экспорт
	
	Фиксация = Документы.ФиксацияРабот_ат.СоздатьДокумент();
	//Фиксация.Дата = ТекущаяДатаСеанса(); // т.к. проводим в оперативном режиме
	Фиксация.СоздаватьУведомлениеОЗакрытии = ОтправлятьУведомления;
	Фиксация.Вложения = Вложения;
	Фиксация.Автор = Автор;
	
	Фиксация.Заполнить(Заявка);
	
	Если Фиксация.Услуги.Количество() = 0 Тогда
		
		Сообщить("Автозаполнение Закрытия не выявило незакрытых отчётных данных, ввод нового документа отменён.
			|Проверьте на необходимость его ручного ввода", СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеЗаявки <> Неопределено Тогда
		
		Для Каждого УслугаЗ Из ЗакрытиеЗаявки.Услуги Цикл
			
			Если ТипЗнч(УслугаЗ.ОтчетноеВремя) = Тип("Число") И УслугаЗ.ОтчетноеВремя > 0 Тогда
				
				НайденныйВидДеятельности = Фиксация.Услуги.Найти(УслугаЗ.СодержаниеРабот, "СодержаниеРабот");
				Если НайденныйВидДеятельности <> Неопределено Тогда
					
					Если НайденныйВидДеятельности.ОтчетноеВремя <> УслугаЗ.ОтчетноеВремя Тогда
						
						Сообщить("Расчётное отчётное время по Виду Деятельности (Услуге) <" + НайденныйВидДеятельности.СодержаниеРабот + "> = "
							+ ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(НайденныйВидДеятельности.ОтчетноеВремя)
							+ Символы.ПС
							+ "Устанавливаемое отчётное время = "
							+ ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(УслугаЗ.ОтчетноеВремя), СтатусСообщения.Внимание);
						
						НайденныйВидДеятельности.ОтчетноеВремя = УслугаЗ.ОтчетноеВремя;
						
					КонецЕсли;
					
				Иначе
					
					Сообщить("Добавлен нерасчётный Вид Деятельности (Услуга) <" + УслугаЗ.СодержаниеРабот + "> в Закрытие с отчётным временем "
						+ ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляОтображения(УслугаЗ.ОтчетноеВремя));
					
					НоваяУслуга = Фиксация.Услуги.Добавить();
					НоваяУслуга.СодержаниеРабот = УслугаЗ.СодержаниеРабот;
					НоваяУслуга.ОтчетноеВремя = УслугаЗ.ОтчетноеВремя;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Фиксация.РассчитатьСодержание();
	
	Если ЕстьВозможностьАвтоматическойФиксации(Фиксация) Тогда
		
		Попытка
			
			Фиксация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			
			Сообщить("Создано " + Фиксация);
			ЗаписьЖурналаРегистрации("Автосоздание документов.Закрытие", УровеньЖурналаРегистрации.Информация,, Фиксация.Ссылка, "Основание: " + Заявка);
			
		Исключение
			
			Ошибка = ОписаниеОшибки();
			Сообщить("Ошибка автосоздания Закрытия по документу " + Заявка + ": " + Ошибка);
			ЗаписьЖурналаРегистрации("Автосоздание документов.Закрытие", УровеньЖурналаРегистрации.Ошибка,, Заявка.Ссылка, Ошибка);
			
		КонецПопытки;
		
		Комментарии_ат.ДобавитьАвтокомментарийПоВиду(Фиксация.Ссылка, "Автоматическое полное закрытие Заявки");
		
	Иначе
		
		Попытка
			
			Фиксация.Записать(РежимЗаписиДокумента.Запись);
			
			Сообщить("Создано " + Фиксация);
			ЗаписьЖурналаРегистрации("Автосоздание документов.Закрытие", УровеньЖурналаРегистрации.Информация,, Фиксация.Ссылка, "Основание: " + Заявка);
			
		Исключение
			
			Ошибка = ОписаниеОшибки();
			Сообщить("Ошибка автосоздания Закрытия по документу " + Заявка + ": " + Ошибка);
			ЗаписьЖурналаРегистрации("Автосоздание документов.Закрытие", УровеньЖурналаРегистрации.Ошибка,, Заявка.Ссылка, Ошибка);
			
		КонецПопытки;
		
		СоздатьНапоминаниеОРучномЗакрытииЗаявки(Фиксация.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ЕстьВозможностьАвтоматическойФиксации(Фиксация)
// Возвращает ЛОЖЬ, при:
// - наличии в Заявке внутренних Согласований (считалось, что они должны быть в обязательном порядке преобразованы во внешние)
// - расхождения ОВ и ФВ > МинВремениДеятельности, т.е. нужно вернуть деньги на счёт клиента или довыставить счёт на оплату
	
	Заявка = Фиксация.Заявка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Индикатор,
	|	КосвенныеСвязиЗаданий_ат.Согласование.ФлагВнутреннего КАК ВнутреннееСогласование
	|ИЗ
	|	РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
	|ГДЕ
	|	КосвенныеСвязиЗаданий_ат.Заявка = &Заявка
	|	И НЕ КосвенныеСвязиЗаданий_ат.Согласование = ЗНАЧЕНИЕ(Документ.Согласование_ат.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьСогласование = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ЕстьСогласование = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если Выборка.ВнутреннееСогласование Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЕстьСогласование Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	База = ПродолжительностьПроцессов_Сервер_ат.ПолучитьМинимальныйИнтервалДеятельности();
	СложныйСлучайФиксации = Ложь;
	
	Для Каждого СтрокаУслуг Из Фиксация.Услуги Цикл
		
		Если СтрокаУслуг.ОтчетноеВремя - СтрокаУслуг.ФактическоеВремя > База
		 ИЛИ СтрокаУслуг.ФактическоеВремя - СтрокаУслуг.ОтчетноеВремя > База Тогда
			
			СложныйСлучайФиксации = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НЕ СложныйСлучайФиксации;
	
КонецФункции

Процедура СоздатьНапоминаниеОРучномЗакрытииЗаявки(Ссылка)
	
	Сообщить("Закрытие Заявки <" + Ссылка + "> не было проведено. Нужно выполнить закрытие вручную.");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	СписокПользователей = Новый СписокЗначений;
	
	Если Ссылка.Ответственный.Пустая() Тогда
		
		Если Ссылка.Проект.Пустая() ИЛИ Ссылка.Проект.Ответственный.Пустая() Тогда
			СписокПользователей = ВнутреннегоИспользования_ат.ПолучитьСписокПользователей("ОрганизацияМенеджерПроектов_ат");
		Иначе
			СписокПользователей.Добавить(Ссылка.Проект.Ответственный);
		КонецЕсли;
		
	Иначе
		
		СписокПользователей.Добавить(Ссылка.Ответственный);
		
	КонецЕсли;
	
	Для Каждого ЭлементСпискаПользователей Из СписокПользователей Цикл
	
		ПараметрыНапоминания = Новый Структура;
		ПараметрыНапоминания.Вставить("Пользователь", ЭлементСпискаПользователей.Значение);
		ПараметрыНапоминания.Вставить("Описание", "Необходимо в ручном режиме закрыть Заявку по тикету #" + Ссылка.Заявка.Тикет + "!");
		ПараметрыНапоминания.Вставить("Источник", Ссылка);
		ПараметрыНапоминания.Вставить("ВремяСобытия", ТекущаяДата);
		ПараметрыНапоминания.Вставить("СрокНапоминания", ТекущаяДата);
		
		НапоминанияПользователяСлужебный.ПодключитьНапоминание(ПараметрыНапоминания);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область  ВыполнениеЗаданий

Функция   ПроверитьВозможностьПриступитьКЗаданию(Задание) Экспорт
	
	СвойстваЗадания = ПолучитьСвойстваЗадания(Задание);
	
	ВозвращатьЗадание = Истина;
	
	Если СвойстваЗадания.Количество() = 0 Тогда
		Возврат "Не удалось получить свойства Задания!";
	КонецЕсли;
	
	ТекущийСтатус = СвойстваЗадания.Статус;
	ТекущийИсполнитель = СвойстваЗадания.Исполнитель;
	
	Если ТекущийСтатус <> Перечисления.СтатусыЗаданий_ат.ПустаяСсылка()
		И ТекущийСтатус <> Перечисления.СтатусыЗаданий_ат.Планируемое
		И ТекущийСтатус <> Перечисления.СтатусыЗаданий_ат.ВОчереди
		И ТекущийСтатус <> Перечисления.СтатусыЗаданий_ат.КВозобновлению Тогда
		
		Возврат "Нельзя приступить к выполнению Задания с данным статусом!";
		
	КонецЕсли;
	
	Если НЕ СвойстваЗадания.Краткосрочное
		И (ТекущийСтатус = Перечисления.СтатусыЗаданий_ат.ПустаяСсылка() ИЛИ ТекущийСтатус = Перечисления.СтатусыЗаданий_ат.Планируемое) Тогда
		
		Возврат "Нельзя приступить к выполнению Задания не поставленному в очередь!";
		
	КонецЕсли;
	
	Заявка = ПолучитьРодительскуюЗаявку(Задание);
	
	Если ПустаяСтрока(Заявка.ТипЗаявки.Наименование) ИЛИ СтрНайти(Заявка.ТипЗаявки.Наименование, "!") > 0 Тогда
		Возврат "Нельзя закрыть Заявку с не указанным или временным видом!";
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	РасширенныеПрава = (РольДоступна("ПолныеПрава")
		ИЛИ РольДоступна("ОрганизацияМенеджерПроектов_ат")
		ИЛИ ПолучитьРуководителейПроектаПоЗаданию(Задание).Найти(ТекущийПользователь) = Неопределено);
	
	Если ТекущийИсполнитель <> ТекущийПользователь Тогда
		
		Если РасширенныеПрава Тогда
			ЗаписатьСвойстваЗадания(Задание, Новый Структура("Исполнитель", ТекущийПользователь)); //???
		Иначе
			Возврат "Приступить к выполнению данного Задания может только: " + ТекущийИсполнитель + "!";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаданиеРедактируется(Задание) Тогда
		Возврат "Приступить к выполнению данного Задания в настоящий момент нельзя, т.к. оно редактируется в РПЗ!";
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Если НЕ Согласование_ат.ЕстьСогласованноеВремя(Задание) Тогда
		
		Если РасширенныеПрава Тогда
			
			СтруктураВозврата.Вставить("ЗадатьВопросОПродолженииПриНедостаткеВремени", Истина);
			ВозвращатьЗадание = Ложь;
			
		Иначе
			
			Возврат "Недостаточно согласованного времени по Заданию!";
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Нет никакой нужды проверять финансы при выполнении задания, разве что на отриц. ОперОстаток, да и то это надо делать в другом месте - при смене статуса Заявки или ещё где
	//Если НЕ Согласование_ат.ДостаточноСредствДляВыполненияЗадания(Задание, Ложь) Тогда
	//	
	//	Если РасширенныеПрава И РольДоступна("ОрганизацияФинансы_ат") Тогда
	//		
	//		СтруктураВозврата.Вставить("ЗадатьВопросОПродолженииПриНедостаткеСредств", Истина);
	//		ВозвращатьЗадание = Ложь;
	//		
	//	Иначе
	//		
	//		Возврат "У клиента не достаточно средств для оплаты выполнения Задания!";
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	СвойстваЗаявки = ПолучитьСвойстваЗаявки(Заявка);
	
	ОДЗ = ПолучитьОжидаемуюДатуЗавершенияЗаявки(Заявка);
	
	Если СвойстваЗаявки.Свойство("ПланируемаяДатаНачала")
		И ЗначениеЗаполнено(СвойстваЗаявки.ПланируемаяДатаНачала)
		И (НачалоДня(СвойстваЗаявки.ПланируемаяДатаНачала) > КонецДня(ОДЗ)
			ИЛИ КонецДня(ОДЗ) < КонецДня(ТекущаяДатаСеанса())
			ИЛИ НЕ ЗначениеЗаполнено(ОДЗ)) Тогда
		
		СтруктураВозврата.Вставить("ПредложитьВвестиОДЗ",
			Новый Структура("Заявка,Дата,Тикет,ТребуетсяПричина", Заявка, ПоследняяДатаПоПлану(Заявка), Заявка.Тикет, ЗначениеЗаполнено(ОДЗ)));
		//Возврат "Нельзя приступить к работе по заявке, для которой не установлена Ожидаемая Дата Звершения (#" + Заявка.Тикет +")";
		//Возврат СтруктураВозврата;
		ВозвращатьЗадание = Ложь;
		
	КонецЕсли;
	
	ВыполняемыеЗадания = ПолучитьВыполняемыеЗадания(ТекущийПользователь);
	
	Если ВыполняемыеЗадания.Найти(Задание) = Неопределено Тогда
		
		Если ВыполняемыеЗадания.Количество() > 0 Тогда
			
			Если ВозвращатьЗадание Тогда
				
				Возврат ВыполняемыеЗадания[0];
				
			Иначе
				
				СтруктураВозврата.Вставить("ЗавершаемоеЗадание", ВыполняемыеЗадания[0]);
				Возврат СтруктураВозврата;
				
			КонецЕсли;
			
		Иначе
			
			Если ВозвращатьЗадание Тогда
				
				Возврат Задание;
				
			Иначе
				
				СтруктураВозврата.Вставить("ЗавершаемоеЗадание", Задание);
				Возврат СтруктураВозврата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат "Данное Задание уже выполняется Вами.";
		
	КонецЕсли;
	
КонецФункции

// Начинает выполнение одного Задания с приостановкой второго
//
// Параметры:
//	НачинаемоеЗадание - ссылка на Задание к выполнению которого приступают.
//	ПриостанавливаемоеЗадание - ссылка на Задание которое должно быть приостановлено.
//	НовыеДанные - структура данных изменяемых в приостанавлеваемом задании.
//
Функция   ПриступитьКЗаданиюСПриостановкойТекущего(НачинаемоеЗадание, ПриостанавливаемоеЗадание, НовыеДанные) Экспорт
	
	РезультатПрерывания = ПрерватьЗадание(ПриостанавливаемоеЗадание, Перечисления.СтатусыЗаданий_ат.Прервано, НовыеДанные);
	
	Если ТипЗнч(РезультатПрерывания) = Тип("Строка") Тогда
		Возврат РезультатПрерывания;
	КонецЕсли;
	
	ПриступитьКЗаданию(НачинаемоеЗадание);
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПриступитьКЗаданию(Задание) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ЗаписатьСвойстваЗадания(Задание, Новый Структура("ФактическаяДатаНачала", ТекущаяДатаСеанса()));
		
		УстановитьСтатус(Задание, Перечисления.СтатусыЗаданий_ат.ВРаботе, ТекущаяДатаСеанса());
		ПересчитатьСтатусыСвязанныхЗаявок(Задание);
		ПересчитатьСвойстваСвязанныхЗаявок(Задание);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Проверяет возможность закрытия Задания.
//
// Параметры:
//	Задание - ДокументСсылка.Задание_ат - Задание для которого будет выполнена проверка.
//	СтатусЗакрытия - Перечисление.СтатусыЗаданий_ат - Статус закрытия Задания.
//	ПолучатьРодительскиеЗаявки - Булево - Если Истина, в возвращаемую структуру будет добавлен массив закрываемых Заявок, 
//											если Ложь - будет добавлен пустой массив.
//
// Возвращаемое значение:
//	Структура с полями:
//		ТекстОшибки - Строка - Текст для формирования сообщения о невозможности закрытия Задания, если закрытие возможно - строка пустая.
//		ЗакрываемыеЗаявки - Массив - массив элементов типа ДокументСсылка.Заявка_ат.
// 
Функция   ПолучитьСтруктуруЗавершенияЗадания(Задание, СтатусЗавершения, ПолучатьРодительскиеЗаявки = Истина) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("ТекстОшибки", "");
	ВозвращаемаяСтруктура.Вставить("ЗакрываемыеЗаявки", Новый Массив);
	
	Если СтатусЗавершения = Перечисления.СтатусыЗаданий_ат.Выполнено Тогда
		
		Действие = "Выполнить";
		
	ИначеЕсли СтатусЗавершения = Перечисления.СтатусыЗаданий_ат.Отменено Тогда
		
		Действие = "Отменить";
		
	ИначеЕсли СтатусЗавершения = Перечисления.СтатусыЗаданий_ат.Прервано Тогда
		
		Действие = "Прервать";
		
	Иначе
		
		 ВозвращаемаяСтруктура.ТекстОшибки = "Передан неверный статус закрытия Задания!";
		 Возврат ВозвращаемаяСтруктура;
		
	КонецЕсли;
	
	СвойстваЗадания = ПолучитьСвойстваЗадания(Задание);
	
	Если СтатусЗавершения = Перечисления.СтатусыЗаданий_ат.Выполнено
		И СвойстваЗадания.Статус <> Перечисления.СтатусыЗаданий_ат.ВРаботе Тогда
		
		ВозвращаемаяСтруктура.ТекстОшибки = "Выполнить можно только Задание со статусом ""В работе""!";
		
	ИначеЕсли СтатусЗавершения = Перечисления.СтатусыЗаданий_ат.Прервано
		И СвойстваЗадания.Статус <> Перечисления.СтатусыЗаданий_ат.ВРаботе Тогда
		
		ВозвращаемаяСтруктура.ТекстОшибки = "Прервать можно только Задание со статусом ""В работе""!";
		
	ИначеЕсли СтатусЗавершения = Перечисления.СтатусыЗаданий_ат.Отменено
		И (СвойстваЗадания.Статус = Перечисления.СтатусыЗаданий_ат.Выполнено
			ИЛИ СвойстваЗадания.Статус = Перечисления.СтатусыЗаданий_ат.Прервано
			ИЛИ СвойстваЗадания.Статус = Перечисления.СтатусыЗаданий_ат.Отменено) Тогда
		
		ВозвращаемаяСтруктура.ТекстОшибки = "Задание """ + СвойстваЗадания.Статус + """ и не может быть отменено!";
		
	Иначе
		
		ТекущийИсполнитель = СвойстваЗадания.Исполнитель;
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Если ТекущийИсполнитель <> ТекущийПользователь
			И НЕ РольДоступна("ОрганизацияМенеджерПроектов_ат")
			И НЕ РольДоступна("ПолныеПрава")
			И ПолучитьРуководителейПроектаПоЗаданию(Задание).Найти(ТекущийПользователь) = Неопределено Тогда
			
			ВозвращаемаяСтруктура.ТекстОшибки = Действие + " данное Задание может только '" + ТекущийИсполнитель
				+ "' или Менеджеры/Руководители Проектов или Ответственные по Заявке!";
				
		Иначе
			
			Если ПолучатьРодительскиеЗаявки Тогда
				ВозвращаемаяСтруктура.ЗакрываемыеЗаявки = ПолучитьЗаявкиЗакрываемыеЗаданием(Задание);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

Функция   ЗавершитьЗадание(Задание, СтатусЗавершения, НовыеДанные, СтруктураПодстановкиСтатуса = Неопределено,
	ПерезаписыватьРезультатЗаявки = Истина) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Если ТипЗнч(НовыеДанные) = Тип("Структура") Тогда
			
			ФактическаяДатаОкончания = НовыеДанные.ФактическаяДатаОкончания;
			ЗаписатьСвойстваЗадания(Задание, НовыеДанные);
			
			Комментарии_ат.ДобавитьАвтокомментарийПоВиду(Задание, НовыеДанные.Комментарий);
			
			Если ПерезаписыватьРезультатЗаявки Тогда
				Планирование_Сервер_ат.ЗаписатьРезультатВыполненияЗаявокПриЗаписиЗадания(Задание);
			КонецЕсли;
			
		Иначе
			
			ФактическаяДатаОкончания = ТекущаяДатаСеанса();
			ЗаписатьСвойстваЗадания(Задание, Новый Структура("ФактическаяДатаОкончания", ФактическаяДатаОкончания));
			
		КонецЕсли;
		
		ПересчитатьСвойстваСвязанныхЗаявок(Задание);
		УстановитьСтатус(Задание, СтатусЗавершения, ФактическаяДатаОкончания);
		ПересчитатьСтатусыСвязанныхЗаявок(Задание, СтруктураПодстановкиСтатуса); //!!!!!TODO: закрытие заявки необходимо производить через док.Закрытие!
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ТекстОписанияОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Сообщить(ТекстОписанияОшибки);
		ЗаписьЖурналаРегистрации("ЗавершениеЗадания", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Задание_ат, Задание, ТекстОписанияОшибки);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

Функция   ПрерватьЗадание(Задание, СтатусПрерывания, НовыеДанные) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		//+ Изменение прерываемого Задания
		
		ЗаписатьСвойстваЗадания(Задание, НовыеДанные, СтатусПрерывания);
		Комментарии_ат.ДобавитьАвтокомментарийПоВиду(Задание, НовыеДанные.Комментарий);
		Планирование_Сервер_ат.ЗаписатьРезультатВыполненияЗаявокПриЗаписиЗадания(Задание); //??? взято из ЗавершитьЗадание, ранее отсутствовало
		
		УстановитьСтатус(Задание, СтатусПрерывания, НовыеДанные.ФактическаяДатаОкончания);
		
		//- Изменение прерываемого Задания
		
		//+ Создание нового Задания
		
		ДанныеНовогоЗадания = НовыеДанные.ДанныеНовогоЗадания;
		
		НовоеЗадание = Документы.Задание_ат.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НовоеЗадание, ДанныеНовогоЗадания);
		НовоеЗадание.Записать();
		
		УстановитьСтатус(НовоеЗадание.Ссылка, Перечисления.СтатусыЗаданий_ат.КВозобновлению, ДанныеНовогоЗадания.Дата);
		
		СвязиОбъектов_ат.ДобавитьСвязьСПредком(НовоеЗадание.Ссылка, Задание, Истина,
			Справочники.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеЗамещаетЗадание, "СвязиОбъектов_ат");
		
		Согласование_ат.КопироватьКосвенныеСвязиЗадания(Задание, НовоеЗадание.Ссылка);
		
		ЗаписатьСвойстваЗадания(НовоеЗадание.Ссылка, ДанныеНовогоЗадания);
		
		//- Создание нового Задания
		
		ПересчитатьСтатусыСвязанныхЗаявок(НовоеЗадание.Ссылка);
		ПересчитатьСвойстваСвязанныхЗаявок(НовоеЗадание.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Неопределено;
		
	Исключение
		
		ТекстОписанияОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("ПрерываниеЗадания", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Задание_ат, Задание, ТекстОписанияОшибки);
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки;
	
КонецФункции

Функция   ЗавершитьЗаданиеСОбновлениемРелизом(Задание, НовыеДанные, ДатаОбновления) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		//+ Изменение прерываемого Задания
		
		ЗаписатьСвойстваЗадания(Задание, НовыеДанные, Перечисления.СтатусыЗаданий_ат.Выполнено);
		Комментарии_ат.ДобавитьАвтокомментарийПоВиду(Задание, НовыеДанные.Комментарий);
		Планирование_Сервер_ат.ЗаписатьРезультатВыполненияЗаявокПриЗаписиЗадания(Задание); //??? взято из ЗавершитьЗадание, ранее отсутствовало
		
		УстановитьСтатус(Задание, Перечисления.СтатусыЗаданий_ат.Выполнено, НовыеДанные.ФактическаяДатаОкончания);
		
		//- Изменение прерываемого Задания
		
		//+ Создание нового Задания
		
		НовоеЗадание = Документы.Задание_ат.СоздатьДокумент(); //!!!!!HARDCODED!!!!!
		НовоеЗадание.Дата = ДатаОбновления;
		НовоеЗадание.СодержаниеРабот = ПолучитьВидДеятельностиПриОбновлении();
		НовоеЗадание.Тезис = "Обновление рабочего продукта";
		НовоеЗадание.ТекстЗадания = "Обновить рабочий продукт до актуальной версии";
		НовоеЗадание.Записать();
		
		УстановитьСтатус(НовоеЗадание.Ссылка, Перечисления.СтатусыЗаданий_ат.Планируемое, //!!!!! логичнее, наверное, ВОчереди - но тогда Заявка получает 
			ДатаОбновления); // аналогичный Статус на ДатуОбновления (в будущем), что ломает алгоритмы - так как установка статуса основывается на расчёте (что не есть хорошо)
				// + получение статуса заявки в списках и при помощи ПолучитьТекущийСтатус - по итоговому срезу полседнего, без даты
		
		СвязиОбъектов_ат.ДобавитьСвязьСПредком(НовоеЗадание.Ссылка, Задание, Истина,
			Справочники.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеЗамещаетЗадание, "СвязиОбъектов_ат");
		
		Согласование_ат.КопироватьКосвенныеСвязиЗадания(Задание, НовоеЗадание.Ссылка);
		
		ДанныеНовогоЗадания = Новый Структура("ПланируемаяДатаНачала,ПланируемаяДатаОкончания,
			|ПланируемаяДлительность,ПланируемоеВремяВыполнения,Краткосрочное,Исполнитель", // Исп - возможно имеет смысл спрашивать + с настройками по продукту + предложением ТП()
			ДатаОбновления, ДатаОбновления, 1, ПродолжительностьПроцессов_КлиентСервер_ат.ПолучитьВремяДляХранения(0.15), Истина, Пользователи.ТекущийПользователь()); 
		
		ЗаписатьСвойстваЗадания(НовоеЗадание.Ссылка, ДанныеНовогоЗадания);
		
		//- Создание нового Задания
		
		ПересчитатьСтатусыСвязанныхЗаявок(НовоеЗадание.Ссылка);
		УстановитьСтатус(ПолучитьРодительскуюЗаявку(НовоеЗадание.Ссылка), Перечисления.СтатусыЗаявок_ат.ВОжиданииРелиза, ТекущаяДатаСеанса());
		ПересчитатьСвойстваСвязанныхЗаявок(НовоеЗадание.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Неопределено;
		
	Исключение
		
		ТекстОписанияОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("ПрерываниеЗадания", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Задание_ат, Задание, ТекстОписанияОшибки);
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки;
	
КонецФункции

// НЕ ИСПОЛЬЗУЕТСЯ! Возвращает массив Заявок которые будут закрыты при закрытии переданного Задания.
//
// Параметры:
//	Задание - ДокументСсылка.Задание_ат - Задание для которого будет выполнена проверка.
//
// Возвращаемое значение:
//  Массив - массив элементов типа ДокументСсылка.Заявка_ат.
// 
Функция   ПолучитьЗаявкиЗакрываемыеЗаданием(Задание)
	
	РодительскиеЗаявки = ПолучитьРодительскиеЗаявки(Задание);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Заявка
		|ИЗ
		|	(ВЫБРАТЬ
		|		СвязиОбъектов.Предок КАК Заявка,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СвязиОбъектов.Объект) КАК НезавершенныеЗадания
		|	ИЗ
		|		РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданийСрезПоследних
		|			ПО СвязиОбъектов.Объект = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|	ГДЕ
		|		СвязиОбъектов.Предок В(&РодительскиеЗаявки)
		|		И СвязиОбъектов.Объект ССЫЛКА Документ.Задание_ат
		|		И НЕ ВЫРАЗИТЬ(СвязиОбъектов.Объект КАК Документ.Задание_ат).ПометкаУдаления
		|		И (ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВРаботе)
		|			ИЛИ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВОчереди)
		|			ИЛИ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.КВозобновлению))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СвязиОбъектов.Предок) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.НезавершенныеЗадания = 1";
	
	Запрос.УстановитьПараметр("РодительскиеЗаявки", РодительскиеЗаявки);
	
	ЗакрываемыеЗаявки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заявка");
	
	Возврат ЗакрываемыеЗаявки;
	
КонецФункции

Функция   ЗаписатьРезультатВыполненияЗаявокПриЗаписиЗадания(Задание) Экспорт //!!!TODO - вызывается из двух мест, второе при обработке писем - разобраться
	
	Заявки = ПолучитьРодительскиеЗаявки(Задание);
	
	Для Каждого Заявка Из Заявки Цикл
		
		РезультатВыполненияВHTML = Планирование_Сервер_ат.ПолучитьРезультатВыполненияЗаявки(Заявка);
		
		НаборЗаписей = РегистрыСведений.СвойстваЗаявок_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Заявка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Запись = НаборЗаписей.Добавить();
			Запись.Ссылка = Заявка;
			
		Иначе
			
			Запись = НаборЗаписей[0];
			
		КонецЕсли;
		
		Запись.РезультатВыполненияВHTML = РезультатВыполненияВHTML;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти 

#Область  ОбработкаИзмененияДанныхИнициатораЗаявки

Процедура ПервичноеЗаполнениеСотрудникКлиентПодразделение(Пользователь, Сотрудник, Клиент, Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпецификацияПользователей_ат.Пользователь,
		|	СпецификацияПользователей_ат.Контрагент,
		|	СпецификацияПользователей_ат.Подразделение,
		|	СпецификацияПользователей_ат.Основной
		|ИЗ
		|	РегистрСведений.СпецификацияПользователей_ат КАК СпецификацияПользователей_ат
		|ГДЕ
		|	СпецификацияПользователей_ат.Пользователь = &Пользователь";
		
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Если Не ЗначениеЗаполнено(Сотрудник) Тогда
			
			Сотрудник = Пользователь;
			
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
			
			ВыборкаДетальныеЗаписи.Следующий();
			
			Если Не ЗначениеЗаполнено(Клиент) Тогда
				
				Клиент = ВыборкаДетальныеЗаписи.Контрагент;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Подразделение) Тогда
				
				Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
				
			КонецЕсли;
			
		Иначе
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ВыборкаДетальныеЗаписи.Основной = Истина Тогда
					
					Если Не ЗначениеЗаполнено(Клиент) Тогда
						
						Клиент = ВыборкаДетальныеЗаписи.Контрагент;
						
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Подразделение) Тогда
						
						Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область  Статусы

// Возвращает текущий статус для переданной ссылки
Функция   ПолучитьТекущийСтатус(Ссылка, ВозвращатьДату = Ложь) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИсторияСтатусовЗаявок_атСрезПоследних.Статус,
		|	ИсторияСтатусовЗаявок_атСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних(, Ссылка = &Ссылка) КАК ИсторияСтатусовЗаявок_атСрезПоследних";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задание_ат") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИсторияСтатусовЗаданий_атСрезПоследних.Статус,
		|	ИсторияСтатусовЗаданий_атСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(, Ссылка = &Ссылка) КАК ИсторияСтатусовЗаданий_атСрезПоследних";
		
	Иначе
		
		Сообщить("Ошибка архитектуры кода!", СтатусСообщения.ОченьВажное);
		ЗаписьЖурналаРегистрации("Ошибка архитектуры кода", УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(), Ссылка);
			
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Статус = Выборка.Статус;
		ДатаСтатуса = Выборка.Период;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВозвращатьДату Тогда
		Возврат Новый Структура("Статус, ДатаСтатуса", Статус, ДатаСтатуса);
	Иначе
		Возврат Статус;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьСтатус(Ссылка, Статус, ДатаСтатуса, УведомлятьВнешних = Ложь, Автор = Неопределено) Экспорт
	
	Статусы = Новый Соответствие;
	Статусы.Вставить(Статус, ДатаСтатуса);
	УстановитьСтатусы(Ссылка, Статусы,, УведомлятьВнешних, Автор);
	
КонецПроцедуры

// Устанавливает статусы для переданной ссылки
Процедура УстановитьСтатусы(Ссылка, Статусы, СтруктураПодстановкиСтатуса = Неопределено,
	УведомлятьВнешних = Ложь, Автор = Неопределено, Вложения = Неопределено) Экспорт
	
	ЭтоЗаявка = Ложь;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		РегистрИсторииСтатусов = "ИсторияСтатусовЗаявок_ат";
		ЭтоЗаявка = Истина;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задание_ат") Тогда
		
		РегистрИсторииСтатусов = "ИсторияСтатусовЗаданий_ат";
		
	Иначе
		
		Сообщить("Ошибка архитектуры кода!", СтатусСообщения.ОченьВажное);
		ЗаписьЖурналаРегистрации("Ошибка архитектуры кода", УровеньЖурналаРегистрации.Ошибка,
			Ссылка.Метаданные(), Ссылка);
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийПериод = ТекущаяДатаСеанса();
	
	Если Автор = Неопределено Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	НаборИсторийСтатусов = РегистрыСведений[РегистрИсторииСтатусов].СоздатьНаборЗаписей();
	НаборИсторийСтатусов.Отбор.Ссылка.Установить(Ссылка);
	НаборИсторийСтатусов.Прочитать();
	ТаблицаИсторийСтатусов = НаборИсторийСтатусов.Выгрузить();
	
	ПоследнийСтатус = Неопределено;
	ДатаПоследнегоСтатуса = Дата(1, 1, 1);
	
	ТекущийСтатус = ПолучитьТекущийСтатус(Ссылка);
	
	Для Каждого Статус Из Статусы Цикл
		
		НовыйСтатус = Статус.Ключ;
		НовыйПериод = Статус.Значение;
		
		Если НовыйСтатус = ТекущийСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоЗаявка
			И (НовыйСтатус = Перечисления.СтатусыЗаявок_ат.Закрыта
				ИЛИ НовыйСтатус = Перечисления.СтатусыЗаявок_ат.Отклонена
				ИЛИ НовыйСтатус = Перечисления.СтатусыЗаявок_ат.Отменена
				ИЛИ НовыйСтатус = Перечисления.СтатусыЗаявок_ат.ВОжиданииРелиза) // вообще какой-то костыль :((((
			И ЗначениеЗаполнено(СтруктураПодстановкиСтатуса) Тогда
			
			НовыйСтатус = СтруктураПодстановкиСтатуса.Статус;
			
			Если ЗначениеЗаполнено(СтруктураПодстановкиСтатуса.Период) И СтруктураПодстановкиСтатуса.Период > НовыйПериод Тогда
				НовыйПериод = СтруктураПодстановкиСтатуса.Период;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Статус", НовыйСтатус);
		СтруктураПоиска.Вставить("Период", НовыйПериод);
		
		НайденыеСтроки = ТаблицаИсторийСтатусов.НайтиСтроки(СтруктураПоиска);
		
		Если НайденыеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаИстории = ТаблицаИсторийСтатусов.Добавить();
		
		НоваяСтрокаИстории.Период 				= НовыйПериод;
		НоваяСтрокаИстории.Ссылка 				= Ссылка;
		НоваяСтрокаИстории.Автор 				= Автор;
		НоваяСтрокаИстории.Статус 				= НовыйСтатус;
		НоваяСтрокаИстории.ДатаУстановкиСтатуса = ТекущийПериод;
		
		// Определяем статус, о котором необходимо уведомить
		Если ДатаПоследнегоСтатуса < НовыйПериод Тогда
			
			ПоследнийСтатус = НовыйСтатус;
			ДатаПоследнегоСтатуса = НовыйПериод;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборИсторийСтатусов.Загрузить(ТаблицаИсторийСтатусов);
	НаборИсторийСтатусов.Записать();
	
	Если ЭтоЗаявка Тогда
		
		УстановитьПриоритетЗаявки(Ссылка, ПоследнийСтатус);
		Уведомления_ат.СоздатьНапоминаниеПоЗаявке(Ссылка);
		
		Если ПоследнийСтатус = Перечисления.СтатусыЗаявок_ат.Закрыта
			ИЛИ ПоследнийСтатус = Перечисления.СтатусыЗаявок_ат.Отклонена
			ИЛИ ПоследнийСтатус = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
			
			Уведомления_ат.СнятьСКонтроляПисьмаПоЗаявке(Ссылка);
			
			//!!!TODO: поотменять все активные Согласования и прочее
			
		КонецЕсли;
		
		// Уведомления о закрытии Заявок шлются прямым вызововм процедуры, так как нужно проверять флаг необходимости на формах.
		// !!!!! - переделать эту хрень. см. док.Заявка.ЗакрытьЗаявку_Сервер()
		Если ПоследнийСтатус <> Неопределено
				И ПоследнийСтатус <> Перечисления.СтатусыЗаявок_ат.Закрыта
				И ПоследнийСтатус <> Перечисления.СтатусыЗаявок_ат.Отклонена
				И ПоследнийСтатус <> Перечисления.СтатусыЗаявок_ат.Отменена Тогда
				
			Уведомления_ат.УведомитьОСменеСтатуса(Ссылка, ПоследнийСтатус, Вложения, УведомлятьВнешних);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает актуальные статусы связанным Заявкам
Процедура ПересчитатьСтатусыСвязанныхЗаявок(Ссылки, СтруктураПодстановкиСтатуса = Неопределено) Экспорт
	
	СвязанныеЗаявки = ПолучитьРодительскиеЗаявки(Ссылки);
	ТекущиеДанныеСтатусов = ПолучитьТекущиеДанныеСтатусовЗаявок(СвязанныеЗаявки);
	ПоследнийПериод = Дата(1, 1, 1);
	
	Для Каждого Заявка Из СвязанныеЗаявки Цикл
		
		Статусы = Новый Соответствие;
		НовыеДанныеСтатусов = ПолучитьДанныеДляУстановкиСтатусовЗаявки(Заявка);
		
		Для Каждого ДанныеСтатуса Из НовыеДанныеСтатусов Цикл
			
			Статус = ДанныеСтатуса.Статус;
			Период = ДанныеСтатуса.Период;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Ссылка", Заявка);
			СтруктураПоиска.Вставить("Статус", Статус);
			
			Строки = ТекущиеДанныеСтатусов.НайтиСтроки(СтруктураПоиска);
			
			Если Строки.Количество() = 0 ИЛИ Строки[0].Период <> Период Тогда
				
				Статусы.Вставить(Статус, Период);
				
				Если Период > ПоследнийПериод Тогда
					ПоследнийПериод = Период;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтруктураПодстановкиСтатуса) И ПоследнийПериод > СтруктураПодстановкиСтатуса.Период Тогда
			СтруктураПодстановкиСтатуса.Вставить("Период", ПоследнийПериод + 1);
		КонецЕсли;
		
		УстановитьСтатусы(Заявка, Статусы, СтруктураПодстановкиСтатуса, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьТекущиеДанныеСтатусовЗаявок(Заявки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСтатусовЗаявок_атСрезПоследних.Ссылка,
		|	ИсторияСтатусовЗаявок_атСрезПоследних.Период,
		|	ИсторияСтатусовЗаявок_атСрезПоследних.Статус
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних(, Ссылка В (&Заявки)) КАК ИсторияСтатусовЗаявок_атСрезПоследних";
	
	Запрос.УстановитьПараметр("Заявки", Заявки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция   ПолучитьДанныеДляУстановкиСтатусовЗаявки(Заявка) //!!!желательно удалить обеспечив возможность статусам быть цикличными (точнее по настройке типа схемы Б/П)
	
	Подчиненные = ПолучитьДочерниеЗадания(Заявка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.ВОчереди)) КАК Статус,
		|	МАКСИМУМ(ИсторияСтатусовЗаданийСрезПервых.Период) КАК Период,
		|	0 КАК Количество
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(
		|			,
		|			Ссылка В (&Ссылки)
		|				И (Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВОчереди)
		|					ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.КВозобновлению))) КАК ИсторияСтатусовЗаданийСрезПервых
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Выполняется)),
		|	МАКСИМУМ(ИсторияСтатусовЗаданийСрезПервых.Период),
		|	0
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(
		|			,
		|			Ссылка В (&Ссылки)
		|				И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВРаботе)) КАК ИсторияСтатусовЗаданийСрезПервых
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Закрыта)),
		|	МАКСИМУМ(ИсторияСтатусовЗаданийСрезПоследних.Период),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИсторияСтатусовЗаданийСрезПоследних.Ссылка)
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(
		|			,
		|			Ссылка В (&Ссылки)
		|				И (Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Выполнено)
		|					ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Прервано)
		|					ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено))) КАК ИсторияСтатусовЗаданийСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Статус,
		|	ВТ.Период
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	(НЕ ВТ.Статус ЕСТЬ NULL 
		|				И НЕ ВТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Закрыта)
		|			ИЛИ ВТ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Закрыта)
		|				И ВТ.Количество = &КоличествоЗаданий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
	Запрос.УстановитьПараметр("Ссылки", Подчиненные);
	Запрос.УстановитьПараметр("КоличествоЗаданий", Подчиненные.Количество());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция   ЕстьЗакрытыеРодительскиеЗаявки(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсторияСтатусовЗаявокСрезПоследних.Ссылка
		|ИЗ
		|	РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних(, Ссылка В (&Ссылки)) КАК ИсторияСтатусовЗаявокСрезПоследних
		|ГДЕ
		|	ИсторияСтатусовЗаявокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Закрыта)
		|	ИЛИ ИсторияСтатусовЗаявокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Отклонена)
		|	ИЛИ ИсторияСтатусовЗаявокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Отменена)
		|");
	Запрос.УстановитьПараметр("Ссылки", ПолучитьРодительскиеЗаявки(Ссылка));
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка.Следующий();
	
КонецФункции

#КонецОбласти

#Область  ПриоритетыЗаявок

Процедура УстановитьПриоритетЗаявки(Заявка, Знач Статус = Неопределено, ПересчитатьПриоритет = Ложь) Экспорт
	
	Если Статус = Неопределено Тогда
		
		Статус = ПолучитьТекущийСтатус(Заявка);
		
	КонецЕсли;
	
	ЗаписьПриоритета = РегистрыСведений.ПриоритетЗаявок_ат.СоздатьМенеджерЗаписи();
	ЗаписьПриоритета.Заявка = Заявка;
	ЗаписьПриоритета.Прочитать();
	
	Если ЗаписьПриоритета.Выбран()
		И (Заявка.ПометкаУдаления
			ИЛИ (Статус <> Перечисления.СтатусыЗаявок_ат.Зарегистрирована
				И Статус <> Перечисления.СтатусыЗаявок_ат.НаСогласовании)) Тогда
		
		ЗаписьПриоритета.Удалить();
		
	ИначеЕсли НЕ Заявка.ПометкаУдаления
		И (НЕ ЗаписьПриоритета.Выбран() ИЛИ ПересчитатьПриоритет)
		И Статус = Перечисления.СтатусыЗаявок_ат.Зарегистрирована
		И НЕ Заявка.ТипЗаявки.Пустая() Тогда
		
		ЗаписьПриоритета.Заявка = Заявка;
		ЗаписьПриоритета.Приоритет = ПолучитьПриоритетЗаявки(Заявка.ТипЗаявки);
		ЗаписьПриоритета.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПриоритетЗаявки(Заявка, ВыбраннаяПозиция) Экспорт
	
	НаборЗаписей1 = РегистрыСведений.ПриоритетЗаявок_ат.СоздатьНаборЗаписей();
	НаборЗаписей1.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей1.Прочитать();
	
	НаборЗаписей2 = РегистрыСведений.ПриоритетЗаявок_ат.СоздатьНаборЗаписей();
	НаборЗаписей2.Отбор.Заявка.Установить(ВыбраннаяПозиция);
	НаборЗаписей2.Прочитать();
	
	// Если у одной из Заявок нет приоритета то и менять нечего
	Если НаборЗаписей1.Количество() = 0 И НаборЗаписей2.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации() Тогда // Пытаемся поставить Завку перед Выбранной
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПриоритетЗаявок_ат.Заявка,
			|	ПриоритетЗаявок_ат.Приоритет КАК Приоритет
			|ИЗ
			|	РегистрСведений.ПриоритетЗаявок_ат КАК ПриоритетЗаявок_ат
			|ГДЕ
			|	ПриоритетЗаявок_ат.Приоритет > &Приоритет
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";
		
		Запрос.УстановитьПараметр("Приоритет", НаборЗаписей2[0].Приоритет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		Попытка
			
			НаборЗаписей1[0].Приоритет = НаборЗаписей2[0].Приоритет + 1;
			НаборЗаписей1.Записать();
			
			ПредыдущийПриоритет = НаборЗаписей1[0].Приоритет;
			
			// При изменении приоритета он мог стать выше чем у Заявки стоявшей перед выбраной Заявкой
			Пока Выборка.Следующий() Цикл
				
				// Новый приоритет не превышает значение приорететя, который должен быть выше, дальше проверять нет смысла
				Если Выборка.Приоритет - 1 > ПредыдущийПриоритет Тогда
					Прервать;
				КонецЕсли;
				
				ЗаписьПриоритета = РегистрыСведений.ПриоритетЗаявок_ат.СоздатьМенеджерЗаписи();
				
				ЗаписьПриоритета.Заявка = Выборка.Заявка;
				ЗаписьПриоритета.Приоритет = Выборка.Приоритет + 1 * МножительШагаПриоритетаЗаявки();
				ЗаписьПриоритета.Записать();
				
				ПредыдущийПриоритет = ЗаписьПриоритета.Приоритет;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки;
		
	Иначе // Клиент может только менять Заявки местами
		
		Приоритет1 = НаборЗаписей1[0].Приоритет;
		Приоритет2 = НаборЗаписей2[0].Приоритет;
		
		НаборЗаписей1[0].Приоритет = Приоритет2;
		НаборЗаписей2[0].Приоритет = Приоритет1;
		
		НачатьТранзакцию();
		Попытка
			
			НаборЗаписей1.Записать();
			НаборЗаписей2.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьПриоритетЗаявки(ТипЗаявки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыЗаявок_ат.Приоритет * &МножетельПриоритетаЗаявки + 1 КАК МинимальныйПриоритет
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.ТипыЗаявок_ат КАК ТипыЗаявок_ат
		|ГДЕ
		|	ТипыЗаявок_ат.Приоритет < &Приоритет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипыЗаявок_ат.Приоритет УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриоритетЗаявок_ат.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.ПриоритетЗаявок_ат КАК ПриоритетЗаявок_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ.МинимальныйПриоритет ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПриоритетЗаявок_ат.Приоритет >= ВТ.МинимальныйПриоритет
		|		КОНЕЦ
		|	И ПриоритетЗаявок_ат.Приоритет <= &Приоритет * &МножетельПриоритетаЗаявки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетЗаявок_ат.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";

	Запрос.УстановитьПараметр("МножетельПриоритетаЗаявки", МножительПриоритетаЗаявки());
	Запрос.УстановитьПараметр("Приоритет", ТипЗаявки.Приоритет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Приоритет = Выборка.Приоритет - 1 * МножительШагаПриоритетаЗаявки();
	Иначе
		Приоритет = ТипЗаявки.Приоритет * МножительПриоритетаЗаявки();
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

Функция   МножительПриоритетаЗаявки()
	
	Возврат 10000000000;
	
КонецФункции

Функция   МножительШагаПриоритетаЗаявки()
	
	Возврат 100;
	
КонецФункции

#КонецОбласти

#Область  СвойстваЗаявок

Функция   ПолучитьСвойстваЗаявки(Заявка) Экспорт //!!!!!HOTFIX
	
	СвойстваЗаявки = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвойстваЗаявок.ПланируемаяДатаНачала,
		|	СвойстваЗаявок.ПланируемаяДатаОкончания,
		|	СвойстваЗаявок.ПланируемаяДлительность,
		|	СвойстваЗаявок.ФактическаяДатаНачала,
		|	СвойстваЗаявок.ФактическаяДатаОкончания,
		|	СвойстваЗаявок.ФактическаяДлительность,
		|	СвойстваЗаявок.ОтчетнаяДатаНачала,
		|	СвойстваЗаявок.ОтчетнаяДатаОкончания,
		|	СвойстваЗаявок.ОтчетнаяДлительность,
		|	СвойстваЗаявок.СмещениеДатыНачала,
		|	СвойстваЗаявок.СмещениеДатыОкончания,
		|	СвойстваЗаявок.РазницаДлительностей,
		|	СвойстваЗаявок.РезультатВыполненияВHTML,
		|	СвойстваЗаявок.ЭкземплярПродукта_ИзЗакрытияЗаявки,
		|	СвойстваЗаявок.ВерсияПродукта_ИзЗакрытияЗаявки,
		|	СвойстваЗаявок.ТребуетсяПерезапускЭкземпляраПродукта,
		|	ЕСТЬNULL(ВременаРабот_атОбороты.ПланируемоеВремяОборот, 0) КАК ПланируемоеВремяВыполнения,
		|	ЕСТЬNULL(ВременаРабот_атОбороты.ФактическоеВремяОборот, 0) КАК ФактическоеВремяВыполнения,
		|	ЕСТЬNULL(ВременаРабот_атОбороты.ОтчетноеВремяОборот, 0) КАК ОтчетноеВремяВыполнения
		|ИЗ
		|	РегистрСведений.СвойстваЗаявок_ат КАК СвойстваЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВременаРабот_ат.Обороты КАК ВременаРабот_атОбороты
		|		ПО СвойстваЗаявок.Ссылка = ВременаРабот_атОбороты.Заявка
		|ГДЕ
		|	СвойстваЗаявок.Ссылка = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РЗ = Запрос.Выполнить();
	
	Если НЕ РЗ.Пустой() Тогда
		
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		
		Для Каждого Колонка Из РЗ.Колонки Цикл
			СвойстваЗаявки.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвойстваЗаявки;
	
КонецФункции

Процедура ПересчитатьСвойстваЗаявки(Заявка) Экспорт //!!!!!HOTFIX
	
	ДочерниеЗадания = ПолучитьДочерниеЗадания(Заявка);
	
	НаборЗаписей = РегистрыСведений.СвойстваЗаявок_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ссылка.Установить(Заявка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Запись = НаборЗаписей.Добавить();
		Запись.Ссылка = Заявка;
		
	Иначе
		
		Запись = НаборЗаписей[0];
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СвойстваЗаданий.ПланируемаяДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА NULL
		|			ИНАЧЕ СвойстваЗаданий.ПланируемаяДатаНачала
		|		КОНЕЦ) КАК ПланируемаяДатаНачала,
		|	МАКСИМУМ(СвойстваЗаданий.ПланируемаяДатаОкончания) КАК ПланируемаяДатаОкончания,
		|	СУММА(СвойстваЗаданий.ПланируемаяДлительность) КАК ПланируемаяДлительность,
		|	//
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СвойстваЗаданий.ФактическаяДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА NULL
		|			ИНАЧЕ СвойстваЗаданий.ФактическаяДатаНачала
		|		КОНЕЦ) КАК ФактическаяДатаНачала,
		|	МАКСИМУМ(СвойстваЗаданий.ФактическаяДатаОкончания) КАК ФактическаяДатаОкончания,
		|	СУММА(СвойстваЗаданий.ФактическаяДлительность) КАК ФактическаяДлительность
		|ИЗ
		|	РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|ГДЕ
		|	СвойстваЗаданий.Ссылка В(&Потомки)";
	
	Запрос.УстановитьПараметр("Потомки", ДочерниеЗадания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Статус = ПолучитьТекущийСтатус(Заявка);
	
	Если Выборка.Следующий() Тогда
		
		ПДН = Выборка.ПланируемаяДатаНачала;
		ПДО = Выборка.ПланируемаяДатаОкончания;
		ПДл = Выборка.ПланируемаяДлительность;
		ФДН = Выборка.ФактическаяДатаНачала;
		ФДО = Выборка.ФактическаяДатаОкончания;
		ФДл = Выборка.ФактическаяДлительность;
		
		Запись.ПланируемаяДатаНачала 		= ПДН;
		Запись.ПланируемаяДатаОкончания 	= ПДО;
		Запись.ПланируемаяДлительность 		= ПДл;
		Запись.ФактическаяДатаНачала 		= ФДН;
		Запись.ФактическаяДатаОкончания 	= ФДО;
		Запись.ФактическаяДлительность 		= ФДл;
		
		Если ЗначениеЗаполнено(ФДН) И ЗначениеЗаполнено(ПДН) Тогда
			Запись.СмещениеДатыНачала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРазностьДат(ФДН, ПДН);
		Иначе
			Запись.СмещениеДатыНачала = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФДО) И ЗначениеЗаполнено(ПДО) Тогда
			Запись.СмещениеДатыОкончания = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРазностьДат(ФДО, ПДО);
		Иначе
			Запись.СмещениеДатыОкончания = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФДл) И ЗначениеЗаполнено(ПДл) Тогда
			Запись.РазницаДлительностей = ФДл - ПДл;
		Иначе
			Запись.РазницаДлительностей = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураСтоимостей = Финансы_ат.ПолучитьСтруктуруСтоимостейЗаявки(Заявка);
	Если ЗначениеЗаполнено(СтруктураСтоимостей) Тогда
		
		Запись.СтоимостьТарифКлиента = СтруктураСтоимостей.СтоимостьТарифКлиента;
		//Запись.СтоимостьТарифОбщий = СтруктураСтоимостей.СтоимостьТарифОбщий;
		//Запись.СкидкаСумма = СтруктураСтоимостей.СкидкаСумма;
		//Запись.СкидкаПроцент = СтруктураСтоимостей.СкидкаПроцент;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.СвойстваЗаявокПоИсполнителям_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ссылка.Установить(Заявка);
	НаборЗаписей.Прочитать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Заявка КАК Ссылка,
		|	СвойстваЗаданий_ат.Исполнитель КАК Исполнитель,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СвойстваЗаданий_ат.ПланируемаяДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА СвойстваЗаданий_ат.Ссылка.Дата
		|			ИНАЧЕ СвойстваЗаданий_ат.ПланируемаяДатаНачала
		|		КОНЕЦ) КАК ПланируемоеНачалоРабот
		|ИЗ
		|	РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданий_атСрезПоследних
		|		ПО СвойстваЗаданий_ат.Ссылка = ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка
		|ГДЕ
		|	СвойстваЗаданий_ат.Ссылка В(&Потомки)
		|	И (ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВОчереди)
		|			ИЛИ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.КВозобновлению))
		|
		|СГРУППИРОВАТЬ ПО
		|	СвойстваЗаданий_ат.Исполнитель";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Потомки", ДочерниеЗадания);
	
	Если Статус = Перечисления.СтатусыЗаявок_ат.Закрыта ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отклонена ИЛИ Статус = Перечисления.СтатусыЗаявок_ат.Отменена Тогда
		НаборЗаписей.Очистить();
	Иначе
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПересчитатьСвойстваСвязанныхЗаявок(Ссылки) Экспорт
	
	Для Каждого Заявка Из ПолучитьРодительскиеЗаявки(Ссылки) Цикл
		ПересчитатьСвойстваЗаявки(Заявка);
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьТекстРодительскихЗаявок(Задание) Экспорт
	
	ТекстЗаявок = "";
	
	РодительскиеЗаявки = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	
	Для Каждого Заявка Из РодительскиеЗаявки Цикл
		
		ТекстЗаявок = ТекстЗаявок + Символы.ПС + СокрЛП(Заявка.ТекстЗаявки); 
		
	КонецЦикла;
	
	Возврат СокрЛП(ТекстЗаявок);
	
КонецФункции

Функция   ЕстьНеЗакрытыеЗаданияПоЗаявке(Заявка, НеПоСогласованию = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвязиОбъектов.Объект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданийСрезПоследних
		|			ПО СвязиОбъектов.Объект = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Согласование_ат.ОбъектыСогласования КАК СогласованиеОбъектыСогласования
		|			ПО СвязиОбъектов.Объект = СогласованиеОбъектыСогласования.Задание
		|ГДЕ
		|	СвязиОбъектов.Предок = &Заявка
		|	И ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВРаботе)
		|");
		
	Если ТипЗнч(НеПоСогласованию) = Тип("ДокументСсылка.Согласование_ат") И НЕ НеПоСогласованию.Пустая() Тогда
		
		Запрос.Текст = Запрос.Текст +
			"ИЛИ СогласованиеОбъектыСогласования.Ссылка <> &Согласование
			|	И (ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВОчереди)
			|		ИЛИ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.КВозобновлению)
			|	)";
		
		Запрос.УстановитьПараметр("Согласование", НеПоСогласованию);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция   ПолучитьРезультатВыполненияЗаявки(Заявка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтруктураРезультатаЗаявки_ат.Код, СвязиОбъектов.Код) КАК Код,
	|	ЕСТЬNULL(СтруктураРезультатаЗаявки_ат.Задание, СвязиОбъектов.Объект) КАК Объект,
	|	ЕСТЬNULL(СтруктураРезультатаЗаявки_ат.СсылкаНаКод, СвязиОбъектов.СсылкаНаКод) КАК СсылкаНаКод,
	|	ВЫБОР
	|		КОГДА СвойстваЗаданий_ат.ИсключатьИзРезультатаЗаявки
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЕСТЬNULL(СтруктураРезультатаЗаявки_ат.Использовать, ИСТИНА)
	|	КОНЕЦ КАК Использовать, // hotfix - зачем оно нужно если не использовалось?
	|	ЕСТЬNULL(СтруктураРезультатаЗаявки_ат.ЭтоРучнойТекст, ЛОЖЬ) КАК ЭтоРучнойТекст,
	|	ЕСТЬNULL(СтруктураРезультатаЗаявки_ат.РучнойТекст, """") КАК РучнойТекст,
	|	ЕСТЬNULL(СтруктураРезультатаЗаявки_ат.Порядок, 999999) КАК Порядок,
	|	NULL КАК Описание
	|ИЗ
	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураРезультатаЗаявки_ат КАК СтруктураРезультатаЗаявки_ат
	|		ПО СвязиОбъектов.Объект = СтруктураРезультатаЗаявки_ат.Задание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(&ТекущаяДата, ) КАК ИсторияСтатусовЗаданий_атСрезПоследних
	|		ПО СвязиОбъектов.Объект = ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	|		ПО СвязиОбъектов.Объект = СвойстваЗаданий_ат.Ссылка
	|ГДЕ
	|	СвязиОбъектов.Предок = &Объект
	|//	И (НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено) //hotfix - вообще непонятное условие
	|//			ИЛИ СтруктураРезультатаЗаявки_ат.ЭтоРучнойТекст)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураРезультатаЗаявки_ат.Код,
	|	СтруктураРезультатаЗаявки_ат.Задание,
	|	СтруктураРезультатаЗаявки_ат.СсылкаНаКод,
	|	СтруктураРезультатаЗаявки_ат.Использовать,
	|	СтруктураРезультатаЗаявки_ат.ЭтоРучнойТекст,
	|	СтруктураРезультатаЗаявки_ат.РучнойТекст,
	|	СтруктураРезультатаЗаявки_ат.Порядок,
	|	СтруктураРезультатаЗаявки_ат.Описание
	|ИЗ
	|	РегистрСведений.СтруктураРезультатаЗаявки_ат КАК СтруктураРезультатаЗаявки_ат
	|ГДЕ
	|	СтруктураРезультатаЗаявки_ат.Заявка = &Объект
	|	И СтруктураРезультатаЗаявки_ат.ЭтоРучнойТекст
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("Объект", Заявка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекстРезультата = "";
	
	НаборЗаписей = РегистрыСведений.СтруктураРезультатаЗаявки_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	//Запись = НаборЗаписей.Добавить(); //!!!!!HOTFIX - почему была только одна запись?!!!
	//Запись.Заявка = Заявка;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоРучнойТекст ИЛИ Выборка.Использовать Тогда //!!!!!HOTFIX второго условия раньше не было
			
			Запись = НаборЗаписей.Добавить(); //hotfix
			Запись.Заявка = Заявка;           //hotfix
			
			Если Выборка.ЭтоРучнойТекст Тогда
				
				ТекстРезультата = ТекстРезультата + ?(ПустаяСтрока(ТекстРезультата), "", "<br>") + Выборка.РучнойТекст;
				
			Иначе
				
				Свойства = ПолучитьСвойстваЗадания(Выборка.Объект);
				ТекстРезультата = ТекстРезультата + ?(ПустаяСтрока(ТекстРезультата), "", "<br>")
					+ Свойства.РезультатВыполненияВHTML;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.Записать(); // hotfix
			
		КонецЕсли;
		
	КонецЦикла;
	
	//НаборЗаписей.Записать();
	
	Возврат ТекстРезультата;
	
КонецФункции

#КонецОбласти

#Область  СвойстваЗаданий

Функция   ПолучитьСвойстваЗадания(Задание) Экспорт //!!!!!HOTFIX
	
	СвойстваЗадания = Новый Структура;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвойстваЗаданий.Исполнитель КАК Исполнитель,
		|	СвойстваЗаданий.Краткосрочное КАК Краткосрочное,
		|	СвойстваЗаданий.ПланируемаяДатаНачала КАК ПланируемаяДатаНачала,
		|	СвойстваЗаданий.ПланируемаяДатаОкончания КАК ПланируемаяДатаОкончания,
		|	СвойстваЗаданий.ПланируемаяДлительность КАК ПланируемаяДлительность,
		|	СвойстваЗаданий.ПланируемоеВремяВыполнения КАК ПланируемоеВремяВыполнения,
		|	СвойстваЗаданий.ФактическаяДатаНачала КАК ФактическаяДатаНачала,
		|	СвойстваЗаданий.ФактическаяДатаОкончания КАК ФактическаяДатаОкончания,
		|	СвойстваЗаданий.ФактическаяДлительность КАК ФактическаяДлительность,
		|	СвойстваЗаданий.ФактическоеВремяВыполнения КАК ФактическоеВремяВыполнения,
		|	СвойстваЗаданий.РезультатВыполненияВHTML КАК РезультатВыполненияВHTML,
		|	СвойстваЗаданий.АвторИзменения КАК АвторИзменения,
		|	СвойстваЗаданий.ДатаИзменения КАК ДатаИзменения,
		|	СвойстваЗаданий.ТребуетсяПерезапускЭкземпляраПродукта КАК ТребуетсяПерезапускЭкземпляраПродукта,
		|	ЕСТЬNULL(ИсторияСтатусовЗаданийСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(ИсторияСтатусовЗаданийСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСтатуса,
		|	Задание_ат.СодержаниеРабот КАК СодержаниеРабот
		|ИЗ
		|	Документ.Задание_ат КАК Задание_ат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ПО Задание_ат.Ссылка = СвойстваЗаданий.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(, Ссылка = &Задание) КАК ИсторияСтатусовЗаданийСрезПоследних
		|		ПО Задание_ат.Ссылка = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|ГДЕ
		|	Задание_ат.Ссылка = &Задание
		|");
	Запрос.УстановитьПараметр("Задание", Задание);
	
	РЗ = Запрос.Выполнить();
	Если НЕ РЗ.Пустой() Тогда
		
		Выборка = РЗ.Выбрать();
		Выборка.Следующий();
		
		Для Каждого Колонка Из РЗ.Колонки Цикл
			СвойстваЗадания.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	// ??? какой из вариантов, быстрее и лучше, интересно?
	//ТЗ = Запрос.Выполнить().Выгрузить();
	//Для Каждого Колонка Из ТЗ.Колонки Цикл
	//	СвойстваЗадания.Вставить(Колонка.Имя, ТЗ[0][Колонка.Имя]);
	//КонецЦикла
	
	Возврат СвойстваЗадания;
	
КонецФункции 

Процедура ЗаписатьСвойстваЗадания(Задание, НовыеСвойства, СтатусЗадания = Неопределено) Экспорт
	
	СвойстваЗадания = РегистрыСведений.СвойстваЗаданий_ат.СоздатьМенеджерЗаписи();
	СвойстваЗадания.Ссылка = Задание;
	СвойстваЗадания.Прочитать();
	
	Если НЕ СвойстваЗадания.Выбран() Тогда
		СвойстваЗадания.Ссылка = Задание;
	КонецЕсли;
	
	Ресурсы = Метаданные.РегистрыСведений.СвойстваЗаданий_ат.Ресурсы;
	
	Для Каждого Свойство Из НовыеСвойства Цикл
		
		Если Ресурсы.Найти(Свойство.Ключ) <> Неопределено Тогда
			
			Если ВРег(Свойство.Ключ) = ВРег("Исполнитель")
				И СвойстваЗадания[Свойство.Ключ] <> Свойство.Значение Тогда // изменился Исполнитель Задания
				
				Уведомления_ат.УведомитьОСменеИсполнителяПоЗаданию(Задание, Свойство.Значение, СвойстваЗадания[Свойство.Ключ]);
				
			КонецЕсли;
			
			СвойстваЗадания[Свойство.Ключ] = Свойство.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СвойстваЗадания.ПланируемаяДатаНачала) Тогда
		
		Пороги = ПродолжительностьПроцессов_Сервер_ат.ПолучитьПорогиВыполнения(
			СвойстваЗадания.ПланируемаяДатаНачала, СвойстваЗадания.ПланируемаяДлительность);
		
		СвойстваЗадания.Порог1 = Пороги.Порог1;
		СвойстваЗадания.Порог2 = Пороги.Порог2;
		
	КонецЕсли;
	
	СвойстваЗадания.Записать();
	
	Согласование_ат.ПровестиЗаданиеПоРегистрам(Задание, СвойстваЗадания, СтатусЗадания);
	
	Уведомления_ат.СоздатьНапоминанияПоЗаданию(Задание, НовыеСвойства);
	
КонецПроцедуры

#КонецОбласти 

#Область  Проекты

Функция   ПолучитьРодительскийПроект(Проект) Экспорт
	
	РодительскийПроект = Проект;
	
	Пока НЕ РодительскийПроект.Родитель.Пустая() Цикл
		
		РодительскийПроект = РодительскийПроект.Родитель;
		
	КонецЦикла;
	
	Возврат РодительскийПроект;
	
КонецФункции 

// Возвращает массив родительских проектов для переданного проекта
//
// Параметры:
//	Проект - СправочникСсылка.Проекты_ат - Проект для которого будет сформирован массив родительских проектов.
//	ТолькоАктуальные - Булево - Если истина в массив не будут подбираться помеченые на удаление, архивные и проекты будующих периодов и имеющие родителей с аналагичными свойствами.
//	ВключатьПереданный - Булево - Если истина в массив не будут включён переданный проект.
//
// Возвращаемое значение:
//  Массив
// 
Функция   ПолучитьРодительскиеПроекты(Проект, ТолькоАктуальные = Истина, ВключатьПереданный = Ложь) Экспорт
	
	МассивПроектов = Новый Массив;
	
	Если ВключатьПереданный Тогда
		
		Если ТолькоАктуальные
			И (Проект.ПометкаУдаления
				ИЛИ Проект.Архивный
				ИЛИ Проект.БудущихПериодов) Тогда
			
			Возврат Новый Массив;
			
		Иначе
			
			МассивПроектов.Добавить(Проект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РодительскийПроект = Проект.Родитель;
	
	Пока ЗначениеЗаполнено(РодительскийПроект) Цикл
		
		Если ТолькоАктуальные
			И (РодительскийПроект.ПометкаУдаления
				ИЛИ РодительскийПроект.Архивный
				ИЛИ РодительскийПроект.БудущихПериодов) Тогда
			
			Возврат Новый Массив;
			
		Иначе 	
			
			МассивПроектов.Добавить(РодительскийПроект);
			
		КонецЕсли;
		
		РодительскийПроект = РодительскийПроект.Родитель; 
		
	КонецЦикла;
	
	Возврат МассивПроектов;
	
КонецФункции

// Дополняет переданный список значений кураторами проектов из переданного массива проектов
//
// Параметры:
//	Список - СписокЗначений - Список значений который будет дополнен.
//	МассивПроектов - Массив - Проекты дла которых будут отобраны кураторы.
//
Процедура ДополнитьСписокКураторамиПроектов(Список, МассивПроектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проекты_атКураторы.Куратор
	|ИЗ
	|	Справочник.Проекты_ат.Кураторы КАК Проекты_атКураторы
	|ГДЕ
	|	Проекты_атКураторы.Ссылка В(&МассивПроектов)
	|	И НЕ Проекты_атКураторы.Куратор.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Список.Добавить(Выборка.Куратор);
		
	КонецЦикла;
	
КонецПроцедуры 

Функция   ПолучитьРуководителейПроектаПоЗаданию(Задание) Экспорт

	МассивЗаявок = Планирование_Сервер_ат.ПолучитьРодительскиеЗаявки(Задание);
	
	МассивПроектов = Планирование_Сервер_ат.ПолучитьПроектыЗаявок(МассивЗаявок, Истина, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проекты_ат.Ответственный
	|ИЗ
	|	Справочник.Проекты_ат КАК Проекты_ат
	|ГДЕ
	|	Проекты_ат.Ссылка В(&МассивПроектов)
	|	И НЕ Проекты_ат.ПометкаУдаления
	|	И НЕ Проекты_ат.Ответственный.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Список = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Список.Добавить(Выборка.Ответственный);
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция   ПолучитьМассивАктуальныхПроектов(БезАрхивных, БезБудущихПериодов, ТолькоПерсональные = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Проекты_ат.Ссылка КАК Проект
	|ИЗ
	|	Справочник.Проекты_ат КАК Проекты_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты_ат.Кураторы КАК Проекты_атКураторы
	|			ПО Проекты_атКураторы.Ссылка = Проекты_ат.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты_ат.Кураторы КАК Проекты_атКураторы_Заполнены
	|			ПО Проекты_атКураторы_Заполнены.Ссылка = Проекты_ат.Ссылка
	|				И Проекты_атКураторы_Заполнены.НомерСтроки = 1
	|ГДЕ
	|	НЕ Проекты_ат.ПометкаУдаления");
	
	Если БезАрхивных Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ Проекты_ат.Архивный";
		
	КонецЕсли;
	
	Если БезБудущихПериодов Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И НЕ Проекты_ат.БудущихПериодов";
		
	КонецЕсли;
	
	Если ТолькоПерсональные Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И (Проекты_ат.Ответственный = &Пользователь
		|		ИЛИ Проекты_ат.Ответственный = &ПустойПользователь
		|		ИЛИ Проекты_атКураторы.Куратор = &Пользователь
		|		ИЛИ Проекты_атКураторы_Заполнены.Ссылка ЕСТЬ NULL)";
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
		Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	
КонецФункции

#КонецОбласти 

#Область  ВспомогательныеПроцедурыИФункции

// Возвращает родительские Заявки для переданных ссылок
//
// Параметры:
//	Ссылки - ДокументСсылка.Заявка_ат, ДокументСсылка.Задание_ат, Массив - объекты для поиска
//  ВключаяПереданныеЗаявки - Булево - в результат будут включены переданные в параметре Ссылки заявки(а)
//
Функция   ПолучитьРодительскиеЗаявки(Ссылки, ВключаяПереданныеЗаявки = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиОбъектов.Предок КАК Заявка
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект В(&Ссылки)
		|	И СвязиОбъектов.Предок ССЫЛКА Документ.Заявка_ат
		|	И НЕ ВЫРАЗИТЬ(СвязиОбъектов.Предок КАК Документ.Заявка_ат).ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	СвязиОбъектов.Предок";
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	МассивЗаявок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заявка");
	
	Если ВключаяПереданныеЗаявки Тогда
		Если ТипЗнч(Ссылки) = Тип("Массив") Тогда
			МассивСсылок = Ссылки;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(Ссылки);
		КонецЕсли;

		Для Каждого Ссылка Из МассивСсылок Цикл
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") И МассивЗаявок.Найти(Ссылка) = Неопределено Тогда 
				МассивЗаявок.Добавить(Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивЗаявок;
	
КонецФункции

// Получает первую родительскую заявку, если их несколько.
// Принято решение о неиспользовании связи одного задания с несколькими заявками.
// Родительская заявка может быть только одна.
// Возвращаемое значение - ДокументСсылка Заявка, неопределено.
//
Функция   ПолучитьРодительскуюЗаявку(Ссылка) Экспорт
	
	РодительскиеЗаявки = ПолучитьРодительскиеЗаявки(Ссылка);
	
	Если РодительскиеЗаявки.Количество() > 0 Тогда
		Заявка = РодительскиеЗаявки[0];
	Иначе
		Заявка = Неопределено;
	КонецЕсли;
	
	Возврат Заявка;
	
КонецФункции

// Возвращает массив дочерних Заданий для переданных ссылок
//
// Параметры:
//	Ссылки - ДокументСсылка.Заявка_ат, ДокументСсылка.Задание_ат, массив - объекты для поиска
//  ВключаяПереданныеЗадания - булево - в результат будут включены переданные в параметре Ссылки задания(е)
//
Функция   ПолучитьДочерниеЗадания(Ссылки, ВключаяПереданныеЗадания = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиОбъектов.Объект КАК Задание
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Предок В(&Ссылки)
		|	И СвязиОбъектов.Объект ССЫЛКА Документ.Задание_ат
		|	И НЕ СвязиОбъектов.Объект.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	МассивЗаданий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задание");
	
	Если ВключаяПереданныеЗадания Тогда
		Если ТипЗнч(Ссылки) = Тип("Массив") Тогда
			МассивСсылок = Ссылки;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(Ссылки);
		КонецЕсли;

		Для Каждого Ссылка Из МассивСсылок Цикл
			Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задание_ат") И МассивЗаданий.Найти(Ссылка) = Неопределено Тогда 
				МассивЗаданий.Добавить(Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивЗаданий;
	
КонецФункции 

Функция   ЗаданиеРедактируется(Задание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ПланированиеЗаданий.Модифицированность) КАК Количество
		|ИЗ
		|	РегистрСведений.ПланированиеЗаданий_ат КАК ПланированиеЗаданий
		|ГДЕ
		|	ПланированиеЗаданий.Задание = &Задание
		|	И ПланированиеЗаданий.Модифицированность";
		
	Запрос.УстановитьПараметр("Задание", Задание);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Количество > 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция   ПолучитьВыполняемоеЗадание(Исполнитель) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвойстваЗаданий.Ссылка
		|ИЗ
		|	РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(, ) КАК ИсторияСтатусовЗаданийСрезПоследних
		|		ПО СвойстваЗаданий.Ссылка = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|ГДЕ
		|	СвойстваЗаданий.Исполнитель = &Исполнитель
		|	И ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВРаботе)
		|	И НЕ СвойстваЗаданий.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьВыполняемыеЗадания(Исполнитель)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвойстваЗаданий.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(, ) КАК ИсторияСтатусовЗаданийСрезПоследних
		|		ПО СвойстваЗаданий.Ссылка = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|ГДЕ
		|	СвойстваЗаданий.Исполнитель = &Исполнитель
		|	И ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.ВРаботе)
		|	И НЕ СвойстваЗаданий.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвойстваЗаданий.ФактическаяДатаНачала");
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция   ПолучитьМассивКлиентовПоЗаявкам(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда	Возврат Новый Массив; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заявка_ат.Клиент КАК Клиент
		|ИЗ
		|	Документ.Заявка_ат КАК Заявка_ат
		|ГДЕ
		|	Заявка_ат.Ссылка В(&МассивЗаявок)
		|	И НЕ Клиент.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивЗаявок", ПолучитьРодительскиеЗаявки(Ссылка));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Клиент");
	
КонецФункции 

Функция   ПолучитьДатыЗаявкиПоЗаданиям(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(
		|		ВЫБОР
		|			КОГДА СвойстваЗаданий.ПланируемаяДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА
		|					NULL
		|				ИНАЧЕ
		|					СвойстваЗаданий.ПланируемаяДатаНачала
		|			КОНЕЦ) КАК ПланДатаНачала,
		|	МАКСИМУМ(СвойстваЗаданий.ПланируемаяДатаОкончания) КАК ПланДатаОкончания,
		|	МИНИМУМ(
		|		ВЫБОР
		|			КОГДА СвойстваЗаданий.ФактическаяДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА
		|					NULL
		|				ИНАЧЕ
		|					СвойстваЗаданий.ФактическаяДатаНачала
		|			КОНЕЦ) КАК ФактДатаНачала,
		|	МАКСИМУМ(СвойстваЗаданий.ФактическаяДатаОкончания) КАК ФактДатаОкончания,
		|	СУММА(СвойстваЗаданий.ПланируемоеВремяВыполнения) КАК ПланВремяВыполнения,
		|	СУММА(СвойстваЗаданий.ФактическоеВремяВыполнения) КАК ФактВремяВыполнения
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ПО СвязиОбъектов.Объект = СвойстваЗаданий.Ссылка
		|ГДЕ
		|	СвязиОбъектов.Предок = &Ссылка
		|	И НЕ СвойстваЗаданий.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыЗаявки = Новый Структура("ПланДатаНачала, ПланДатаОкончания, ПланВремяВыполнения, ФактДатаНачала, ФактДатаОкончания, ФактВремяВыполнения");
	
	Если Выборка.Следующий() Тогда
		
		ДатыЗаявки.ПланДатаНачала = Выборка.ПланДатаНачала;
		ДатыЗаявки.ПланДатаОкончания = Выборка.ПланДатаОкончания;
		ДатыЗаявки.ПланВремяВыполнения = Выборка.ПланВремяВыполнения;
		ДатыЗаявки.ФактДатаНачала = Выборка.ФактДатаНачала;
		ДатыЗаявки.ФактДатаОкончания = Выборка.ФактДатаОкончания;
		ДатыЗаявки.ФактВремяВыполнения = Выборка.ФактВремяВыполнения;
		
	КонецЕсли;
	
	Возврат ДатыЗаявки;
	
КонецФункции

Функция   ПолучитьИПроверитьДатыВКонцеОчереди(Исполнитель, Ссылка, Длительность, ИскатьПодходящуюПозицию = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(СвойстваЗаданий.ПланируемаяДатаОкончания) КАК КонецОчереди
		|ИЗ
		|	РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданийСрезПоследних
		|		ПО СвойстваЗаданий.Ссылка = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|ГДЕ
		|	СвойстваЗаданий.Исполнитель = &Исполнитель
		|	И НЕ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Выполнено)
		|	И НЕ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Прервано)
		|	И НЕ ИсторияСтатусовЗаданийСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено)
		|	И НЕ ИсторияСтатусовЗаданийСрезПоследних.Ссылка.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		КонецОчереди = Выборка.КонецОчереди;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецОчереди) И КонецОчереди > НачалоДня(ТекущаяДата()) Тогда
		
		ДатаНачала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(КонецОчереди + 1);
		
	Иначе
		
		ДатаНачала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(ТекущаяДата());
		
	КонецЕсли;
	
	ДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(ДатаНачала, Длительность));
	
	Возврат ПроверитьДаты(Ссылка, ДатаНачала, ДатаОкончания, Длительность, ИскатьПодходящуюПозицию);
	
КонецФункции

Функция   ПроверитьДаты(Ссылка, ДатаНачала, ДатаОкончания, Длительность, ИскатьПодходящуюПозицию)
	
	ПозицияСдвинута = Ложь;
	ВСпринте = ПродолжительностьПроцессов_Сервер_ат.ВСпринте(ДатаНачала, ДатаОкончания);
	
	Если НЕ ВСпринте И ИскатьПодходящуюПозицию Тогда
		
		НайтиПодходящуюПозицию(ВСпринте, ДатаНачала, ДатаОкончания, Длительность, ПозицияСдвинута);
		
	КонецЕсли;
	
	ОжидаемаяДатаЗавершения = ПолучитьОжидаемуюДатуЗавершения(Ссылка);
	
	Сообщение = "";
	
	Если ЗначениеЗаполнено(ОжидаемаяДатаЗавершения) И НачалоДня(ОжидаемаяДатаЗавершения) < НачалоДня(ДатаОкончания) Тогда
		
		Сообщение = "Ожидаемая дата завершения Заявки (" + Формат(ОжидаемаяДатаЗавершения, "ДФ=dd.MM.yyyy") +
			") меньше планируемой даты завершения Задания (" + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + ").";
		
	КонецЕсли;
	
	Если ВСпринте Тогда
		
		Если ПозицияСдвинута Тогда 
			
			Сообщение = "При автоматическом определении дат Задание было сдвинуто дальше конца очереди." + 
				?(ЗначениеЗаполнено(Сообщение), Символы.ПС, "") + Сообщение;
			
		КонецЕсли;
		
	Иначе
		
		Сообщение = "Не удалось поставить Задание в очередь т.к. его длительность слишком велика." + Символы.ПС + Сообщение;
		
	КонецЕсли;
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("ВСпринте", ВСпринте);
	ВозвращаемаяСтруктура.Вставить("Сообщение", Сообщение);
	ВозвращаемаяСтруктура.Вставить("ПланируемаяДатаНачала", ДатаНачала);
	ВозвращаемаяСтруктура.Вставить("ПланируемаяДатаОкончания", ДатаОкончания);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции 

Процедура НайтиПодходящуюПозицию(ВСпринте, ДатаНачала, ДатаОкончания, Длительность, ПозицияСдвинута)
	
	НоваяДатаНачала = ДатаНачала;
	
	Для Сч = 1 По 2 Цикл // сделаем две попытки, большее число попыток сдвинет даты слишком далеко от конца очереди
		
		НоваяДатаНачала = ПродолжительностьПроцессов_Сервер_ат.ПолучитьРабочийДень(КонецНедели(НоваяДатаНачала) + 1);
		НоваяДатаОкончания = КонецДня(ПродолжительностьПроцессов_Сервер_ат.ПолучитьДату(НоваяДатаНачала, Длительность));
		ВСпринте = ПродолжительностьПроцессов_Сервер_ат.ВСпринте(НоваяДатаНачала, НоваяДатаОкончания);
		
		Если ВСпринте Тогда
			ПозицияСдвинута = Истина;
			ДатаНачала = НоваяДатаНачала;
			ДатаОкончания = НоваяДатаОкончания;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Функция   ПроверитьКорректностьИзмененияДаты(Ссылка, ПроверяемаяДата) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(СвязиОбъектов.Объект.Дата) КАК МинимальнаяДата
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Предок = &Ссылка
		|	И СвязиОбъектов.Объект ССЫЛКА Документ.Задание_ат
		|	И НЕ ВЫРАЗИТЬ(СвязиОбъектов.Объект КАК Документ.Задание_ат).ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.МинимальнаяДата) ИЛИ Выборка.МинимальнаяДата > ПроверяемаяДата Тогда
				
				ИзменениеДопустимо = Истина;
				
			Иначе
				
				ИзменениеДопустимо = Ложь;
				Текст = "Дата не может быть меньше минимальной даты подчиненных Заданий (" + Выборка.МинимальнаяДата + ")!";
				
			КонецЕсли;
			
		Иначе
			
			ИзменениеДопустимо = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.Задание_ат") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(СвязиОбъектов.Предок.Дата) КАК МаксимальнаяДата
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Ссылка
		|	И СвязиОбъектов.Предок ССЫЛКА Документ.Заявка_ат
		|	И НЕ ВЫРАЗИТЬ(СвязиОбъектов.Предок КАК Документ.Заявка_ат).ПометкаУдаления";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ПроверяемаяДата > Выборка.МаксимальнаяДата Тогда
				
				ИзменениеДопустимо = Истина;
				
			Иначе
				
				ИзменениеДопустимо = Ложь;
				Текст = "Дата может быть больше максимальной даты родительских Заявок (" + Выборка.МаксимальнаяДата + ")!";
				
			КонецЕсли;
			
		Иначе
			
			ИзменениеДопустимо = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ИзменениеДопустимо = Ложь;
		Текст = "Проверка корректности дат не поддерживается для " + ТипЗнч(Ссылка) + "!";
		
	КонецЕсли;
	
	Возврат Новый Структура("ИзменениеДопустимо, Текст", ИзменениеДопустимо, Текст);
	
КонецФункции 

// Возвращает массив Проектов для переданных Заявок
//
// Параметры:
//	МассивЗаявок - Массив - Массив ссылок на Заявки для которых будет сформирован массив Проектов.
//	ВключатьРодительские - Булево - Если истина будут подбираться так же родительские проекты.
//	ТолькоАктуальные - Булево - Если истина в массив не будут подбираться помеченые на удаление, архивные, проекты будующих периодов
//								и имеющие родителей с аналагичными свойствами.
//
// Возвращаемое значение:
//  Массив
// 
Функция   ПолучитьПроектыЗаявок(МассивЗаявок, ВключатьРодительские = Истина, ТолькоАктуальные = Истина) Экспорт
	
	МассивПроектов = Новый Массив;
	
	Для Каждого Заявка Из МассивЗаявок Цикл
		
		ПроектЗаявки = Заявка.Проект;
		
		Если НЕ ЗначениеЗаполнено(ПроектЗаявки) Тогда
			
			Продолжить;
			
		ИначеЕсли ТолькоАктуальные
			И (ПроектЗаявки.ПометкаУдаления
				ИЛИ ПроектЗаявки.Архивный
				ИЛИ ПроектЗаявки.БудущихПериодов) Тогда
				
			Продолжить;
			
		Иначе 	
			
			Если МассивПроектов.Найти(ПроектЗаявки) = Неопределено Тогда
				
				МассивПроектов.Добавить(ПроектЗаявки);
				
				Если ВключатьРодительские Тогда
					
					РодительскиеПроекты = ПолучитьРодительскиеПроекты(ПроектЗаявки, ТолькоАктуальные);
					
					Для Каждого РодительскийПроект Из РодительскиеПроекты Цикл
						
						Если МассивПроектов.Найти(РодительскийПроект) = Неопределено Тогда
							
							МассивПроектов.Добавить(РодительскийПроект);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПроектов;
	
КонецФункции	

Функция   ПроверитьВозможностьСвязиЗаданияСЗаявками(Родитель) Экспорт
	
	// Принято решение о невозможности связи одного Задания с несколькими Заявками
	
	Возврат Неопределено;
	
КонецФункции 

Функция   ОжидаемыеДатыЗавершенияРодительскихЗаявокЗаполнены(Ссылка) Экспорт
	
	РодительскиеЗаявки = ПолучитьРодительскиеЗаявки(Ссылка, (ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат")));
	
	Для Каждого Заявка Из РодительскиеЗаявки Цикл
		
		Если НЕ ЗначениеЗаполнено(ПолучитьОжидаемуюДатуЗавершенияЗаявки(Заявка)) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции 

Функция   ПолучитьВремяВыставленияТекущегоСтатусаЗаявки(Заявка) Экспорт
	
	СтруктураСтатуса = ПолучитьТекущийСтатус(Заявка, Истина);
	
	Если СтруктураСтатуса = Неопределено Тогда
		
		Возврат '00010101';
		
	Иначе
		
		Возврат СтруктураСтатуса.ДатаСтатуса;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьМаксимальнуюОжидаемуюДатуЗавершенияЗадания(Задание) Экспорт
	
	МаксимальнаяОжидаемаяДатаЗавершения = '39991231';
	Заявки = ПолучитьРодительскиеЗаявки(Задание);
	
	Для Каждого Заявка Из Заявки Цикл
		
		ОжидаемаяДатаЗавершения = ПолучитьОжидаемуюДатуЗавершенияЗаявки(Заявка);
		
		Если МаксимальнаяОжидаемаяДатаЗавершения > ОжидаемаяДатаЗавершения Тогда
			МаксимальнаяОжидаемаяДатаЗавершения = ОжидаемаяДатаЗавершения;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксимальнаяОжидаемаяДатаЗавершения;
	
КонецФункции

Процедура СменитьОтветственногоПоЗаявке(Заявка, Ответственный) Экспорт
	
	ЗаявкаОбъект = Заявка.ПолучитьОбъект();
	ЗаявкаОбъект.Ответственный = Ответственный;
	ЗаявкаОбъект.ОбменДанными.Загрузка = Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ЗаявкаОбъект.Записать();
	
КонецПроцедуры

Функция   ПоследняяДатаПоПлану(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МАКСИМУМ(ЕСТЬNULL(СвойстваЗаданий_ат.ПланируемаяДатаОкончания, ДАТАВРЕМЯ(1,1,1))) КАК ПланируемаяДатаОкончания
	|ИЗ
	|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	|		ПО СвязиОбъектов_ат.Объект = СвойстваЗаданий_ат.Ссылка
	|ГДЕ
	|	СвязиОбъектов_ат.Предок = &Заявка";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат '00010101';
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.ПланируемаяДатаОкончания;
		
	КонецЕсли;
	
КонецФункции

// Возвращает минимальную из ожидаемых дат завершения связанных Заявок
//
// Параметры:
//  Ссылка - ДокументСсылка.Задание_ат, ДокументСсылка.Заявка_ат - Документ для которого будет получена Ожидаемая дата завершения.
//
// Возвращаемое значение:
//  Дата
//
Функция   ПолучитьОжидаемуюДатуЗавершения(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних.ОжидаемаяДатаЗавершения) КАК ОжидаемаяДатаЗавершения
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияОжидаемойДатыЗавершенияРабот_ат.СрезПоследних КАК ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних
		|		ПО СвязиОбъектов.Предок = ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних.Заявка
		|ГДЕ
		|	СвязиОбъектов.Объект = &Ссылка
		|	И СвязиОбъектов.Предок ССЫЛКА Документ.Заявка_ат
		|	И НЕ ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних.ОжидаемаяДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1)
		|	И НЕ ВЫРАЗИТЬ(СвязиОбъектов.Предок КАК Документ.Заявка_ат).ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		
		ОжидаемаяДатаЗавершения = Выборка.ОжидаемаяДатаЗавершения;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОжидаемаяДатаЗавершения) И ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") Тогда
		
		ОжидаемаяДатаЗавершения = ПолучитьОжидаемуюДатуЗавершенияЗаявки(Ссылка);
		
	КонецЕсли;
	
	Возврат ОжидаемаяДатаЗавершения;
	
КонецФункции 

Функция   ПолучитьОжидаемуюДатуЗавершенияЗаявки(Заявка, Дата = Неопределено, ТолькоОДЗ = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних.ОжидаемаяДатаЗавершения,
	|	ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних.ПричинаПереноса,
	|	ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних.Комментарий
	|ИЗ
	|	РегистрСведений.ИсторияОжидаемойДатыЗавершенияРабот_ат.СрезПоследних(&Период, Заявка = &Заявка) КАК ИсторияОжидаемойДатыЗавершенияРабот_атСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ?(Дата = Неопределено, ТекущаяДатаСеанса(), Дата));
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураОДЗ = Новый Структура;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		СтруктураОДЗ.Вставить("ОжидаемаяДатаЗавершения", '00010101');
		
		Если НЕ ТолькоОДЗ Тогда
			
			СтруктураОДЗ.Вставить("ПричинаПереноса", Справочники.ПричиныПереносаОжидаемойДатыЗавершенияРабот_ат.ПустаяСсылка());
			СтруктураОДЗ.Вставить("Комментарий", "");
			
		КонецЕсли;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СтруктураОДЗ.Вставить("ОжидаемаяДатаЗавершения", Выборка.ОжидаемаяДатаЗавершения);
		
		Если НЕ ТолькоОДЗ Тогда
			
			СтруктураОДЗ.Вставить("ПричинаПереноса", Выборка.ПричинаПереноса);
			СтруктураОДЗ.Вставить("Комментарий", Выборка.Комментарий);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ?(ТолькоОДЗ, СтруктураОДЗ.ОжидаемаяДатаЗавершения, СтруктураОДЗ);
	
КонецФункции

Процедура УстановитьОжидаемуюДатуЗавершенияЗаявки(Заявка, ОДЗ, ДатаУстановки = Неопределено,
	Причина = Неопределено, Комментарий = "", Автор = Неопределено) Экспорт
	
	Если Заявка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаУстановки = Неопределено Тогда
		ДатаУстановки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ТекущаяОДЗ = ПолучитьОжидаемуюДатуЗавершенияЗаявки(Заявка, ДатаУстановки);
	
	Если ТекущаяОДЗ = ОДЗ Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИсторияОжидаемойДатыЗавершенияРабот_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ДатаУстановки);
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей.Добавить();
	Запись.Заявка = Заявка;
	Запись.Период = ДатаУстановки;
	Запись.ОжидаемаяДатаЗавершения = ОДЗ;
	Запись.ПричинаПереноса = Причина;
	Запись.Комментарий = Комментарий;
	
	Запись.Автор = ?(Автор = Неопределено, Пользователи.ТекущийПользователь(), Автор);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция   ПолучитьПричинуПереносаОДЗ(Заявка, Задание = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Причина = Справочники.ПричиныПереносаОжидаемойДатыЗавершенияРабот_ат.Другое;
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Согласование_ат.Ссылка КАК Ссылка,
		|		МАКСИМУМ(Согласование_атСогласующие.ДатаВремяСогласования) КАК ДатаСобытия,
		|		1 КАК Приоритет
		|	ИЗ
		|		РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.Согласование_ат КАК Согласование_ат
		|			ПО КосвенныеСвязиЗаданий_ат.Согласование = Согласование_ат.Ссылка,
		|		Документ.Согласование_ат.Согласующие КАК Согласование_атСогласующие
		|	ГДЕ
		|		(КосвенныеСвязиЗаданий_ат.Задание = &Задание
		|				ИЛИ КосвенныеСвязиЗаданий_ат.Задание = ЗНАЧЕНИЕ(Документ.Задание_ат.ПустаяСсылка))
		|		И КосвенныеСвязиЗаданий_ат.Заявка = &Заявка
		|		И Согласование_ат.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласований_ат.Принято)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Согласование_ат.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КосвенныеСвязиЗаданий_ат.Поступление,
		|		МАКСИМУМ(КосвенныеСвязиЗаданий_ат.Поступление.Дата),
		|		2
		|	ИЗ
		|		РегистрСведений.КосвенныеСвязиЗаданий_ат КАК КосвенныеСвязиЗаданий_ат
		|	ГДЕ
		|		(КосвенныеСвязиЗаданий_ат.Задание = &Задание
		|				ИЛИ КосвенныеСвязиЗаданий_ат.Задание = ЗНАЧЕНИЕ(Документ.Задание_ат.ПустаяСсылка))
		|		И КосвенныеСвязиЗаданий_ат.Заявка = &Заявка
		|		И КосвенныеСвязиЗаданий_ат.Поступление.Проведен
		|	
		|	СГРУППИРОВАТЬ ПО
		|		КосвенныеСвязиЗаданий_ат.Поступление) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Приоритет,
		|	ДатаСобытия УБЫВ";
		
		Запрос.УстановитьПараметр("Заявка", Заявка);
		Запрос.УстановитьПараметр("Задание", Задание);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ДатаСобытия = Выборка.ДатаСобытия;
				Документ = Выборка.Ссылка;
				
				СвойстваЗаявки = ПолучитьСвойстваЗаявки(Заявка);
				
				Если СвойстваЗаявки.Свойство("ПланируемаяДатаНачала")
					И ЗначениеЗаполнено(СвойстваЗаявки.ПланируемаяДатаНачала)
					И НачалоДня(СвойстваЗаявки.ПланируемаяДатаНачала) >= НачалоДня(ДатаСобытия) Тогда
					
					Если ТипЗнч(Документ) = Тип("ДокументСсылка.Согласование_ат") Тогда
						Причина = Справочники.ПричиныПереносаОжидаемойДатыЗавершенияРабот_ат.ПозднееСогласование;
					ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеНаСчетКлиента_ат") Тогда
						Причина = Справочники.ПричиныПереносаОжидаемойДатыЗавершенияРабот_ат.ПоздняяОплатаСчета;
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Причина;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции

Функция   ПолучитьЗаявкуПоДокументу(Документ) Экспорт
	
	Заявка = Неопределено;
	
	Для Каждого СтрокаКосвенныхСвязей Из Документ.КосвенныеСвязиЗаданий Цикл
		
		Если ЗначениеЗаполнено(СтрокаКосвенныхСвязей.Заявка) Тогда
			
			Заявка = СтрокаКосвенныхСвязей.Заявка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ?(Заявка = Неопределено, Документы.Заявка_ат.ПустаяСсылка(), Заявка);
	
КонецФункции

Функция   ПолучитьВидДеятельностиПриОбновлении()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СодержанияРабот_ат.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СодержанияРабот_ат КАК СодержанияРабот_ат
		|ГДЕ
		|	НЕ СодержанияРабот_ат.ПометкаУдаления
		|	И СодержанияРабот_ат.Обновление
		|	И СодержанияРабот_ат.КраткосрочныеРаботы
		|	И НЕ СодержанияРабот_ат.ИТС_временное");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти 
