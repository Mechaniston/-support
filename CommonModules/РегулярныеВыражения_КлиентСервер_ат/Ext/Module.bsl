
////////////////////////////////////////////////////////////////////////////////
// Обёртки для предустановленной RegExp Windows.
//


// Возвращает объект для работы с регулярными выражениями с переданными параметрами.
//
// Параметры:
//	ШаблонПоиска - Строка - Регулярное выражение для осуществления поиска.
//	ИскатьДоПервогоСоответствия - Булево - Определяет искать первое соответствие или все.
//	ИгнорироватьРегистр - Булево - Определяет будет ли учитываться регистр символов при поиске.
//	МногострочныйРежим - Булево - Определяет многострочный или однострочный режим.
//
// Возвращаемое значение:
//  COMОбъект
// 
Функция   СоздатьОбъектРегулярныхВыражений(ШаблонПоиска = "", ИгнорироватьРегистр = Истина,
	ИскатьДоПервогоСоответствия = Ложь, МногострочныйРежим = Истина) Экспорт
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	
    RegExp.Global = НЕ ИскатьДоПервогоСоответствия;	
	RegExp.IgnoreCase = ИгнорироватьРегистр;
    RegExp.MultiLine = МногострочныйРежим;
    RegExp.Pattern = ШаблонПоиска;
	
	Возврат RegExp;
	
КонецФункции 

// Возвращает массив соответствующих шаблону вхождений.
//
// Параметры:
//	Строка - Строка - Строка в которой будет осуществлён поиск.
//	ШаблонПоиска - Строка - Регулярное выражение для осуществления поиска.
//	ИскатьДоПервогоСоответствия - Булево - Определяет искать первое соответствие или все.
//	ИгнорироватьРегистр - Булево - Определяет будет ли учитываться регистр символов при поиске.
//	МногострочныйРежим - Булево - Определяет многострочный или однострочный режим.
//
// Возвращаемое значение:
//  Массив
// 
Функция   НайтиПоШаблону(Строка, ШаблонПоиска, ИгнорироватьРегистр = Истина,
	ИскатьДоПервогоСоответствия = Ложь, МногострочныйРежим = Истина) Экспорт
	
	ВозвращаемыйМассив = Новый Массив;
	
	#Если НЕ ВебКлиент Тогда
	RegExp = СоздатьОбъектРегулярныхВыражений(ШаблонПоиска, ИгнорироватьРегистр, ИскатьДоПервогоСоответствия, МногострочныйРежим);
	
	НайденыеПодстроки = RegExp.Execute(Строка);
	
	ВозвращаемыйМассив = Новый Массив;
	
	Для Сч = 0 По НайденыеПодстроки.Count() - 1 Цикл
		
		ВозвращаемыйМассив.Добавить(НайденыеПодстроки.Item(Сч).Value);
		
	КонецЦикла;
	#КонецЕсли
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции 

// Возвращает массив соответствующих частям шаблона вхождений.
//
// Параметры:
//	Строка - Строка - Строка в которой будет осуществлён поиск.
//	ШаблонПоиска - Строка - Регулярное выражение для осуществления поиска.
//	ИскатьДоПервогоСоответствия - Булево - Определяет искать первое соответствие или все.
//	ИгнорироватьРегистр - Булево - Определяет будет ли учитываться регистр символов при поиске.
//	МногострочныйРежим - Булево - Определяет многострочный или однострочный режим.
//
// Возвращаемое значение:
//  Массив
//
Функция   НайтиПоЧастямШаблона(Строка, ШаблонПоиска, ИгнорироватьРегистр = Истина,
	ИскатьДоПервогоСоответствия = Ложь, МногострочныйРежим = Истина) Экспорт
	
	ВозвращаемыйМассив = Новый Массив;
	
	#Если НЕ ВебКлиент Тогда
	RegExp = СоздатьОбъектРегулярныхВыражений(ШаблонПоиска, ИгнорироватьРегистр, ИскатьДоПервогоСоответствия, МногострочныйРежим);
	
	НайденыеПодстроки = RegExp.Execute(Строка);
		
	Для Сч = 0 По НайденыеПодстроки.Count() - 1 Цикл
		
		Для Сч2 = 0 По НайденыеПодстроки.Item(Сч).SubMatches.Count() - 1 Цикл
			
			ВозвращаемыйМассив.Добавить(НайденыеПодстроки.Item(Сч).SubMatches.Item(Сч2));
			
		КонецЦикла;
		
	КонецЦикла;
	#КонецЕсли
	
	Возврат ВозвращаемыйМассив;
	
КонецФункции 

// Возвращает строку с заменой найденых вхождений на строку замены.
//
// Параметры:
//	Строка - Строка - Строка в которой будет осуществлена замена.
//	ШаблонПоиска - Строка - Регулярное выражение для осуществления поиска.
//	СтрокаЗамены - Строка - Строка на которую будет осуществлена замена.
//	ИскатьДоПервогоСоответствия - Булево - Определяет искать первое соответствие или все.
//	ИгнорироватьРегистр - Булево - Определяет будет ли учитываться регистр символов при поиске.
//	МногострочныйРежим - Булево - Определяет многострочный или однострочный режим.
//
// Возвращаемое значение:
//  Строка
//
Функция   Заменить(Строка, ШаблонПоиска, СтрокаЗамены, ИгнорироватьРегистр = Истина,
	ИскатьДоПервогоСоответствия = Ложь, МногострочныйРежим = Истина) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	RegExp = СоздатьОбъектРегулярныхВыражений(ШаблонПоиска, ИгнорироватьРегистр, ИскатьДоПервогоСоответствия, МногострочныйРежим);
	
	Строка = RegExp.Replace(Строка, СтрокаЗамены);
	#КонецЕсли
	
	Возврат Строка;
	
КонецФункции 

// Возвращает строку с удалёнными не доступными для XDTO символами.
//
// Параметры:
//	Строка - Строка - Строка в которой будут осуществляться поиск и замена.
//
// Возвращаемое значение:
//  Строка
//
Функция   УдалитьНеприемлимыеДляXDTOСимволы(Текст) Экспорт

	Возврат Заменить(Текст, "[\x00-\x08\x0B-\x1f]", "");

КонецФункции
