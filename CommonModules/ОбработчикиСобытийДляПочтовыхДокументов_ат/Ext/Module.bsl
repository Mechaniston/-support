////// ДЛЯ ВХОДЯЩИХ ПИСЕМ /////////////////////////////

Процедура ЭкспортироватьТекстВРССодержаниеЭлектронныхПисем(ПисьмоСсылка, Текст, ЭтоВходящее) Экспорт
	Если ЭтоВходящее Тогда 
		СсылкаНаОбъект = ПисьмоСсылка.Ссылка;
	Иначе
		СсылкаНаОбъект = ПисьмоСсылка.Ссылка;
	КонецЕсли;	
		
	Если ТипЗнч(СсылкаНаОбъект) = ТипЗнч(Документы.ЭлектронноеПисьмоВходящее.ПустаяСсылка()) Тогда
		
		НаборЗаписей =РегистрыСведений.СодержаниеЭлектронныхПисемВходящих_ат.СоздатьНаборЗаписей();		
		НаборЗаписей.Отбор.ЭПВ.Установить(СсылкаНаОбъект);
		Запись = НаборЗаписей.Добавить();
 		Запись.ЭПВ = СсылкаНаОбъект;
		
		//ТипТекстаПисьма = СсылкаНаОбъект.ТипТекста;
	ИначеЕсли  ТипЗнч(СсылкаНаОбъект) = ТипЗнч(Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка()) Тогда
		НаборЗаписей =РегистрыСведений.СодержаниеЭлектронныхПисемИсходящих_ат.СоздатьНаборЗаписей();		
		НаборЗаписей.Отбор.ЭПИ.Установить(СсылкаНаОбъект);
		Запись = НаборЗаписей.Добавить();
		Запись.ЭПИ = СсылкаНаОбъект;
		
		 
	КонецЕсли;
	    ТипТекстаПисьма = СсылкаНаОбъект.ТипТекста;
	Если ТипТекстаПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Или 
		ТипТекстаПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда 
		Запись.HTMLТекстПисьма = Текст;
		Запись.ТекстПисьма = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Текст)
	Иначе
		Запись.ТекстПисьма = Текст;
	КонецЕсли;
	НаборЗаписей.Записать(Истина);	
КонецПроцедуры

// Общая  для 2х регистров
Функция ПолучитьТексПисьмаИзРегистраСодержаниеЭлектронныхПисем(Письмо) Экспорт
	
	СсылкаНаОбъект = Письмо.Ссылка;
	Если Письмо = Документы.ЭлектронноеПисьмоВходящее.ПустаяСсылка() 
		или Письмо = Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка() Тогда 
	//	Сообщить("Это новое письмо, его текста нет в регистре, НЕВОЗМОЖНО ПРОЧИТАТЬ ");
		ТекстПисьма = "";
		Возврат ТекстПисьма;
	Иначе	
		
		Если ТипЗнч(СсылкаНаОбъект) = ТипЗнч(Документы.ЭлектронноеПисьмоВходящее.ПустаяСсылка()) Тогда 
			Запись = РегистрыСведений.СодержаниеЭлектронныхПисемВходящих_ат.СоздатьМенеджерЗаписи();
			Запись.ЭПВ = СсылкаНаОбъект;
		ИначеЕсли  ТипЗнч(СсылкаНаОбъект) = ТипЗнч(Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка()) Тогда
			Запись = РегистрыСведений.СодержаниеЭлектронныхПисемИсходящих_ат.СоздатьМенеджерЗаписи();
			Запись.ЭПИ = СсылкаНаОбъект;
		КонецЕсли;
		
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			ТекстПисьма = "";
			Возврат ТекстПисьма;
		КонецЕсли;
		
		ТипТекстаПисьма = Письмо.ТипТекста;
		Если ТипТекстаПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Или 
			ТипТекстаПисьма = Перечисления.ТипыТекстовЭлектронныхПисем.HTML Тогда 
			ТекстПисьма = Запись.HTMLТекстПисьма;
		Иначе
			ТекстПисьма = Запись.ТекстПисьма;
		КонецЕсли;
		
		Возврат ТекстПисьма;
	КонецЕсли;
	
КонецФункции

// Проверка назначалась ли группа данному письму.
Функция ПерваяЗапись(Письмо)
	Возврат Ложь; // TODO: код всё равно сделан по устаревшему алгоритму, так что надо переписывать
	//Если Письмо.ПометкаУдаления = Ложь Тогда
	//	НаборЗаписей = РегистрыСведений.СообщенияВГруппах_ат.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.СсылкаНаСообщение.Установить(Письмо.Ссылка);
	//	НаборЗаписей.Отбор.ГруппыСообщений.Установить(Справочники.ГруппыСообщений_ат.ВсеСообщения);
	//	НаборЗаписей.Прочитать();
	//	Если НаборЗаписей.Количество()=0 Тогда 
	//		Возврат Истина;
	//	Иначе 
	//		Возврат Ложь;
	//	КонецЕсли;		
	//КонецЕсли;
	//Возврат Ложь;
КонецФункции

Процедура ПроизвестиДвиженияВРССообщенияВГруппах(Источник, ТаблицаГруппСообщений,Принудительно = ложь) 	
	
	ОбъектЕщеНеЗаписывался = ПерваяЗапись(Источник.Ссылка);
	
	Если ОбъектЕщеНеЗаписывался Или Принудительно Тогда
		НаборЗаписей = РегистрыСведений.СообщенияВГруппах_ат.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаСообщение.Установить(Источник.Ссылка);
		Если ТаблицаГруппСообщений <> Неопределено Тогда
			Для Каждого СтрокаГруппыСообщенийПисьма Из ТаблицаГруппСообщений Цикл
				ТекущаяГС = СтрокаГруппыСообщенийПисьма.ГруппаСообщений;
				Если ТекущаяГС = Null Или ТекущаяГС.ПометкаУдаления ИЛИ ТекущаяГС = Справочники.ГруппыСообщений_ат.ВсеСообщения Тогда
					//Сообщить(Строка(Источник.ссылка )+ " Группа Сообщений пуста " + строка(ТекущаяГС));
					Продолжить;
				КонецЕсли;
				Запись = НаборЗаписей.Добавить();
				Запись.ГруппыСообщений = ТекущаяГС;
				Запись.СсылкаНаСообщение = Источник.Ссылка;
				Запись.Прочитано = Источник.Рассмотрено;
			КонецЦикла;		
		КонецЕсли;
		//// Делаем запись в предопределенную группу "ВсеСообщения"
		Запись = НаборЗаписей.Добавить();
		Запись.ГруппыСообщений = Справочники.ГруппыСообщений_ат.ВсеСообщения;
		Запись.СсылкаНаСообщение = Источник.Ссылка;
		Запись.Прочитано = Источник.Рассмотрено;
		//////////////////////////////////////////////
		Если Источник.ПометкаУдаления Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдалитьДвиженияВРССообщенияВГруппах(Группа) экспорт
	 
		НаборЗаписей =РегистрыСведений.СообщенияВГруппах_ат.СоздатьНаборЗаписей();		
		НаборЗаписей.Отбор.ГруппыСообщений.Установить(Группа);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

// Считаем количество сообщений. 
//
Процедура ПрозвестиДвиженияПоРНКоличествоСообщений(Источник,ТаблицаГруппСообщений)
	РегистраторСсылка = Источник.ссылка;
	НаборЗаписей = РегистрыНакопления.КоличествоСообщений_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(РегистраторСсылка);
	
	Если ТаблицаГруппСообщений <> Неопределено Тогда
		Для каждого	СтрочкаТаблицыГруппСообщений Из ТаблицаГруппСообщений Цикл
			ТекущаяГС = СтрочкаТаблицыГруппСообщений.ГруппаСообщений;
			
			Запись = НаборЗаписей.ДобавитьПриход();
			Запись.Регистратор = РегистраторСсылка;
			Запись.ВидДвижения = ВидДвиженияНакопления.Приход;
			Запись.ГруппаСообщений = ТекущаяГС;
			Запись.Период = РегистраторСсылка.Дата;
			Запись.Прочитано = Ложь;
			Запись.Количество= 1;
			Запись.УчетнаяЗапись = РегистраторСсылка.УчетнаяЗапись;
			
			Если НЕ РегистраторСсылка.Рассмотрено тогда	
				
			ИначеЕсли РегистраторСсылка.Рассмотрено Тогда  
				Запись = НаборЗаписей.ДобавитьРасход();
				Запись.ВидДвижения = ВидДвиженияНакопления.Расход;
				Запись.ГруппаСообщений =  ТекущаяГС;
				Запись.Регистратор = РегистраторСсылка;
				Запись.Период = РегистраторСсылка.Дата;
				Запись.Прочитано = РегистраторСсылка.Рассмотрено;
				Запись.Количество = 1;
				Запись.УчетнаяЗапись = РегистраторСсылка.УчетнаяЗапись;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Удаляем движениям по РНК
Процедура УдалитьДвиженияПоРНККоличествоСообщений(Источник)
	РегистраторСсылка = Источник.Ссылка;
	НаборЗаписей = РегистрыНакопления.КоличествоСообщений_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(РегистраторСсылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Обработчики  
//
Процедура ВходящееПисьмоПриЗаписи_ат(Источник, Отказ) Экспорт
//	ПоместитьСообщениеВОбщуюГруппу(Источник);
	ТаблицаГруппСообщений = ОпределитьГруппыСообщений(Источник.ссылка);	
	/// Пишем в РС СообщенияВГруппах_ат	
	ПроизвестиДвиженияВРССообщенияВГруппах( Источник,ТаблицаГруппСообщений,Ложь);
	// Пишем в РН "Количество сообщений"		
	ТаблицаГруппСообщенийИзРС = ОпределитьГруппыСообщенийИзРегистраСообщенияВГруппах(Источник.ссылка);	
	ПрозвестиДвиженияПоРНКоличествоСообщений(Источник,ТаблицаГруппСообщений);	
	// ТЕСТИРОВАНИЕ
	///УдалитьДвиженияПоРНККоличествоСообщений(Источник) ;
КонецПроцедуры

Процедура ВходящееЭлектронноеПисьмоПередУдалением_ат(Источник, Отказ) Экспорт
		
КонецПроцедуры

/////////// ДЛЯ ИСХОДЯЩИХ ПИСЕМ/////////////////////////

// Пишем в регистры Текст и группы сообщений
//
Процедура ИсходящееПисьмоПриЗаписи_ат(Источник, Отказ, Принудительно = Ложь) Экспорт
	
	ТаблицаГруппСообщений = ОпределитьГруппыСообщений(Источник.ссылка);
	/// Пишем в РС СообщенияВГруппах_ат	
	
	ТаблицаГруппСообщенийИзРС = ОпределитьГруппыСообщенийИзРегистраСообщенияВГруппах(Источник.ссылка);
	
	ПроизвестиДвиженияВРССообщенияВГруппах( Источник,ТаблицаГруппСообщений, );
	// Пишем в РН "Количество сообщений" для исходящих это не нужно.
	ПрозвестиДвиженияПоРНКоличествоСообщений(Источник,ТаблицаГруппСообщенийИзРС);
		
	// ТЕСТИРОВАНИЕ
	////УдалитьДвиженияПоРНККоличествоСообщений(Источник) ;
КонецПроцедуры

Процедура ИсходящиеЭлектронноеПисьмоПередУдалением_ат(Источник, Отказ) Экспорт
	
	ТаблицаГруппСообщений = ОпределитьГруппыСообщений(Источник.ссылка);
			
КонецПроцедуры

///// ПРОЧИЕ СЕРВИСНЫЕ ФУНКЦИИ /////////////////////////

//Функция возвращает все группы, в которые входит сообщение. 
//Отбор идет по папкам учетных записей и РегиструСведений ПредметыПапкиВзаимодействий.
Функция ОпределитьГруппыСообщений(Письмо)
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Письмо) =  ТипЗнч(Документы.ЭлектронноеПисьмоВходящее.ПустаяСсылка()) Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФильтрыСообщений_атУчетныеЗаписи.УчетныеЗаписи,
		|	ЭлектронноеПисьмоВходящее.Ссылка КАК СсылкаНаПисьмо,
		|	ФильтрыСообщений_атУчетныеЗаписи.Ссылка.ГруппаСообщений
		|ИЗ
		|	Справочник.ФильтрыСообщений_ат.УчетныеЗаписи КАК ФильтрыСообщений_атУчетныеЗаписи
		|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
		|		ПО ФильтрыСообщений_атУчетныеЗаписи.УчетныеЗаписи = ЭлектронноеПисьмоВходящее.УчетнаяЗапись
		|ГДЕ
		|	ЭлектронноеПисьмоВходящее.Ссылка = &ссылка
		|	И ФильтрыСообщений_атУчетныеЗаписи.Ссылка.ВходящиеПисьма = ИСТИНА";
		
	ИначеЕсли ТипЗнч(Письмо) =  ТипЗнч(Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка()) Тогда 	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФильтрыСообщений_атУчетныеЗаписи.УчетныеЗаписи,
		|	ФильтрыСообщений_атУчетныеЗаписи.Ссылка.ГруппаСообщений,
		|	ЭлектронноеПисьмоИсходящее.Ссылка
		|ИЗ
		|	Справочник.ФильтрыСообщений_ат.УчетныеЗаписи КАК ФильтрыСообщений_атУчетныеЗаписи
		|		ПОЛНОЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|		ПО ФильтрыСообщений_атУчетныеЗаписи.УчетныеЗаписи = ЭлектронноеПисьмоИсходящее.УчетнаяЗапись
		|ГДЕ
		|	ФильтрыСообщений_атУчетныеЗаписи.Ссылка.ИсходящиеПисьма = ИСТИНА
		|	И ЭлектронноеПисьмоИсходящее.Ссылка = &ссылка";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Письмо);	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() тогда 
		Возврат Неопределено;
	Иначе
		ТаблицаГруппСообщений = Результат.Выгрузить();
		Возврат ТаблицаГруппСообщений;
	КонецЕсли;	
КонецФункции

Функция ОпределитьГруппыСообщенийИзРегистраСообщенияВГруппах(Письмо)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СообщенияВГруппах_ат.ГруппыСообщений КАК ГруппаСообщений
	|ИЗ
	|	РегистрСведений.СообщенияВГруппах_ат КАК СообщенияВГруппах_ат
	|ГДЕ
	|	СообщенияВГруппах_ат.СсылкаНаСообщение = &ссылка";
	
	
	
	Запрос.УстановитьПараметр("Ссылка", Письмо);	
	Результат = Запрос.Выполнить();	
	Если Результат.Пустой() тогда 
		Возврат Неопределено;
	Иначе
		ТаблицаГруппСообщений = Результат.Выгрузить();
		Возврат ТаблицаГруппСообщений;
	КонецЕсли;
	
КонецФункции

// Групповая обработка всех писем.
Процедура НазначитьГруппыВсемПисьмам()экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее";
	
	ТаблицаВсеВходящие = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =   "ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее";
	
	ТаблицаВсеИсходящие = Запрос.Выполнить().Выгрузить();
	
	ПеребратьВсеПисьма(ТаблицаВсеВходящие, ТаблицаВсеИсходящие);
	
	
КонецПроцедуры

Процедура ВсеДвиженияВходящиеПринудительно(Источник, Принудительно)

	ТаблицаГруппСообщений = ОпределитьГруппыСообщений(Источник.ссылка);
	/// Пишем в Текст письма в СодержаниеЭлектронныхПисемВходящих_ат
	
	/// Пишем в РС СообщенияВГруппах_ат	
	ПроизвестиДвиженияВРССообщенияВГруппах( Источник, ТаблицаГруппСообщений, Истина);
	// Пишем в РН "Количество сообщений"	
	
	ТаблицаГруппСообщенийИзРС = ОпределитьГруппыСообщенийИзРегистраСообщенияВГруппах(Источник.ссылка);
	ПрозвестиДвиженияПоРНКоличествоСообщений(Источник,ТаблицаГруппСообщений);	
КонецПроцедуры

Процедура ВсеДвиженияИсходящиеПринудительно(Источник, Принудительно)
	
	ТаблицаГруппСообщений = ОпределитьГруппыСообщений(Источник.ссылка);
	
	ТаблицаГруппСообщенийИзРС = ОпределитьГруппыСообщенийИзРегистраСообщенияВГруппах(Источник.ссылка);
	
	ПроизвестиДвиженияВРССообщенияВГруппах( Источник,ТаблицаГруппСообщений,Истина);
	// Пишем в РН "Количество сообщений" для исходящих это не нужно.
	ПрозвестиДвиженияПоРНКоличествоСообщений(Источник,ТаблицаГруппСообщенийИзРС);	
КонецПроцедуры


// Делаем движения для всех писем входящих и исходящих
процедура ПеребратьВсеПисьма(ТаблицаВсеВходящие,ТаблицаВсеИсходящие) 
	Если ТаблицаВсеВходящие <> Неопределено Тогда
		Для Каждого Строчка Из ТаблицаВсеВходящие Цикл 
			ВсеДвиженияВходящиеПринудительно(Строчка.Ссылка,Истина);		
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаВсеИсходящие <> Неопределено Тогда
		Для Каждого Строчка Из ТаблицаВсеИсходящие Цикл 
			ВсеДвиженияИсходящиеПринудительно(Строчка.Ссылка,Истина);		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////
//  Программное создание почтовых документов @comm //
/////////////////////////////////////////////////////

//Отправляет письмо без создания документа.
//
Процедура ОтправитьСистемноеЭлПисьмоОдномуАдресату(Получатель, Тема, ТекстПисьма, СписокФайловВложений = Неопределено, НеУдалять = Ложь, Подпись = "") Экспорт
	
	
	УчетнаяЗапись = справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;//SA_ОбщегоНазначения.ПолучитьОсновнуюУчетнуюЗаписьЭлектроннойПочты(глЗначениеПеременной("ПользовательОтправкиСистемныхСообщений"));
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Попытка
			Если ТипЗнч(Получатель) <> Тип("Строка") Тогда
				АдресЭлПочтыПолучателя = ПолучитьАдресЭлектроннойПочтыПользователяДляУведомлений(Получатель); //ОбщегоНазначения_Сервер.ПолучитьОсновнойЭлектронныйАдресПолучателя(Получатель);
			Иначе
				АдресЭлПочтыПолучателя = Получатель;
			КонецЕсли;
			
			Если ТипЗнч(АдресЭлПочтыПолучателя) <> Тип("Строка") Или ПустаяСтрока(АдресЭлПочтыПолучателя) Тогда
				СвойстваИнтернетАдреса = "";
				
				Если ТипЗнч(Получатель) = Тип("ИнтернетПочтовыйАдрес") Тогда
					СвойстваИнтернетАдреса = Символы.ПС + "Адрес  =" + Получатель.Адрес + "
					|Пользователь = " + Получатель.Пользователь + Символы.ПС;
				КонецЕсли;
				
				Сообщить("Не определен получатель системного сообщения.
				|Получатель: " + Строка(Получатель) + " (тип значения: " + Строка(ТипЗнч(Получатель)) + ") " + СвойстваИнтернетАдреса + "
				|E-mail: " + Строка(АдресЭлПочтыПолучателя)	+ " (тип значения: " + Строка(ТипЗнч(АдресЭлПочтыПолучателя)) + ")
				|Тема: " + Тема + "
				|Текст: "+ ТекстПисьма + СтатусСообщения.Важное + " Ошибка при создании системного e-mail!");	
				Возврат;
			КонецЕсли;
	
			КодировкаТекстаПисьма = КодировкаТекста.UTF8;
								
			Профиль = ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
			ИнтернетПочта = Новый ИнтернетПочта;
			ИнтернетПочта.Подключиться(Профиль);
			ПочтовоеСоединениеУстановлено = Истина;
			ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
			ПочтовоеСообщение.Кодировка = КодировкаТекстаПисьма;//УчетнаяЗапись.КодировкаПисемПоУмолчанию;
			ПочтовоеСообщение.ИмяОтправителя = УчетнаяЗапись.ИмяПользователя;//Наименование;
			ПочтовоеСообщение.Отправитель = УчетнаяЗапись.АдресЭлектроннойПочты;
			ПочтовоеСообщение.Тема = Тема;
			
			ПолучательСообщения = ПочтовоеСообщение.Получатели.Добавить();
			ПолучательСообщения.Адрес           = АдресЭлПочтыПолучателя;
			ПолучательСообщения.ОтображаемоеИмя = АдресЭлПочтыПолучателя;
			ПолучательСообщения.Кодировка = КодировкаТекстаПисьма;		
			ТекстСообщения = ПочтовоеСообщение.Тексты.Добавить();
			ТекстСообщения.Кодировка = КодировкаТекстаПисьма;
			ТекстСообщения.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ТекстСообщения.Текст     = "
			|<HTML><HEAD>
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
			|<META content=""MSHTML 6.00.6000.16981"" name=GENERATOR></HEAD>
			|<BODY>
			|<div style='font-family: Arial; font-size: 10pt; color: #000000'>" + ТекстПисьма + "</div>
//			|<BR><BR><div style='font-family: Arial; font-size: 8pt; color: #000088'>Данное письмо автоматически сформировано программой &lt;АТКомм (ATComm)&gt;</div><BR>
			|<BR><BR><div style='font-family: Arial; font-size: 8pt; color: #000088'>" + Подпись + "</div><BR>
			|</BODY></HTML>";
			
			Если СписокФайловВложений <> Неопределено И ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") Тогда
				Для Каждого Элемент Из СписокФайловВложений Цикл
					Файл = Новый Файл(Элемент.Значение);
					Если Файл.Существует() Тогда
						ПочтовоеСообщение.Вложения.Добавить(Элемент.Значение, Элемент.Значение);
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			ИнтернетПочта.Послать(ПочтовоеСообщение);
			
			ИнтернетПочта.Отключиться();
			
		Исключение
			Сообщить(ОписаниеОшибки()+ СтатусСообщения.Важное+ "Ошибка при создании системного e-mail!");
			ИнтернетПочта.Отключиться();		
		КонецПопытки;
		
	Иначе
		Сообщить("Не определена учетная запись пользователя отправки системных сообщений"		+ "Ошибка при создании системного e-mail!");	
	КонецЕсли;
	
КонецПроцедуры

// Функция создает объект ИнтернетПочтовыйПрофиль и настраивает его
//
// Параметры
//  УчетнаяЗапись - СправочникСсылка, СправочникОбъект УчетныеЗаписиЭлектроннойПочты
//
// Возвращаемое значение:
//   ИнтернетПочтовыйПрофиль
//
Функция   ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись) Экспорт
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.СерверВходящейПочтыPOP3;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.СерверИсходящейПочтыSMTP;
	Если УчетнаяЗапись.ВремяОжидания > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжидания;
	КонецЕсли;
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Пользователь;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	//
	//Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
	Если УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.ЗадаетсяПараметрами Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP         = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP   = УчетнаяЗапись.ЛогинSMTP;
	ИначеЕсли УчетнаяЗапись.SMTPАутентификация = Перечисления.ВариантыSMTPАутентификации.АналогичноPOP3 Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP         = УчетнаяЗапись.Пароль;
		Профиль.ПользовательSMTP   = УчетнаяЗапись.Пользователь;	
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		Профиль.ПарольSMTP         = "";
		Профиль.ПользовательSMTP   = "";
	КонецЕсли;
	
	Возврат Профиль;
	
КонецФункции // ПолучитьИнтернетПочтовоеПодключение()

Функция   ПолучитьАдресЭлектроннойПочтыПользователяДляУведомлений(Пользователи) Экспорт
	
	ТаблицаАдресов = ПолучитьТаблицуАдресовДляУведомленийПользователей(Пользователи, Истина);
	
	Возврат ВзаимодействияКлиентСервер.ПолучитьПредставлениеСпискаАдресатов(ТаблицаАдресов, Ложь);
	 
КонецФункции

Функция   ПолучитьТаблицуАдресовДляУведомленийПользователей(Пользователи, БезПредставления = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	ПользователиКонтактнаяИнформация.Ссылка КАК Контакт,
		 |	ПользователиКонтактнаяИнформация.Представление КАК Адрес,
		 |	ВЫБОР
		 |		КОГДА &БезПредставления
		 |			ТОГДА """"
		 |		ИНАЧЕ ПользователиКонтактнаяИнформация.Ссылка.Наименование
		 |	КОНЕЦ КАК Представление
		 |ИЗ
		 |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		 |ГДЕ
		 |	ПользователиКонтактнаяИнформация.Ссылка В(&Пользователи)
		 |	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователяДляУведомлений)
		 |	И НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления
		 |	И ПользователиКонтактнаяИнформация.Представление <> """"";
	 
	Запрос.УстановитьПараметр("БезПредставления", БезПредставления);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция   ПолучитьТаблицуАдресовДляФинансовыхДокументовПользователей(Пользователи, БезПредставления = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗЛИЧНЫЕ
		 |	ПользователиКонтактнаяИнформация.Ссылка КАК Контакт,
		 |	ПользователиКонтактнаяИнформация.Представление КАК Адрес,
		 |	ВЫБОР
		 |		КОГДА &БезПредставления
		 |			ТОГДА """"
		 |		ИНАЧЕ ПользователиКонтактнаяИнформация.Ссылка.Наименование
		 |	КОНЕЦ КАК Представление
		 |ИЗ
		 |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		 |ГДЕ
		 |	ПользователиКонтактнаяИнформация.Ссылка В(&Пользователи)
		 |	И ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователяДляФинансовыхДокументов)
		 |	И НЕ ПользователиКонтактнаяИнформация.Ссылка.ПометкаУдаления
		 |";
	 
	Запрос.УстановитьПараметр("БезПредставления", БезПредставления);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

//////////////////// написать письмо из класикса - для переделки



Функция	ПолучитьДоступныеУчетныеЗаписиПользователя(Пользователь) Экспорт
	
Запрос = новый Запрос;

// 1. Получаем все ГС для в которых есть права на запись(отправку сообщений)

Запрос.Текст = 
"ВЫБРАТЬ
|	ПраваПользователейГруппСообщений_ат.ГруппаСообщений,
|	ПраваПользователейГруппСообщений_ат.Пользователь
|ПОМЕСТИТЬ ВТ_ВсеГС
|ИЗ
|	РегистрСведений.ПраваПользователейГруппСообщений_ат КАК ПраваПользователейГруппСообщений_ат
|ГДЕ
|	ПраваПользователейГруппСообщений_ат.Пользователь.Ссылка = &Пользователь
|	И ПраваПользователейГруппСообщений_ат.Запись = ИСТИНА
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ФильтрыСообщений_атУчетныеЗаписи.УчетныеЗаписи,
|	ФильтрыСообщений_атУчетныеЗаписи.Ссылка.ГруппаСообщений КАК ГруппаСообщений1,
|	ВТ_ВсеГС.ГруппаСообщений
|ИЗ
|	Справочник.ФильтрыСообщений_ат.УчетныеЗаписи КАК ФильтрыСообщений_атУчетныеЗаписи
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеГС КАК ВТ_ВсеГС
|		ПО (ВТ_ВсеГС.ГруппаСообщений = ФильтрыСообщений_атУчетныеЗаписи.Ссылка.ГруппаСообщений)
|ГДЕ
|	ФильтрыСообщений_атУчетныеЗаписи.Ссылка.ИсходящиеПисьма = ИСТИНА";

Запрос.УстановитьПараметр("Пользователь",Пользователь);

ТаблицаДоступныхУЗ = Запрос.Выполнить().Выгрузить();


// 2. Получить все УЗ из доступных для записи ГС.
	
КонецФункции




//// Функция обрабатывает пользовательское событие - создание нового электронного письма.
//// 
//// Параметры:
////  ТекущийПользователь          - СправочникСсылка.Пользователи, текущий пользователь
////  СтруктураНовогоПисьма        - Структура с данными нового письма
////    Ключи структуры:
////     Тело                 - строка, текст письма (прочтой текст, или текст в формате ХТМЛ)
////     Тема                 - Строка
////     ВидТекста            - ПеречислениеСсылка.ВидыТекстовЭлектронныхПисем, вид текста нового письма
////     СписокФайловВложений - СписокЗначений, где значения - структура параметров и знаяений для создания
////                            нового элемента справочника ВложенияЭлектронныхПисем, ключи структуры
////                            соответствуют именам реквизитов справочника ВложенияЭлектронныхПисем
////     УчетнаяЗапись        - СправочникСсылка.УчетнаяЗапись, учетная запись нового письма
////     Кому                 - Список значений, значение - адрес эл.почты, представление - представление получателя
////     Копии                - Список значений, значение - адрес эл.почты, представление - представление получателя
////     СкрытыеКопии         - Список значений, значение - адрес эл.почты, представление - представление получателя
////     Основание            - ДокументСсылка.ЭлектронноеПисьмо, ДокументСсылка.Событие
////     ГруппаУчетнойЗаписи  - элемент справочника ГруппыПисемЭлектроннойПочты, группа писем для нового письма
////     Ответственный        - элемент справочника Пользователи, ответственный для запоолнения в письме
////     Комментарий          - Строка
////     Важность             - ПеречислениеСсылка.Важность
////
////  ПеренестиВложенияИзОснования - Булево, переносить ли аттачи письма Из основания (действует для копирования и пересылки)
////  Копирование                  - булево, признак копирования электронного письма
////  ТекущийЭлементХТМЛ           - Булево, устанавливать в качестве активного элемента в открытой форме письма поле ХТМЛ(Текстового) документа
////  Дополнительно                - Строка, "Ответ", "Переадресация", вид действия при создании нового письма
////  ФормаВладелец                - Форма, владелец для открываемой формы нового письма
////  ПодписьПодТекстом            - Булево, устанавливать подпись в письме "после" или "перед" текстом.
////  ОткрыватьПисьмо              - Булево, открывать форму письма или записывать письмо и не открывать форму
////
////  ВозвращаемреЗначение
////   СтруктураПараметров - Структура
////     Ключи структуры:
////     Письмо       - ДокументОбъект.ЭлектронноеПисьмо, новое электронное письмо
////     Форма        - Форма, форма нового электронного письма
////     ПисьмоСсылка - ДокументСсылка.ЭлектронноеПисьмо, новое электронное письмо
////
//Функция   НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма = Неопределено, ПеренестиВложенияИзОснования = Ложь,
//	Копирование = Ложь, ТекущийЭлементХТМЛ = Ложь, Дополнительно = Неопределено, ФормаВладелец = Неопределено,
//	ПодписьПодТекстом = Истина, //SA - было: Ложь
//	// - под сообщением подпись выглядит лучше, чем над ним, если это не "Ответ",
//	// так что меняем значение по умолчанию на Истина, а в коде анализируем параметр
//	// Дополнительно - если он "Ответ" или "Переадресация", то возвращаемся к Ложь
//	ОткрыватьПисьмо = Истина,
//	SA_ПробоватьОтправить = Ложь) Экспорт //SA - имеет смысл только если ОткрыватьПисьмо = Ложь
//	
//	Перем УчетнаяЗапись;
//	Перем Тема;
//	Перем Тело;
//	Перем ВидТекста;
//	Перем СписокФайловВложений;
//	Перем ГруппаУчетнойЗаписи;
//	Перем Кому;
//	Перем Копии;
//	Перем СкрытыеКопии;
//	Перем Основание;
//	Перем Ответственный;
//	Перем Предмет;
//	Перем КодировкаПисьма;
//	Перем Комментарий;
//	Перем Важность;
//	
//	// SA {
//	Перем SA_ТолькоПросмотрHTMLДокумента; 
//	Перем ТаблицаАдресовОбъекта;
//	Перем SA_НеЗаполнятьТелоПисьмаИзСодержания; // для заполнения тела письма из печатной формы (для док. Событие)
//	Перем ПринудительнаяУстановкаУчетнойЗаписи;  //для вставки учетной записи, забив учетки пользователя 
//	Перем Обращение;
//	Перем стрТело;
//	стрТело = Неопределено;  
//	// SA }
//	Если СтруктураНовогоПисьма = Неопределено Тогда
//		СтруктураНовогоПисьма = Новый Структура;
//	КонецЕсли;
//	
//	// Определим учетную запись для создания письма
//	
//	СписокДоступныхЗаписей = ОбработчикиСобытийДляПочтовыхДокументов_ат.ПолучитьДоступныеУчетныеЗаписиПользователя(ТекущийПользователь);
//	Если СписокДоступныхЗаписей.Количество() = 0 Тогда
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("УчетнаяЗапись", УчетнаяЗапись);
//	ПринудительнаяУстановкаУчетнойЗаписи = ?(СтруктураНовогоПисьма.Свойство("ПринудительнаяУстановкаУчетнойЗаписи"), СтруктураНовогоПисьма.ПринудительнаяУстановкаУчетнойЗаписи, Ложь); //SA
//	Если ЗначениеЗаполнено(УчетнаяЗапись) и СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено  И Не ПринудительнаяУстановкаУчетнойЗаписи Тогда
//		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Основание", Основание);
//	
//	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
//		//SA {
//		//УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяУчетнаяЗапись");
//		Если не ПустоеЗначение(Основание) Тогда
//			Если ТипЗнч(Основание) = Тип("ДокументСсылка.SA_Обращение") Тогда
//				ВидАссистанса = Основание.SA_ВидАссистанса;
//			ИначеЕсли Mech_Util.СуществуетРеквизитОбъекта(Основание, "SA_Обращение") и не ПустоеЗначение(Основание.SA_Обращение) Тогда	
//				ВидАссистанса = Основание.SA_Обращение.SA_ВидАссистанса;
//			Иначе
//				ВидАссистанса = Неопределено;
//			КонецЕсли;
//		КонецЕсли;
//		УчетнаяЗапись = SA_ОбщегоНазначения.ПолучитьОсновнуюУчетнуюЗаписьЭлектроннойПочты(ТекущийПользователь, ВидАссистанса);
//		//SA }
//		Если СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено Тогда
//			УчетнаяЗапись = Неопределено;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
//		УчетнаяЗапись = СписокДоступныхЗаписей[0].Значение;
//	КонецЕсли;
//	
//	//SA { Данила.
//	//Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
//	#Если Клиент Тогда
//		Параметры = Новый Структура("ПеречитатьТекстПриОткрытии",Истина);
//		Если СтруктураНовогоПисьма.Свойство("SA_ТолькоПросмотрHTMLДокумента") Тогда
//			Параметры.Вставить("ТолькоПросмотрHTMLДокумента",Истина);	
//		КонецЕсли;
//		//Если СтруктураНовогоПисьма.Свойство("Основание") Тогда
//		//	Параметры.Вставить("Основание",Основание);	
//		//КонецЕсли;
//		ФормаПисьма = ПолучитьФорму("Документ.ЭлектронноеПисьмо.ФормаОбъекта", Параметры, ФормаВладелец);
//		Письмо = ДанныеФормыВЗначение(ФормаПисьма.Объект,Тип("ДокументОбъект.ЭлектронноеПисьмо"));
//	#Иначе
//		Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();
//	#КонецЕсли
//	
//	//Данила. Мы не переносим вложение, поэтому заполнять тбПрикрепленныеФайлы необходимо самостоятельно.
//	Если ПеренестиВложенияИзОснования Тогда
//		#Если Клиент Тогда
//			ФормаПисьма.ДополнительныеСвойства.Вставить("тбПрикрепленныеФайлы", мюУпрФормы_Сервер.тбПрикрепленныеФайлы_Получить(Основание));	
//		#Иначе
//			Письмо.тбПрикрепленныеФайлы = мюУпрФормы_Сервер.тбПрикрепленныеФайлы_Получить(Основание);
//		#КонецЕсли
//	КонецЕсли;

//	
//	//SA }
//	Письмо.Дата								= ТекущаяДата();
//	Письмо.УчетнаяЗапись					= УчетнаяЗапись;
//	Письмо.ОтправительИмя					= УчетнаяЗапись.Наименование;
//	Письмо.ОтправительАдресЭлектроннойПочты	= УчетнаяЗапись.АдресЭлектроннойПочты;
//	Письмо.ОтправительПредставление			= УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";
//	
//	СтруктураНовогоПисьма.Свойство("СписокФайловВложений", СписокФайловВложений);
//		
//	ОписаниеТиповПредмета = Новый ОписаниеТипов("Строка");
//	ЕстьДокументОснование = Ложь;
//	
//	Если Основание <> Неопределено Тогда
//		//SA {
//		//Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)) Тогда
//		//	ЕстьДокументОснование = Не Основание.Пустая();
//		//Иначе
//			ЕстьДокументОснование = Не Основание.Ссылка.Пустая();
//		//КонецЕсли;
//		//SA }
//	КонецЕсли;
//	
//	Если ЕстьДокументОснование Тогда
//		//SA {
//		//Письмо.ОснованиеПисьма = ?(Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)), Основание, Основание.Ссылка);
//		Письмо.ОснованиеПисьма = Основание.Ссылка;
//		
//		// Исключаем обработку заполнения для основания - Email,т.к копируются все реквизиты 
//		Если ТипЗнч(Письмо.ОснованиеПисьма) <> Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
//			Письмо.Заполнить(Письмо.ОснованиеПисьма);
//		Иначе
//			Письмо.SA_Обращение = Основание.SA_Обращение;
//			//SA {Пометим основание прочтенным.
//			Если Основание.НеРассмотрено Тогда
//				Если ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
//					ОснованиеОбъект = Основание;	
//				Иначе
//					ОснованиеОбъект = Основание.ПолучитьОбъект();
//				КонецЕсли;
//				ОснованиеОбъект.НеРассмотрено = Ложь;
//				ОснованиеОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
//				ОснованиеОбъект.Записать();
//			КонецЕсли;
//			//SA }
//		КонецЕсли;	
//		//SA }
//		Если ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
//			Письмо.мОбъектОснование = Основание;
//			
//		КонецЕсли;
//		
//		Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам Тогда
//			СтруктураНовогоПисьма.Свойство("Предмет", Предмет);
//			Если ЗначениеЗаполнено(Предмет) И ОписаниеТиповПредмета.СодержитТип(ТипЗнч(Предмет)) Тогда
//				Письмо.Предмет = Предмет;
//			Иначе
//				Если Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Или ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")) Тогда
//					Письмо.Предмет = Основание.Предмет;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	//SA {
//	СтруктураНовогоПисьма.Свойство("Обращение", Обращение);
//	Если не ПустоеЗначение(Обращение) Тогда
//		 Письмо.SA_Обращение = Обращение;
//	КонецЕсли;
//	//SA }

//	Если ЕстьДокументОснование
//		 И УчетнаяЗапись.КодировкуПисьмаДляОтветовБратьИзИсходного
//		 И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
//		 	Или ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")) Тогда
//		КодировкаПисьма = Основание.КодировкаПисьма;
//	Иначе
//		СтруктураНовогоПисьма.Свойство("КодировкаПисьма", КодировкаПисьма);
//	КонецЕсли;
//	
//	Если ЕстьДокументОснование
//		 И УчетнаяЗапись.ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного
//		 И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
//		 	Или ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")) Тогда
//		ВидТекста = Основание.ВидТекстаПисьма;
//	Иначе
//		СтруктураНовогоПисьма.Свойство("ВидТекста", ВидТекста);
//	КонецЕсли;
//	
//	Если Не ЗначениеЗаполнено(ВидТекста) Тогда
//		Письмо.ВидТекстаПисьма = УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;
//		Если Не ЗначениеЗаполнено(Письмо.ВидТекстаПисьма) Тогда
//			Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;
//		КонецЕсли;
//	Иначе
//		Письмо.ВидТекстаПисьма = ВидТекста;
//	КонецЕсли;
//	
//	
//	//SA { Данила. 
//	Если ПустоеЗначение(КодировкаПисьма) Тогда
//		КодировкаПисьма = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "КодировкаПисьмаЭлектроннойПочтыПоУмолчанию");
//		Если ПустоеЗначение(КодировкаПисьма) Тогда
//			КодировкаПисьма = УчетнаяЗапись.КодировкаПисемПоУмолчанию;
//		КонецЕсли;
//		Если ПустоеЗначение(КодировкаПисьма) Тогда
//			КодировкаПисьма = "utf-8";	
//		КонецЕсли;
//	КонецЕсли;
//	Письмо.КодировкаПисьма = КодировкаПисьма;
//	//SA }
//	
//	
//	Если Дополнительно = "Ответ" Тогда
//		Письмо.Ответ         = Истина;
//	ИначеЕсли Дополнительно = "Переадресация" Тогда
//		Письмо.Переадресация = Истина;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Тело", Тело);
//	Если ЗначениеЗаполнено(Тело) Тогда
//		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//			//SA { Данила.
//			Если Найти(Тело,"<HTML>") = 0 Тогда
//				Письмо.ТекстПисьма = "<HTML><HEAD>
//				|<META http-equiv=Content-Type content=" + """" + "text/html; charset="
//				+ ?(ЗначениеЗаполнено(Письмо.КодировкаПисьма), Письмо.КодировкаПисьма, "utf-8") + """" + ">
//				|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
//				//|<BODY><DIV>" + Тело + "</DIV></BODY></HTML>"; //SA Данила
//				|<BODY style="""
//				+ ?(ЗначениеЗаполнено(УчетнаяЗапись.ШрифтПисьмаПоУмолчанию_кла),	"font-family:" + УчетнаяЗапись.ШрифтПисьмаПоУмолчанию_кла + ";",	"") 
//				+ ?(ЗначениеЗаполнено(УчетнаяЗапись.РазмерШрифтаПоУмолчанию_кла),	"font-size:" + УчетнаяЗапись.РазмерШрифтаПоУмолчанию_кла + ";",		"") 
//				+ ?(ЗначениеЗаполнено(УчетнаяЗапись.ЦветШрифтаПоУмолчанию_кла),		"color:" + УчетнаяЗапись.ЦветШрифтаПоУмолчанию_кла + ";",		"") 
//				+ """><DIV>" + Тело + "</DIV></BODY></HTML>";

//				стрТело = Тело; //SA
//			Иначе
//				Письмо.ТекстПисьма = Тело;	
//			КонецЕсли;
//			
//		Иначе
//			Письмо.ТекстПисьма = Тело;
//		КонецЕсли;
//	Иначе
//		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//			Письмо.ТекстПисьма = "<HTML><HEAD>
//			|<META http-equiv=Content-Type content=""text/html; charset="
//				+ ?(ЗначениеЗаполнено(Письмо.КодировкаПисьма), Письмо.КодировкаПисьма, "utf-8") + """" + ">
//			|<META content=""MSHTML 6.00.2900.2912"" name=GENERATOR></HEAD>
//			//|<BODY><DIV></DIV></BODY></HTML>"; //SA Данила
//			|<BODY style="""
//			+ ?(ЗначениеЗаполнено(УчетнаяЗапись.ШрифтПисьмаПоУмолчанию_кла),	"font-family:" + УчетнаяЗапись.ШрифтПисьмаПоУмолчанию_кла + ";",	"") 
//			+ ?(ЗначениеЗаполнено(УчетнаяЗапись.РазмерШрифтаПоУмолчанию_кла),	"font-size:" + УчетнаяЗапись.РазмерШрифтаПоУмолчанию_кла + ";",		"") 
//			+ ?(ЗначениеЗаполнено(УчетнаяЗапись.ЦветШрифтаПоУмолчанию_кла),		"color:" + УчетнаяЗапись.ЦветШрифтаПоУмолчанию_кла + ";",		"") 
//			+ """><DIV></DIV></BODY></HTML>";
//		КонецЕсли;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Тема", Тема);
//	Если ЗначениеЗаполнено(Тема) Тогда
//		Письмо.Тема = Тема;
//	КонецЕсли;
//	
//	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
//		 Или ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")
//		 Или ТипЗнч(Основание) = Тип("ДокументОбъект.Событие") //SA
//		 Или ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
//		
//		Если ТипЗнч(Основание) = Тип("ДокументОбъект.Событие")
//			 Или ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда //SA
//			СодержаниеСобытия = Неопределено;
//			СтруктураНовогоПисьма.Свойство("СодержаниеСобытия", СодержаниеСобытия);
//			
//			СодержаниеСобытия = ?(СодержаниеСобытия = Неопределено, Основание.СодержаниеСобытия, СодержаниеСобытия);
//			
//			СодержаниеСобытия = ?(СодержаниеСобытия = Неопределено, Основание.СодержаниеСобытия, СодержаниеСобытия);
//			СтруктураНовогоПисьма.Свойство("SA_НеЗаполнятьТелоПисьмаИзСодержания", SA_НеЗаполнятьТелоПисьмаИзСодержания); // SA
//			
//			Если SA_НеЗаполнятьТелоПисьмаИзСодержания = Неопределено
//				 И Основание.SA_РежимОтображенияСодержания <> Перечисления.ВидыТекстовЭлектронныхПисем.HTML //SA
//				 И (Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML
//					Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками) Тогда
//				Тело = мюСтроки.ПреобразоватьВHTML(СодержаниеСобытия, Письмо.КодировкаПисьма);
//			ИначеЕсли SA_НеЗаполнятьТелоПисьмаИзСодержания = Неопределено Тогда
//				Тело = СодержаниеСобытия;
//			КонецЕсли;
//		ИначеЕсли Найти(Тема,"Read-Receipt:") = 0 Тогда
//			
//			Тело = Основание.ТекстПисьма;
//			Если ((Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)
//					И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTML И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками)
//					Или ((Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Прочее)
//					И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.Текст И Основание.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.Прочее) Тогда
//				Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//					Тело = мюСтроки.ПреобразоватьВHTML(Тело, Письмо.КодировкаПисьма);
//				Иначе
//					Тело = ПреобразоватьТекстИзХТМЛФорматаВПростой(Тело);
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		
//		Письмо.ТекстПисьма = Тело;
//	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.SA_Обращение") И СтруктураНовогоПисьма.Свойство("СодержаниеСобытия") Тогда 
//		Письмо.ТекстПисьма = СтруктураНовогоПисьма.СодержаниеСобытия;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);
//	Если ЗначениеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись Тогда
//		Письмо.ГруппаУчетнойЗаписи = ГруппаУчетнойЗаписи;
//	Иначе
//		Письмо.УказатьГруппуПоУмолчанию();
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Ответственный", Ответственный);
//	Если ЗначениеЗаполнено(Ответственный) Тогда
//		Письмо.Ответственный = Ответственный;
//	Иначе
//		Письмо.Ответственный = ТекущийПользователь;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Важность", Важность);
//	Если ЗначениеЗаполнено(Важность) Тогда
//		Письмо.Важность = Важность;
//	Иначе
//		Письмо.Важность = Перечисления.Важность.Средняя;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Комментарий", Комментарий);
//	Если ЗначениеЗаполнено(Комментарий) Тогда
//		Письмо.Комментарий = Комментарий;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Кому", Кому);
//	Если ТипЗнч(Кому) = Тип("СписокЗначений") Тогда
//		Для Каждого ЭлементСписка Из Кому Цикл
//			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
//				Продолжить;
//			КонецЕсли;
//			СтрокаТЧ = Письмо.КомуТЧ.Добавить();
//			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
//			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
//			Если Не ПустаяСтрока(Письмо.Кому) Тогда
//				Письмо.Кому = Письмо.Кому + ", ";
//			КонецЕсли;
//			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
//				Письмо.Кому = Письмо.Кому + ЭлементСписка.Значение;
//			Иначе
//				Письмо.Кому = Письмо.Кому + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("Копии", Копии);
//	Если ТипЗнч(Копии) = Тип("СписокЗначений") Тогда
//		Для Каждого ЭлементСписка Из Копии Цикл
//			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
//				Продолжить;
//			КонецЕсли;
//			СтрокаТЧ = Письмо.КопииТЧ.Добавить();
//			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
//			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
//			Если Не ПустаяСтрока(Письмо.Копии) Тогда
//				Письмо.Копии = Письмо.Копии + ", ";
//			КонецЕсли;
//			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
//				Письмо.Копии = Письмо.Копии + ЭлементСписка.Значение;
//			Иначе
//				Письмо.Копии = Письмо.Копии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	СтруктураНовогоПисьма.Свойство("СкрытыеКопии", СкрытыеКопии);
//	Если ТипЗнч(СкрытыеКопии) = Тип("СписокЗначений") Тогда
//		Для Каждого ЭлементСписка Из СкрытыеКопии Цикл
//			Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
//				Продолжить;
//			КонецЕсли;
//			СтрокаТЧ = Письмо.СкрытыеКопииТЧ.Добавить();
//			СтрокаТЧ.АдресЭлектроннойПочты = ЭлементСписка.Значение;
//			СтрокаТЧ.Представление         = ЭлементСписка.Представление;
//			Если Не ПустаяСтрока(Письмо.СкрытыеКопии) Тогда
//				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ", ";
//			КонецЕсли;
//			Если ПустаяСтрока(ЭлементСписка.Представление) Тогда
//				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Значение;
//			Иначе
//				Письмо.СкрытыеКопии = Письмо.СкрытыеКопии + ЭлементСписка.Представление + " <" + ЭлементСписка.Значение + ">";
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//	#Если Клиент Тогда
//		//SA { Данила
//		//Если ФормаВладелец <> Неопределено Тогда
//		//	ФормаПисьма = Письмо.ПолучитьФорму(, ФормаВладелец);
//		//Иначе
//		//	ФормаПисьма = Письмо.ПолучитьФорму();
//		//КонецЕсли;
//		//
//		//Если СтруктураНовогоПисьма.Свойство("SA_ТолькоПросмотрHTMLДокумента", SA_ТолькоПросмотрHTMLДокумента) Тогда
//		//	ФормаПисьма.SA_ТолькоПросмотрHTMLДокумента = SA_ТолькоПросмотрHTMLДокумента;
//		//КонецЕсли;
//		// SA }
//		
//		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
//			Или ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо") Тогда
//			
//			Запрос = Новый Запрос;
//			
//			Запрос.УстановитьПараметр("ТекСсылка"   , ?(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо"), Основание, Основание.Ссылка));
//			Запрос.УстановитьПараметр("ПустаяСтрока", "");
//			
//			Запрос.Текст =
//			"ВЫБРАТЬ //РАЗРЕШЕННЫЕ //SA
//			|	ВложенияЭлектронныхПисем.Ссылка КАК Ссылка, //SA
//			|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла,
//			//|	ВложенияЭлектронныхПисем.Хранилище КАК Хранилище, //SA
//			|	ВложенияЭлектронныхПисем.Наименование КАК Наименование,
//			|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма
//			|ИЗ
//			|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
//			|ГДЕ
//			|	(НЕ ВложенияЭлектронныхПисем.ПометкаУдаления)
//			|	И ВложенияЭлектронныхПисем.Объект = &ТекСсылка";
//			
//			РезультатЗапроса = Запрос.Выполнить();
//			
//			Если Не РезультатЗапроса.Пустой() Тогда
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					Если ПустаяСтрока(Выборка.ИДФайлаПочтовогоПисьма) И ПеренестиВложенияИзОснования Тогда
//						СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
//						СтрокаТЗ.ИмяФайла     = Выборка.ИмяФайла;
//						СтрокаТЗ.Наименование = Выборка.Наименование;
//						//SA { Данила. 
//						//СтрокаТЗ.Данные       = РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка); //SA - было: Выборка.Хранилище
//						Если ТипЗнч(ФормаПисьма) = Тип("ФормаКлиентскогоПриложения") Тогда
//							СтрокаТЗ.Данные       = ПоместитьВоВременноеХранилище(РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка).Получить(),ФормаПисьма.УникальныйИдентификатор);
//						Иначе
//							СтрокаТЗ.Данные       = РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка); //SA - было: Выборка.Хранилище
//						КонецЕсли;
//						//SA }
//					ИначеЕсли Не ПустаяСтрока(Выборка.ИДФайлаПочтовогоПисьма) Тогда
//						СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗСкрытые.Добавить();
//						СтрокаТЗ.ИмяФайла               = Выборка.ИмяФайла;
//						СтрокаТЗ.Наименование           = Выборка.Наименование;
//						Если ТипЗнч(ФормаПисьма) = Тип("ФормаКлиентскогоПриложения") Тогда
//							СтрокаТЗ.Данные       = ПоместитьВоВременноеХранилище(РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка).Получить(),ФормаПисьма.УникальныйИдентификатор);
//						Иначе
//							СтрокаТЗ.Данные       = РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка); 
//						КонецЕсли;
//						СтрокаТЗ.ИДФайлаПочтовогоПисьма = Выборка.ИДФайлаПочтовогоПисьма;
//					КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;

//		ИначеЕсли Основание <> Неопределено
//			И Найти(Основание.Метаданные().ПолноеИмя(), "Документ.") > 0 Тогда
//			
//			Запрос = Новый Запрос;
//			
//			Запрос.УстановитьПараметр("ТекСсылка", Основание.Ссылка);
//			Запрос.УстановитьПараметр("ПустаяСтрока", "");
//			
//			Запрос.Текст = "
//			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	ХранилищеДополнительнойИнформации.Ссылка КАК Ссылка, //SA
//			|	ХранилищеДополнительнойИнформации.ИмяФайла КАК ИмяФайла,
//			|	ХранилищеДополнительнойИнформации.Наименование КАК Наименование
//			|ИЗ
//			|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
//			|ГДЕ
//			|	ХранилищеДополнительнойИнформации.Объект = &ТекСсылка
//			|	И (Не ХранилищеДополнительнойИнформации.ПометкаУдаления)
//			|";
//			
//			РезультатЗапроса = Запрос.Выполнить();
//			
//			Если Не РезультатЗапроса.Пустой() Тогда
//				Выборка = РезультатЗапроса.Выбрать();
//				Пока Выборка.Следующий() Цикл
//					Если ПеренестиВложенияИзОснования Тогда
//						Если ОткрыватьПисьмо Тогда
//							СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
//							СтрокаТЗ.ИмяФайла     = Выборка.ИмяФайла;
//							СтрокаТЗ.Наименование = Выборка.Наименование;
//							Если ТипЗнч(ФормаПисьма) = Тип("ФормаКлиентскогоПриложения") Тогда
//								СтрокаТЗ.Данные       = ПоместитьВоВременноеХранилище(РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка).Получить(),ФормаПисьма.УникальныйИдентификатор);
//							Иначе
//								СтрокаТЗ.Данные       = РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка); 
//							КонецЕсли;
//						Иначе
//							СтруктураВложения = Новый Структура("ИмяФайла, Наименование, Хранилище", Выборка.ИмяФайла,
//							Выборка.Наименование, РаботаСФайлами.SA_ПолучитьДанныеИзХранилища(Выборка.Ссылка)); //SA - было: , Выборка.Хранилище);
//							СписокФайловВложений.Вставить(0, СтруктураВложения);					
//						КонецЕсли;
//					КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;
//			
//		КонецЕсли;
//	#КонецЕсли
//	
//	// Сформируем текст письма для ответа или переадресации
//	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Или ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо"))
//		И Не Копирование Тогда
//		
//		ТекстПисьма = Письмо.ТекстПисьма;
//		
//		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//			НачалоТела = Найти(ТекстПисьма, "<BODY");
//			
//			ДатаИсходногоПисьма = Основание.Дата;
//			Если (Основание.СтатусПисьма = Перечисления.СтатусыПисем.Полученное Или Основание.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное) И ЗначениеЗаполнено(Основание.Дата) Тогда
//				ДатаИсходногоПисьма = Основание.Дата;
//			КонецЕсли;
//			
//			СтрокаОтправителя = "Отправитель: ";
//			Если Не ПустаяСтрока(Основание.ОтправительИмя) Тогда
//				СтрокаОтправителя = СтрокаОтправителя + СокрЛП(Основание.ОтправительИмя) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(Основание.ОтправительИмя, """", "")) + "<" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + "</A>&gt";
//			Иначе
//				СтрокаОтправителя = СтрокаОтправителя + "&lt<A href=" + """" + "mailto:" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + """" + ">" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + "</A>&gt";
//			КонецЕсли;
//			
//			СтрокаКому = "";
//			Для Каждого СтрокаТЧ Из Основание.КомуТЧ Цикл
//				Если Не ПустаяСтрока(СтрокаКому) Тогда
//					СтрокаКому = СтрокаКому + ", ";
//				КонецЕсли;
//				
//				Если Не ПустаяСтрока(СтрокаТЧ.Представление) Тогда
//					СтрокаКому = СтрокаКому + СокрЛП(СтрокаТЧ.Представление) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(СтрокаТЧ.Представление, """", "")) + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
//				Иначе
//					СтрокаКому = СтрокаКому + "&lt<A href=" + """" + "mailto:" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
//				КонецЕсли;
//			КонецЦикла;
//			
//			Если Не ПустаяСтрока(СтрокаКому) Тогда
//				СтрокаКому = "Получатели: " + СтрокаКому;
//			КонецЕсли;
//			
//			СтрокаКопии = "";
//			Для Каждого СтрокаТЧ Из Основание.КопииТЧ Цикл
//				Если Не ПустаяСтрока(СтрокаКопии) Тогда
//					СтрокаКопии = СтрокаКопии + ", ";
//				КонецЕсли;
//				
//				Если Не ПустаяСтрока(СтрокаТЧ.Представление) Тогда
//					СтрокаКопии = СтрокаКопии + СокрЛП(СтрокаТЧ.Представление) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(СтрокаТЧ.Представление, """", "")) + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
//				Иначе
//					СтрокаКопии = СтрокаКопии + "&lt<A href=" + """" + "mailto:" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + """" + ">" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + "</A>&gt";
//				КонецЕсли;
//			КонецЦикла;
//			
//			Если Не ПустаяСтрока(СтрокаКопии) Тогда
//				СтрокаКопии = "Копии: " + СтрокаКопии;
//			КонецЕсли;
//			
//			Если НачалоТела > 0 Тогда
//				
//				КонецНачалаТела = 0;
//				Для а = НачалоТела По СтрДлина(ТекстПисьма) Цикл
//					Если Сред(ТекстПисьма, а, 1) = ">" Тогда
//						КонецНачалаТела = а;
//						Прервать;
//					КонецЕсли;
//				КонецЦикла;
//				
//				НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела) + "<DIV><BR></DIV>" + 
//				"<BLOCKQUOTE dir=ltr style=" + """" + "PADDING-LEFT: 15px; MARGIN-LEFT: 5px; BORDER-LEFT: #000000 2px solid; MARGIN-RIGHT: 0px" + """" + ">" + 
//				"<P><A href="+ """" + Строка(?(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо"), Основание.УникальныйИдентификатор(), Основание.Ссылка.УникальныйИдентификатор())) + """" + ">--- Исходное сообщение --- </A>" + 
//				"<BR>Дата: " + Формат(ДатаИсходногоПисьма, "ДЛФ=DT") +
//				"<BR>" + СтрокаОтправителя;
//				
//				Если Не ПустаяСтрока(СтрокаКому) Тогда
//					НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКому;
//				КонецЕсли;
//				
//				Если Не ПустаяСтрока(СтрокаКопии) Тогда
//					НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКопии;
//				КонецЕсли;
//				
//				Если Не ПустаяСтрока(Основание.Тема) Тогда
//					НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + "Тема: " + Основание.Тема;
//				КонецЕсли;
//				
//				НовыйТекстПисьма = НовыйТекстПисьма + "</P><P><BR></P>";
//				
//				КонецТела = Найти(ТекстПисьма, "</BODY");
//				Если КонецТела > 0 Тогда
//					НовыйТекстПисьма = НовыйТекстПисьма + Сред(ТекстПисьма, (КонецНачалаТела + 1), (КонецТела - КонецНачалаТела - 1)) + "</BLOCKQUOTE>" + Сред(ТекстПисьма, КонецТела);
//					Письмо.ТекстПисьма = НовыйТекстПисьма;
//				КонецЕсли;
//			КонецЕсли;
//			
//		Иначе
//			НовыйТекстПисьма = Новый ТекстовыйДокумент;
//			
//			НовыйТекстПисьма.УстановитьТекст(ТекстПисьма);
//			
//			НовыйТекстПисьма.ВставитьСтроку(1, "--- Исходное сообщение ---");
//			ПоследняяСтрока = 1;
//			
//			ДатаИсходногоПисьма = Основание.Дата;
//			Если (Основание.СтатусПисьма = Перечисления.СтатусыПисем.Полученное Или Основание.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное) И ЗначениеЗаполнено(Основание.Дата) Тогда
//				ДатаИсходногоПисьма = Основание.Дата;
//			КонецЕсли;
//			НовыйТекстПисьма.ВставитьСтроку(2, "Дата: " + Формат(ДатаИсходногоПисьма, "ДЛФ=DT"));
//			ПоследняяСтрока = 2;
//			
//			СтрокаОтправителя = "Отправитель: ";
//			Если Не ПустаяСтрока(Основание.ОтправительИмя) Тогда
//				СтрокаОтправителя = СтрокаОтправителя + СокрЛП(Основание.ОтправительИмя) + " <" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">";
//			Иначе
//				СтрокаОтправителя = СтрокаОтправителя + "<" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">";
//			КонецЕсли;
//			НовыйТекстПисьма.ВставитьСтроку(3, СтрокаОтправителя);
//			ПоследняяСтрока = 3;
//			
//			СтрокаКому = "";
//			Для Каждого СтрокаТЧ Из Основание.КомуТЧ Цикл
//				
//				Если Не ПустаяСтрока(СтрокаКому) Тогда
//					СтрокаКому = СтрокаКому + ", ";
//				КонецЕсли;
//				
//				Если Не ПустаяСтрока(СтрокаТЧ.Представление) Тогда
//					СтрокаКому = СтрокаКому + СокрЛП(СтрокаТЧ.Представление) + " <" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
//				Иначе
//					СтрокаКому = СтрокаКому + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			Если Не ПустаяСтрока(СтрокаКому) Тогда
//				НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Получатели: " + СтрокаКому);
//				ПоследняяСтрока = ПоследняяСтрока + 1;
//			КонецЕсли;
//			
//			СтрокаКопии = "";
//			Для Каждого СтрокаТЧ Из Основание.КопииТЧ Цикл
//				
//				Если Не ПустаяСтрока(СтрокаКопии) Тогда
//					СтрокаКопии = СтрокаКопии + ", ";
//				КонецЕсли;
//				
//				Если Не ПустаяСтрока(СтрокаТЧ.Представление) Тогда
//					СтрокаКопии = СтрокаКопии + СокрЛП(СтрокаТЧ.Представление) + " <" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
//				Иначе
//					СтрокаКопии = СтрокаКопии + "<" + СокрЛП(СтрокаТЧ.АдресЭлектроннойПочты) + ">";
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			Если Не ПустаяСтрока(СтрокаКопии) Тогда
//				НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Копии: " + СтрокаКопии);
//				ПоследняяСтрока = ПоследняяСтрока + 1;
//			КонецЕсли;
//			
//			Если Не ПустаяСтрока(Основание.Тема) Тогда
//				НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "Тема: " + Основание.Тема);
//				ПоследняяСтрока = ПоследняяСтрока + 1;
//			КонецЕсли;
//			
//			НовыйТекстПисьма.ВставитьСтроку(ПоследняяСтрока + 1, "");
//			
//			Для а = 1 по НовыйТекстПисьма.КоличествоСтрок() Цикл
//				НовыйТекстПисьма.ЗаменитьСтроку(а, ("> " + НовыйТекстПисьма.ПолучитьСтроку(а)));
//			КонецЦикла;
//			
//			НовыйТекстПисьма.ВставитьСтроку(1, "");
//			НовыйТекстПисьма.ВставитьСтроку(1, "");
//			
//			Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
//		КонецЕсли;
//	КонецЕсли;
//	
//	// Проставим при необходимости подпись
//	Если Не Копирование И ((УчетнаяЗапись.ДобавлятьПодписьКИсходящимПисьмам И Дополнительно = Неопределено)
//		Или ((Письмо.Ответ Или Письмо.Переадресация) И УчетнаяЗапись.ДобавлятьПодписьКОтветамИПересылкам = Истина)) Тогда
//		Отказ = Ложь;
//		
//		//SA {
//		//--- данный блок синхронизирован с процедурой Документ.ЭлектронноеПисьмо.МодульОбъекта.SA_ВставитьПодпись()!
//		Если ПодписьПодТекстом И (Письмо.Ответ Или Письмо.Переадресация) Тогда
//			ПодписьПодТекстом = Ложь;
//		КонецЕсли;
//		
//		НовыйКом = Новый COMОбъект("HtmlFile");
//		НовыйКом.open("text/html");

//		НовыйКом.write(ОбщегоНазначения_Сервер.ПолучитьТекстОсновнойПодписи(ПараметрыСеанса.ТекущийПользователь, УчетнаяЗапись, Письмо.ВидТекстаПисьма));
//		
//		НовыйКом.close();
//		
//		Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML
//			 Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//			
//			ТекстПисьма = Письмо.ТекстПисьма;
//			
//			Если ПустаяСтрока(ТекстПисьма) Тогда
//				ТекстПисьма = "<HTML><HEAD>
//				|<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
//				|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
//				|<BODY><DIV></DIV></BODY></HTML>";
//			Иначе
//				Если Найти(ТекстПисьма, "<BODY") = 0 Тогда
//					ТекстПисьма = мюСтроки.ПреобразоватьВHTML(ТекстПисьма, Письмо.КодировкаПисьма);
//				КонецЕсли;
//			КонецЕсли;
//			
//			НачалоТела = Найти(ТекстПисьма, "<BODY");
//			КонецНачалаТела = 0;
//			Для а = НачалоТела По СтрДлина(ТекстПисьма) Цикл
//				Если Сред(ТекстПисьма, а, 1) = ">" Тогда
//					КонецНачалаТела = а;
//					Прервать;
//				КонецЕсли;
//			КонецЦикла;
//			
//			Если НачалоТела = 0 Или КонецНачалаТела = 0 Тогда
//				Отказ = Истина;
//			КонецЕсли;
//			
//			ТегBODY = НовыйКом.all.Tags("BODY");
//			Если ТегBODY.length > 0 Тогда
//				ХТМЛПодписи = ТегBODY.item(0).innerHTML;
//				Если ПустаяСтрока(ХТМЛПодписи) Тогда
//					Отказ = Истина;
//				Иначе
//					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "<PRE>", "");
//					ХТМЛПодписи = СтрЗаменить(ХТМЛПодписи, "</PRE>", "<BR>");
//					// Обрамляем подпись комментами
//					ХТМЛПодписи = "<SUBSCRIBE>" + ХТМЛПодписи + "</SUBSCRIBE>";
//				КонецЕсли;
//			Иначе
//				Отказ = Истина;
//			КонецЕсли;
//			
//			Если Не Отказ Тогда
//				//SA {
//				#Если Клиент Тогда
//					ФормаПисьма.ДополнительныеСвойства.Вставить("БлокировкаСозданияПодписи", Истина); 
//				#КонецЕсли
//				Письмо.ДополнительныеСвойства.Вставить("БлокировкаСозданияПодписи", Истина); 
//				//SA }
//				Если ПодписьПодТекстом Тогда
//					НачалоКонцаТела = Найти(ТекстПисьма, "</BODY");
//					Если НачалоКонцаТела > 0 Тогда
//						НовыйТекстПисьма = Лев(ТекстПисьма, НачалоКонцаТела - 1);
//						НовыйТекстПисьма  = НовыйТекстПисьма + "<BR>" + ХТМЛПодписи
//							+ Сред(ТекстПисьма, НачалоКонцаТела);
//						Письмо.ТекстПисьма = НовыйТекстПисьма;
//					КонецЕсли;
//				Иначе
//					НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела);
//					НовыйТекстПисьма  = НовыйТекстПисьма + "<DIV>&nbsp;</DIV>" + ХТМЛПодписи
//						+ Сред(ТекстПисьма, (КонецНачалаТела + 1));
//					Письмо.ТекстПисьма = НовыйТекстПисьма;
//				КонецЕсли;
//			КонецЕсли;
//			
//		Иначе
//			
//			ТекстПодписи = Новый ТекстовыйДокумент;
//			ТекстПодписи.УстановитьТекст(СтрЗаменить(НовыйКом.all.item(0).innerText, Символ(13), ""));
//			
//			Если ТекстПодписи.КоличествоСтрок() > 0 Тогда
//				
//				НовыйТекстПисьма = Новый ТекстовыйДокумент;
//				НовыйТекстПисьма.УстановитьТекст(Письмо.ТекстПисьма);
//				
//				Если НовыйТекстПисьма.КоличествоСтрок() > 0 Тогда
//					ПерваяСтрока = НовыйТекстПисьма.ПолучитьСтроку(1);
//					Если ПустаяСтрока(ПерваяСтрока) Тогда
//						НовыйТекстПисьма.УдалитьСтроку(1);
//					КонецЕсли;
//				КонецЕсли;
//				
//				Для а = 1 По ТекстПодписи.КоличествоСтрок() Цикл
//					Если ПодписьПодТекстом Тогда
//						НовыйТекстПисьма.ДобавитьСтроку(ТекстПодписи.ПолучитьСтроку(а));
//					Иначе
//						НовыйТекстПисьма.ВставитьСтроку(а, ТекстПодписи.ПолучитьСтроку(а));
//					КонецЕсли;
//				КонецЦикла;
//				
//				НовыйТекстПисьма.ВставитьСтроку(1, "");
//				Письмо.ТекстПисьма = НовыйТекстПисьма.ПолучитьТекст();
//				
//				//SA {
//				#Если Клиент Тогда
//					ФормаПисьма.ДополнительныеСвойства.Вставить("БлокировкаСозданияПодписи", Истина); 
//				#КонецЕсли
//				Письмо.ДополнительныеСвойства.Вставить("БлокировкаСозданияПодписи", Истина); 	
//				//SA }
//				 		
//			КонецЕсли;
//			
//		КонецЕсли;
//		//--- конец синхронизированного блока
//		//SA }
//	КонецЕсли;
//	
//	//SA { вставляем в письмо текст, переданный в параметре Тело
//	//Если СтрТело <> Неопределено И Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.Текст Тогда
//	//	Письмо.ТекстПисьма = стрТело + Символы.ПС + Письмо.ТекстПисьма;	
//	//ИначеЕсли СтрТело <> Неопределено И Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML
//	// Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//	//	Массив = Обработки.RegExp_кла.preg_split(НовыйТекстПисьма, "(<[Bb][Oo][Dd][Yy][^>]*>.*)");
//	//	Письмо.ТекстПисьма = ?(Массив.Количество() > 0, Обработки.RegExp_кла.preg_replace(Письмо.ТекстПисьма, "(<[Bb][Oo][Dd][Yy][^>]*>.*)", Массив[0] + " <FONT face=""MS Sans Serif"" size=2>" + стрТело + "</FONT><BR>" ), Письмо.ТекстПисьма); 
//	//КонецЕсли;			
//	//SA }
//		
//	//SA { Данила.
//	#Если Клиент Тогда
//		ЗначениеВДанныеФормы(Письмо,ФормаПисьма.Объект);
//	#КонецЕсли
//	//SA }
//	
//	#Если Клиент Тогда
//		Если ОткрыватьПисьмо Тогда
//			// SA { - используется для выбора адреса при открытии формы электронного письма
//			Если СтруктураНовогоПисьма.Свойство("ТаблицаАдресовОбъекта") Тогда 
//				Письмо.ДополнительныеСвойства.Вставить("ТаблицаАдресовОбъекта", СтруктураНовогоПисьма.ТаблицаАдресовОбъекта);
//				ФормаПисьма.ДополнительныеСвойства.Вставить("ТаблицаАдресовОбъекта", СтруктураНовогоПисьма.ТаблицаАдресовОбъекта);
//			КонецЕсли;
//			// SA }
//			Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
//				ЗначениеСтруктурыВозврата = Неопределено;
//				Для Каждого ЭлементСписка Из СписокФайловВложений Цикл
//					НовоеВложение = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();
//					
//					ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
//					Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//						Продолжить;
//					Иначе
//						Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
//							НовоеВложение.Данные = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
//						ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
//							НовоеВложение.Данные = ЗначениеСтруктурыВозврата;
//						ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
//							НовоеВложение.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
//						Иначе
//							Продолжить;
//						КонецЕсли;
//						ЗначениеСтруктурыВозврата = Неопределено;
//					КонецЕсли;
//					
//					ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
//					Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//						НовоеВложение.ИмяФайла = "";
//					Иначе
//						НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
//						ЗначениеСтруктурыВозврата = Неопределено;
//					КонецЕсли;
//					
//					ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
//					Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//						НовоеВложение.Наименование = "";
//					Иначе
//						НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
//						ЗначениеСтруктурыВозврата = Неопределено;
//					КонецЕсли;
//				КонецЦикла;
//			КонецЕсли;
//			
//			ФормаПисьма.Открыть();
//			
//			// Установим удобный элемент управления в форме письма - текущим
//			Если ТекущийЭлементХТМЛ Тогда
//				//SA { Данила.
//				//Если Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML Или Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
//				//	ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеHTMLДокумента;
//				//Иначе
//				//	ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеТекстовогоДокумента;
//				//КонецЕсли;
//				ФормаПисьма.ТекущийЭлемент = ФормаПисьма.Элементы.ТекстПисьма;
//				//SA }
//			Иначе
//				//SA { Данила.
//				//ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.Кому;
//				ФормаПисьма.ТекущийЭлемент = ФормаПисьма.Элементы.Кому;
//				//SA }
//			КонецЕсли;
//			
//			СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
//		КонецЕсли;
//	#КонецЕсли
//	
//	Если Не ОткрыватьПисьмо Тогда
//		Попытка
//			Письмо.Записать();
//		Исключение
//			Возврат ОписаниеОшибки();
//		КонецПопытки;
//		
//		Если ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0 Тогда
//			ЗначениеСтруктурыВозврата = Неопределено;
//			
//			Для Каждого ЭлементСписка Из СписокФайловВложений Цикл
//				НовоеВложение = Справочники.ВложенияЭлектронныхПисем.СоздатьЭлемент();
//				НовоеВложение.Объект = Письмо.Ссылка;
//				
//				ЭлементСписка.Значение.Свойство("Хранилище", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					Продолжить;
//				Иначе
//					Если ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ДвоичныеДанные") Тогда
//						НовоеВложение.Хранилище = Новый ХранилищеЗначения(ЗначениеСтруктурыВозврата, Новый СжатиеДанных);
//					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("ХранилищеЗначения") Тогда
//						НовоеВложение.Хранилище = ЗначениеСтруктурыВозврата;
//					ИначеЕсли ТипЗнч(ЗначениеСтруктурыВозврата) = Тип("Строка") Тогда
//						НовоеВложение.Хранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ЗначениеСтруктурыВозврата), Новый СжатиеДанных);
//					Иначе
//						Продолжить;
//					КонецЕсли;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				ЭлементСписка.Значение.Свойство("ИмяФайла", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					НовоеВложение.ИмяФайла = "";
//				Иначе
//					НовоеВложение.ИмяФайла = ЗначениеСтруктурыВозврата;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				ЭлементСписка.Значение.Свойство("Наименование", ЗначениеСтруктурыВозврата);
//				Если ЗначениеСтруктурыВозврата = Неопределено Тогда
//					НовоеВложение.Наименование = "";
//				Иначе
//					НовоеВложение.Наименование = ЗначениеСтруктурыВозврата;
//					ЗначениеСтруктурыВозврата = Неопределено;
//				КонецЕсли;
//				
//				Попытка
//					НовоеВложение.Записать();
//				Исключение
//					Возврат ОписаниеОшибки();
//				КонецПопытки;
//			КонецЦикла;
//		КонецЕсли;
//		
//		#Если Клиент Тогда
//			СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);
//		#Иначе
//			СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Неопределено, Неопределено, Письмо.Ссылка);
//		#КонецЕсли
//		
//		//SA {
//		Если SA_ПробоватьОтправить Тогда
//			МассивУчетныхЗаписей = Новый Массив;
//			МассивУчетныхЗаписей.Добавить(УчетнаяЗапись);
//			Письма = Новый Соответствие;
//			Письма.Вставить(Письмо.Ссылка);
//			ТекстОшибок = "";
//			ПолучениеОтправкаПисем(, ТекущийПользователь, МассивУчетныхЗаписей, Письма, Истина, Ложь, Ложь, ТекстОшибок);
//			Если Не ПустаяСтрока(ТекстОшибок) Тогда
//				СтруктураВозврата.Вставить("ТестОшибок", ТекстОшибок);
//			КонецЕсли;
//		КонецЕсли;
//		//SA }
//	КонецЕсли;
//	
//	Возврат СтруктураВозврата;
//	
//КонецФункции


