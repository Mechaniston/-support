
////////////////////////////////////////////////////////////////////////////////
// Процедуры заполнения командной панели кнопок работы с HTML
 
#Область КоманднаяПанельКнопок

// Процедура создает командную панель кнопок работы с HTML.
// Необходимо вставить в событие ПриСозданииНаСервере Формы.
//
Процедура СоздатьПанелиРаботыСHTML(Форма, ГруппаПанелей, ОбработчикКоманд = "ОбработчикКомандРаботыСHTML",
	Редактирование = Истина, КонтекстноеМеню = Неопределено) Экспорт
	
	СоздатьКоманднуюПанельКнопокРаботыСHTML(Форма, ГруппаПанелей, ОбработчикКоманд, Редактирование, КонтекстноеМеню);
	
	Если Редактирование Тогда
		
		СоздатьГруппуВыпадающихСписков(Форма, ГруппаПанелей, ОбработчикКоманд);
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура СоздатьКоманднуюПанельКнопокРаботыСHTML(Форма, ГруппаПанелей, ОбработчикКоманд, Редактирование, КонтекстноеМеню)
	
	ПанельКнопок = Форма.Элементы.Добавить(ГруппаПанелей.Имя + "_ПанельКнопок", Тип("ГруппаФормы"), ГруппаПанелей);
	ПанельКнопок.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	СоздатьКнопкуВключенияРедактирования(Форма, ПанельКнопок, ОбработчикКоманд, КонтекстноеМеню);
	СоздатьКнопкиПроверкиОрфографии(Форма, ПанельКнопок, ОбработчикКоманд, КонтекстноеМеню);
	СоздатьКнопкуОткрытияИсходногоКода(Форма, ПанельКнопок, ОбработчикКоманд, КонтекстноеМеню);
	
	Если Редактирование Тогда
		
		СоздатьКнопкиСписков(Форма, ПанельКнопок, ОбработчикКоманд);
		СоздатьКнопкиОтступов(Форма, ПанельКнопок, ОбработчикКоманд);
		СоздатьКнопкиЦвета(Форма, ПанельКнопок, ОбработчикКоманд);
		СоздатьКнопкиВставок(Форма, ПанельКнопок, ОбработчикКоманд);
		СоздатьКнопкиНачертания(Форма, ПанельКнопок, ОбработчикКоманд);
		СоздатьКнопкиКопиПаста(Форма, ПанельКнопок, ОбработчикКоманд);
		СоздатьКнопкиИндексов(Форма, ПанельКнопок, ОбработчикКоманд);
		СоздатьКнопкиВыравнивания(Форма, ПанельКнопок, ОбработчикКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьГруппуВыпадающихСписков(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	ГруппаВыпадающихСписков = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаВыпадающихСписков", Тип("ГруппаФормы"), Панель);
	ГруппаВыпадающихСписков.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВыпадающихСписков.ОтображатьЗаголовок = Ложь;
	ГруппаВыпадающихСписков.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаВыпадающихСписков.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаВыпадающихСписков.РастягиватьПоГоризонтали = Ложь;
	ГруппаВыпадающихСписков.Ширина = 30;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
	Шрифты = Новый РеквизитФормы(ИмяПанели + "_Шрифты", ОписаниеТипов, , "Шрифт");
	ДобавляемыеРеквизиты.Добавить(Шрифты);
	
	РазмерыШрифта = Новый РеквизитФормы(ИмяПанели + "_РазмерыШрифта", ОписаниеТипов, , "Размер");
	ДобавляемыеРеквизиты.Добавить(РазмерыШрифта);
	
	Форматы = Новый РеквизитФормы(ИмяПанели + "_Форматы", ОписаниеТипов, , "Формат");
	ДобавляемыеРеквизиты.Добавить(Форматы);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Сч = 1;
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
		
		Имя = Реквизит.Имя;
		Элемент = Форма.Элементы.Добавить(Имя, Тип("ПолеФормы"), ГруппаВыпадающихСписков);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Имя;
		Элемент.РежимВыбораИзСписка = Истина;
		Элемент.РедактированиеТекста = Ложь;
		Элемент.УстановитьДействие("ОбработкаВыбора", ОбработчикКоманд);
		Элемент.Ширина = ?(Сч = 2, 16, 7); // Иначе "съедается" поле размера шрифта.
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.СочетаниеКлавиш = ПолучитьСочетаниеКлавишПоЗаголовку(Реквизит.Заголовок);
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// Заполнение списка стилей
	СписокСтилей = Форма.Элементы[Форматы.Имя].СписокВыбора;
	СписокСтилей.Добавить("<p>", "Обычный");
	СписокСтилей.Добавить("<h1>", "Заголовок 1");
	СписокСтилей.Добавить("<h2>", "Заголовок 2");
	СписокСтилей.Добавить("<h3>", "Заголовок 3");
	СписокСтилей.Добавить("<h4>", "Заголовок 4");
	СписокСтилей.Добавить("<h5>", "Заголовок 5");
	СписокСтилей.Добавить("<h6>", "Заголовок 6");
	СписокСтилей.Добавить("<pre>", "Форматированный");
	СписокСтилей.Добавить("<address>", "Адрес");
	Форма[Форматы.Имя] = СписокСтилей[0].Значение;
	
	// Заполнение списка шрифтов
	СписокШрифтов = Форма.Элементы[Шрифты.Имя].СписокВыбора;
	СписокШрифтов.Добавить("Arial");
	СписокШрифтов.Добавить("Arial Black");
	СписокШрифтов.Добавить("Arial Narrow");
	СписокШрифтов.Добавить("Comic Sans MS");
	СписокШрифтов.Добавить("Courier New");
	СписокШрифтов.Добавить("System");
	СписокШрифтов.Добавить("Tahoma");
	СписокШрифтов.Добавить("Times New Roman");
	СписокШрифтов.Добавить("Verdana");
	СписокШрифтов.Добавить("Wingdings");
	Форма[Шрифты.Имя] = СписокШрифтов[0].Значение;
	
	// Заполнение списка размеров
	ЭлементРазмерШрифта = Форма.Элементы[РазмерыШрифта.Имя];
	ЭлементРазмерШрифта.Ширина = 2;
	СписокРазмеров = ЭлементРазмерШрифта.СписокВыбора;
	
	Для Размер = 1 По 14 Цикл
		
		СписокРазмеров.Добавить(Строка(Размер));
		
	КонецЦикла;
	
	Форма[РазмерыШрифта.Имя] = СписокРазмеров[2].Значение;
	
КонецПроцедуры 

Процедура СоздатьКнопкиКопиПаста(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаКопиПаста", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_Вырезать",
		БиблиотекаКартинок.Вырезать_ат, "Вырезать", , ОбработчикКоманд);
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_Копировать",
		БиблиотекаКартинок.СкопироватьВБуфер_ат, "Копировать", , ОбработчикКоманд);	
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_Вставить",
		БиблиотекаКартинок.ВставитьИзБуфера_ат, "Вставить", , ОбработчикКоманд);
	
КонецПроцедуры

Процедура СоздатьКнопкиВставок(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаВставок", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ВставитьКартинку",
		БиблиотекаКартинок.Картинка, "Вставить картинку", , ОбработчикКоманд,,,  Новый СочетаниеКлавиш(Клавиша.i,, Истина, Истина));
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ВставитьГиперссылку",
		БиблиотекаКартинок.Ссылка_ат, "Вставить гиперссылку", , ОбработчикКоманд,,,  Новый СочетаниеКлавиш(Клавиша.k,, Истина));
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ГоризонтальнаяЛиния",
		БиблиотекаКартинок.ГоризонтальнаяЛиния_ат, "Горизонтальная линия", , ОбработчикКоманд,,,  Новый СочетаниеКлавиш(Клавиша.H,, Истина));
	
КонецПроцедуры

Процедура СоздатьКнопкиИндексов(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаИндексов", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ВерхнийИндекс",
		БиблиотекаКартинок.ВерхнийИндекс_ат, "Верхний индекс", , ОбработчикКоманд,, Истина);
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_НижнийИндекс",
		БиблиотекаКартинок.НижнийИндекс_ат, "Нижний индекс", , ОбработчикКоманд,, Истина);	
	
КонецПроцедуры

Процедура СоздатьКнопкиНачертания(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаНачертаний", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_Полужирный",
		БиблиотекаКартинок.Полужирный_ат, "Полужирный", , ОбработчикКоманд,,,  Новый СочетаниеКлавиш(Клавиша.b,, Истина));
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_Курсив",
		БиблиотекаКартинок.Курсив_ат, "Курсив", , ОбработчикКоманд,,,  Новый СочетаниеКлавиш(Клавиша.i,, Истина));	
		
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_Подчеркнутый",
		БиблиотекаКартинок.Подчеркнутый_ат, "Подчёркнутый", , ОбработчикКоманд,,,  Новый СочетаниеКлавиш(Клавиша.u,, Истина));	
		
КонецПроцедуры

Процедура СоздатьКнопкиВыравнивания(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаВыравниваний", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ПоЛевомуКраю",
		БиблиотекаКартинок.ВыравниваниеПоЛевомуКраю_ат, "По левому краю", , ОбработчикКоманд,, Истина, Новый СочетаниеКлавиш(Клавиша.L,, Истина, Истина));
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ПоЦентру",
		БиблиотекаКартинок.ВыравниваниеПоЦентру_ат, "По центру", , ОбработчикКоманд,, Истина, Новый СочетаниеКлавиш(Клавиша.c,, Истина, Истина));	
		
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ПоПравомуКраю",
		БиблиотекаКартинок.ВыравниваниеПоПравомуКраю_ат, "По правому краю", , ОбработчикКоманд,, Истина, Новый СочетаниеКлавиш(Клавиша.r,, Истина, Истина));	
		
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ПоШирине",
		БиблиотекаКартинок.ВыравниваниеПоШирине_ат, "По ширине", , ОбработчикКоманд,, Истина, Новый СочетаниеКлавиш(Клавиша.j,, Истина, Истина));	
		
КонецПроцедуры

Процедура СоздатьКнопкиСписков(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаСписков", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_НумерованныйСписок",
		БиблиотекаКартинок.НумерованныйСписок_ат, "Нумерованный список", , ОбработчикКоманд,,, Новый СочетаниеКлавиш(Клавиша._7,, Истина, Истина));
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_МаркированныйСписок",
		БиблиотекаКартинок.МаркированныйСписок_ат, "Маркированнный список", , ОбработчикКоманд,,, Новый СочетаниеКлавиш(Клавиша._8,, Истина, Истина));	
		
КонецПроцедуры

Процедура СоздатьКнопкиОтступов(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаОтступов", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_УвеличитьОтступ",
		БиблиотекаКартинок.УвеличитьОтступ_ат, "Увеличить отступ", , ОбработчикКоманд,,, Новый СочетаниеКлавиш(Клавиша.M,, Истина));	
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_УменьшитьОтступ",
		БиблиотекаКартинок.УменьшитьОтступ_ат, "Уменьшить отступ", , ОбработчикКоманд,,, Новый СочетаниеКлавиш(Клавиша.M,, Истина, Истина));
	
КонецПроцедуры

Процедура СоздатьКнопкиЦвета(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаЦвета", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ЦветТекста",
		БиблиотекаКартинок.ЦветТекста_ат, "Цвет текста", , ОбработчикКоманд, ,, Новый СочетаниеКлавиш(Клавиша.C, Истина, Истина));
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ВыделениеЦветом",
		БиблиотекаКартинок.ВыделениеЦветом_ат, "Выделение цветом", , ОбработчикКоманд,,, Новый СочетаниеКлавиш(Клавиша.s,, Истина));
		
КонецПроцедуры

Процедура СоздатьКнопкиПроверкиОрфографии(Форма, Панель, ОбработчикКоманд, КонтекстноеМеню)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаПроверкиОрфографии", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F7);
	
	Если НЕ КонтекстноеМеню = Неопределено Тогда
		УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, КонтекстноеМеню, КонтекстноеМеню.Родитель.Имя + "_КонтекстноеМеню_ПроверитьОрфографию",
			БиблиотекаКартинок.ПроверитьОрфографию_ат, "Проверить орфографию", ОтображениеКнопки.КартинкаИТекст, ОбработчикКоманд,,, СочетаниеКлавиш);

	КонецЕсли;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ПроверитьОрфографию",
		БиблиотекаКартинок.ПроверитьОрфографию_ат, "Проверить орфографию", ОтображениеКнопки.КартинкаИТекст, ОбработчикКоманд,,, СочетаниеКлавиш);
		
КонецПроцедуры

Процедура СоздатьКнопкуВключенияРедактирования(Форма, Панель, ОбработчикКоманд, КонтекстноеМеню)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаУправленияРедактированием", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F2);
	
	Если НЕ КонтекстноеМеню = Неопределено Тогда
		УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, КонтекстноеМеню, КонтекстноеМеню.Родитель.Имя + "_КонтекстноеМеню_ВключитьВозможностьРедактирования", БиблиотекаКартинок.Изменить,
			"Включить возможность редактирования", , ОбработчикКоманд, "Включить возможность редактирования",, СочетаниеКлавиш);

	КонецЕсли;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ВключитьВозможностьРедактирования", БиблиотекаКартинок.Изменить,
			"Включить возможность редактирования", , ОбработчикКоманд, "Включить возможность редактирования",, СочетаниеКлавиш);
	
КонецПроцедуры

Процедура СоздатьКнопкуОткрытияИсходногоКода(Форма, Панель, ОбработчикКоманд, КонтекстноеМеню)
	
	ИмяПанели = Панель.Имя;
	
	Группа = Форма.Элементы.Добавить(ИмяПанели + "_ГруппаПросмотраИсходногоКода", Тип("ГруппаФормы"), Панель);
	Группа.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.F12);
	
	Если НЕ КонтекстноеМеню = Неопределено Тогда
		УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, КонтекстноеМеню, КонтекстноеМеню.Родитель.Имя + "_КонтекстноеМеню_ПоказатьИсходныйКод", БиблиотекаКартинок.Найти,
			"Показать исходный код", , ОбработчикКоманд, "Показать исходный код",, СочетаниеКлавиш);

	КонецЕсли;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, Группа, ИмяПанели + "_ПоказатьИсходныйКод", БиблиотекаКартинок.Найти,
			"Показать исходный код", , ОбработчикКоманд, "Показать исходный код", Истина, СочетаниеКлавиш);
	
КонецПроцедуры

Функция ПолучитьСочетаниеКлавишПоЗаголовку(Заголовок)
	
	Если Заголовок = "Шрифт" Тогда
		Сочетание = Новый СочетаниеКлавиш(Клавиша.d,, Истина);
	ИначеЕсли Заголовок = "Размер" Тогда
		Сочетание = Новый СочетаниеКлавиш(Клавиша.p,, Истина, Истина);
	ИначеЕсли Заголовок = "Формат" Тогда
		Сочетание = Новый СочетаниеКлавиш(Клавиша.d,, Истина, Истина);
	Иначе
		Сочетание = Новый СочетаниеКлавиш(Клавиша.Нет);
	КонецЕсли;
	
	Возврат Сочетание;
	
КонецФункции

 #КонецОбласти
 
 
 ////////////////////////////////////////////////////////////////////////////////
// Процедуры изменения контекстного меню поля HTML
 
#Область КонтекстноеМенюПоляHTML

// Процедура формирует контектное меню замены слова.
// Вставляется в серверную процедуру, указанную в обработчике событий поля HTML.
//
Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Форма, КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
	ТолькоОчистить, ОбработчикКоманд = "ОбработчикКомандРаботыСHTML") Экспорт
 	
	ОчиститьКонтестноеМенюЗаменыСлова(Форма);
	
	Если НЕ ТолькоОчистить Тогда
		
		ЗаполнитьКонтестноеМенюЗаменыСлова(Форма, КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ОбработчикКоманд);
		
	КонецЕсли;
 	
КонецПроцедуры 

Процедура ОчиститьКонтестноеМенюЗаменыСлова(Форма)
	
	Элементы = Форма.Элементы;
	ПодменюЗаменыСлова = Элементы.Найти("ПодменюЗаменыСлова");
	
	Если ПодменюЗаменыСлова <> Неопределено Тогда
		
		Для Каждого Кнопка Из ПодменюЗаменыСлова.ПодчиненныеЭлементы Цикл
			
			Форма.Команды.Удалить(Форма.Команды.Найти(Кнопка.Имя));
			Элементы.Удалить(Кнопка);
			
		КонецЦикла;
		
		Элементы.Удалить(ПодменюЗаменыСлова);
		
	КонецЕсли;	
	
	КнопкаДобавленияСлова = Элементы.Найти("ДобавитьСловоВСловарь");
	
	Если КнопкаДобавленияСлова <> Неопределено Тогда
		
		Форма.Команды.Удалить(Форма.Команды.Найти(КнопкаДобавленияСлова.Имя));
		Элементы.Удалить(КнопкаДобавленияСлова);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтестноеМенюЗаменыСлова(Форма, КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ОбработчикКоманд)
	
	Элементы = Форма.Элементы;
	
	Если СоответствиеКомандЗаменыСловам.Количество() > 0 Тогда
		
		ПодменюЗаменыСлова = Элементы.Добавить("ПодменюЗаменыСлова", Тип("ГруппаФормы"), КонтекстноеМеню);
		ПодменюЗаменыСлова.Заголовок = "Заменить слово на:";
		
		Для Каждого КлючИЗначение Из СоответствиеКомандЗаменыСловам Цикл
			
			УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, ПодменюЗаменыСлова, КлючИЗначение.Ключ, ,
				КлючИЗначение.Значение, , ОбработчикКоманд);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УправляемыеФормы_Сервер_ат.СоздатьКнопку(Форма, КонтекстноеМеню, "ДобавитьСловоВСловарь", ,
			"Добавить слово в словарь", , ОбработчикКоманд);
	
КонецПроцедуры 

 #КонецОбласти

#Область КартинкиВТексте

Функция ПолучитьФайлыОбъектаСНепустымиИД(Объект) Экспорт
	
	ИмяМетаданныхИсточника = Объект.Метаданные().Имя;
	ЯвляетсяПисьмом = ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее")
				  ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыОбъекта.Ссылка,
	|	ПрисоединенныеФайлыОбъекта.Наименование,
	|	ПрисоединенныеФайлыОбъекта.Размер,
	|	ПрисоединенныеФайлыОбъекта.ИДФайла" + ?(ЯвляетсяПисьмом, "ЭлектронногоПисьма", "") + " КАК ИДФайла,
	|	ПрисоединенныеФайлыОбъекта.ФайлХранилище
	|ИЗ
	|	Справочник." + ИмяМетаданныхИсточника + "ПрисоединенныеФайлы КАК ПрисоединенныеФайлыОбъекта
	|ГДЕ
	|	ПрисоединенныеФайлыОбъекта.ВладелецФайла = &Объект
	|	И (НЕ ПрисоединенныеФайлыОбъекта.ПометкаУдаления)
	|	И ПрисоединенныеФайлыОбъекта.ИДФайла" + ?(ЯвляетсяПисьмом, "ЭлектронногоПисьма", "") + " <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("Объект",Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// Заменяет в тексте HTML ИД картинок вложений на путь к файлам и создает объект документ HTML
//
// Параметры
//  ТекстHTML - Строка - обрабатываемый текст HTML
//  Атрибут - ТаблицаЗначений - таблица, содержащая информацию о присоединенных файлов
//  Кодировка - Строка - кодировка текста HTML
//
// Возвращаемое значение:
//  ДокументHTML   - созданный документ HTML
//
Функция ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML,ТаблицаФайлов, ИдентификаторФормы) Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	Для каждого ПрисоединенныйФайл ИЗ ТаблицаФайлов Цикл
		
		Для каждого Картинка Из ДокументHTML.Картинки Цикл
			
			АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
			Если АтрибутИсточникКартинки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайла) > 0 Тогда
				
				Попытка
					
					СсылкаНаДвоичныеДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
					ДанныеФайла = ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла);
					
					Если ТипЗнч(ДанныеФайла) = Тип("Картинка") Тогда
						
						ТекстовоеСодержимое = СсылкаНаДвоичныеДанныеФайла;
						
					Иначе
						
						ДанныеКартинки = Новый Картинка(ДанныеФайла);
						СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДанныеКартинки, Новый УникальныйИдентификатор);
						ТекстовоеСодержимое = СсылкаНаДвоичныеДанныеФайла;
						
					КонецЕсли;
					
				Исключение
					ТекстовоеСодержимое = "";
				КонецПопытки;
				
				Картинка.УстановитьАтрибут("src", ТекстовоеСодержимое);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

Процедура ЗаменитьИменаКартинокНаИдентификаторыВHTML(ТекстHTML, СоответствиеИменИдентификаторам, ВернутьТекстовоеСодержимое = Ложь) Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		Если СтрНайти(АтрибутИсточникКартинки.ТекстовоеСодержимое, "cid:") = 0 Тогда // Для записи не из формы.
			
			ИмяФайла = СтрЗаменить(АтрибутИсточникКартинки.ТекстовоеСодержимое, "%20", " ");
			Идентификатор = Новый УникальныйИдентификатор;
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			Значение = Строка("cid:" + Идентификатор);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Значение;
			НовыйАтрибутКартинки.Значение = Значение;
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
			СоответствиеИменИдентификаторам.Вставить(НовыйАтрибутКартинки.ТекстовоеСодержимое, ИмяФайла);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстHTML = ?(ВернутьТекстовоеСодержимое, ДокументHTML.Тело.ТекстовоеСодержимое, Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML));
	
КонецПроцедуры

Процедура ПоместитьКартинкиВКаталогВременныхФайлов(ТекстHTML) Экспорт
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
	
	Для Каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		
		Если ЭтоАдресВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое) Тогда
			
			Данные = ПолучитьИзВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			Данные.Записать(ВременныйФайл);
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка(ВременныйФайл);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецПроцедуры

Процедура ОбработатьКартинкиВHTMLПриСозданииНаОсновании(Объект, ТекстВHTML) Экспорт
	
	ТаблицаФайлов = РаботаСHTML_Сервер_ат.ПолучитьФайлыОбъектаСНепустымиИД(Объект);
	
	Если ТаблицаФайлов.Количество() Тогда
		
		ДокументHTML = РаботаСHTML_Сервер_ат.ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстВHTML, ТаблицаФайлов, Новый УникальныйИдентификатор);
		
		ТекстВHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
	КонецЕсли;
	
	//РаботаСHTML_Сервер_ат.ПоместитьКартинкиВКаталогВременныхФайлов(ТекстВHTML);
	
КонецПроцедуры

Процедура ЗаписатьПрикрепленныеФайлыКартинок(СсылкаНаОбъект, СоответствиеИменФайловИдентификаторам) Экспорт
	
	Для Каждого КлючИЗначение Из СоответствиеИменФайловИдентификаторам Цикл
		
		АдресВоВременномХранилище = "";
		СсылкаНаФайл = КлючИЗначение.Значение;
		Если СтрНайти(СсылкаНаФайл, "file:///") > 0 Тогда
			
			Данные = Новый ДвоичныеДанные(СтрЗаменить(СсылкаНаФайл, "file:///", ""));
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Данные, Новый УникальныйИдентификатор);
			
		Иначе
			
			СтруктураСсылки = РаботаСHTML_КлиентСервер_ат.СтруктураНавигационнойСсылки(СсылкаНаФайл);
			
			Если СтруктураСсылки.Протокол = "e1c" 
			   И СтруктураСсылки.ЭтоСсылкаИБ Тогда
			   
				АдресВоВременномХранилище = "e1cib/tempstorage/" + СтруктураСсылки.Путь;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(АдресВоВременномХранилище) Тогда
			
			ОбъектХранилища = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
			Если ТипЗнч(ОбъектХранилища) = Тип("Картинка") Тогда
				ДвоичныеДанные = ОбъектХранилища.ПолучитьДвоичныеДанные();
			Иначе
				ДвоичныеДанные = ОбъектХранилища;
			КонецЕсли;
			
			ХешКод = РаботаСХешСуммойДляФайлов_ат.ПолучитьХешКодДвоичныхДанных(ДвоичныеДанные);
			
			ИмяОбъектаМетаданных = СсылкаНаОбъект.Метаданные().Имя;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Ссылка КАК Файл
			|ИЗ
			|	Справочник." + ИмяОбъектаМетаданных + "ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
			|	И ПрисоединенныеФайлы.ПутьКФайлу = &ПутьКФайлу";
			
			Запрос.УстановитьПараметр("ВладелецФайла",	СсылкаНаОбъект);
			Запрос.УстановитьПараметр("ПутьКФайлу",		ХешКод);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);
				
				НовыйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаОбъект, СсылкаНаФайл,,,, АдресВоВременномХранилище);
				ФайлОбъект = НовыйФайл.ПолучитьОбъект();
				
			Иначе
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				ФайлОбъект = Выборка.Файл.ПолучитьОбъект();
				
			КонецЕсли;
			
			ФайлОбъект.ИДФайла = КлючИЗначение.Ключ;
			ФайлОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВременныеФайлыКартинокТекста(Объект, РеквизитТекста, Форма, ПереданРеквизитФормы = Ложь,
		ВводитсяНаОснованииВладельца = Ложь, ИнойИсточникЗаполнения = 0, БратьИзИсточника = Ложь) Экспорт
	
	Если Объект.Ссылка.Пустая() ИЛИ БратьИзИсточника Тогда
		
		Если ИнойИсточникЗаполнения = 0 Тогда //!!!!ГОВНОКОД переписать
			Источник = ?(ВводитсяНаОснованииВладельца, Объект.Владелец, Объект.Основание);
		Иначе
			Источник = ИнойИсточникЗаполнения;
		КонецЕсли;
		
	Иначе
		Источник = Объект.Ссылка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФайлов = ПолучитьФайлыОбъектаСНепустымиИД(Источник);
	
	Если ТаблицаФайлов.Количество() Тогда
		
		Текст = ?(ПереданРеквизитФормы, Форма[РеквизитТекста], Объект[РеквизитТекста]);
		
		ДокументHTML = ЗаменитьИдентификаторыКартинокНаПутьКФайлам(Текст, ТаблицаФайлов, Форма.УникальныйИдентификатор);
		
		Текст = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		
		Если ПереданРеквизитФормы Тогда
			Форма[РеквизитТекста] = Текст;
		Иначе
			Объект[РеквизитТекста] = Текст;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДокументHTMLСКартинкамиИзТекстаHTMLСИдентификаторами(ТекстHTML, ИсточникФайлов) Экспорт
	
	ТаблицаФайлов = ПолучитьФайлыОбъектаСНепустымиИД(ИсточникФайлов);
	ДокументHTML = Неопределено;
	Если ТаблицаФайлов.Количество() Тогда
		
		ДокументHTML = ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

#КонецОбласти

Процедура ИмпортироватьДокументВЭлемент(Документ, Элемент, ДокументИмпорта) Экспорт
	//Namespaces 
	//AlexSyS:
	//Раскомменченное прокатывает, но бессмысленно т.к. похоже налету не применяется
	//Закомменченное падает, как и импорт элементов для xmlns:v, xmlns:o etc. 
	//Пока делем через попытку в цикле.
	// TODO: КАК БЛЯТЬ хотябы грамотно вырезать долбаные офисные расширенные теги???
	// Убил бы человека, пишущего письма в ворде...
	
	Если ДокументИмпорта.ЭлементДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого атрибут ИЗ ДокументИмпорта.ЭлементДокумента.Атрибуты Цикл
		Если НЕ Документ.ЭлементДокумента.ЕстьАтрибут(атрибут.Имя) Тогда
			Документ.ЭлементДокумента.УстановитьАтрибут(атрибут.Имя, атрибут.Значение);
		//	Документ.ЭлементДокумента.УстановитьСоответствиеПространстваИмен(атрибут.Имя, атрибут.Значение);
		КонецЕсли;
	КонецЦикла;
	
	//Стили. АХТУНГ: не знаю что будет, если стили будут переопределяться. (многократное цитирование?)
	Стили = ДокументИмпорта.ПолучитьЭлементыПоИмени("style");
	Если Стили.Количество() Тогда
		
		Элементы = Документ.ПолучитьЭлементыПоИмени("head");
		Если Элементы.Количество() Тогда
			Голова = Элементы[0];
		Иначе
			Голова = Документ.СоздатьЭлемент("head");
			Документ.ЭлементДокумента.ВставитьПеред(Голова, Документ.ЭлементДокумента.ПервыйДочерний);
		КонецЕсли;
		
		Для Каждого Стиль Из Стили Цикл
			Попытка 
				Голова.ДобавитьДочерний(Документ.ИмпортироватьУзел(Стиль,Истина));
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	//BODY
	//Узлы = ДокументИмпорта.ЭлементДокумента.АдаптироватьУзел();
	Для Каждого ТекЭлемент Из ДокументИмпорта.Тело.ДочерниеУзлы Цикл
		
		Попытка
			НовыйЭлемент = Документ.ИмпортироватьУзел(ТекЭлемент,Истина);    
			Элемент.ДобавитьДочерний(НовыйЭлемент);    
		Исключение
			//Агли ХАК: пробуем преобразовать в текст, и вставить его
			//ТУДУ: Найти способ нормально очищать документ от невалидного контента!!!!!!
			//пока форматированный док рулит :(
			//НовыйЭлемент = Документ.СоздатьЭлемент("p");
			НовыйЭлемент = Взаимодействия.ДобавитьЭлементСАтрибутами(
				Документ.Тело,
				"p",
				Новый Структура("style", "padding:10px 0 10px 0"));
			Текст = РаботаСHTML_КлиентСервер_ат.ПолучитьОбычныйТекстИзHTML(
				РаботаСHTML_КлиентСервер_ат.ПолучитьТекстHTMLИзОбъектаДокументHTML(ТекЭлемент));
			НовыйЭлемент.ДобавитьДочерний(Документ.СоздатьТекстовыйУзел(Текст));
			Элемент.ДобавитьДочерний(НовыйЭлемент);    
			//Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
