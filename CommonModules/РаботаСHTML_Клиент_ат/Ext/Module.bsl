#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда

#Область КоманднаяПанельКнопокТолстаяФорма

Процедура СоздатьПанелиРаботыСHTML(Форма, ПанельКнопок, ПанельВыпадающихСписков = Неопределено, ОбработчикКоманд = "ОбработчикКомандРаботыСHTML",
	Редактирование = Истина) Экспорт
	
	СоздатьКоманднуюПанельКнопокРаботыСHTML(Форма, ПанельКнопок, ОбработчикКоманд, Редактирование);
	
	Если Редактирование Тогда
		
		СоздатьГруппуВыпадающихСписков(Форма, ПанельВыпадающихСписков, ОбработчикКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКоманднуюПанельКнопокРаботыСHTML(Форма, ПанельКнопок, Знач ОбработчикКоманд, Редактирование)
	
	Кнопки = ПанельКнопок.Кнопки;
	ИмяПанели = ПанельКнопок.Имя;
	
	ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_ВключитьВозможностьРедактирования",
			"Включить возможность редактирования", "Включить возможность редактирования", БиблиотекаКартинок.Изменить);
	
	Если Редактирование Тогда
		
		// Кнопки копипаста.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_Вырезать",
				"Вырезать", "Вырезать", БиблиотекаКартинок.Вырезать_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_Копировать",
				"Копировать", "Копировать", БиблиотекаКартинок.СкопироватьВБуфер_ат);				
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_Вставить",
				"Вставить", "Вставить", БиблиотекаКартинок.ВставитьИзБуфера_ат);
				
		// Кнопки вставок.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_ВставитьГиперссылку",
				"Вставить гиперссылку", "Вставить гиперссылку", БиблиотекаКартинок.Ссылка_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_ГоризонтальнаяЛиния",
				"Горизонтальная линия", "Горизонтальная линия", БиблиотекаКартинок.ГоризонтальнаяЛиния_ат);
				
		// Кнопки индексов.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_ВерхнийИндекс",
				"Верхний индекс", "Верхний индекс", БиблиотекаКартинок.ВерхнийИндекс_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_НижнийИндекс",
				"Нижний индекс", "Нижний индекс", БиблиотекаКартинок.НижнийИндекс_ат);
				
		// Кнопки начертания.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_Полужирный",
				"Полужирный", "Полужирный", БиблиотекаКартинок.Полужирный_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_Курсив",
				"Курсив", "Курсив", БиблиотекаКартинок.Курсив_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_Подчеркнутый",
				"Подчёркнутый", "Подчёркнутый", БиблиотекаКартинок.Подчеркнутый_ат);
				
		// Кнопки выравнивания.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_ПоЛевомуКраю",
				"По левому краю", "По левому краю", БиблиотекаКартинок.ВыравниваниеПоЛевомуКраю_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_ПоЦентру",
				"По центру", "По центру", БиблиотекаКартинок.ВыравниваниеПоЦентру_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_ПоПравомуКраю",
				"По правому краю", "По правому краю", БиблиотекаКартинок.ВыравниваниеПоПравомуКраю_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_ПоШирине",
				"По ширине", "По ширине", БиблиотекаКартинок.ВыравниваниеПоШирине_ат);
				
		// Кнопки списков.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_НумерованныйСписок",
				"Нумерованный список", "Нумерованный список", БиблиотекаКартинок.НумерованныйСписок_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_МаркированныйСписок",
				"Маркированнный список", "Маркированнный список", БиблиотекаКартинок.МаркированныйСписок_ат);
		
		// Кнопки отступов.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_УменьшитьОтступ",
				"Уменьшить отступ", "Уменьшить отступ", БиблиотекаКартинок.УменьшитьОтступ_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_УвеличитьОтступ",
				"Увеличить отступ", "Увеличить отступ", БиблиотекаКартинок.УвеличитьОтступ_ат);
				
		// Кнопки цвета.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_ЦветТекста",
				"Цвет текста", "Цвет текста", БиблиотекаКартинок.ЦветТекста_ат);
		ДобавитьКнопку(Кнопки, Ложь, ОбработчикКоманд, ИмяПанели + "_ВыделениеЦветом",
				"Выделение цветом", "Выделение цветом", БиблиотекаКартинок.ВыделениеЦветом_ат);
			  
	КонецЕсли;
	
	// [Макс] 04,12,14
	// При запуске в тонком клиенте ругается "Переменная не определена" на ОтображениеКнопкиКоманднойПанели,
	// доступное только в толстом клиенте.
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ВариантОтображенияКнопки = ?(Редактирование, ОтображениеКнопкиКоманднойПанели.НадписьКартинка, ОтображениеКнопкиКоманднойПанели.Картинка);
	#Иначе
		ВариантОтображенияКнопки = Неопределено;
	#КонецЕсли
	
	#Если НЕ ВебКлиент Тогда
		
		// Кнопка проверки орфографии.
		ДобавитьКнопку(Кнопки, Истина, ОбработчикКоманд, ИмяПанели + "_ПроверитьОрфографию",
					"Проверить орфографию", "Проверить орфографию", БиблиотекаКартинок.ПроверитьОрфографию_ат, ВариантОтображенияКнопки);
		
	#КонецЕсли
				
КонецПроцедуры

Функция   СоздатьПолеФормы(Форма, Тип, Имя, Панель, Заголовок = "", Высота, Ширина, РасстояниеДоЛевогоКрая, РасстояниеДоВерхнегоКрая = 6)
	
	Поле = Форма.ЭлементыФормы.Добавить(Тип, Имя,, Панель);
	
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		Поле.Заголовок = Заголовок;
	КонецЕсли;
	
	Поле.Высота = Высота;
	Поле.Ширина = Ширина;
	Поле.Лево	= РасстояниеДоЛевогоКрая;
	РасстояниеДоЛевогоКрая = РасстояниеДоЛевогоКрая + Ширина + 5;
	
	Возврат Поле;
	
КонецФункции

Процедура СоздатьГруппуВыпадающихСписков(Форма, Панель, ОбработчикКоманд)
	
	ИмяПанели = Панель.Имя;
	
	РасстояниеДоЛевогоКрая = 0;
	Высота = 19;
	НадписьФорматы	= СоздатьПолеФормы(Форма, Тип("Надпись"),		ИмяПанели + "_НадписьФорматы",	Панель, "Форматы:"	, Высота, 55, РасстояниеДоЛевогоКрая);
	ЭлементФорматы	= СоздатьПолеФормы(Форма, Тип("ПолеВыбора"),	ИмяПанели + "_Форматы",			Панель,				, Высота, 100, РасстояниеДоЛевогоКрая);
	НадписьШрифты	= СоздатьПолеФормы(Форма, Тип("Надпись"),		ИмяПанели + "_НадписьШрифты",	Панель, "Шрифты:"	, Высота, 45, РасстояниеДоЛевогоКрая);
	ЭлементШрифты	= СоздатьПолеФормы(Форма, Тип("ПолеВыбора"),	ИмяПанели + "_Шрифты",			Панель,				, Высота, 80, РасстояниеДоЛевогоКрая);
	НадписьРазмер	= СоздатьПолеФормы(Форма, Тип("Надпись"),		ИмяПанели + "_НадписьРазмер",	Панель, "Размер:"	, Высота, 45, РасстояниеДоЛевогоКрая);
	ЭлементРазмер	= СоздатьПолеФормы(Форма, Тип("ПолеВыбора"),	ИмяПанели + "_РазмерыШрифта",	Панель,				, Высота, 50, РасстояниеДоЛевогоКрая);
	
	Действие = Новый Действие(ОбработчикКоманд);
	
	ЭлементФорматы.УстановитьДействие("ОбработкаВыбора",Действие);
	ЭлементШрифты.УстановитьДействие("ОбработкаВыбора", Действие);
	ЭлементРазмер.УстановитьДействие("ОбработкаВыбора", Действие);
	
	// Заполнение списка стилей
	СписокСтилей = ЭлементФорматы.СписокВыбора;
	СписокСтилей.Добавить("<p>", "Обычный");
	СписокСтилей.Добавить("<h1>", "Заголовок 1");
	СписокСтилей.Добавить("<h2>", "Заголовок 2");
	СписокСтилей.Добавить("<h3>", "Заголовок 3");
	СписокСтилей.Добавить("<h4>", "Заголовок 4");
	СписокСтилей.Добавить("<h5>", "Заголовок 5");
	СписокСтилей.Добавить("<h6>", "Заголовок 6");
	СписокСтилей.Добавить("<pre>", "Форматированный");
	СписокСтилей.Добавить("<address>", "Адрес");
	ЭлементФорматы.Значение = СписокСтилей[0].Значение;
	
	// Заполнение списка шрифтов
	СписокШрифтов = ЭлементШрифты.СписокВыбора;
	СписокШрифтов.Добавить("Arial");
	СписокШрифтов.Добавить("Arial Black");
	СписокШрифтов.Добавить("Arial Narrow");
	СписокШрифтов.Добавить("Comic Sans MS");
	СписокШрифтов.Добавить("Courier New");
	СписокШрифтов.Добавить("System");
	СписокШрифтов.Добавить("Tahoma");
	СписокШрифтов.Добавить("Times New Roman");
	СписокШрифтов.Добавить("Verdana");
	СписокШрифтов.Добавить("Wingdings");
	ЭлементШрифты.Значение = СписокШрифтов[0].Значение;
	
	// Заполнение списка размеров
	СписокРазмеров = ЭлементРазмер.СписокВыбора;
	
	Для Размер = 1 По 14 Цикл
		
		СписокРазмеров.Добавить(Строка(Размер));
		
	КонецЦикла;
	
	ЭлементРазмер.Значение = СписокРазмеров[2].Значение;
	
КонецПроцедуры 

Процедура ДобавитьКнопку(Область, ДобавитьРазделитель, Действие = Неопределено, Имя, Текст, Подсказка = "",
						Картинка = Неопределено, ВариантОтображения = Неопределено, Пометка = Ложь) Экспорт
	
	Если НЕ Действие = Неопределено Тогда
		
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		
		Если ТипЗнч(Действие) = Тип("Строка") Тогда
			Действие = Новый Действие(Действие);
		КонецЕсли;
		
	Иначе
		
		ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
	КонецЕсли;
	
	НоваяКнопка = Область.Добавить(Имя, ТипКнопки, Текст, Действие);
	
	КоличествоКнопок = Область.Количество();
	ИндексНовойКнопки = Область.Индекс(НоваяКнопка);
	
	// Разберемся с разделителями
	Если ДобавитьРазделитель И КоличествоКнопок > 1 Тогда  
		
		Если ИндексНовойКнопки = КоличествоКнопок - 1 Тогда
			// новая кнопка последняя, разделитель над ней
			Область.Вставить(ИндексНовойКнопки, "Разделитель" + Имя, ТипКнопкиКоманднойПанели.Разделитель);
		Иначе 
			// новая кнопка не последняя, разделитель под ней 
			Область.Вставить(ИндексНовойКнопки + 1, "Разделитель" + Имя, ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Картинка = Неопределено Тогда
		
		НоваяКнопка.Картинка = Картинка;
		
	КонецЕсли;
	
	// [Макс] 04,12,14
	// При запуске в тонком клиенте ругается "Переменная не определена" на ОтображениеКнопкиКоманднойПанели,
	// доступное только в толстом клиенте.
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		Если ВариантОтображения = Неопределено Тогда
			ВариантОтображения = ОтображениеКнопкиКоманднойПанели.Картинка;
		КонецЕсли;
		
	#КонецЕсли
	
	НоваяКнопка.Отображение = ВариантОтображения;
	НоваяКнопка.Подсказка = ?(ПустаяСтрока(Подсказка), Текст, Подсказка);
	НоваяКнопка.Пометка = Пометка;
	
КонецПроцедуры

Процедура ИзменитьДоступностьЭлементовКонтекстногоМеню(КонтекстноеМеню, ЗначениеДоступности = Истина) Экспорт
	
	Для Каждого ЭлементКонтекстногоМеню Из КонтекстноеМеню.Кнопки Цикл
		
		Если ЭлементКонтекстногоМеню.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			
			Для Каждого КнопкаПодменю Из ЭлементКонтекстногоМеню.Кнопки Цикл
				
				КнопкаПодменю.Доступность = ЗначениеДоступности;
				
			КонецЦикла;
			
		Иначе
			
			ЭлементКонтекстногоМеню.Доступность = ЗначениеДоступности;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область КонтекстноеМенюПоляHTML

Процедура ИзменитьКонтестноеМенюЗаменыСловПоляHTML(Форма, КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
	ТолькоОчистить, ОбработчикКоманд = "ОбработчикКомандРаботыСHTML") Экспорт
	
	ОчиститьКонтестноеМенюЗаменыСлова(Форма, КонтекстноеМеню);
	
	Если НЕ ТолькоОчистить Тогда
		
		ЗаполнитьКонтестноеМенюЗаменыСлова(Форма, КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ОбработчикКоманд);
		
	КонецЕсли;
 	
КонецПроцедуры

Процедура ОчиститьКонтестноеМенюЗаменыСлова(Форма, КонтекстноеМеню)
	
	Элементы = Форма.ЭлементыФормы;
	КнопкиКонтекстногоМеню = КонтекстноеМеню.Кнопки;
	ПодменюЗаменыСлова = КнопкиКонтекстногоМеню.Найти("ПодменюЗаменыСлова");
	Если ПодменюЗаменыСлова <> Неопределено Тогда
		
		ПодменюЗаменыСлова.Кнопки.Очистить();
		
		КнопкиКонтекстногоМеню.Удалить(ПодменюЗаменыСлова);
		КнопкиКонтекстногоМеню.Удалить(КнопкиКонтекстногоМеню.Найти("Разделитель" + ПодменюЗаменыСлова.Имя));
		
	КонецЕсли;
	
	КнопкаДобавленияСлова = КнопкиКонтекстногоМеню.Найти("ДобавитьСловоВСловарь");
	
	Если КнопкаДобавленияСлова <> Неопределено Тогда
		
		ИмяКнопкиДобавленияСлова = КнопкаДобавленияСлова.Имя;
		КнопкиКонтекстногоМеню.Удалить(КнопкиКонтекстногоМеню.Найти(ИмяКнопкиДобавленияСлова));
		КнопкиКонтекстногоМеню.Удалить(КнопкиКонтекстногоМеню.Найти("Разделитель" + ИмяКнопкиДобавленияСлова));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтестноеМенюЗаменыСлова(Форма, КонтекстноеМеню, СоответствиеКомандЗаменыСловам, ОбработчикКоманд)
		
	Элементы = Форма.ЭлементыФормы;
	Если СоответствиеКомандЗаменыСловам.Количество() > 0 Тогда
		
		РаботаСHTML_Клиент_ат.ДобавитьКнопку(КонтекстноеМеню.Кнопки, Истина,, "ПодменюЗаменыСлова", "Заменить слово на:");
		
		Для Каждого КлючИЗначение Из СоответствиеКомандЗаменыСловам Цикл
			
			РаботаСHTML_Клиент_ат.ДобавитьКнопку(КонтекстноеМеню.Кнопки.Найти("ПодменюЗаменыСлова").Кнопки, Ложь, ОбработчикКоманд, КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСHTML_Клиент_ат.ДобавитьКнопку(КонтекстноеМеню.Кнопки, Истина, ОбработчикКоманд, "ДобавитьСловоВСловарь","Добавить слово в словарь");
	
КонецПроцедуры 

#КонецОбласти

Процедура ОткрытьФормуРедактированияHTML(Форма, ИмяПоляHTML, ТекстHTML, ИзменятьМодифицированность = Истина, ФормаОткрытаДляПросмотра = Ложь) Экспорт
	
	ПараметрыОткрытия = Новый Структура("ТекстHTML, ФормаОткрытаДляПросмотра", ТекстHTML, ФормаОткрытаДляПросмотра);
	
	ЭтоУправляемаяФорма = ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения");
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("Форма",						 Форма);
	ПередаваемыеПараметры.Вставить("ИмяПоляHTML",				 ИмяПоляHTML);		
	ПередаваемыеПараметры.Вставить("ИзменятьМодифицированность", ИзменятьМодифицированность);
	ПередаваемыеПараметры.Вставить("ЭтоУправляемаяФорма",		 ЭтоУправляемаяФорма);
	ПередаваемыеПараметры.Вставить("ФормаОткрытаДляПросмотра",	 ФормаОткрытаДляПросмотра);
	
	Если ЭтоУправляемаяФорма Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеРедактированияHTML", РаботаСHTML_Клиент_ат, ПередаваемыеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ФормаРедактораHTML_ат", ПараметрыОткрытия, Форма, , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ФормаРедактораHTML_ат", ПараметрыОткрытия, Форма);
		ПослеРедактированияHTML(Результат, ПередаваемыеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеРедактированияHTML(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ПередаваемыеПараметры.ЭтоУправляемаяФорма Тогда
			ПередаваемыеПараметры.Форма.Элементы[ПередаваемыеПараметры.ИмяПоляHTML].Документ.Body.innerHTML = Результат.Текст;
		Иначе
			ПередаваемыеПараметры.Форма.ЭлементыФормы[ПередаваемыеПараметры.ИмяПоляHTML].Документ.Body.innerHTML = Результат.Текст;
		КонецЕсли;
		
		Если ПередаваемыеПараметры.ИзменятьМодифицированность Тогда
			
			ПередаваемыеПараметры.Форма.Модифицированность = Результат.Модифицированность;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры 

// Обработчик команд командной панели работы с HTML.
// Вызов вставляется в обработчик, указанный при создании командной панели кнопок.
//
Процедура ОбработчикКомандРаботыСHTML(Форма, КомандаФормы, ВыбранноеЗначение, ПолеHTMLДокумента,
	Панели, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам) Экспорт
	
	Если НЕ Панели.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = ОпределитьИмяКоманды(КомандаФормы);
	
	Если ИмяКоманды = "" Тогда
		
		Возврат;
		
	ИначеЕсли ИмяКоманды = "ВключитьВозможностьРедактирования" Тогда
		
		ВключитьВозможностьРедактирования(Форма, ПолеHTMLДокумента, Панели);
		
	ИначеЕсли ИмяКоманды = "ПроверитьОрфографию" Тогда
		
		ПроверкаОрфографии_Клиент_ат.ПроверитьТекстВПолеHTMLДокумента(ПолеHTMLДокумента.Документ);
		
	ИначеЕсли ИмяКоманды = "КомандаПроверкиОрфографии" Тогда
		
		ВыполнитьКомандуПроверкиОрфографии(КомандаФормы, ПолеHTMLДокумента.Документ,
			КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
		
	ИначеЕсли ИмяКоманды = "CreateLink" Тогда
		
		ВставитьГиперссылку(Форма, ПолеHTMLДокумента.Документ);
		
	ИначеЕсли ИмяКоманды = "ForeColor" ИЛИ ИмяКоманды = "BackColor" Тогда
		
		ВыборЦвета(Форма, ПолеHTMLДокумента.Документ, ИмяКоманды);
		
	ИначеЕсли ИмяКоманды = "ВставитьКартинку" Тогда
		
		ВставитьКартинку(Форма, ПолеHTMLДокумента.Документ);
		
	ИначеЕсли ИмяКоманды = "Paste" Тогда
		
		ИдентификаторыКартинок = ПолучитьИдентификаторыКартинок(ПолеHTMLДокумента.Документ);
		ВыполнитьКоманду(ИмяКоманды, ПолеHTMLДокумента.Документ, ВыбранноеЗначение);
		УдалитьКартинкиВставленныеКопированием(ПолеHTMLДокумента.Документ, ИдентификаторыКартинок);
		
	ИначеЕсли ИмяКоманды = "ПоказатьИсходныйКод" Тогда
		
		ТекстHTML = ПолеHTMLДокумента.Документ.documentElement.outerHTML;
		ТекстДляОтображения = РаботаСHTML_КлиентСервер_ат.ПреобразоватьОбычныйТекстВHTML(ТекстHTML);
		ОткрытьФормуРедактированияHTML(Форма, "", ТекстДляОтображения,, Истина);
		
	Иначе
		
		ВыполнитьКоманду(ИмяКоманды, ПолеHTMLДокумента.Документ, ВыбранноеЗначение);
		
	КонецЕсли;
	
	ИзменитьПометкиКнопок(Панели, ПолеHTMLДокумента.Документ);
	
КонецПроцедуры

Функция   ПолучитьИдентификаторыКартинок(Документ) Экспорт
	
	МассивЗначений = Новый Массив;
	
	Для Каждого Элемент Из Документ.Images Цикл
		
		АтрибутИсточникКартинки = Элемент.attributes.GetNamedItem("src");
		МассивЗначений.Добавить(АтрибутИсточникКартинки.value);
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

// Процедура удаляет картинки, вставленные при копировании.
// 
Процедура УдалитьКартинкиВставленныеКопированием(Документ, ИдентификаторыКартинок) Экспорт
	
	Для Каждого Элемент Из Документ.Images Цикл
		
		АтрибутИсточникКартинки = Элемент.attributes.GetNamedItem("src");
		Удалять = Истина;
		
		Если НЕ ИдентификаторыКартинок.Найти(АтрибутИсточникКартинки.value) = Неопределено
		   И СтрНайти(АтрибутИсточникКартинки.value, "file:///") = 0 Тогда // Ссылка на файл для только что вставленных картинок.
			
			Удалять = Ложь;
			
		КонецЕсли;
		
		Если Удалять Тогда 
			
			Элемент.ParentNode.RemoveChild(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменяет пометки кнопок при клике по полю HTML.
// Вставляется в событие OnClick поля HTML.
//
Процедура ИзменитьПометкиКнопок(ГруппаПанелей, Документ) Экспорт
	
	ЭтоУправляемаяФорма = ТипЗнч(ГруппаПанелей) = Тип("ГруппаФормы");
	
	Если ЭтоУправляемаяФорма Тогда
		
		Если ГруппаПанелей.ПодчиненныеЭлементы.Количество() = 0 Тогда // Панель не заполнялась
			
			Возврат;
			
		КонецЕсли;
		
		Для Каждого Группа Из ГруппаПанелей.ПодчиненныеЭлементы[ГруппаПанелей.Имя + "_ПанельКнопок"].ПодчиненныеЭлементы Цикл
			
			Для Каждого Кнопка Из Группа.ПодчиненныеЭлементы Цикл
				
				Если ТипЗнч(Кнопка) = Тип("КнопкаФормы") Тогда
					
					Команда = ОпределитьИмяКоманды(Кнопка);
					
					Если Документ.queryCommandSupported(Команда) Тогда
						
						Попытка
							Кнопка.Пометка = Документ.queryCommandState(Команда);
						Исключение
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НЕ ГруппаПанелей.ПодчиненныеЭлементы.Найти(ГруппаПанелей.Имя + "_ГруппаВыпадающихСписков") = Неопределено Тогда
		
			Для Каждого Поле Из ГруппаПанелей.ПодчиненныеЭлементы[ГруппаПанелей.Имя + "_ГруппаВыпадающихСписков"].ПодчиненныеЭлементы Цикл
				
				Команда = ОпределитьИмяКоманды(Поле);
				Если Документ.queryCommandSupported(Команда) Тогда
					
					Попытка
						
						Значение = 	Документ.queryCommandValue(Команда);
						ЭлементСпискаВыбора = Поле.СписокВыбора.НайтиПоЗначению(Строка(Значение));
						Если НЕ ЭлементСпискаВыбора = Неопределено Тогда
							ГруппаПанелей.Родитель[Поле.Имя] = ЭлементСпискаВыбора.Значение;
						КонецЕсли;
						
					Исключение
					
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ГруппаПанелей) = Тип("Массив") Тогда
			
			Для Каждого Панель Из ГруппаПанелей Цикл
				
				Если ТипЗнч(Панель) = Тип("КоманднаяПанель") Тогда
					
					Для Каждого Кнопка Из Панель.Кнопки Цикл
						
						Если ТипЗнч(Кнопка) = Тип("КнопкаКоманднойПанели") Тогда
							
							Команда = ОпределитьИмяКоманды(Кнопка);
							
							Если Документ.queryCommandSupported(Команда) Тогда
								
								Попытка
									Кнопка.Пометка = Документ.queryCommandState(Команда);
								Исключение
									
								КонецПопытки;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если ТипЗнч(ГруппаПанелей) = Тип("КоманднаяПанель") Тогда
				
				Для Каждого Кнопка Из ГруппаПанелей.Кнопки Цикл
					
					Если ТипЗнч(Кнопка) = Тип("КнопкаКоманднойПанели") Тогда
						
						Команда = ОпределитьИмяКоманды(Кнопка);
						
						Если Документ.queryCommandSupported(Команда) Тогда
							
							Попытка
								Кнопка.Пометка = Документ.queryCommandState(Команда);
							Исключение
								
							КонецПопытки;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ОпределитьИмяКоманды(КомандаФормы)
	
	Если Прав(КомандаФормы.Имя, 33) = "ВключитьВозможностьРедактирования" Тогда
		
		Возврат "ВключитьВозможностьРедактирования";
		
	ИначеЕсли Прав(КомандаФормы.Имя, 8) = "Вырезать" Тогда
		
		Возврат "Cut";
		
	ИначеЕсли Прав(КомандаФормы.Имя, 10) = "Копировать" Тогда
		
		Возврат "Copy";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 8) = "Вставить" Тогда
		
		Возврат "Paste";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 19) = "ВставитьГиперссылку" Тогда
		
		Возврат "CreateLink";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 19) = "ГоризонтальнаяЛиния" Тогда
		
		Возврат "InsertHorizontalRule";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 13) = "ВерхнийИндекс" Тогда
		
		Возврат "Superscript";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 12) = "НижнийИндекс" Тогда
		
		Возврат "Subscript";	
	
	ИначеЕсли Прав(КомандаФормы.Имя, 10) = "Полужирный" Тогда
		
		Возврат "Bold";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 6) = "Курсив" Тогда
		
		Возврат "Italic";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 12) = "Подчеркнутый" Тогда
		
		Возврат "Underline";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 12) = "ПоЛевомуКраю" Тогда
		
		Возврат "JustifyLeft";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 8) = "ПоЦентру" Тогда
		
		Возврат "JustifyCenter";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 13) = "ПоПравомуКраю" Тогда
		
		Возврат "JustifyRight";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 8) = "ПоШирине" Тогда
		
		Возврат "JustifyFull";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 18) = "НумерованныйСписок" Тогда
		
		Возврат "InsertOrderedList";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 19) = "МаркированныйСписок" Тогда
		
		Возврат "InsertUnorderedList";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 15) = "УменьшитьОтступ" Тогда
		
		Возврат "Outdent";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 15) = "УвеличитьОтступ" Тогда
		
		Возврат "Indent";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 10) = "ЦветТекста" Тогда
		
		Возврат "ForeColor";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 15) = "ВыделениеЦветом" Тогда
		
		Возврат "BackColor";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 7) = "Форматы" Тогда
		
		Возврат "FormatBlock";	
		
	ИначеЕсли Прав(КомандаФормы.Имя, 6) = "Шрифты" Тогда
		
		Возврат "FontName";	
	
	ИначеЕсли Прав(КомандаФормы.Имя, 13) = "РазмерыШрифта" Тогда
		
		Возврат "FontSize";	
	
	ИначеЕсли Прав(КомандаФормы.Имя, 19) = "ПроверитьОрфографию" Тогда
		
		Возврат "ПроверитьОрфографию";	
		
	ИначеЕсли Лев(КомандаФормы.Имя, 13) = "ВариантЗамены" ИЛИ Лев(КомандаФормы.Имя, 21) = "ДобавитьСловоВСловарь" Тогда
		
		Возврат "КомандаПроверкиОрфографии";
		
	ИначеЕсли Прав(КомандаФормы.Имя, 16) = "ВставитьКартинку" Тогда
		
		Возврат "ВставитьКартинку";
		
	ИначеЕсли Прав(КомандаФормы.Имя, 19) = "ПоказатьИсходныйКод" Тогда
		
		Возврат "ПоказатьИсходныйКод";
		
	Иначе	
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции 

Процедура ВыполнитьКоманду(Команда, Документ, ВыбранноеЗначение)
	
	Если Документ.queryCommandSupported(Команда) Тогда
		
		Документ.execCommand(Команда, Ложь, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьГиперссылку(Форма, Документ)
	
	ПередаваЕмыеПараметры = Новый Структура("Документ", Документ);
	
	Гиперссылка = "";
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить(1, "Файл");
	СписокВариантов.Добавить(2, "Адрес почты");
	СписокВариантов.Добавить(3, "Web ссылка");
	СписокВариантов.Добавить(4, "Ссылка на объект");
	
	СписокТипов = Новый СписокЗначений;
	
	РаботаСHTML_ВызовСервера_ат.ЗаполнитьСписокТиповДляВыбора(СписокТипов);
		
	ВариантСсылки = СписокВариантов.ВыбратьЭлемент("Варианты ссылок");
	
	Если ВариантСсылки = Неопределено Тогда
		Возврат;
	Иначе
		ЗначениеВарианта = ВариантСсылки.Значение;
	КонецЕсли;
	
	Если ЗначениеВарианта = 1 Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.ПолноеИмяФайла = Гиперссылка;
		Диалог.Заголовок = "Выберите файл";
		Диалог.Фильтр = "Все файлы|*.*";
		
		Если Диалог.Выбрать() Тогда
			
			Гиперссылка = Диалог.ПолноеИмяФайла;
			
		КонецЕсли;
		
		Документ.execCommand("CreateLink", Ложь, Гиперссылка);
		
	ИначеЕсли ЗначениеВарианта = 2 Тогда
		
		Если НЕ ВвестиСтроку(Гиперссылка) Тогда
			Возврат;
		КонецЕсли;
		
		Гиперссылка = "mailto:" + Гиперссылка;
		
		Документ.execCommand("CreateLink", Ложь, Гиперссылка);
		
	ИначеЕсли ЗначениеВарианта = 3 Тогда
		
		Гиперссылка = "http://";
		
		Если НЕ ВвестиСтроку(Гиперссылка) Тогда
			Возврат;
		КонецЕсли;
		
		Документ.execCommand("CreateLink", Ложь, Гиперссылка);
		
	ИначеЕсли ЗначениеВарианта = 4 Тогда
		
		ТипОбъекта = СписокТипов.ВыбратьЭлемент("Выберите тип объекта");
		
		Если НЕ ТипОбъекта = Неопределено Тогда
			
			ПолучитьНавигационнуюСсылкуОбъектаТипа(ТипОбъекта.Значение, Документ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНавигационнуюСсылкуОбъектаТипа(ТипОбъекта, Документ)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("РежимВыбора", Истина);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗавершитьПолучениеНавигационнойСсылки", РаботаСHTML_Клиент_ат, Новый Структура("Документ", Документ));
	
	ОткрытьФорму("Справочник.БазаЗнаний_ат.ФормаВыбора", ПараметрыОткрытияФормы,,,,, ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

Процедура ЗавершитьПолучениеНавигационнойСсылки(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Результат = ПолучитьНавигационнуюСсылку(Результат);
		
		ДополнительныеПараметры.Документ.execCommand("CreateLink", Ложь, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет действие по ссылке в зависимости от ее типа.
//
// Параметры:
//	Ссылка	- Строка, URI, который необходимо обработать
//
// Для навигационных ссылок ИБ осуществляется переход к соответствующему объекту
// (Для обычного приложения поддерживается только открытие элементов справочников и документов в пределах текущей базы)
// Для ссылок mailto осуществляется открытие нового документа ЭлектронноеПисьмо
// Для всех остальных ссылок  - Запуск приложения ОС клиента.
//
Процедура ПерейтиПоСсылке(Ссылка) Экспорт
	
	стрСсылка = СтруктураНавигационнойСсылки(Ссылка);
	
	Если стрСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если стрСсылка.ЭтоСсылкаИБ Тогда
		 ПерейтиПоСсылкеИБ(стрСсылка);
		
	ИначеЕсли стрСсылка.Протокол = "http" Или стрСсылка.Протокол = "https" Или
		стрСсылка.Протокол = "ftp" Или стрСсылка.Протокол = "file" Тогда
		ЗапуститьПриложение(стрСсылка.Ссылка);
	ИначеЕсли стрСсылка.Протокол = "mailto" Тогда
		СтруктураНовогоПисьма = Новый Структура;
		СписокКому            = Новый СписокЗначений;
		ПодстрокиСсылки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(стрСсылка.Путь, ",",Истина);
		Для Каждого Параметр Из ПодстрокиСсылки Цикл
			СписокКому.Добавить(Параметр);
		КонецЦикла;
		СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
		//УправлениеЭлектроннойПочтой_Клиент.НаписатьПисьмо(СтруктураНовогоПисьма);
		
		ВзаимодействияКлиент.ОткрытьФормуОтправкиПочтовогоСообщения(,СписокКому);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру из различных элементов строки URI.
//
// Параметры:
//	НавигационнаяСсылка	- Строка, URI, который необходимо разобрать
//
// Возвращаемое значение:
//	Структура
//		Ссылка 		- Относительные ссылки ИБ дополняются до полных. Ссылки на файлы дополняются префиксом file:///
//						Для остальных типов - копия переданного параметра. 
//		Протокол 	- Строка, значение схемы URI (http, ftp, mailto и т.д.; e1c для ссылок ИБ не веб-клиента).
//						пустая строка в случае некорректного URI.
//		Тип			- Строка, ТОЛЬКО Для ссылок ИБ - следующий элемент пути после элемента "e1cib", идентифицирующего ссылку как ссылку ИБ.
//						Может быть "data" для ссылок на данные, "tmpstore" для ссылок временного хранилища и т.д. Не локализуется.
//						Для остальных ссылок - пустая строка.
//		Путь		- Строка, Для ссылок ИБ - Путь метаданных. Для остальных - содержимое URI между схемой и параметрами.
//		Параметры	- Структура - список переданных параметров, где ключ - имя параметра, а значение - его значение(строка)
//						ПустаяСтрока если параметров нет.
//		ЭтоСсылкаИБ - Булево, Истина если ссылка является ссылкой на объект ИБ.
//
Функция   СтруктураНавигационнойСсылки(Знач НавигационнаяСсылка) Экспорт
	
	Если ТипЗнч(НавигационнаяСсылка) <> Тип("Строка") Тогда Возврат Неопределено; КонецЕсли;
		
	Результат = Новый Структура("Ссылка, Протокол, Тип, Путь, Параметры, ЭтоСсылкаИБ", НавигационнаяСсылка,"", "", "", "", Ложь);
	
	ПодстрокиСсылки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НавигационнаяСсылка, ":", Истина);
	
	Если ПодстрокиСсылки.Количество() > 1 Тогда
		Длина = СтрДлина(ПодстрокиСсылки[0]);
		Если Длина > 1  И Длина < 8 Тогда // самый длинный - mailto, если больше, то это не протокол :)
			Результат.Протокол = НРег(ПодстрокиСсылки[0]);
			НавигационнаяСсылка = Сред(НавигационнаяСсылка,Длина+2);
			Пока СтрДлина(НавигационнаяСсылка) И Лев(НавигационнаяСсылка, 1) = "/"  Цикл
				НавигационнаяСсылка = Сред(НавигационнаяСсылка,2);
			КонецЦикла;
			Если Результат.Протокол = "file" или Результат.Протокол = "cid" Или Результат.Протокол = "data" Тогда
				Результат.Путь = НавигационнаяСсылка;
				НавигационнаяСсылка = "";
			КонецЕсли;	
		ИначеЕсли Длина = 1 Тогда  // считаем, что поймали букву диска, и это файловая ссылка без префикса протокола
			Результат.Протокол = "file";
			Результат.Путь = Результат.Ссылка;
			Результат.Ссылка = "file:///" + Результат.Ссылка;
			НавигационнаяСсылка = "";
		КонецЕсли;
		
	Иначе // протокола нет, возвращаем как есть
			//Возврат Результат;
	КонецЕсли;
		
	Если ПустаяСтрока(НавигационнаяСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПозицияРазделителя = Найти(НавигационнаяСсылка, "?");
		
	Если ПозицияРазделителя = 0 Тогда
		
		Результат.Путь = НавигационнаяСсылка;
		Результат.Параметры = "";
		
	Иначе
		Результат.Путь = Лев(НавигационнаяСсылка, ПозицияРазделителя - 1);
		сПараметры = Сред(НавигационнаяСсылка, ПозицияРазделителя + 1);
		ПодстрокиСсылки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(сПараметры, ",",Ложь,Истина);
		Результат.Параметры = Новый Структура;
		Для Каждого Параметр Из ПодстрокиСсылки Цикл
			ПозицияРазделителя = Найти(Параметр, "=");
			Если ПозицияРазделителя = 0 Тогда
				Результат.Параметры.Вставить(Параметр, Истина);
			Иначе
				Результат.Параметры.Вставить(Лев(Параметр, ПозицияРазделителя - 1), Сред(Параметр, ПозицияРазделителя + 1)) ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//ищем ссылку базы
	Если Найти(Результат.Путь, "e1cib") > 0 Тогда
		ПодстрокиСсылки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат.Путь, "/", Истина, Истина);
		колво = ПодстрокиСсылки.Количество();
		Для инд = 0 по колво-1 Цикл 
			Если ПодстрокиСсылки[инд] = "e1cib"  и инд < колво-2 Тогда  //Как минимум долженбыть тип ссылки и путь метаданных. хотя...
				Результат.ЭтоСсылкаИБ = Истина;
				Результат.Тип = ПодстрокиСсылки[инд+1];
				Результат.Путь = ПодстрокиСсылки[инд+2];
				Если ПустаяСтрока(Результат.Протокол) Тогда
					Результат.Протокол = "e1c";
					Результат.Ссылка = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/" + Результат.Ссылка;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура осуществляет "умный" переход по ссылке информационной базы, полученной 
//  ранее методом ПолучитьНавигационнуюСсылку
//
//  Параметры:
//	 СтруктураСсылки	- Структура, Структура ссылки 
//
// Для навигационных ссылок на объекты Файловых хранилищ осуществляется непосредственное открытие файла.
// Для всех остальных ссылок в управляемом режиме используется ПерейтиПоНавигационнойСсылке().
// В режиме обычного приложения поддерживается только открытие элементов справочников и документов в пределах текущей базы.
//
Процедура ПерейтиПоСсылкеИБ(СтруктураСсылки) Экспорт
	
	перем УИД;
	Если СтруктураСсылки = Неопределено Или ТипЗнч(СтруктураСсылки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураСсылки.Тип = "data" И ТипЗнч(СтруктураСсылки.Параметры) = Тип("Структура") Тогда
		
		СтруктураСсылки.Параметры.Свойство("ref", УИД);
		
		Если Не ПустаяСтрока(УИД) Тогда
			
			ОбъектСсылка = РаботаСHTML_ВызовСервера_ат.ОбъектСсылкаИзНавигационнойСсылки(СтруктураСсылки.Путь, УИД);
			
			Если  ОбъектСсылка <> Неопределено Тогда
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ОткрытьЗначение(ОбъектСсылка);
				#Иначе
					ПерейтиПоНавигационнойСсылке(СтруктураСсылки.Ссылка);
				#КонецЕсли
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
			ПерейтиПоНавигационнойСсылке(СтруктураСсылки.Ссылка);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборЦвета(Форма, Документ, Команда)
	
	ПередаваемыеПараметры = Новый Структура("Документ, Команда", Документ, Команда);
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЦвета", РаботаСHTML_Клиент_ат, ПередаваемыеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораЦвета_ат", , Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПослеВыбораЦвета(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ПередаваемыеПараметры.Документ.queryCommandSupported(ПередаваемыеПараметры.Команда) Тогда
			
			ЦветHTML = ПеревестиИз10В16(Результат.Красный) + ПеревестиИз10В16(Результат.Зеленый) + ПеревестиИз10В16(Результат.Синий);
			
			ПередаваемыеПараметры.Документ.execCommand(ПередаваемыеПараметры.Команда, Ложь, ЦветHTML);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ВставитьКартинку(Форма, Документ)
	
	ПолноеИмяКартинки = "";
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = ПолноеИмяКартинки;
	Диалог.Заголовок = "Выберите картинку";
	Диалог.Фильтр = "Все картинки|*.bmp;*.dib;*.rle;*.gif;*.jpeg;*.jpg;*.png;*.tif;*.ico;*.wmf;*.emf";
	
	Если Диалог.Выбрать() Тогда
		
		ПолноеИмяКартинки = Диалог.ПолноеИмяФайла;
		//АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяКартинки), Новый УникальныйИдентификатор);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый Картинка(ПолноеИмяКартинки), Новый УникальныйИдентификатор);
		Документ.execCommand("insertImage", Ложь, АдресВоВременномХранилище);
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПеревестиИз10В16(Знач Значение = 0)
	
	Значение = Число(Значение);
	Если Значение <= 0 Тогда
		Возврат "00";
	КонецЕсли;
	
	Значение = Цел(Значение);
	Результат = "";
	
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" ,Значение % 16 + 1, 1) + Результат;
		Значение = Цел(Значение / 16);
	КонецЦикла;
	
	Если СтрДлина(Результат) = 1 Тогда
		Результат = "0" + Результат;
	КонецЕсли;
  
	Возврат Результат;
	
КонецФункции

// Процедура обработки вызова контекстного меню.
// Вставляется в обработчик событий поля HTML, указанный в ДокументСформирован.
//
Процедура ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам) Экспорт
	
	Если Событие.srcElement.id = "red_marker" Тогда
		
		КоординатыЗаменяемогоСлова = Новый Структура("X, Y", Событие.x, Событие.y); 
		
		МассивЗамен = ПроверкаОрфографии_Клиент_ат.ПредложитьВариантыЗамены(Событие.srcElement.innerText);
		
		СоответствиеКомандЗаменыСловам = Новый Соответствие;
		Сч = 1;
		
		Для Каждого Слово Из МассивЗамен Цикл
			
			СоответствиеКомандЗаменыСловам.Вставить("ВариантЗамены_" + Сч, Слово);
			
			Сч = Сч + 1;
			
		КонецЦикла;	 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуПроверкиОрфографии(Команда, Документ, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам)
	
	Если Найти(Команда.Имя, "ВариантЗамены_") > 0 Тогда
		
		ЗаменяемыйЭлемент = Документ.elementFromPoint(КоординатыЗаменяемогоСлова.x, КоординатыЗаменяемогоСлова.y);
		ЗаменяемыйЭлемент.outerHTML = СоответствиеКомандЗаменыСловам[Команда.Имя];

	ИначеЕсли Команда.Имя = "ДобавитьСловоВСловарь" Тогда
		
		ЗаменяемыйЭлемент = Документ.elementFromPoint(КоординатыЗаменяемогоСлова.x, КоординатыЗаменяемогоСлова.y);
		ПроверкаОрфографии_ВызовСервера_ат.ДобавитьСловоВСловарь(ЗаменяемыйЭлемент.innerText);
		ЗаменяемыйЭлемент.outerHTML = ЗаменяемыйЭлемент.innerText;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ВключитьВозможностьРедактирования(Форма, ПолеHTMLДокумента, Панели, ОтжатьКнопку = Ложь) Экспорт
	
	ЭтоУправляемаяФорма = ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения");
	
	Если ЭтоУправляемаяФорма Тогда
		
		Если Панели.ПодчиненныеЭлементы.Количество() = 0 // Панель не заполнялась
			ИЛИ НЕ Панели.Доступность Тогда // Или недоступна
			
			Возврат;
			
		КонецЕсли;
		
		ИмяКнопки = Панели.Имя + "_ПанельКнопок_ВключитьВозможностьРедактирования";
		Пометка = ПолучитьЗначениеПометкиКнопкиУправленияРедактированием(Панели, ИмяКнопки, ПолеHTMLДокумента, ЭтоУправляемаяФорма, Форма, ОтжатьКнопку);
		УстановитьДоступностьПанелейРедактирования(Панели, ПолеHTMLДокумента, Пометка, ЭтоУправляемаяФорма);
		
	Иначе
		
		Если ТипЗнч(Панели) = Тип("Массив") Тогда
			
			ТекущаяПометка = Неопределено;
			
			Для Каждого Панель Из Панели Цикл
				
				ИмяКнопки = Панель.Имя + "_ВключитьВозможностьРедактирования";
				Пометка = ПолучитьЗначениеПометкиКнопкиУправленияРедактированием(Панель, ИмяКнопки, ПолеHTMLДокумента, ЭтоУправляемаяФорма,, ОтжатьКнопку);
				ТекущаяПометка = ?(Пометка = Неопределено, ТекущаяПометка, Пометка);
				УстановитьДоступностьПанелейРедактирования(Панель, ПолеHTMLДокумента, ТекущаяПометка, ЭтоУправляемаяФорма);
				
			КонецЦикла;
			
			Пометка = ТекущаяПометка;
			
		Иначе
			
			ИмяКнопки = Панели.Имя + "_ВключитьВозможностьРедактирования";
			Пометка = ПолучитьЗначениеПометкиКнопкиУправленияРедактированием(Панели, ИмяКнопки, ПолеHTMLДокумента, ЭтоУправляемаяФорма,, ОтжатьКнопку);
			УстановитьДоступностьПанелейРедактирования(Панели, ПолеHTMLДокумента, Пометка, ЭтоУправляемаяФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Модифицированность = ?(Пометка, Истина, Форма.Модифицированность);
	
	Если НЕ Пометка Тогда
		ПроверкаОрфографии_Клиент_ат.ПроверитьТекстВПолеHTMLДокумента(ПолеHTMLДокумента.Документ);
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьЗначениеПометкиКнопкиУправленияРедактированием(Панель, ИмяКнопки, ПолеHTMLДокумента, ЭтоУправляемаяФорма,
	Форма = Неопределено, ОтжатьКнопку = Ложь)
	
	Если ЭтоУправляемаяФорма Тогда
		
		Пометка = ?(ОтжатьКнопку, Ложь, НЕ Форма.Элементы[ИмяКнопки].Пометка);
		Форма.Элементы[ИмяКнопки].Пометка = Пометка;
		Форма.Элементы[ПолеHTMLДокумента.Имя + "_КонтекстноеМеню_ВключитьВозможностьРедактирования"].Пометка = Пометка;
		
	Иначе
	
		Если НЕ ТипЗнч(Панель) = Тип("Панель") Тогда
			
			Пометка = ?(ОтжатьКнопку, Ложь, НЕ Панель.Кнопки[ИмяКнопки].Пометка);
			Панель.Кнопки[ИмяКнопки].Пометка = Пометка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пометка;
	
КонецФункции

// Процедура устанавливает доступность командной панели работы с HTML.
// Необходимо вставить в событие ДокументСформирован поля HTML.
//
Процедура УстановитьДоступностьПанелейРедактирования(Панели, ПолеHTMLДокумента = Неопределено, ЗначениеДоступности = Истина,
	ЭтоУправляемаяФорма = Истина, ИзменятьДоступностьКнопкиПроверкиОрфографии = Ложь) Экспорт
	
	Если ЭтоУправляемаяФорма Тогда
		
		Если Панели.ПодчиненныеЭлементы.Количество() = 0 Тогда // Панель не заполнялась
			Возврат;
		КонецЕсли;
		
		//ПолеHTMLДокумента.ТолькоПросмотр = НЕ ЗначениеДоступности;
		ПолеHTMLДокумента.Документ.Body.ContentEditable = ?(ЗначениеДоступности, "True", "False");
		
		ПодчиненныеЭлементы = Панели.ПодчиненныеЭлементы;
		
		ГруппаВыпадающихСписков = ПодчиненныеЭлементы.Найти(Панели.Имя + "_ГруппаВыпадающихСписков");
		
		Если НЕ ГруппаВыпадающихСписков = Неопределено Тогда
			ГруппаВыпадающихСписков.Доступность = ЗначениеДоступности;
		КонецЕсли;
		
		Для Каждого Панель Из ПодчиненныеЭлементы[Панели.Имя + "_ПанельКнопок"].ПодчиненныеЭлементы Цикл
			
			КнопкаРедактирования = Панель.ПодчиненныеЭлементы.Найти(Панели.Имя
				+ "_ПанельКнопок_ВключитьВозможностьРедактирования");
			
			Если НЕ КнопкаРедактирования = Неопределено Тогда
				КнопкаРедактирования.Пометка = ЗначениеДоступности;
			КонецЕсли;
			
			Панель.Доступность = ЗначениеДоступности
				ИЛИ Панель.Имя = (Панели.Имя + "_ПанельКнопок_ГруппаУправленияРедактированием")
				ИЛИ ?(ИзменятьДоступностьКнопкиПроверкиОрфографии, Ложь, Панель.Имя = (Панели.Имя + "_ПанельКнопок_ГруппаПроверкиОрфографии"))
				ИЛИ Панель.Имя = (Панели.Имя + "_ПанельКнопок_ГруппаПросмотраИсходногоКода");
			
		КонецЦикла;
		
	Иначе
		
		#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
			
		Если НЕ ПолеHTMLДокумента = Неопределено Тогда
			ИзменитьДоступностьЭлементовКонтекстногоМеню(ПолеHTMLДокумента.КонтекстноеМеню, ЗначениеДоступности);
		КонецЕсли;
		
		Если ТипЗнч(Панели) = Тип("Массив") Тогда
			
			Для Каждого Панель Из Панели Цикл
				ИзменитьДоступность(Панель, ЗначениеДоступности, ПолеHTMLДокумента);
			КонецЦикла;
			
		Иначе
			
			ИзменитьДоступность(Панели, ЗначениеДоступности, ПолеHTMLДокумента, ИзменятьДоступностьКнопкиПроверкиОрфографии);
			
		КонецЕсли;
		
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДоступность(Панель, ЗначениеДоступности, ПолеHTMLДокумента, ИзменятьДоступностьКнопкиПроверкиОрфографии = Ложь)
	
	Если ТипЗнч(Панель) = Тип("Панель") Тогда
		
		Панель.Доступность = ЗначениеДоступности;
		
	Иначе
		
		//ПолеHTMLДокумента.УстановитьРежим(?(ЗначениеДоступности, РежимПоляHTMLДокумента.Редактирование, РежимПоляHTMLДокумента.Просмотр));
		ПолеHTMLДокумента.Документ.Body.ContentEditable = ?(ЗначениеДоступности, "True", "False");
		Для Каждого Кнопка Из Панель.Кнопки Цикл
			
			Кнопка.Доступность = ЗначениеДоступности
								ИЛИ Кнопка.Имя = (Панель.Имя + "_ВключитьВозможностьРедактирования")
								ИЛИ ?(ИзменятьДоступностьКнопкиПроверкиОрфографии, Ложь, Кнопка.Имя = (Панель.Имя + "_ПроверитьОрфографию"))
								ИЛИ Кнопка.Имя = (Панель.Имя + "_ПанельКнопок_ГруппаПросмотраИсходногоКода");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлемента(Элемент, ЗначениеДоступности = Истина) Экспорт
	
	Элемент.Доступность = ЗначениеДоступности;
	
КонецПроцедуры

Процедура ОбработатьHTMLПередЗаписью(ПолеHTMLДокумента) Экспорт
	
	ПолеHTMLДокумента.Документ.Body.ContentEditable = "False";
	
КонецПроцедуры

Функция   HTMLПолеМожноРедактировать(ПолеHTMLДокумента) Экспорт
	
	Возврат ПолеHTMLДокумента.Документ.Body.ContentEditable = "true";
	
КонецФункции
