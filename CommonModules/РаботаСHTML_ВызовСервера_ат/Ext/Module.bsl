
// Процедура заполняет список выбора объектов конфигурации для вставки объекта базы данных
//  в ссылку в HTML.
Процедура ЗаполнитьСписокТиповДляВыбора(СписокТипов) Экспорт
	
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		
		СписокТипов.Добавить("Справочник." + Справочник.Имя, Справочник.Синоним);
		
	КонецЦикла;
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		СписокТипов.Добавить("Документ." + Документ.Имя, Документ.Синоним);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает Ссылку на объект ИБ по элементам строки URI
//
// Параметры:
//	СтрокаПути	- Строка, путь к метаданным из URI
//	СтрокаУид	- Строка, Строковое представление UUID объекта
//
// Возвращаемое значение:
//	Ссылка 		- СправочникСсылка, ДокументСсылка - Ссылка на объект
//					Для остальных типов - Неопределено.
//
Функция ОбъектСсылкаИзНавигационнойСсылки(СтрокаПути, СтрокаУид) Экспорт
	
	СтруктураПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПути, ".");
	
	Если СтруктураПути.Количество() >= 2 Тогда
		
		ТипОбъекта = СтруктураПути[0];
		ВидОбъекта = СтруктураПути[1];
		
		Попытка
		
			Уид = Новый УникальныйИдентификатор(
				СтрокаИдентификатораИзОтображенияВФорматеНавигационнойСсылки(СтрокаУид));
			
			Если ТипОбъекта = "Справочник" Тогда
				СсылкаНаОбъект = Справочники[ВидОбъекта].ПолучитьСсылку(Уид);
			ИначеЕсли ТипОбъекта = "Документ" Тогда
				СсылкаНаОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Уид);
			ИначеЕсли ТипОбъекта = "Задача" Тогда
				СсылкаНаОбъект = Задачи[ВидОбъекта].ПолучитьСсылку(Уид);
			Иначе
				СсылкаНаОбъект = Неопределено;
			КонецЕсли;
			
		Исключение
			
			СсылкаНаОбъект = Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

//Стащено из БСП Общий модуль ВыгрузкаЗагрузкаИзбранногоРаботыПользователей
//
Функция СтрокаИдентификатораИзОтображенияВФорматеНавигационнойСсылки(Знач Отображение)
	
	ПерваяЧасть    = Сред(Отображение, 25, 8);
	ВтораяЧасть    = Сред(Отображение, 21, 4);
	ТретьяЧасть    = Сред(Отображение, 17, 4);
	ЧетвертаяЧасть = Сред(Отображение, 1,  4);
	ПятаяЧасть     = Сред(Отображение, 5,  12);
	
	Возврат ПерваяЧасть + "-" + ВтораяЧасть + "-" + ТретьяЧасть + "-" + ЧетвертаяЧасть + "-" + ПятаяЧасть;
	
КонецФункции

Процедура УдалитьКартинкиВставленныеКопированием(Документ) Экспорт
	
	Для каждого Картинка Из Документ.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		//НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
		//НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:" + Идентификатор);
		
		Если НЕ ЭтоАдресВременногоХранилища(АтрибутИсточникКартинки.ТекстовоеСодержимое) Тогда
			Документ.Картинки.Удалить(Картинка);
		КонецЕсли;
		//Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
		//
		//СоответствиеИменИдентификаторам.Вставить(НовыйАтрибутКартинки.ТекстовоеСодержимое, АтрибутИсточникКартинки.ТекстовоеСодержимое);
		
	КонецЦикла;
	
КонецПроцедуры