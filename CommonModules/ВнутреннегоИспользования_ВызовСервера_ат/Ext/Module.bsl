
#Область ПрограммныйИнтерфейс

// настройки

Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение) Экспорт

	НастройкаВРег = ВРег(Настройка);
	
	Если НастройкаВРег = ВРег("КлиентДляОтбора") Тогда
		
		ХранилищеОбщихНастроек.Сохранить(НастройкаВРег, , Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция   ПолучитьЗначениеПоУмолчанию(Настройка) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;
	
	Если НастройкаВРег = ВРег("КлиентДляОтбора") Тогда

		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег);
		
		Если СотрудникОрганизации() Тогда
			
			Если ТипЗнч(ЗначениеНастройки) = Тип("СправочникСсылка.Контрагенты_ат") Тогда
				КлиентДляОтбора = ЗначениеНастройки;
			Иначе
				КлиентДляОтбора = Справочники.Контрагенты_ат.ПустаяСсылка();
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыСеанса.КонтрагентыПользователя_ат.Найти(ЗначениеНастройки) = Неопределено Тогда
				
				Если ПараметрыСеанса.КонтрагентыПользователя_ат.Количество() > 0 Тогда
					КлиентДляОтбора = ПараметрыСеанса.КонтрагентыПользователя_ат[0];
				Иначе
					КлиентДляОтбора = Неопределено; //!!!??? или ПустаяСсылка()
				КонецЕсли;
				
			Иначе
				
				КлиентДляОтбора = ЗначениеНастройки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеНастройки <> КлиентДляОтбора Тогда
			
			ХранилищеОбщихНастроек.Сохранить(НастройкаВРег,, КлиентДляОтбора);
			
		КонецЕсли;
		
		Возврат КлиентДляОтбора;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция   ПолучитьФлагИспользованияОтдельногоОкнаСообщений() Экспорт //!!!!!!переделать на настройки
	
	Возврат Константы.ИспользоватьОтдельноеОкноСообщений_ат.Получить();
	
КонецФункции

// права

Функция   ВходРазрешен() Экспорт
	
	Возврат СотрудникОрганизации()
		ИЛИ (СотрудникКлиента() И ПараметрыСеанса.КонтрагентыПользователя_ат.Количество() > 0);
	
КонецФункции

Функция   СотрудникОрганизации() Экспорт
	
	Возврат РольДоступна("ПолныеПрава") Или РольДоступна("ОрганизацияСотрудник_ат");
	
КонецФункции

Функция   СотрудникКлиента() Экспорт
	
	Возврат РольДоступна("КлиентСотрудник_ат");
	
КонецФункции

Функция   МенеджерПроектовИлиПолныеПрава() Экспорт // РазрешеноУправлениеПроектами
	
	Возврат РольДоступна("ОрганизацияМенеджерПроектов_ат") Или РольДоступна("ПолныеПрава");
	
КонецФункции

Функция   ДоступныФинансы() Экспорт
	
	Возврат МенеджерПроектовИлиПолныеПрава() ИЛИ РольДоступна("ОрганизацияФинансы_ат") ИЛИ РольДоступна("КлиентФинансы_ат");
	
КонецФункции

// Возвращает список пользователей имеющих переданную роль
//
// Параметры:
//	ИмяРоли - Строка - Имя роли.
//
// Возвращаемое значение:
//	СписокЗначений
//
Функция   ПолучитьСписокПользователейПоРоли(ИмяРоли) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ГруппыПользователейСостав.Пользователь КАК Пользователь
		|		ИЗ
		|			Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ГДЕ
		|			ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ
		|					(ВЫБРАТЬ
		|						ГруппыДоступаПользователи.Пользователь КАК Пользователь
		|					ИЗ
		|						Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|								ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|								ПО
		|									ПрофилиГруппДоступаРоли.Ссылка = ГруппыДоступаПользователи.Ссылка.Профиль
		|										И ГруппыДоступаПользователи.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|							ПО
		|								ИдентификаторыОбъектовМетаданных.Ссылка = ПрофилиГруппДоступаРоли.Роль
		|					ГДЕ
		|						ИдентификаторыОбъектовМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Роли)
		|						И ИдентификаторыОбъектовМетаданных.Имя = &ИмяРоли)
		|			И НЕ ГруппыПользователейСостав.Ссылка.ПометкаУдаления
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВЫБОР
		|				КОГДА НЕ ВЫРАЗИТЬ(ГруппыДоступаПользователи.Пользователь КАК Справочник.Пользователи) ЕСТЬ NULL 
		|					ТОГДА ГруппыДоступаПользователи.Пользователь
		|				КОГДА НЕ ГруппыДоступаПользователи.Ссылка.Пользователь ЕСТЬ NULL 
		|					ТОГДА ГруппыДоступаПользователи.Ссылка.Пользователь
		|			КОНЕЦ
		|		ИЗ
		|			Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|					ПО ПрофилиГруппДоступаРоли.Ссылка = ГруппыДоступаПользователи.Ссылка.Профиль
		|				ПО ИдентификаторыОбъектовМетаданных.Ссылка = ПрофилиГруппДоступаРоли.Роль
		|		ГДЕ
		|			ИдентификаторыОбъектовМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Роли)
		|			И ИдентификаторыОбъектовМетаданных.Имя = &ИмяРоли
		|			И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления
		|			И НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления) КАК ВложенныйЗапрос
		|		ПО Пользователи.Ссылка = ВложенныйЗапрос.Пользователь
		|ГДЕ
		|	НЕ ВложенныйЗапрос.Пользователь ЕСТЬ NULL
		|	И НЕ Пользователи.ПометкаУдаления
		|";
	
	Запрос.УстановитьПараметр("ИмяРоли", ИмяРоли);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокПользователей = Новый СписокЗначений;
	СписокПользователей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокПользователей;
	
КонецФункции

// Роли - Массив или Строка (наименования ролей через запятую)
Функция   ПолучитьСписокПользователейПоНесколькимРолям(Роли) Экспорт
	
	СписокПользователей = Новый СписокЗначений;
	
	Если ТипЗнч(Роли) = Тип("Строка") Тогда
		Роли = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Роли, ",", Истина);
	КонецЕсли;
	
	Для Каждого ИмяРоли Из Роли Цикл
		
		СписокПользователейРоли = ПолучитьСписокПользователейПоРоли(ИмяРоли);
		
		Для Каждого ЭлементСпискаПользователейРоли Из СписокПользователейРоли Цикл
			
			Если СписокПользователей.НайтиПоЗначению(ЭлементСпискаПользователейРоли.Значение) = Неопределено Тогда
				СписокПользователей.Добавить(ЭлементСпискаПользователейРоли.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции

Функция   ПользовательИмеетРоль(Пользователь, ИмяРоли) Экспорт
	
	Возврат ПользователиИмеютРоль(Пользователь, ИмяРоли)[Пользователь];
	
КонецФункции

// Возвращает Соответствие пользователей признаку наличия роли
//
// Параметры:
//  Пользователи - Массив - Массив пользователей.
//	ИмяРоли - Строка - Имя роли.
//
// Возвращаемое значение:
//	Соответствие
//
Функция   ПользователиИмеютРоль(Пользователи, ИмяРоли) Экспорт //!!! см. ПолучитьСписокПользователейПоРоли - сделать универсальную функцию получения (текста) запроса
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка,
		|	НЕ ВложенныйЗапрос.Пользователь ЕСТЬ NULL КАК РольДоступна
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ГруппыПользователейСостав.Пользователь КАК Пользователь
		|		ИЗ
		|			Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ГДЕ
		|			ГруппыПользователейСостав.Ссылка В ИЕРАРХИИ
		|					(ВЫБРАТЬ
		|						ГруппыДоступаПользователи.Пользователь КАК Пользователь
		|					ИЗ
		|						Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|								ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|								ПО
		|									ПрофилиГруппДоступаРоли.Ссылка = ГруппыДоступаПользователи.Ссылка.Профиль
		|										И ГруппыДоступаПользователи.Пользователь ССЫЛКА Справочник.ГруппыПользователей
		|							ПО
		|								ИдентификаторыОбъектовМетаданных.Ссылка = ПрофилиГруппДоступаРоли.Роль
		|					ГДЕ
		|						ИдентификаторыОбъектовМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Роли)
		|						И ИдентификаторыОбъектовМетаданных.Имя = &ИмяРоли)
		|			И НЕ ГруппыПользователейСостав.Ссылка.ПометкаУдаления
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВЫБОР
		|				КОГДА НЕ ВЫРАЗИТЬ(ГруппыДоступаПользователи.Пользователь КАК Справочник.Пользователи) ЕСТЬ NULL
		|					ТОГДА ГруппыДоступаПользователи.Пользователь
		|				КОГДА НЕ ГруппыДоступаПользователи.Ссылка.Пользователь ЕСТЬ NULL
		|					ТОГДА ГруппыДоступаПользователи.Ссылка.Пользователь
		|			КОНЕЦ
		|		ИЗ
		|			Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|					ПО ПрофилиГруппДоступаРоли.Ссылка = ГруппыДоступаПользователи.Ссылка.Профиль
		|				ПО ИдентификаторыОбъектовМетаданных.Ссылка = ПрофилиГруппДоступаРоли.Роль
		|		ГДЕ
		|			ИдентификаторыОбъектовМетаданных.Родитель = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.Роли)
		|			И ИдентификаторыОбъектовМетаданных.Имя = &ИмяРоли
		|			И НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления
		|			И НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления) КАК ВложенныйЗапрос
		|		ПО Пользователи.Ссылка = ВложенныйЗапрос.Пользователь
		|ГДЕ
		|	Пользователи.Ссылка В(&Пользователи)
		|	И НЕ Пользователи.ПометкаУдаления
		|";
	
	Запрос.УстановитьПараметр("ИмяРоли", ИмяРоли);
	Запрос.УстановитьПараметр("Пользователи", Пользователи);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаличиеРолиУПользователей = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаличиеРолиУПользователей.Вставить(Выборка.Ссылка, Выборка.РольДоступна);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НаличиеРолиУПользователей;
	
КонецФункции

Функция   ТекущийПользовательИмеетРольПолныеПрава() Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Возврат ПользователиИмеютРоль(ТекущийПользователь, "ПолныеПрава")[ТекущийПользователь];
	
КонецФункции

// системное

Функция   ПолучитьНаименованиеОрганизацииДляОтображения(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыОрганизаций_ат.НаименованиеПолное
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыОрганизаций_ат КАК ДополнительныеРеквизитыОрганизаций_ат
		|ГДЕ
		|	ДополнительныеРеквизитыОрганизаций_ат.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		ПолноеНаименование = Выборка.НаименованиеПолное;
	Иначе
		ПолноеНаименование = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
		Возврат ПолноеНаименование;
	Иначе
		Возврат Организация.Наименование;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьОтборПоКлиентуДляОтбора(Форма, ИмяСписка = "Список", ИмяРеквизита = "Клиент", ЗначениеОтбора = Неопределено) Экспорт

	Если Форма.Параметры.Свойство("Отбор")
		//И Форма.Параметры.Отбор.Свойство(ИмяРеквизита)
		И УправляемыеФормы_КлиентСервер_ат.СуществуетОтборСписка(Форма[ИмяСписка], ИмяРеквизита) Тогда
		
		Возврат; // Если значение отбора передается в параметрах формы - значит так надо.
		
		//// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
		//КлиентДляОтбора = Форма.Параметры.Отбор[ИмяРеквизита];
		//Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
		
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Контрагенты_ат") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
		ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		
		КлиентДляОтбора = ЗначениеОтбора;
		
	Иначе
		
		КлиентДляОтбора = ВнутреннегоИспользования_ВызовСервера_ат.ПолучитьЗначениеПоУмолчанию("КлиентДляОтбора");
		
	КонецЕсли;
	
	Если ТипЗнч(КлиентДляОтбора) = Тип("СправочникСсылка.Контрагенты_ат") Тогда
		
		Если КлиентДляОтбора.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		
	Иначе
		
		Если КлиентДляОтбора.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		
	КонецЕсли;
	
	ИспользованиеОтбора	= ЗначениеЗаполнено(КлиентДляОтбора);
	РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[ИмяСписка], ИмяРеквизита, КлиентДляОтбора, ВидСравненияОтбора,, ИспользованиеОтбора, РежимОтображения);
	
КонецПроцедуры

#КонецОбласти 
