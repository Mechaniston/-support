
////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ОБРАБОТЧИКИ СОБЫТИЙ

#Область  ОсновныеОбработчикиСобытий

// Универсальный обработчик событий "ПриСозданииНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	Отказ - Булево - Признак отказа от создания формы.
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//	ИмяОсновногоРеквизита - Строка - Имя основного реквизита формы, если неопределено - будет произведена попытка поиска.
//	ИмяОсновногоЭлемента - Строка - Имя элемента формы связанного с основным реквизитом, если неопределено - будет произведена попытка поиска.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка,
	ИмяОсновногоРеквизита = Неопределено, ИмяОсновногоЭлемента = Неопределено, КоманднаяПанель = Неопределено,
	ИмяГруппыПользовательскихНастроек = "СписокКомпоновщикНастроекПользовательскиеНастройки") Экспорт
	
	// Заполнение дополнительных свойства формы во избежание дополнительных вызовов.
	ЗаполнитьДополнительныеСвойстваФормы(Форма, ИмяОсновногоРеквизита, ИмяОсновногоЭлемента);
	
	Если КоманднаяПанель = Неопределено Тогда
		
		КоманднаяПанель = Форма.КоманднаяПанель;
		
	КонецЕсли;
	
	// Метаданное
	Если Форма.ДополнительныеСвойстваФормы.Свойство("ТипФормы")
	   И Форма.ДополнительныеСвойстваФормы.ТипФормы <> "ПроизвольнаяФорма" Тогда
		
		Метаданное = Метаданные.НайтиПоПолномуИмени(Форма.ДополнительныеСвойстваФормы.Метаданное.ПолноеИмя);
		
		Если Форма.ДополнительныеСвойстваФормы.ТипФормы = "ФормаСписка" Тогда
			
			Список = Форма[Форма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы];
			Список_ЭлементФормы = Форма.Элементы.Найти(Форма.ДополнительныеСвойстваФормы.ОсновнойЭлементФормы);
			
			// Очистка отборов в форме по умолчанию
			Список.Отбор.Элементы.Очистить();
			
		ИначеЕсли Форма.ДополнительныеСвойстваФормы.ТипФормы = "ФормаОбъекта"
				И Форма.ДополнительныеСвойстваФормы.Метаданное.Свойство("Объект") Тогда
			
			Если Форма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы <> Неопределено Тогда
				Объект = ДанныеФормыВЗначение(Форма[Форма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы],
					Тип(Форма.ДополнительныеСвойстваФормы.Метаданное.Объект));
			КонецЕсли;
			
			//установим всем реквизитам типа ДС настройку, которая загружается при старте работы, если она есть
			//если нужно, можнос сделать для всех форм, а не только форм объекта
			ПользовательПриемник = ПараметрыСеанса.ТекущийПользователь;
			ПользовательПриемникИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательПриемник.ИдентификаторПользователяИБ);
			Если ПользовательПриемникИБ <> Неопределено Тогда
				
				ПользовательПриемникИмя = ПользовательПриемникИБ.Имя;
			Иначе
				Сообщить ("Для пользователя " + ПользовательПриемник + " не найден пользователь ИБ!"); 
				Возврат;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПереносаОформленияСписков.Ссылка,
			|	НастройкиПереносаОформленияСписков.ВерсияДанных,
			|	НастройкиПереносаОформленияСписков.ПометкаУдаления,
			|	НастройкиПереносаОформленияСписков.Код,
			|	НастройкиПереносаОформленияСписков.ПользовательИсточник,
			|	НастройкиПереносаОформленияСписков.Предопределенный,
			|	НастройкиПереносаОформленияСписков.ИмяПредопределенныхДанных,
			|	НастройкиПереносаОформленияСписков.Представление,
			|	НастройкиПереносаОформленияСписковНастройки.ИмяНастройки,
			|	НастройкиПереносаОформленияСписковНастройки.ПолноеИмяСписка,
			|	НастройкиПереносаОформленияСписков.ПользователиИтоговый.(
			|		Ссылка,
			|		НомерСтроки,
			|		Пользователь
			|	),
			|	НастройкиПереносаОформленияСписковНастройки.ИмяРеквизита
			|ИЗ
			|	Справочник.НастройкиПереносаОформленияСписков.Настройки КАК НастройкиПереносаОформленияСписковНастройки
			|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.НастройкиПереносаОформленияСписков КАК НастройкиПереносаОформленияСписков
			|		ПО НастройкиПереносаОформленияСписковНастройки.Ссылка = НастройкиПереносаОформленияСписков.Ссылка
			|ГДЕ
			|	НастройкиПереносаОформленияСписков.ПользователиИтоговый.Пользователь = &ТекущийПользователь";
			
			Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательПриемник);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				//в случае ошибок заменить на сравнение через регулярные выражения
				Если Лев(Форма.ДополнительныеСвойстваФормы.Метаданное.ПолноеИмя, 50) = Лев(СокрЛП(ВыборкаДетальныеЗаписи.ПолноеИмяСписка), 50) Тогда
					
					ОтборНастроек = Новый Структура("Пользователь,КлючОбъекта,Представление", ПользовательПриемникИмя,
						ВыборкаДетальныеЗаписи.ПолноеИмяСписка, ВыборкаДетальныеЗаписи.ИмяНастройки);
					ВыборкаНастроек = ХранилищеПользовательскихНастроекДинамическихСписков.Выбрать(ОтборНастроек);
					
					Пока ВыборкаНастроек.Следующий() Цикл
						
						//в случае ошибок заменить на сравнение через регулярные выражения
						Если Лев(СокрЛП(ВыборкаДетальныеЗаписи.ПолноеИмяСписка), 50) = Лев(ВыборкаНастроек.КлючОбъекта, 50) 
							И Прав(СокрЛП(ВыборкаДетальныеЗаписи.ИмяРеквизита), 5) = Прав(ВыборкаНастроек.КлючОбъекта, 5) 
							И ВыборкаНастроек.Представление = "Стандартная" Тогда
							
							Выполнить("ЭтаФорма." + ВыборкаДетальныеЗаписи.ИмяРеквизита
								+ ".КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыборкаНастроек.Настройки)");
							
						КонецЕсли;
							
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Дополнительные свойства объекта.
			МассивНовыхРеквизитов = Новый Массив;
			ОписаниеПроизвольногоТипа = Новый Массив;
			ОписаниеПроизвольногоТипа.Добавить(Тип("Неопределено"));
			МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы("ДополнительныеСвойства", Новый ОписаниеТипов(ОписаниеПроизвольногоТипа)));
			Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);
			Форма.ДополнительныеСвойства = Новый Структура;
			
		КонецЕсли;
		
		ЗаполнитьКоманднуюПанель(Форма, КоманднаяПанель, Метаданное, Объект, Список); 
		
	КонецЕсли;
		
	Если Список_ЭлементФормы <> Неопределено Тогда 
		
		ЗаполнитьКонтекстноеМенюСписка(Форма, Список_ЭлементФормы.КонтекстноеМеню); 
		
		// Не ЗАГРУЖАТЬ пользовательские настройки (применяется при передаче отборов через Параметры формы при её открытии, которые
		// могут конфликтовать с пользовательскими)
		Если Форма.Параметры.Свойство("НеСохранятьПользовательскиеНастройки")
			И Форма.Параметры.НеСохранятьПользовательскиеНастройки Тогда
			
			Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
			
		КонецЕсли;
		
		// Изменение формы в соответствии с режимом выбора.
		Если Форма.Параметры.Свойство("РежимВыбора") И Форма.Параметры.РежимВыбора Тогда
			
			ПереместитьСкрытыеПараметрыОтбораВПользовательскиеНастройки(Список, Форма.Параметры.Отбор);
			
			Список_ЭлементФормы.РежимВыбора = Истина;
			Список_ЭлементФормы.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
			
			Список.АвтоматическоеСохранениеПользовательскихНастроек = Ложь;
			
			Если ЗначениеЗаполнено(ИмяГруппыПользовательскихНастроек) Тогда
				
				Форма.Элементы[ИмяГруппыПользовательскихНастроек].Видимость = Ложь;
				
				// Дополнительные свойства объекта
				МассивНовыхРеквизитов = Новый Массив;
				МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы("ПоказыватьОтборыДинамическогоСписка", Новый ОписаниеТипов("Булево")));
				МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяГруппыПользовательскихНастроек", Новый ОписаниеТипов("Строка")));
				
				Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);
				Форма.ПоказыватьОтборыДинамическогоСписка = Ложь;
				Форма.ИмяГруппыПользовательскихНастроек = ИмяГруппыПользовательскихНастроек;
				
			КонецЕсли;
			
			Форма.Заголовок = Форма.Заголовок + " @ ! РЕЖИМ ВЫБОРА !";
			
			//Если УстановитьОтборПоРегиструБыстрогоВыбораЭлементов(ЭтаФорма, Список, Метаданное) Тогда
			//	ЗаполнитьКоманднуюПанель_УправлениеРежимомБыстрогоВыбораЭлементов(ЭтаФорма, ЭтаФорма.Элементы.ФормаКоманднаяПанель);	
			//КонецЕсли;
			
			ЗаполнитьКоманднуюПанель_УправлениеВидимостьюОтборовДинамическогоСписка(Форма, КоманднаяПанель);
			
		Иначе
			
			Список_ЭлементФормы.РежимВыбора = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// После создания всех кнопок, переместим элементы правильно на командной панели.
	ПодменюПерейти = Форма.Элементы.Найти("ФормаКоманднаяПанельФормы_Перейти");
	ПрочиеКнопки = Форма.Элементы.Найти("ГруппаПрочихКнопок");
	Если ПодменюПерейти <> Неопределено И ПрочиеКнопки <> Неопределено Тогда
		Форма.Элементы.Переместить(ПодменюПерейти, ПрочиеКнопки);
	КонецЕсли;
	
	// Добавим команду закрытия формы
	ИмяКоманды = "ПриЗакрытии";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КонецЕсли;
	
	// Добавим команду получения метаданного
	ИмяКоманды = "Метаданные";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КонецЕсли;
	
	// Добавим команду получения описания формы, которое пригодится нам в клиентской части
	ИмяКоманды = "ОписаниеФормы";
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КонецЕсли;
	
	МассивНовыхРеквизитов = Новый Массив;
	ОписаниеПроизвольногоТипа = Новый Массив;
	ОписаниеПроизвольногоТипа.Добавить(Тип("Неопределено"));
	МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы("СохраненнаяНастройка", Новый ОписаниеТипов(ОписаниеПроизвольногоТипа)));
	
	Форма.ИзменитьРеквизиты(МассивНовыхРеквизитов);
	
	Попытка
		
		Если Форма.Объект.Ссылка.Пустая() И НЕ Форма.Параметры.ЗначениеКопирования.Пустая() Тогда
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Универсальный обработчик событий "ПередЗаписьюНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	Отказ - Булево - Признак отказа от создания формы.
//	ТекущийОбъект - Записываемый объект.
//	ПараметрыЗаписи - Структура - Структура, содержащая параметры записи. 
//
Процедура ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт //!ЗАКОММЕНТИРОВАНА
	
	//Если НЕ ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.СохраняемыйОбъект  
	//	ИЛИ ТекущийОбъект.ПометкаУдаления
	//	ИЛИ ТекущийОбъект.ОбменДанными.Загрузка
	//	Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//ОбработчикиСобытий.ФормаПередЗаписью(ТекущийОбъект, Отказ);
	//
	////Поместим ДополнительныеСвойства куда надо
	//МассивРеквизитов = ЭтаФорма.ПолучитьРеквизиты();
	//Для Каждого Реквизит ИЗ МассивРеквизитов Цикл
	//	Если НЕ Реквизит.Имя = "ДополнительныеСвойства" Тогда Продолжить; КонецЕсли;
	//	Для Каждого КлючИЗначение ИЗ ЭтаФорма.ДополнительныеСвойства Цикл
	//		
	//		ТекущийОбъект.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
	//		ПараметрыЗаписи.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
	//		
	//	КонецЦикла;
	//КонецЦикла;
	
КонецПроцедуры

// Универсальный обработчик событий "ПриЗаписиНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	Отказ - Булево - Признак отказа от создания формы.
//	ТекущийОбъект - Записываемый объект.
//	ПараметрыЗаписи - Структура - Структура, содержащая параметры записи. 
//
Процедура ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт //!ЗАКОММЕНТИРОВАНА
	
	//ГруппаМеханизмаНумерацииОбъектов = ЭтаФорма.Элементы.Найти("ГруппаМеханизмаНумерацииОбъектов");
	//
	//Если НЕ ГруппаМеханизмаНумерацииОбъектов = Неопределено	И НЕ ЭтаФорма.Элементы.Найти("Номер") = Неопределено Тогда
	//	
	//	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ТекущийОбъект.Метаданные(), ЭтаФорма.Элементы.РедактироватьКодНомер, ЭтаФорма.Элементы.Номер);
	//	
	//КонецЕсли;
	//
	//Если ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.СохраняемыйОбъект Тогда
	//	
	//	ЗначениеВДанныеФормы(ТекущийОбъект,ЭтаФорма.Объект);
	//	ОбработчикиСобытий.ФормаПриЗаписи(ЭтаФорма, Отказ);
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Универсальный обработчик событий "ПослеЗаписиНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	ТекущийОбъект - Записываемый объект.
//	ПараметрыЗаписи - Структура - Структура, содержащая параметры записи. 
//
Процедура ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	//ЭтаФорма.АвтоЗаголовок = Ложь; //?
	
	Если ТекущийОбъект.ПометкаУдаления Тогда
		//ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (ПОМЕЧЕНО НА УДАЛЕНИЕ!)";
		ЭтаФорма.Заголовок = "[установлена ПУ]";
	КонецЕсли;
	
КонецПроцедуры

// Универсальный обработчик событий "ПриЧтенииНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	ТекущийОбъект - Объект, который будет прочитан.
//
Процедура ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект) Экспорт
	
	//ЭтаФорма.АвтоЗаголовок = Ложь; //?
	
	Если ТекущийОбъект.ПометкаУдаления Тогда
		//ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (ПОМЕЧЕНО НА УДАЛЕНИЕ!)";
		ЭтаФорма.Заголовок = "[установлена ПУ]";
	КонецЕсли;
	
КонецПроцедуры

// Универсальный обработчик событий "ОбработкаПроверкиЗаполненияНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	Отказ - Булево - Признак отказа от создания формы.
//	ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

// Универсальный обработчик событий "ПриСохраненииДанныхВНастройкахНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	Настройки - Соответствие - Настройки формы. 
//
Процедура ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

// Универсальный обработчик событий "ПередЗагрузкойДанныхИзНастроекНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	Настройки - Соответствие - Настройки формы, в которых находятся значения реквизитов.
//
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

// Универсальный обработчик событий "ПриЗагрузкеДанныхИзНастроекНаСервере" в модулях форм объектов
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма из которой вызван обработчик.
//	Настройки - Соответствие - Настройки формы. 
//
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ОБРАБОТЧИКИ (ОТЧЕТЫ)

#Область  ОсновныеОбработчикиОтчеты

Процедура ПриСохраненииВариантаНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

Процедура ПриЗагрузкеВариантаНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

Процедура ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, Настройки) Экспорт
	
	// Вставить содержимое обработчика.
	
КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки) Экспорт
	
	//Устанавливает настройку из хранилища настроек под названием "Стандартная", если такая есть	
		
	ПользовательПриемник = ПараметрыСеанса.ТекущийПользователь;
	ПользовательПриемникИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательПриемник.ИдентификаторПользователяИБ);
	Если ПользовательПриемникИБ <> Неопределено Тогда
		
		ПользовательПриемникИмя = ПользовательПриемникИБ.Имя;
		
	Иначе 
		
		Сообщить("Для пользователя"+ПользовательПриемник+" не найден поьзователь ИБ!"); 
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПереносаОформленияСписков.Ссылка,
	|	НастройкиПереносаОформленияСписков.ВерсияДанных,
	|	НастройкиПереносаОформленияСписков.ПометкаУдаления,
	|	НастройкиПереносаОформленияСписков.Код,
	|	НастройкиПереносаОформленияСписков.ПользовательИсточник,
	|	НастройкиПереносаОформленияСписков.Предопределенный,
	|	НастройкиПереносаОформленияСписков.ИмяПредопределенныхДанных,
	|	НастройкиПереносаОформленияСписков.Представление,
	|	НастройкиПереносаОформленияСписковНастройки.ИмяНастройки,
	|	НастройкиПереносаОформленияСписковНастройки.ПолноеИмяСписка,
	|	НастройкиПереносаОформленияСписков.ПользователиИтоговый.(
	|		Ссылка,
	|		НомерСтроки,
	|		Пользователь
	|	),
	|	НастройкиПереносаОформленияСписковНастройки.ИмяРеквизита
	|ИЗ
	|	Справочник.НастройкиПереносаОформленияСписков.Настройки КАК НастройкиПереносаОформленияСписковНастройки
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.НастройкиПереносаОформленияСписков КАК НастройкиПереносаОформленияСписков
	|		ПО НастройкиПереносаОформленияСписковНастройки.Ссылка = НастройкиПереносаОформленияСписков.Ссылка
	|ГДЕ
	|	НастройкиПереносаОформленияСписков.ПользователиИтоговый.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользовательПриемник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//в случае ошибок заменить на сравнение через регулярные выражения
		Если Лев(ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.ПолноеИмя,15) = Лев(СокрЛП(ВыборкаДетальныеЗаписи.ПолноеИмяСписка),15) Тогда
			
			ОтборНастроек= Новый Структура("Пользователь,КлючОбъекта,Представление",ПользовательПриемникИмя,
			ВыборкаДетальныеЗаписи.ПолноеИмяСписка,ВыборкаДетальныеЗаписи.ИмяНастройки);
			ВыборкаНастроек = ХранилищеПользовательскихНастроекДинамическихСписков.Выбрать(ОтборНастроек);
			
			Пока ВыборкаНастроек.Следующий() Цикл
				
				//в случае ошибок заменить на сравнение через регулярные выражения
				Если Лев(СокрЛП(ВыборкаДетальныеЗаписи.ПолноеИмяСписка),15) = Лев(ВыборкаНастроек.КлючОбъекта,15) 
					И Прав(СокрЛП(ВыборкаДетальныеЗаписи.ИмяРеквизита), 5) = Прав(ВыборкаНастроек.КлючОбъекта, 5) 
					И  ВыборкаНастроек.Представление = "Стандартная" Тогда
					
					Выполнить("ЭтаФорма."
						+ ВыборкаДетальныеЗаписи.ИмяРеквизита
						+ ".КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ВыборкаНастроек.Настройки)");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОПОЛНИТЕЛЬНЫХ СВОЙСТВ ФОРМЫ

#Область  ЗаполнениеДополнительныхСвойствФормы

Процедура ЗаполнитьДополнительныеСвойстваФормы(ЭтаФорма, ИмяОсновногоРеквизита, ИмяОсновногоЭлемента)
	
	// Получим для формы метаданное и всё, что можно.
	ДопСвойстваФормы = ПолучитьМетаданноеФормыИЕеНазначение(ЭтаФорма);
	
	// Добавим пользователя. Он часто нужен.
	ДопСвойстваФормы.Вставить("ТекущийПользователь", Системный_Сервер_Переопределяемый_ат.ТекущийПользователь());
	
	// Создание массива имён реквизитов формы и определение основного реквизита
	#Область МассивИменРеквизитовИОсновнойРеквизит
	
	МассивРеквизитов = ЭтаФорма.ПолучитьРеквизиты();
	МассивИменРеквизитов = Новый Массив;
	
	ДопСвойстваФормы.Вставить("ОсновнойРеквизитФормы", ИмяОсновногоРеквизита);	
	
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		МассивИменРеквизитов.Добавить(Реквизит.Имя);
		
		Если ДопСвойстваФормы.ОсновнойРеквизитФормы <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим основной реквизит формы если он не передан.
		Если ДопСвойстваФормы.ТипФормы = "ФормаСписка" И Реквизит.Имя = "Список" Тогда
			ДопСвойстваФормы.ОсновнойРеквизитФормы = "Список";
		ИначеЕсли ДопСвойстваФормы.ТипФормы = "ФормаОбъекта" И Реквизит.Имя = "Объект" Тогда
			ДопСвойстваФормы.ОсновнойРеквизитФормы = "Объект";
		ИначеЕсли ДопСвойстваФормы.ТипФормы = "ФормаОбъекта" И Реквизит.Имя = "Отчет" Тогда
			ДопСвойстваФормы.ОсновнойРеквизитФормы = "Отчет";
		КонецЕсли;
	КонецЦикла;
	
	ДопСвойстваФормы.Вставить("Реквизиты", МассивИменРеквизитов);	
		
	#КонецОбласти 

	// Определение элемента формы связанного с основным реквизитом
	#Область ОсновойЭлементФормы
	
	ДопСвойстваФормы.Вставить("ОсновнойЭлементФормы", ИмяОсновногоЭлемента);
	
	Если ДопСвойстваФормы.ОсновнойЭлементФормы = Неопределено Тогда
		
		ОсновнойЭлементФормы = ЭтаФорма.Элементы.Найти(ДопСвойстваФормы.ОсновнойРеквизитФормы);
		
		Если ОсновнойЭлементФормы = Неопределено Тогда
			Для Каждого Элемент Из ЭтаФорма.Элементы Цикл
				Если (ТипЗнч(Элемент) = Тип("ПолеФормы")
						ИЛИ ТипЗнч(Элемент) = Тип("ТаблицаФормы"))
					И Элемент.ПутьКДанным = ДопСвойстваФормы.ОсновнойРеквизитФормы
					Тогда
					ДопСвойстваФормы.ОсновнойЭлементФормы = Элемент.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		Иначе 
			ДопСвойстваФормы.ОсновнойЭлементФормы = ОсновнойЭлементФормы.Имя;	
		КонецЕсли;
		
	КонецЕсли;
		
	#КонецОбласти 
	 
	
	// ТУДУ Григ: не понятен смысл и путь получения {
	
	//// Заполним доступные роли.
	//ДопСвойстваФормы.Вставить("ДоступныеРоли", Новый Массив);
	//
	//Для Каждого Роль Из Метаданные.Роли Цикл
	//	Если РольДоступна(Роль.Имя) Тогда
	//		ДопСвойстваФормы.ДоступныеРоли.Добавить(Роль.Имя);		
	//	КонецЕсли;
	//КонецЦикла;
	
	// }
	
	
	// ТУДУ Григ: определиться с правами {
	
	////Добавим значение права изменения номера для сохраняемых объектов.
	//Если ДопСвойстваФормы.Метаданное.СохраняемыйОбъект Тогда
	//	ДопСвойстваФормы.Вставить("РедактироватьНомераКоды", УправлениеПользователями.SA_ПолучитьЗначениеПраваПользователя(ПланыВидовХарактеристик.ПраваПользователей.SA_РедактироватьНомераКоды, ПараметрыСеанса.ТекущийПользователь));
	//КонецЕсли;
	
	// }
	
	//+ Добавление дополнительных свойств
	УправляемыеФормы_Сервер_Переопределяемый_ат.ДополнитьСтруктуруДополнительныхСвойствФормы(ДопСвойстваФормы);
	//- Добавление дополнительных свойств
	
	// Помещение данных в реквизит.
	МассивНовыхРеквизитов = Новый Массив;
	ОписаниеПроизвольногоТипа = Новый Массив;
	ОписаниеПроизвольногоТипа.Добавить(Тип("Неопределено"));
	МассивНовыхРеквизитов.Добавить(Новый РеквизитФормы("ДополнительныеСвойстваФормы", Новый ОписаниеТипов(ОписаниеПроизвольногоТипа)));
	ЭтаФорма.ИзменитьРеквизиты(МассивНовыхРеквизитов);
	ЭтаФорма.ДополнительныеСвойстваФормы = ДопСвойстваФормы;
	
КонецПроцедуры	

Функция   ПолучитьМетаданноеФормыИЕеНазначение(ЭтаФорма)
	
	ВозврСтруктура = Новый Структура;
	
	ПутьФормыМассив = Системный_КлиентСервер_Переопределяемый_ат.РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы, ".");
	
	Если ПутьФормыМассив.Количество() = 0 Тогда
		Возврат ВозврСтруктура;
	КонецЕсли;
	
	Если ПутьФормыМассив[0] = "ОбщаяФорма" Тогда
		ВозврСтруктура.Вставить("ИмяФормы", ПутьФормыМассив[1]);
		ВозврСтруктура.Вставить("Метаданное");
		ВозврСтруктура.Вставить("ТипФормы", "ПроизвольнаяФорма");
		ВозврСтруктура.Вставить("ТипНазначенияФормы");
	Иначе
		ИмяФормы = ПутьФормыМассив[3];
		ВозврСтруктура.Вставить("ИмяФормы", ИмяФормы);
		
		// Определим связанные с объектом типы.
		МетаданноеСтруктура = Новый Структура;
		
		// Получим соответствие имеющихся у метаданного форм.
		СоответствиеФорм = ПолучитьСоответсвиеФормОбъектовТипамФорм(ПутьФормыМассив[0]);
		
		// Определим тип метаданного.
		Если ПутьФормыМассив[0] = "БизнесПроцессы" Тогда 
			ИмяМетаданного = "БизнесыПроцесс";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Истина);
			МетаданноеСтруктура.Вставить("Ссылка", "БизнесПроцессСсылка." + ПутьФормыМассив[1]);
			МетаданноеСтруктура.Вставить("Объект", "БизнесПроцессОбъект." + ПутьФормыМассив[1]);
		ИначеЕсли ПутьФормыМассив[0] = "Документ" Тогда 
			ИмяМетаданного = "Документы";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Истина);
			МетаданноеСтруктура.Вставить("Ссылка", "ДокументСсылка." + ПутьФормыМассив[1]);
			МетаданноеСтруктура.Вставить("Объект", "ДокументОбъект." + ПутьФормыМассив[1]);
		ИначеЕсли ПутьФормыМассив[0] = "ЖурналДокументов" Тогда 
			ИмяМетаданного = "ЖурналыДокументов";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "Задача" Тогда 
			ИмяМетаданного = "Задачи";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Истина);
			МетаданноеСтруктура.Вставить("Ссылка", "ЗадачаСсылка." + ПутьФормыМассив[1]);
			МетаданноеСтруктура.Вставить("Объект", "ЗадачаОбъект." + ПутьФормыМассив[1]);
		ИначеЕсли ПутьФормыМассив[0] = "КритерийОтбора" Тогда 
			ИмяМетаданного = "КритерииОтбора";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "Обработка" Тогда 
			ИмяМетаданного = "Обработки";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
			МетаданноеСтруктура.Вставить("Объект", "ОбработкаОбъект." + ПутьФормыМассив[1]);
		ИначеЕсли ПутьФормыМассив[0] = "Отчет" Тогда 
			ИмяМетаданного = "Отчеты";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
			МетаданноеСтруктура.Вставить("Объект", "ОтчетОбъект." + ПутьФормыМассив[1]);
		ИначеЕсли ПутьФормыМассив[0] = "Перечисление" Тогда 
			ИмяМетаданного = "Перечисления";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
			МетаданноеСтруктура.Вставить("Ссылка", "ПеречислениеСсылка." + ПутьФормыМассив[1]);
		ИначеЕсли ПутьФормыМассив[0] = "ПланВидовРасчета" Тогда 
			ИмяМетаданного = "ПланыВидовРасчета";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "ПланВидовХарактеристик" Тогда 
			ИмяМетаданного = "ПланыВидовХарактеристик";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Истина);
			МетаданноеСтруктура.Вставить("Ссылка", "ПланВидовХарактеристикСсылка." + ПутьФормыМассив[1]);
			МетаданноеСтруктура.Вставить("Объект", "ПланВидовХарактеристикОбъект." + ПутьФормыМассив[1]);
		ИначеЕсли ПутьФормыМассив[0] = "ПланСчетов" Тогда 
			ИмяМетаданного = "ПланыСчетов";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "РегистрБухгалтерии" Тогда 
			ИмяМетаданного = "РегистрыБухгалтерии";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "РегистрНакопления" Тогда 
			ИмяМетаданного = "РегистрыНакопления";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "РегистрРасчета" Тогда 
			ИмяМетаданного = "РегистрыРасчета";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "РегистрСведений" Тогда 
			ИмяМетаданного = "РегистрыСведений";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Ложь);
		ИначеЕсли ПутьФормыМассив[0] = "Справочник" Тогда
			ИмяМетаданного = "Справочники";	
			МетаданноеСтруктура.Вставить("СохраняемыйОбъект", Истина);
			МетаданноеСтруктура.Вставить("Ссылка", "СправочникСсылка." + ПутьФормыМассив[1]);
			МетаданноеСтруктура.Вставить("Объект", "СправочникОбъект." + ПутьФормыМассив[1]);
		КонецЕсли;
		
		// Определим само метаданное.
		Метаданное = Метаданные[ИмяМетаданного][ПутьФормыМассив[1]];
		МетаданноеСтруктура.Вставить("ПолноеИмя", Метаданное.ПолноеИмя());
		МетаданноеСтруктура.Вставить("Имя", Метаданное.Имя);
		МетаданноеСтруктура.Вставить("Класс", ИмяМетаданного);
		
		// Определеим реквизиты метаданного
		РеквизитыМетаданного = ПолучитьРеквизитыМетаданного(Метаданное, ПутьФормыМассив[0]);
		МетаданноеСтруктура.Вставить("Реквизиты", РеквизитыМетаданного);
		
		ВозврСтруктура.Вставить("Метаданное", МетаданноеСтруктура);
		
		// Теперь определим назначение формы.
		ВозврСтруктура.Вставить("ТипНазначенияФормы");
		ВозврСтруктура.Вставить("ТипФормы");
		Для Каждого КлючИЗначение Из СоответствиеФорм Цикл
			Если НЕ Метаданное[КлючИЗначение.Ключ] = Неопределено И Метаданное[КлючИЗначение.Ключ].Имя = ИмяФормы Тогда
				ВозврСтруктура.ТипНазначенияФормы = КлючИЗначение.Ключ;
				ВозврСтруктура.ТипФормы = КлючИЗначение.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозврСтруктура;
	
КонецФункции

Функция   ПолучитьСоответсвиеФормОбъектовТипамФорм(ТипМетаданного)
	
	ВозврСоответствие = Новый Соответствие;
	
	//Определим соответствие по типу метаданного.
	Если ТипМетаданного = "БизнесПроцесс" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");		
		ВозврСоответствие.Вставить("ДополнительнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");
	ИначеЕсли ТипМетаданного = "Документ" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");
	ИначеЕсли ТипМетаданного = "ЖурналДокументов" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФорма", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФорма", "ФормаСписка");
	ИначеЕсли ТипМетаданного = "Задача" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");	
	ИначеЕсли ТипМетаданного = "КритерийОтбора" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФорма", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФорма", "ФормаСписка");
	ИначеЕсли ТипМетаданного = "Обработка" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФорма", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФорма", "ФормаОбъекта");
	ИначеЕсли ТипМетаданного = "Отчет" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФорма", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаВарианта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаНастроек", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФорма", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаНастроек", "ФормаОбъекта");	
	ИначеЕсли ТипМетаданного = "Перечисление" Тогда 
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");	
	ИначеЕсли ТипМетаданного = "ПланВидовРасчета" Тогда 
	 	ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");
	ИначеЕсли ТипМетаданного = "ПланВидовХарактеристик" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаГруппы", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбораГруппы", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаГруппы", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбораГруппы", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");			
	ИначеЕсли ТипМетаданного = "ПланСчетов" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");	
	ИначеЕсли ТипМетаданного = "РегистрБухгалтерии" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");	
	ИначеЕсли ТипМетаданного = "РегистрНакопления" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");	
	ИначеЕсли ТипМетаданного = "РегистрРасчета" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");	
	ИначеЕсли ТипМетаданного = "РегистрСведений" Тогда 
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаЗаписи", "ФормаЗаписи");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаЗаписи", "ФормаЗаписи");	
	ИначеЕсли ТипМетаданного = "Справочник" Тогда
		ВозврСоответствие.Вставить("ОсновнаяФормаГруппы", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаДляВыбораГруппы", "ФормаСписка");
		ВозврСоответствие.Вставить("ОсновнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ОсновнаяФормаСписка", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаГруппы", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбора", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаДляВыбораГруппы", "ФормаСписка");
		ВозврСоответствие.Вставить("ДополнительнаяФормаОбъекта", "ФормаОбъекта");
		ВозврСоответствие.Вставить("ДополнительнаяФормаСписка", "ФормаСписка");			
	КонецЕсли;
		
	Возврат ВозврСоответствие;
	
КонецФункции

Функция   ПолучитьРеквизитыМетаданного(Метаданное, ТипОбъекта)
	
	ТабличныеЧасти = Новый Структура;
	
	Если ТипОбъекта = "БизнесПроцесс" Тогда 
		ПредопределенныеРеквизиты = Новый Массив;
		ПредопределенныеРеквизиты.Добавить("Номер");
		ПредопределенныеРеквизиты.Добавить("Дата");
		ПредопределенныеРеквизиты.Добавить("Наименование");
		ТабличныеЧасти = ПолучитьРеквизитыТабличныхЧастей(Метаданное);
	ИначеЕсли ТипОбъекта = "Документ" Тогда 
		ПредопределенныеРеквизиты = Новый Массив;
		ПредопределенныеРеквизиты.Добавить("Номер");
		ПредопределенныеРеквизиты.Добавить("Дата");
		ТабличныеЧасти = ПолучитьРеквизитыТабличныхЧастей(Метаданное);
	ИначеЕсли ТипОбъекта = "ЖурналДокументов" Тогда 
		
	ИначеЕсли ТипОбъекта = "Задача" Тогда 
		ПредопределенныеРеквизиты = Новый Массив;
		ПредопределенныеРеквизиты.Добавить("Номер");
		ПредопределенныеРеквизиты.Добавить("Дата");
		ТабличныеЧасти = ПолучитьРеквизитыТабличныхЧастей(Метаданное);
	ИначеЕсли ТипОбъекта = "КритерийОтбора" Тогда 
		
	ИначеЕсли ТипОбъекта = "Обработка" Тогда 
		ТабличныеЧасти = ПолучитьРеквизитыТабличныхЧастей(Метаданное);
	ИначеЕсли ТипОбъекта = "Отчет" Тогда 
		ТабличныеЧасти = ПолучитьРеквизитыТабличныхЧастей(Метаданное);
	ИначеЕсли ТипОбъекта = "Перечисление" Тогда 
		ПредопределенныеРеквизиты = Новый Массив;
		ПредопределенныеРеквизиты.Добавить("Порядок");
	ИначеЕсли ТипОбъекта = "ПланВидовРасчета" Тогда 
		
	ИначеЕсли ТипОбъекта = "ПланВидовХарактеристик" Тогда 
		ПредопределенныеРеквизиты = Новый Массив;
		ПредопределенныеРеквизиты.Добавить("Код");
		ПредопределенныеРеквизиты.Добавить("Наименование");
		ТабличныеЧасти = ПолучитьРеквизитыТабличныхЧастей(Метаданное);
	ИначеЕсли ТипОбъекта = "ПланСчетов" Тогда 
		
	ИначеЕсли ТипОбъекта = "РегистрБухгалтерии" Тогда 
		
	ИначеЕсли ТипОбъекта = "РегистрНакопления" Тогда 
		
	ИначеЕсли ТипОбъекта = "РегистрРасчета" Тогда 
		
	ИначеЕсли ТипОбъекта = "РегистрСведений" Тогда 
		
	ИначеЕсли ТипОбъекта = "Справочник" Тогда
		ПредопределенныеРеквизиты = Новый Массив;
		ПредопределенныеРеквизиты.Добавить("Код");
		ПредопределенныеРеквизиты.Добавить("Наименование");
		Если Метаданное.Владельцы.Количество() > 0 Тогда 
			ПредопределенныеРеквизиты.Добавить("Владелец");
		КонецЕсли;
		Если Метаданное.Иерархический Тогда 
			ПредопределенныеРеквизиты.Добавить("Родитель");
		КонецЕсли;
		ТабличныеЧасти = ПолучитьРеквизитыТабличныхЧастей(Метаданное);
	КонецЕсли;
	
	Реквизиты = ПолучитьМассивРеквзитов(Метаданное);
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ПредопределенныеРеквизиты", ПредопределенныеРеквизиты);
	СтруктураРеквизитов.Вставить("Реквизиты", Реквизиты);
	СтруктураРеквизитов.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция   ПолучитьРеквизитыТабличныхЧастей(Метаданное)
	
	ТабличныеЧасти = Новый Структура;
	
	Для Каждого ТабличнаяЧасть ИЗ Метаданное.ТабличныеЧасти Цикл
		РеквизитыТЧ = ПолучитьМассивРеквзитов(ТабличнаяЧасть);
		ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, РеквизитыТЧ);	
	КонецЦикла;
	
	Возврат ТабличныеЧасти;
	
КонецФункции

Функция   ПолучитьМассивРеквзитов(Метаданное)
	
	РеквизитыМетаданного = Новый Массив;
	
	Для Каждого Реквзит Из Метаданное.Реквизиты Цикл
		РеквизитыМетаданного.Добавить(Реквзит.Имя);	
	КонецЦикла;
	
	Возврат РеквизитыМетаданного;
	
КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ПАНЕЛЕЙ

#Область  ЗаполнениеПанелей

Процедура ЗаполнитьКоманднуюПанель(ЭтаФорма, КоманднаяПанель, Метаданное, Объект, Список) Экспорт
	
	Контейнер = ЭтаФорма.Элементы.Добавить("ГруппаДинамическихКнопок", Тип("ГруппаФормы"), КоманднаяПанель);
	Контейнер.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	Если Список <> Неопределено Тогда
		
		// Просмотр ПУ
		Если Метаданное <> Неопределено
			И (Метаданные.Документы.Содержит(Метаданное) 
				ИЛИ Метаданные.Справочники.Содержит(Метаданное)
				ИЛИ Метаданные.БизнесПроцессы.Содержит(Метаданное)
				ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(Метаданное)
				ИЛИ Метаданные.ПланыСчетов.Содержит(Метаданное)
				ИЛИ Метаданные.ПланыВидовРасчета.Содержит(Метаданное)
				ИЛИ Метаданные.ПланыОбмена.Содержит(Метаданное)
				ИЛИ Метаданные.Задачи.Содержит(Метаданное))
			Тогда
			ЗаполнитьКоманднуюПанель_ПросмотрПУ(ЭтаФорма, Контейнер, Список);
		КонецЕсли;
		
		ЗаполнитьКоманднуюПанель_ПодсчетКоличестваСтрок(ЭтаФорма, Контейнер);
		
		// Установка интервала
		Если Метаданное <> Неопределено
			И (Найти(Метаданное.ПолноеИмя(), "Документ") > 0
				ИЛИ Найти(Метаданное.ПолноеИмя(), "Задача") > 0)
			Тогда
			ЗаполнитьКоманднуюПанель_УстановитьИнтервал(ЭтаФорма, КоманднаяПанель);	
		КонецЕсли;
		
	//ИначеЕсли Объект <> Неопределено Тогда
	//	
	//	// Поиск текущего объекта в списке.
	//	ЗаполнитьКоманднуюПанель_НайтиВСписке(ЭтаФорма, КоманднаяПанель);
	//	
	//	//Если ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.СохраняемыйОбъект Тогда
	//	//	// Поддержка механизма автонумерации
	//	//	ЗаполнитьКоманднуюПанель_МеханизмНумерацииОбъектов(ЭтаФорма, Контейнер, Метаданное);
	//	//	ЗаполнитьКоманднуюПанель_СоздатьНапоминание(ЭтаФорма, Контейнер);
	//	//КонецЕсли;
	//	
	КонецЕсли;
	
	// Сохранение и восстановление настроек формы.
	Если УправляемыеФормы_Сервер_Переопределяемый_ат.ИспользоватьУправлениеНастройкамиФормы(ЭтаФорма) Тогда
		ЗаполнитьКоманднуюПанель_УправлениеНастройкамиФормы(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в переданную группу кнопку "Найти в списке".
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма на которой создеётся кнопка.
//	ГруппаФормы - ГруппаФормы - Группа в которую будут помещены создаваемые кнопки.
//
Процедура ЗаполнитьКоманднуюПанель_НайтиВСписке(ЭтаФорма, ГруппаФормы) Экспорт //!ЗАКОММЕНТИРОВАНА
//	
//	СоздатьКнопку(ЭтаФорма, ГруппаФормы, "НайтиВСписке", БиблиотекаКартинок.НайтиВСписке, "Найти в списке", , , , Истина);
//	
КонецПроцедуры 

// Добавляет в переданную группу кнопку "ПросмотрПУ" и создает соответствующий отбор в переданном списке.
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма на которой будет создана команда и кнопка.
//	ГруппаФормы - ГруппаФормы - Группа в которую будут помещены создаваемые кнопки.
//	Список - ДинамическийСписок - Список для которого будет установлен отбор.
//
Процедура ЗаполнитьКоманднуюПанель_ПросмотрПУ(ЭтаФорма, ГруппаФормы, Список) Экспорт
	
	// теперь управлять этим отбором можно прямо из "Настроить список", особой необходимости в кнопке нет
	//СоздатьКнопку(ЭтаФорма, ГруппаФормы, "ПросмотрПУ", БиблиотекаКартинок.ПросмотрПУ_ат,
	//	"Просмотр ПУ", ОтображениеКнопки.КартинкаИТекст, , "Показать/скрыть помеченные на удаление", Истина); 
	
	УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
		Список, "ПометкаУдаления",, Ложь, Истина, "Скрыть помеченные на удаление",,, 1);
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_ПечатьПоУмолчанию(ЭтаФорма, КоманднаяПанель) Экспорт
	
	Кнопка = ЭтаФорма.Элементы.Найти("ПечатьПоУмолчанию");
	
	Если Кнопка = Неопределено Тогда
		ИмяКоманды = "ПечатьПоУмолчанию";
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ОбработчикУниверсальныхДействий";
		Кнопка = ЭтаФорма.Элементы.Добавить(
			"ПечатьПоУмолчанию",//Имя элемента
			Тип("КнопкаФормы"),//Тип элемента
			КоманднаяПанель);//Владелец элемента.
			
		Кнопка.ИмяКоманды = ИмяКоманды;	
	КонецЕсли;
	
	Кнопка.Картинка 	= БиблиотекаКартинок.ПечатьСразу;
	Кнопка.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
	Кнопка.Заголовок	= "Печать по умолчанию";
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_СохранениеНастроек(ЭтаФорма, КоманднаяПанель, Метаданное) Экспорт
	
	ПолноеИмяОбъекта = Метаданное.ПолноеИмя();
	
	Если Найти(ПолноеИмяОбъекта, "Отчет") > 0 ИЛИ Найти(ПолноеИмяОбъекта, "Обработка") Тогда 
		ВидКонтейнера 						 = ВидГруппыФормы.ГруппаКнопок;
		ЗаголовокКнопкиСохранитьНастройки 	 = "Сохранить значения..";
		ЗаголовокКнопкиВосстановитьНастройки = "Восстановить значения..";
		ОтображениеКнопок					 = ОтображениеКнопки.Картинка;
		КартинкаСохранитьНастройки 			 = БиблиотекаКартинок.СохранитьЗначения;
		КартинкаВосстановитьНастройки	 	 = БиблиотекаКартинок.ВосстановитьЗначения;
	Иначе
		ВидКонтейнера 						 = ВидГруппыФормы.Подменю;
		ЗаголовокКнопкиСохранитьНастройки 	 = "Сохранить настройки динамического списка";
		ЗаголовокКнопкиВосстановитьНастройки = "Восстановить настройки динамического списка";
		ОтображениеКнопок					 = ОтображениеКнопки.КартинкаИТекст;
		КартинкаСохранитьНастройки 			 = БиблиотекаКартинок.Заполнение_ат;
		КартинкаВосстановитьНастройки		 = БиблиотекаКартинок.Заполнение_ат;
	КонецЕсли;
	
	Контейнер 			= ЭтаФорма.Элементы.Добавить("ГруппаУправлениеНастройкамиДинамическогоСписка", Тип("ГруппаФормы"), КоманднаяПанель);
	Контейнер.Вид 		= ВидКонтейнера;
	Контейнер.Заголовок	= "Управление настройками динамического списка";

	Если ВидКонтейнера = ВидГруппыФормы.Подменю Тогда 
		Контейнер.Картинка 	  = БиблиотекаКартинок.Заполнение_ат;
		Контейнер.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
	ИмяКоманды = "СохранитьНастройкиДинамическогоСписка";
	Кнопка= ЭтаФорма.Элементы.Найти(ИмяКоманды);
	Если Кнопка = Неопределено Тогда
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ОбработчикУниверсальныхДействий";
		Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Контейнер);
		Кнопка.ИмяКоманды = ИмяКоманды;	
	КонецЕсли;
	Кнопка.Картинка 	= КартинкаСохранитьНастройки;
	Кнопка.Отображение 	= ОтображениеКнопок;
	Кнопка.Заголовок	= ЗаголовокКнопкиСохранитьНастройки;
	
	ИмяКоманды = "ВосстановитьНастройкиДинамическогоСписка";
	Кнопка = ЭтаФорма.Элементы.Найти(ИмяКоманды);
	Если Кнопка = Неопределено Тогда
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ОбработчикУниверсальныхДействий";
		Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"),	Контейнер);
		Кнопка.ИмяКоманды = ИмяКоманды;	
	КонецЕсли;
	Кнопка.Картинка 	= КартинкаВосстановитьНастройки;
	Кнопка.Отображение 	= ОтображениеКнопок;
	Кнопка.Заголовок	= ЗаголовокКнопкиВосстановитьНастройки;
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_ПодсчетКоличестваСтрок(ЭтаФорма,КоманднаяПанель) Экспорт
	
	//ВАЖНО:
	//В форме ОБЯЗАТЕЛЬНО должна присутствовать процедура:
	//&НаСервере
	//Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент, ИмяФормы, ТабличноеПоле) Экспорт
	//
	//	Возврат(УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элементы.Имя], ИмяФормы, ТабличноеПоле));
	//
	//КонецФункции
	
	СоздатьКнопку(ЭтаФорма, КоманднаяПанель, "ПодсчетКоличестваСтрок", БиблиотекаКартинок.Перечисление,
		"Подсчет количества строк", , "ОбработчикУниверсальныхДействий", , Истина);
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_УстановитьИнтервал(ЭтаФорма, КоманднаяПанель) //!ЗАКОММЕНТИРОВАНА
	
	//// Определим контейнер
	//КнопкаНастройкаСписка = ЭтаФорма.Элементы.Найти("НастройкаСписка");
	//Если КнопкаНастройкаСписка = Неопределено Тогда Возврат; КонецЕсли;
	//
	//// На всякий случай спрячем старую кнопку.
	//Кнопка = ЭтаФорма.Элементы.Найти("УстановитьИнтервал");
	//Если НЕ Кнопка = Неопределено Тогда 
	//	Кнопка.Видимость = Ложь;
	//КонецЕсли;
	//
	//// Теперь создадим новую кнопку с нужным нам обработчиком.
	//СоздатьКнопку(ЭтаФорма, КнопкаНастройкаСписка.Родитель,
	//				"ДополнительныеДействияФормы_УстановитьИнтервал",
	//				БиблиотекаКартинок.УстановитьИнтервал, "Установить интервал");
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_МеханизмНумерацииОбъектов(ЭтаФорма, КоманднаяПанель, Метаданное) //!ЗАКОММЕНТИРОВАНА
	
	// ТУДУ Григ: разобраться со всем этим
	
	//Контейнер = ЭтаФорма.Элементы.Добавить("ГруппаМеханизмаНумерацииОбъектов", Тип("ГруппаФормы"),КоманднаяПанель);
	//Контейнер.Заголовок = "Нумерация";
	//
	//ЕстьНомер = Ложь;
	//ЕстьКод = Ложь;
	//Для Каждого Реквизит Из Метаданное.СтандартныеРеквизиты Цикл
	//	Если Реквизит.Имя = "Номер" Тогда
	//		ЕстьНомер = Истина;
	//	ИначеЕсли Реквизит.Имя = "Код" Тогда	
	//		ЕстьКод = Истина;
	//	КонецЕсли;	
	//КонецЦикла;
	//
	//Если ЕстьНомер Тогда
	//	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуПоТипуОбъекта_УправляемаяФорма(ЭтаФорма, Контейнер, "Номер");
	//	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера_УправляемаяФорма(Метаданное, ЭтаФорма, Контейнер, ЭтаФорма.Элементы.Номер);
	//ИначеЕсли ЕстьКод Тогда
	//	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуПоТипуОбъекта_УправляемаяФорма(ЭтаФорма, Контейнер, "Код");
	//	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера_УправляемаяФорма(Метаданное, ЭтаФорма, Контейнер, ЭтаФорма.Элементы.Код);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_СоздатьНапоминание(ЭтаФорма, КоманднаяПанель) //!ЗАКОММЕНТИРОВАНА
	
	//Контейнер = ЭтаФорма.Элементы.Добавить("ГруппаСоздатьНапоминание", Тип("ГруппаФормы"), КоманднаяПанель);
	//Контейнер.Вид = ВидГруппыФормы.ГруппаКнопок;
	//СоздатьКнопку(ЭтаФорма, Контейнер, "СоздатьНапоминание", БиблиотекаКартинок.Оповещение, "Создать напоминание");
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_Печать(ЭтаФорма, КоманднаяПанель) Экспорт
	
	Кнопка = ЭтаФорма.Элементы.Найти("Печать");
	
	Если Кнопка = Неопределено Тогда
		ИмяКоманды = "Печать";
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ОбработчикУниверсальныхДействий";
		Кнопка = ЭтаФорма.Элементы.Добавить(                                                                  
			"Печать",//Имя элемента
			Тип("КнопкаФормы"),//Тип элемента
			КоманднаяПанель);//Владелец элемента.
			
		Кнопка.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	Кнопка.Картинка 	= БиблиотекаКартинок.Печать;
	Кнопка.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
	Кнопка.Заголовок	= "Печать";
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_УправлениеНастройкамиФормы(ЭтаФорма) //!ЗАКОММЕНТИРОВАНА
	
	//Контейнер = ЭтаФорма.Элементы.Добавить("УправлениеНастройкамиФормы", Тип("ГруппаФормы"), ЭтаФорма.КоманднаяПанель);
	//Контейнер.Заголовок = "Управление настройками формы";
	//Контейнер.Вид = ВидГруппыФормы.ГруппаКнопок;
	//СоздатьКнопку(ЭтаФорма, Контейнер, "УправлениеНастройкамиФормы_СохранитьНастройкиФормы", , "Сохранить настройку", , );
	//СоздатьКнопку(ЭтаФорма, Контейнер, "УправлениеНастройкамиФормы_ЗагрузитьНастройкиФормы", , "Загрузить настройку", , );
	//СоздатьКнопку(ЭтаФорма, Контейнер, "УправлениеНастройкамиФормы_УдалитьНастройкуФормы", , "Удалить настройку", , );
	//
	////Сделаем команды
	//ЭтаФорма.Команды.Добавить("УправлениеНастройкамиФормы_ПолучитьСписок");
	//ЭтаФорма.Команды.Добавить("УправлениеНастройкамиФормы_Загрузить");
	//ЭтаФорма.Команды.Добавить("УправлениеНастройкамиФормы_Сохранить");
	//ЭтаФорма.Команды.Добавить("УправлениеНастройкамиФормы_Удалить");
	
КонецПРоцедуры

Процедура ЗаполнитьКоманднуюПанель_УправлениеРежимомБыстрогоВыбораЭлементов(ЭтаФорма, КоманднаяПанель) //!ЗАКОММЕНТИРОВАНА
	
	//Массив = Новый Массив;
	//НовыйРеквизитФОрмы = Новый РеквизитФормы("РежимБыстрогоВыбораЭлементов",Новый ОписаниеТипов("Булево"));
	//Массив.Добавить(НовыйРеквизитФОрмы);
	//ЭтаФорма.ИзменитьРеквизиты(Массив); 
	//ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " @ ! БЫСТРЫЙ ВЫБОР ЭЛЕМЕНТОВ !";
	//
	//Кнопка = СоздатьКнопку(ЭтаФорма, КоманднаяПанель, "УправлениеРежимомБыстрогоВыбораЭлементов", Неопределено, "Быстрый выбор");
	//Кнопка.Пометка = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_МножественноеВыделение(ЭтаФорма,КоманднаяПанель) Экспорт
	
	Кнопка = ЭтаФорма.Элементы.Найти("SA_МножественноеВыделение");
	
	Если Кнопка = Неопределено Тогда
		ИмяКоманды = "SA_МножественноеВыделение";
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "ОбработчикУниверсальныхДействий";
		Кнопка = ЭтаФорма.Элементы.Добавить(
			"SA_МножественноеВыделение",//Имя элемента
			Тип("КнопкаФормы"),//Тип элемента
			КоманднаяПанель);//Владелец элемента.
			
		Кнопка.ИмяКоманды = ИмяКоманды;	
	КонецЕсли;
	Кнопка.Картинка 	= БиблиотекаКартинок.Печать;
	Кнопка.Отображение 	= ОтображениеКнопки.КартинкаИТекст;
	Кнопка.Заголовок	= "Множественное выделение";
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_УправлениеСредствамиКоммуникации(ЭтаФорма, КоманднаяПанель) //!ЗАКОММЕНТИРОВАНА
	
	//Контейнер = ЭтаФорма.Элементы.Добавить("ГруппаУправлениеСредствамиКоммуникации", Тип("ГруппаФормы"),КоманднаяПанель);
	//Контейнер.Вид = ВидГруппыФормы.ГруппаКнопок;
	//мСтруктураДоступныхУчетныхЗаписей = УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписи(ПараметрыСеанса.ТекущийПользователь);
	//ПВХ_Права = ПланыВидовХарактеристик.ПраваПользователей;
	//ТекЮзер = ПараметрыСеанса.ТекущийПользователь;
	//
	////Добавляем кнопку e-mail, если у пользователя есть доступные для записи учетные записи эл. почты.
	//Если мСтруктураДоступныхУчетныхЗаписей.Свойство("Запись") И мСтруктураДоступныхУчетныхЗаписей.Запись.Количество() > 0 Тогда
	//	СоздатьКнопку(ЭтаФорма, Контейнер, "НаписатьПисьмо", БиблиотекаКартинок.ОтправкаПочты, "Написать письмо");
	//КонецЕсли;
	//// Позвонить
	//Если УправлениеПользователями.SA_ПолучитьЗначениеПраваПользователя(ПВХ_Права.ИспользоватьPBXfon, ТекЮзер) Тогда
	//	СоздатьКнопку(ЭтаФорма, Контейнер, "Позвонить", БиблиотекаКартинок.СофтФон, "Позвонить");
	//КонецЕсли;		
	//// Отправить SMS
	//Если УправлениеПользователями.SA_ПолучитьЗначениеПраваПользователя(ПВХ_Права.SA_ИспользоватьSMSКоммуникатор, ТекЮзер) Тогда
	//	СоздатьКнопку(ЭтаФорма, Контейнер, "ОтправитьSMS", БиблиотекаКартинок.SMSКоммуникатор, "Отправить SMS");
	//КонецЕсли;		
	//// Отправить Факс
	//Если УправлениеПользователями.SA_ПолучитьЗначениеПраваПользователя(ПВХ_Права.SA_ИспользоватьФаксКоммуникатор, ТекЮзер) Тогда
	//	СоздатьКнопку(ЭтаФорма, Контейнер, "ОтправитьФакс", БиблиотекаКартинок.ФаксКоммуникатор, "Отправить факс");
	//КонецЕсли;		
	
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_СтатусОтправкиДокумента(ЭтаФорма, КоманднаяПанель, Объект) Экспорт //!ЗАКОММЕНТИРОВАНА
	
	//Попытка	
	//	Контейнер = ЭтаФорма.Элементы.Найти("ГруппаСтатусОтправкиДокумента");
	//	Если Контейнер = Неопределено Тогда
	//		Контейнер = ЭтаФорма.Элементы.Добавить("ГруппаСтатусОтправкиДокумента", Тип("ГруппаФормы"),КоманднаяПанель);
	//		Контейнер.Вид = ВидГруппыФормы.ГруппаКнопок;
	//		Контейнер.Заголовок = "Статус отправки документа";
	//	КонецЕсли;
	//	
	//	//Если уже есть подчиненные элементы,очистим их.
	//	ПодчиненныеЭлементы_Очистить(ЭтаФорма, Контейнер);
	//	
	//	Если Объект.ЭтоНовый() Тогда
	//		КнопкаСтатус = СоздатьКнопку(ЭтаФорма, Контейнер, "НовыйДокумент", БиблиотекаКартинок.СостояниеНеОбработано, "Новый", ОтображениеКнопки.КартинкаИТекст);
	//	Иначе
	//		Запрос = Новый Запрос("
	//		|           ВЫБРАТЬ ПЕРВЫЕ 1
	//		|			ЗапросСостояний.Ссылка,
	//		|			ЗапросСостояний.ДатаДокумента КАК ДатаДокумента,
	//		|			ЗапросСостояний.ТипСобытия,
	//		|			ЗапросСостояний.Статус,
	//		|			ЗапросСостояний.СостояниеСобытия
	//		|		ИЗ
	//		|			(ВЫБРАТЬ
	//		|				ФаксСообщение.Ссылка КАК Ссылка,
	//		|				ФаксСообщение.Дата КАК ДатаДокумента,
	//		|				ФаксСообщение.ТипСообщения КАК ТипСобытия,
	//		|				ФаксСообщение.СтатусСтрокой КАК Статус,
	//		|				Выбор Когда ФаксСообщение.Статус = ЗНАЧЕНИЕ(Перечисление.СостоянияФакса.Отправлено) Тогда
	//		|					ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Завершено)
	//		|				Иначе
	//		|					ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Запланировано)
	//		|				Конец КАК СостояниеСобытия
	//		|			ИЗ
	//		|				Документ.ФаксСообщение КАК ФаксСообщение
	//		|			ГДЕ
	//		|				НЕ (ФаксСообщение.ПометкаУдаления)
	//		|				И ФаксСообщение.Основание = &Основание
	//		|			
	//		|			ОБЪЕДИНИТЬ ВСЕ
	//		|			
	//		|			ВЫБРАТЬ
	//		|				ЭлектронноеПисьмо.Ссылка,
	//		|				ЭлектронноеПисьмо.Дата,
	//		|				ЭлектронноеПисьмо.ТипСобытия,
	//		|				ВЫБОР КОГДА ЭлектронноеПисьмо.СостояниеСобытия = ЗНАЧЕНИЕ(Перечисление.СостоянияСобытий.Завершено) Тогда
	//		|					""Отправлен"" 
	//		|				Иначе
	//		|					""Не отправлен""
	//		|				Конец КАК Статус,
	//		|				ЭлектронноеПисьмо.СостояниеСобытия КАК СостояниеСобытия
	//		|			ИЗ
	//		|				Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	//		|			ГДЕ
	//		|				НЕ (ЭлектронноеПисьмо.ПометкаУдаления)
	//		|				И ЭлектронноеПисьмо.ОснованиеПисьма = &Основание) КАК ЗапросСостояний
	//		|		
	//		|		УПОРЯДОЧИТЬ ПО
	//		|			ДатаДокумента УБЫВ"); 
	//		
	//		Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	//		РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//		Если РезультатЗапроса.Следующий() Тогда 
	//			ДокументОтправки = РезультатЗапроса.Ссылка;
	//			Если ТипЗнч(РезультатЗапроса.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмо") Тогда
	//				ТипДокумента  = "EMail";
	//				ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо;
	//			Иначе
	//				ТипДокумента  = "Факс";
	//				ВидСобытия = Перечисления.ВидыСобытий.SA_Факс;
	//			КонецЕсли;		
	//			КнопкаСтатус = СоздатьКнопку(ЭтаФорма, Контейнер, "Статус", ?(РезультатЗапроса.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено,БиблиотекаКартинок.СостояниеЗавершено, БиблиотекаКартинок.СостояниеЗапланировано), РезультатЗапроса.Статус, ОтображениеКнопки.КартинкаИТекст);
	//			ИмяКнопки = "ДокументОтправки_" + СтрЗаменить(РезультатЗапроса.Ссылка.УникальныйИдентификатор(),"-","_");  
	//			КнопкаДокументОтправки = СоздатьКнопку(ЭтаФорма, Контейнер, ИмяКнопки, Документы.Событие.ПолучитьКартинкуНапоминания(ВидСобытия), ТипДокумента, ОтображениеКнопки.КартинкаИТекст);
	//		Иначе	
	//			КнопкаСтатус = СоздатьКнопку(ЭтаФорма, Контейнер, "Статус", БиблиотекаКартинок.СостояниеНеОбработано, "Не отправлялся", ОтображениеКнопки.КартинкаИТекст);
	//		КонецЕсли;
	//	КонецЕсли;
	//	КнопкаСтатус.Доступность = Ложь;
	//	
	//	//Создадим соответствующую команду.
	//	Если ЭтаФОрма.Команды.Найти("ЗаполнитьКоманднуюПанель_СтатусОтправкиДокумента") = Неопределено Тогда
	//		Команда = ЭтаФорма.Команды.Добавить("ЗаполнитьКоманднуюПанель_СтатусОтправкиДокумента");
	//	КонецЕсли;
	//Исключение
	//	ЗаписьЖурналаРегистрации(
	//				"ДополнительныеДействияФормы.ЗаполнитьКоманднуюПанель_СтатусОтправкиДокумента",
	//				УровеньЖурналаРегистрации.Ошибка, 
	//				Тип(ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.Объект),
	//				ЭтаФорма.ИмяФормы, "Ошибка получения ссылки из объекта: " + Объект);		
	//КонецПопытки;
				
КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_Файлы(ЭтаФорма, Ссылка) //!ЗАКОММЕНТИРОВАНА
	
	////Если тип значения не тот, то заполнять меню не надо.
	//Если НЕ Метаданные.Справочники.ХранилищеДополнительнойИнформации.Реквизиты.Объект.Тип.СодержитТип(ТипЗНч(Ссылка)) Тогда Возврат; КонецЕсли;
	//
	////Создадим подменю и заполним его командамы для файлов.
	//Контейнер = ЭтаФорма.Элементы.Добавить("Файлы", Тип("ГруппаФормы"), ЭтаФорма.КоманднаяПанель);
	//Контейнер.Заголовок = "Файлы";
	//РаботаСФайлами_Сервер.ЗаполнитьСписокФайлов(ЭтаФорма, Ссылка, Контейнер);

КонецПроцедуры

Процедура ЗаполнитьКоманднуюПанель_УправлениеВидимостьюОтборовДинамическогоСписка(ЭтаФорма, КоманднаяПанель)
	
	Кнопка = СоздатьКнопку(ЭтаФорма, КоманднаяПанель, "ПоказатьОтборыДинамическогоСписка",
		БиблиотекаКартинок.ПоказатьОтборы_ат, "Показать отборы",,,, Истина);
	
КонецПроцедуры

Процедура ВосстановитьВидимостьЭлементовКоманднойПанелиФормы(ЭтаФорма, МассивЭлементов) Экспорт
	
	Для Каждого ЭлементУправления  Из МассивЭлементов Цикл
		Если ЭтаФорма.Элементы.Найти(ЭлементУправления) <> Неопределено Тогда
			ЭтаФорма.Элементы[ЭлементУправления].ТолькоВоВсехДействиях = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ ПО УМОЛЧАНИЮ

#Область  ПечатьПоУмолчанию

Функция   ЕстьПечатныеФормы(МетаданныеОбъекта, Объект)
	
	// ТУДУ Григ: определиться с используемым механизмом, а пока будем возвращать Ложь
	Возврат Ложь;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	КОЛИЧЕСТВО(*) КАК Количество
	//	|ИЗ
	//	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	//	|ГДЕ
	//	|	ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	//	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработкиПечатнаяФорма
	//	|	И (НЕ ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма ССЫЛКА Справочник.ВнешниеОбработки)
	//	|	И (НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	//	|	И ВнешниеОбработкиПринадлежность.SA_ПоГруппеСобытия = ЛОЖЬ";
	//
	//Запрос.УстановитьПараметр("ВидОбработкиПечатнаяФорма", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	//
	//Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
	//	Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	//ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
	//	Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Таблица = Запрос.Выполнить().Выгрузить();
	//	
	//Попытка
	//	СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	//Исключение
	//	СтруктураВнутреннихПечатныхФорм = Новый Структура;
	//КонецПопытки;

	//Возврат ?(Таблица[0].Количество = 0 И СтруктураВнутреннихПечатныхФорм.Количество() = 0, Ложь, Истина);
	
КонецФункции

// Процедура получает из текста запроса полное наименование объекта метаданных, для
// которого в результате запроса возвращается ссылка.
//ПАРАМЕТРЫ:
//	*ТекстЗапроса - тип: строка. Текст запроса, в котором производится поиск.
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: Тип - ОбъектМетаданных или Неопределено
Функция   ПолучитьОбъектМетаданныхСсылкиИзЗапроса(ТекстЗапроса) Экспорт
	
	//ПолучениеСсылки = Найти(ТекстЗапроса,".Ссылка,");
	//Если ПолучениеСсылки = 0 Тогда
	//	ПолучениеСсылки = Найти(ТекстЗапроса,".Ссылка ");
	//КонецЕсли;
	//Если ПолучениеСсылки = 0 Тогда Возврат Неопределено; КонецЕсли;
	//ТекущийСимвол = ";";
	//СтрокаТаблицы = "";
	//Счетчик = ПолучениеСсылки-1;
	//Пока Счетчик > 0 Цикл
	//	ТекущийСимвол = Сред(ТекстЗапроса,Счетчик,1);
	//	Если ТекущийСимвол = " " ИЛИ ТекущийСимвол = Символ(10) ИЛИ ТекущийСимвол = Символ(13) ИЛИ ТекущийСимвол = Символ(9)Тогда
	//		Прервать;	
	//	КонецЕсли;
	//	СтрокаСинонимаТаблицы = ТекущийСимвол+СтрокаСинонимаТаблицы;
	//	Счетчик = Счетчик-1;
	//КонецЦикла;
	//СимволТочки = Найти(СтрокаСинонимаТаблицы,".");
	//Если СимволТочки > 0 Тогда
	//	СтрокаСинонимаТаблицы = Лев(СтрокаСинонимаТаблицы,СимволТочки-1);
	//КонецЕсли;
	//
	//ПоложениеМаркераСинонимаТаблицы = Найти(ТекстЗапроса,"КАК "+СтрокаСинонимаТаблицы);
	//Если ПоложениеМаркераСинонимаТаблицы > 0 Тогда
	//	ТекущийСимвол = ";";
	//	СтрокаОпределенияТаблицы = "";
	//	Счетчик = ПоложениеМаркераСинонимаТаблицы-2;
	//	Пока Счетчик > 0 Цикл
	//		ТекущийСимвол = Сред(ТекстЗапроса,Счетчик,1);
	//		Если ТекущийСимвол = " " ИЛИ ТекущийСимвол = Символ(10) ИЛИ ТекущийСимвол = Символ(13) ИЛИ ТекущийСимвол = Символ(9)Тогда
	//			Прервать;	
	//		КонецЕсли;
	//		СтрокаОпределенияТаблицы = ТекущийСимвол+СтрокаОпределенияТаблицы;
	//		Счетчик = Счетчик-1;
	//	КонецЦикла;
	//КонецЕсли;
	//ТочкаОпределенияТипаПрикладногоОбъекта = Найти(СтрокаОпределенияТаблицы,".");
	//ТипПрикладногоОбъекта = Лев(СтрокаОпределенияТаблицы,ТочкаОпределенияТипаПрикладногоОбъекта);
	//СтрокаОпределенияТаблицы = Сред(СтрокаОпределенияТаблицы,ТочкаОпределенияТипаПрикладногоОбъекта+1);
	//ТочкаОпределенияНаименованияПрикладногоОбъекта = Найти(СтрокаОпределенияТаблицы,".");
	//Если ТочкаОпределенияНаименованияПрикладногоОбъекта > 0 Тогда
	//	НаименованиеПрикладногоОбъекта = Лев(СтрокаОпределенияТаблицы,ТочкаОпределенияНаименованияПрикладногоОбъекта-1);
	//Иначе
	//	НаименованиеПрикладногоОбъекта = СтрокаОпределенияТаблицы;
	//КонецЕсли;
	//ПрикладнойОбъект = ТипПрикладногоОбъекта+НаименованиеПрикладногоОбъекта;
	//Попытка
	//	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПрикладнойОбъект);
	//	Возврат ОбъектМетаданных;
	//Исключение
	//	Возврат Неопределено;
	//КонецПопытки;
	
КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область  ВспомогательныеПроцедурыИФункции

// Функция создает кнопку согласно переданным параметрам, поиск кнопки и её команды осуществляется
// по значению переданному в параметре ИмяКоманды, в случае нахождения изменения не применяются.
//
// Параметры:
//	ЭтаФорма - УправляемаяФорма - Форма на которой создеётся кнопка.
//	Родитель - ГруппаФормы, ТаблицаФормы, УправляемаяФорма - Родитель для добавляемой кнопки.
//	ИмяКоманды - Строка - Имя команды.
//	Картинка - Картинка - Картинка отображаемая на кнопке. По умолчанию отсутствует.
//	Заголовок - Строка - Заголовок кнопки.
//	РежимОтображение - ОтображениеКнопки - Cпособ отображения команды, с которой связана кнопка. По умолчанию Картинка.
//	Действие - Строка - Имя процедуры обработчика команды.
//	Подсказка - Строка - Подсказка команды. Если параметр не задан в качестве подсказки будет применён Заголовок.
//	ТолькоВоВсехДействиях - Булево - Признак отображения кнопки только в подменю "Все действия". По умолчанию Неопределено.
//
// Возвращаемое значение:
//  КнопкаФормы
//
Функция   СоздатьКнопку(ЭтаФорма, Родитель, ИмяКоманды, Картинка = Неопределено, Заголовок, РежимОтображение = Неопределено,
	Действие = "ОбработчикУниверсальныхДействий", Подсказка = "", ТолькоВоВсехДействиях = Неопределено, СочетаниеКлавиш = Неопределено) Экспорт
	
	КомандаФормы = ЭтаФорма.Команды.Найти(ИмяКоманды);
	Если КомандаФормы = Неопределено Тогда
		
		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = Действие;
		КомандаФормы.Подсказка = ?(Подсказка = "", Заголовок, Подсказка);
		
	КонецЕсли;
	
	Кнопка = ЭтаФорма.Элементы.Найти(ИмяКоманды);
	
	Если Кнопка = Неопределено Тогда
		
		Кнопка = ЭтаФорма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Родитель);
		Кнопка.ИмяКоманды = ИмяКоманды;
		
	КонецЕсли;
	
	Кнопка.Заголовок = Заголовок;
	
	Если Картинка <> Неопределено Тогда
		
		Кнопка.Картинка = Картинка;
		
	КонецЕсли;
	
	Если РежимОтображение = Неопределено Тогда
		
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
		
	Иначе
		
		Кнопка.Отображение = РежимОтображение;
		
	КонецЕсли;
	
	Кнопка.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
	
	Если НЕ СочетаниеКлавиш = Неопределено Тогда
		
		Кнопка.СочетаниеКлавиш = СочетаниеКлавиш;
		
	КонецЕсли;
	
	Возврат Кнопка;
	
КонецФункции

Процедура ПодчиненныеЭлементы_Очистить(ЭтаФорма, Элемент)
	
	Пока Элемент.ПодчиненныеЭлементы.Количество() <> 0 Цикл
		ЭтаФорма.Элементы.Удалить(Элемент.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ КОНТЕКСТНЫХ МЕНЮ

#Область  ЗаполнениеКонтекстныхМеню

Процедура ЗаполнитьКонтекстноеМенюСписка(ЭтаФорма, КоманднаяПанель) 
	
	//КнопкаНастройкаСписка = ЭтаФорма.Элементы.Найти("КМ_НастройкаСписка");
	//Если КнопкаНастройкаСписка = Неопределено Тогда Возврат; КонецЕсли;
	//
	//Кнопка = ЭтаФорма.Элементы.Найти("КМ_ОтборПоЗначениюТекущейКолонки");
	//Если Кнопка = Неопределено Тогда
	//	ИмяКоманды = "ОтборПоЗначениюТекущейКолонки";
	//	Если ЭтаФорма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
	//		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	//		КомандаФормы.Действие = "ОбработчикУниверсальныхДействий";
	//	КонецЕсли;
	//	Кнопка = ЭтаФорма.Элементы.Добавить(
	//		"КМ_ОтборПоЗначениюТекущейКолонки",//Имя элемента
	//		Тип("КнопкаФормы"),//Тип элемента
	//		?(КнопкаНастройкаСписка = Неопределено, КоманднаяПанель, КнопкаНастройкаСписка.Родитель));//Владелец элемента.
	//		
	//	Кнопка.ИмяКоманды = ИмяКоманды;	
	//КонецЕсли;
	//Кнопка.Картинка 	= БиблиотекаКартинок.ОтборПоТекущемуЗначению;
	//Кнопка.Отображение 	= ОтображениеКнопки.Картинка;
	//Кнопка.Заголовок	= "Отбор по значению текущей колонки";

	//Кнопка = ЭтаФорма.Элементы.Найти("КМ_ОтключитьОтбор");
	//Если Кнопка = Неопределено Тогда
	//	ИмяКоманды = "ОтключитьОтбор";
	//	Если ЭтаФорма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
	//		КомандаФормы = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	//		КомандаФормы.Действие = "ОбработчикУниверсальныхДействий";
	//	КонецЕсли;
	//	Кнопка = ЭтаФорма.Элементы.Добавить(
	//		"КМ_ОтключитьОтбор",//Имя элемента
	//		Тип("КнопкаФормы"),//Тип элемента
	//		?(КнопкаНастройкаСписка = Неопределено,КоманднаяПанель,КнопкаНастройкаСписка.Родитель));//Владелец элемента.
	//		
	//	Кнопка.ИмяКоманды = ИмяКоманды;	
	//КонецЕсли;
	//Кнопка.Картинка 	= БиблиотекаКартинок.ОтключитьОтбор;
	//Кнопка.Отображение 	= ОтображениеКнопки.Картинка;
	//Кнопка.Заголовок	= "Отключить отбор";
	
КонецПроцедуры

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ БЫСТРЫМ ОТБОРОМ

#Область  УправлениеБыстрымОтбором

Функция   УстановитьОтборПоРегиструБыстрогоВыбораЭлементов(ЭтаФорма, Список, Метаданное) //!ЗАКОММЕНТИРОВАНА
//	
//	СписокДляОтбора = ЗначениеИзСтрокиВнутр(ПолучитьСписокБыстрогоОтбораДляМетаданного(Метаданное.ПолноеИмя()));
//	УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСпискаПоРеквизиту(Список, "Ссылка",
//		ВидСравненияКомпоновкиДанных.ВСписке, СписокДляОтбора, СписокДляОтбора.Количество() > 0, "Быстрый отбор элементов");
//	
//	Возврат СписокДляОтбора.Количество()>0 
//	
КонецФункции

Функция   ПолучитьСписокБыстрогоОтбораДляМетаданного(ПолноеИмяМетаданного) Экспорт //!ЗАКОММЕНТИРОВАНА
//	
//	Запрос = Новый Запрос(СформироватьЗапросДляБыстрогоОтбораДляМетаданного(ПолноеИмяМетаданного));
//	
//	Попытка
//		Список = Коллекции_ат.ПолучитьСписокЗначенийИзЗапроса(Запрос.Выполнить().Выгрузить(), "Ссылка");
//	Исключение
//		Список = Новый СписокЗначений;
//	КонецПопытки;
//	
//	Возврат ЗначениеВСтрокуВнутр(Список);
//	
КонецФункции

Функция   СформироватьЗапросДляБыстрогоОтбораДляМетаданного(ПолноеИмяМетаданного) Экспорт //!ЗАКОММЕНТИРОВАНА
//	
//	Возврат("ВЫБРАТЬ
//		|	SA_БыстрыйВыборЭлементов.Элемент КАК Ссылка
//		|ИЗ
//		|	РегистрСведений.SA_БыстрыйВыборЭлементов КАК SA_БыстрыйВыборЭлементов
//		|ГДЕ Элемент ССЫЛКА " + ПолноеИмяМетаданного);
//		
КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЙ ОБРАБОТЧИК ДЕЙСТВИЙ
 
#Область  УниверсальныйОбработчикДействий

Функция   ДополнительныеДействияФормы(ЭтаФорма, Элемент) Экспорт
	
	Метаданное = Метаданные.НайтиПоПолномуИмени(ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.ПолноеИмя);
	МассивРеквизитов = ЭтаФорма.ДополнительныеСвойстваФормы.Реквизиты;
	
	Объект = Неопределено;
	Если ЭтаФорма.ДополнительныеСвойстваФормы.ТипФормы = "ФормаСписка" Тогда
		
		Список = ЭтаФорма[ЭтаФорма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы];
		Список_ЭлементФормы = ЭтаФорма.Элементы.Найти(ЭтаФорма.ДополнительныеСвойстваФормы.ОсновнойЭлементФормы);
		
	ИначеЕсли ЭтаФорма.ДополнительныеСвойстваФормы.ТипФормы = "ФормаОбъекта" Тогда
		
		Попытка
			Объект = ДанныеФормыВЗначение(ЭтаФорма[ЭтаФорма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы],
				Тип(ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.Объект));
		Исключение
			ЗаписьЖурналаРегистрации(
				"ДополнительныеДействияФормы.ДанныеФормыВЗначение",
				УровеньЖурналаРегистрации.Ошибка,
				Тип(ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.Объект),
				ЭтаФорма.ИмяФормы);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Элемент.Имя = "ПодсчетКоличестваСтрок" Тогда
		
		РезультатЗапроса = РезультатЗапросаПоДинамическомуСписку_ДинамическийСписок(Список,
			"КОЛИЧЕСТВО(*) КАК Количество", Истина, Список_ЭлементФормы.Период);
		Возврат РезультатЗапроса.Выгрузить()[0].Количество;
		
	ИначеЕсли Элемент.Имя = "ОтборПоЗначениюТекущейКолонки" Тогда
		Возврат Список_ЭлементФормы.ТекущийЭлемент.ПутьКДанным;        
	ИначеЕсли Элемент.Имя = "ОтключитьОтбор" Тогда
		УправляемыеФормы_КлиентСервер_ат.ОтключитьОтборыСписка(Список.Отбор);
	//ИначеЕсли Элемент.Имя = "ДополнительныеДействияФормы_УстановитьИнтервал" Тогда
	//	УстановитьОтборПоПериоду(Список, Список_ЭлементФормы.Период.ДатаНачала, Список_ЭлементФормы.Период.ДатаОкончания, Истина);	
	//ИначеЕсли Элемент.Имя = "ЭтотОбъект" Тогда
	//	Возврат Объект;
	//ИначеЕсли Элемент.Имя = "Метаданные" Тогда
	//	Если Метаданное <> Неопределено Тогда
	//		ВозврСтруктура = Новый Структура("Имя,ПолноеИмя",Метаданное.Имя,Метаданное.ПолноеИмя());
	//		Возврат ВозврСтруктура;
	//	КонецЕсли;
	//ИначеЕсли Элемент.Имя = "ОписаниеФормы" Тогда
	//	ВозврСтруктура = Новый Структура("Реквизиты,Метаданное,Объект");
	//	ВозврСтруктура.Реквизиты = МассивРеквизитов;
	//	Если Метаданное <> Неопределено Тогда
	//		ВозврСтруктура.Метаданное = ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное;
	//	КонецЕсли;
	//	
	//	//Если форма не модифицировалась пользователем, перечитаем ее. Возможно, объект модифицировался на сервере.
	//	Если НЕ ЭтаФорма.Модифицированность
	//		И МассивРеквизитов.Найти("Объект") <> Неопределено
	//		И ЭтаФорма.Объект.Свойство("Ссылка")
	//		И ЭтаФорма.Объект.Ссылка <> Неопределено
	//		И Список_ЭлементФормы = Неопределено
	//		Тогда
	//		ЭтаФорма.Прочитать();
	//	КонецЕсли;
	//
	//	//Объект
	//	Если Объект <> Неопределено Тогда
	//		ВозврСтруктура.Объект = ЭтаФорма.Объект;
	//	КонецЕсли;
	//	Возврат ВозврСтруктура;
	//ИначеЕсли Элемент.Имя = "УправлениеРежимомБыстрогоВыбораЭлементов" Тогда
	//	Если ЭтаФорма.РежимБыстрогоВыбораЭлементов Тогда
	//		СписокДляОтбора = ПолучитьСписокБыстрогоОтбораДляМетаданного(Метаданное.ПолноеИмя());
	//		УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСпискаПоРеквизиту(Список, "Ссылка", ВидСравненияКомпоновкиДанных.ВСписке,
	//			СписокДляОтбора, СписокДляОтбора.Количество() > 0, "Быстрый отбор элементов");
	//	Иначе
	//		УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСпискаПоРеквизиту(Список, "Ссылка" ,ВидСравненияКомпоновкиДанных.Равно,
	//			Неопределено, Ложь, "Быстрый отбор элементов");
	//	КонецЕсли;
	//ИначеЕсли Элемент.Имя = "СоответствиеДляПолученияМассиваФайловВложений" Тогда
	//	Возврат РаботаСФайлами_Сервер.ПолучитьСоответствиеДляОписанийПолучаемыхФайлов_ВложенияЭлектроннойПочты(ЭтаФорма);
	//ИначеЕсли Элемент.Имя = "МассивСсылокНаФайлыВложений" Тогда
	//	Возврат РаботаСФайлами_Сервер.ПолучитьМассивСсылокНаФайлы_ВложенияЭлектроннойПочты(ЭтаФорма);
	//ИначеЕсли Элемент.Имя = "ЗаписатьНовыйИлиМодифицированныйОбъектВФорме" Тогда
	//	Возврат ЗаписатьНовыйИлиМодифицированныйОбъектВФорме(ЭтаФорма);
	//ИначеЕсли Элемент.Имя = "СоздатьНапоминание" Тогда
	//	Возврат ОбработчикиСобытий_Сервер.СоздатьНапоминание(Объект);
	//ИначеЕсли Элемент.Имя = "УправлениеНастройкамиФормы_ПолучитьСписок" Тогда
	//
	//ИначеЕсли Элемент.Имя = "УправлениеНастройкамиФормы_Загрузить" Тогда
	//		
	//ИначеЕсли Элемент.Имя = "УправлениеНастройкамиФормы_Сохранить" Тогда
	//
	//ИначеЕсли Элемент.Имя = "УправлениеНастройкамиФормы_Удалить" Тогда
	//
	//ИначеЕсли Элемент.Имя = "ДатаПриИзменении" Тогда
	//	РаботаСДиалогами_Сервер.ДатаПриИзменении(ЭтаФорма);
	//ИначеЕсли Элемент.Имя = "РедактироватьКодНомер" Тогда
	//	ЭлементКодНомер = ЭтаФорма.Элементы.Найти("Код");
	//	Если ЭлементКодНомер = Неопределено Тогда
	//		ЭлементКодНомер = ЭтаФорма.Элементы.Найти("Номер");
	//	КонецЕсли;
	//	Если ЭлементКодНомер = Неопределено Тогда Возврат Неопределено; КонецЕсли;
	//	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданное, ЭтаФорма, Неопределено, ЭлементКодНомер);
	//ИначеЕсли Найти(Элемент.Имя, "ПроверкаОрфографии_") > 0 Тогда
	//	ПроверкаОрфографии_кла.ОбработчикНажатияСловаря(ЭтаФорма, Элемент);
	//ИначеЕсли Элемент.Имя = "СохранитьНастройкиДинамическогоСписка" Тогда
	//	СохраняемыйОбъект = ДанныеФормыВЗначение(ЭтаФорма[ЭтаФорма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы],
	//		Тип(ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.Объект));
	//	СохраняемыйОбъект.СохраненнаяНастройка = ЭтаФорма.СохраненнаяНастройка;
	//	СохраняемыйОбъект.СохранитьНастройку();
	//ИначеЕсли Элемент.Имя = "ВосстановитьНастройкиДинамическогоСписка" Тогда
	//	ВосстанавливаемыйОбъект = ДанныеФормыВЗначение(ЭтаФорма[ЭтаФорма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы],
	//		Тип(ЭтаФорма.ДополнительныеСвойстваФормы.Метаданное.Объект));
	//	ВосстанавливаемыйОбъект.СохраненнаяНастройка = ЭтаФорма.СохраненнаяНастройка;
	//	ВосстанавливаемыйОбъект.ПрименитьНастройку();
	//	ЗначениеВДанныеФормы(ВосстанавливаемыйОбъект, ЭтаФорма[ЭтаФорма.ДополнительныеСвойстваФормы.ОсновнойРеквизитФормы]);
	//ИначеЕсли Элемент.Имя = "ЗаполнитьКоманднуюПанель_СтатусОтправкиДокумента" Тогда
	//	ЗаполнитьКоманднуюПанель_СтатусОтправкиДокумента(ЭтаФорма, ЭтаФорма.Элементы.ФормаКоманднаяПанель, Объект);
	//ИначеЕсли Элемент.Имя = "ПерезаполнитьСписокФайлов" Тогда
	//	РаботаСФайлами_Сервер.ПерезаполнитьСписокФайлов(ЭтаФорма, Объект.Ссылка, ЭтаФорма.Элементы.Файлы);	
	КонецЕсли;
	
КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОБЪЕКТАМИ ДЛЯ КЛИЕНТСКИХ МОДУЛЕЙ

#Область  РаботаСОбъектамиДляКлиентскихМодулей

Функция   ПолучитьСсылкуНаОбъектПоУИД(УИД, ТипМетаданного, НаименованиеМетаданного) Экспорт
	
	Перем РезультатПоиска;
	
	Если ТипМетаданного = "Документы" Тогда
		РезультатПоиска = Документы[НаименованиеМетаданного].ПолучитьСсылку(УИД);
	ИначеЕсли ТипМетаданного = "Справочники" Тогда
		РезультатПоиска = Справочники[НаименованиеМетаданного].ПолучитьСсылку(УИД);
	ИначеЕсли ТипМетаданного = "ПланыВидовХарактеристик" Тогда
		РезультатПоиска = ПланыВидовХарактеристик[НаименованиеМетаданного].ПолучитьСсылку(УИД);
	ИначеЕсли ТипМетаданного = "БизнесПроцессы" Тогда
		РезультатПоиска = БизнесПроцессы[НаименованиеМетаданного].ПолучитьСсылку(УИД);
	ИначеЕсли ТипМетаданного = "Задачи" Тогда
		РезультатПоиска = Задачи[НаименованиеМетаданного].ПолучитьСсылку(УИД);
	КонецЕсли;
	Если НЕ РезультатПоиска = Неопределено И РезультатПоиска.ПолучитьОбъект() = Неопределено Тогда
		РезультатПоиска = Неопределено;
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ НАСТРОЕК ДИНАМИЧЕСКИХ СПИСКОВ

#Область  СохранениеИВосстановлениеНастроекДинамическихСписков

Процедура ЗаполнитьЗначенияНастроекДинамическогоСписка(Список,СтруктураПараметров) Экспорт //!ЗАКОММЕНТИРОВАНА
	
	////Таким вот хитрым образом чистим отборы списка.
	//МассивУдаляемыхОтборов = Новый Массив;
	//Для Каждого Элемент Из Список.Отбор.Элементы Цикл
	//	Если Элемент.Представление <> "ПометкаУдаления" Тогда
	//		МассивУдаляемыхОтборов.Добавить(Элемент);	
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого Элемент Из МассивУдаляемыхОтборов Цикл
	//	Список.Отбор.Элементы.Удалить(Элемент);	
	//КонецЦикла;
	//
	////Остальное.
	//Список.Порядок.Элементы.Очистить();
	//Список.УсловноеОформление.Элементы.Очистить();
	//Список.Группировка.Элементы.Очистить();
	//
	////Заполним новыми значениями
	//ЗаполнитьЗначенияОтбораДинамическогоСписка(СтруктураПараметров.Отбор,Список.Отбор);	
	//ЗаполнитьЗначенияПорядкаДинамическогоСписка(СтруктураПараметров.Порядок,Список.Порядок);	
	//ЗаполнитьЗначенияУсловногоОформленияДинамическогоСписка(СтруктураПараметров.УсловноеОформление,Список.УсловноеОформление);	
	//ЗаполнитьЗначенияГруппировкиДинамическогоСписка(СтруктураПараметров.Группировка,Список.Группировка);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияОтбораДинамическогоСписка(ЭлементОтбораИсточник,ЭлементОтбораПриемник) //!ЗАКОММЕНТИРОВАНА
	
	//Для й = 0 ПО ЭлементОтбораИсточник.Элементы.Количество() - 1 Цикл // Получение по стандартному итератору не работает.
	//	//Добавим текущий поднод
	//	ЭлементИсточника = ЭлементОтбораИсточник.Элементы[й];
	//	ЭлементПриемника = ЭлементОтбораПриемник.Элементы.Добавить(ТипЗнч(ЭлементИсточника));
	//	ЗаполнитьЗначенияСвойств(ЭлементПриемника,ЭлементИсточника);
	//
	//	Если НЕ ТипЗнч(ЭлементИсточника) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
	//		//Если поднод является группой, значит необходимо обработать его рекурсивно.
	//		ЗаполнитьЗначенияОтбораДинамическогоСписка(ЭлементИсточника,ЭлементПриемника); 
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПорядкаДинамическогоСписка(ЭлементПорядкаИсточник,ЭлементПорядкаПриемник) //!ЗАКОММЕНТИРОВАНА
	
	//Для Каждого ЭлементИсточника Из ЭлементПорядкаИсточник.Элементы Цикл
	//	ЭлементПриемника = ЭлементПорядкаПриемник.Элементы.Добавить(ТипЗнч(ЭлементИсточника));
	//	ЗаполнитьЗначенияСвойств(ЭлементПриемника,ЭлементИсточника);
	//КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияГруппировкиДинамическогоСписка(ЭлементПорядкаИсточник,ЭлементПорядкаПриемник) //!ЗАКОММЕНТИРОВАНА
	
	//Для Каждого ЭлементИсточника Из ЭлементПорядкаИсточник.Элементы Цикл
	//	ЭлементПриемника = ЭлементПорядкаПриемник.Элементы.Добавить(ТипЗнч(ЭлементИсточника));
	//	ЗаполнитьЗначенияСвойств(ЭлементПриемника,ЭлементИсточника);
	//КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияУсловногоОформленияДинамическогоСписка(ЭлементУсловногоОформленияИсточник, //!ЗАКОММЕНТИРОВАНА
	ЭлементУсловногоОформленияПриемник)
	
	//Для Каждого ЭлементИсточника Из ЭлементУсловногоОформленияИсточник.Элементы Цикл
	//	ЭлементПриемника = ЭлементУсловногоОформленияПриемник.Элементы.Добавить();
	//	ЗаполнитьЗначенияСвойств(ЭлементПриемника,ЭлементИсточника);
	//	//Заполним сложные поля.
	//	ЗаполнитьЗначенияОтбораДинамическогоСписка(ЭлементИсточника.Отбор,ЭлементПриемника.Отбор);
	//	Для Каждого ЭлементОформленияИсточника Из ЭлементИсточника.Оформление.Элементы Цикл
	//		Если НЕ ЭлементОформленияИсточника.Использование Тогда Продолжить; КонецЕсли;
	//		ЭлементОформленияПриемника = ЭлементПриемника.Оформление.Элементы.Найти(ЭлементОформленияИсточника.Параметр);
	//		ЗаполнитьЗначенияСвойств(ЭлементОформленияПриемника,ЭлементОформленияИсточника);
	//	КонецЦикла;
	//	Для Каждого ЭлементПоляИсточника Из ЭлементИсточника.Поля.Элементы Цикл
	//		ЭлементПоляПриемника = ЭлементПриемника.Поля.Элементы.Добавить();	
	//		ЗаполнитьЗначенияСвойств(ЭлементПоляПриемника,ЭлементПоляИсточника);
	//	КонецЦикла;
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ ПРОИЗВОЛЬНОГО ЗАПРОСА ДИНАМИЧЕСКОГО СПИСКА

#Область  ВыполнениеПроизвольногоЗапросаДинамическогоСписка

Функция   РезультатЗапросаПоДинамическомуСписку_ДинамическийСписок(Список, ВозвращаемыеПоля = "Ссылка",
		НеУпорядочивать = Истина, Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Если ЗначениеЗаполнено(Список.ТекстЗапроса) Тогда
		ТекстЗапросаСписка = Список.ТекстЗапроса;
	Иначе
		ТекстЗапросаСписка = "ВЫБРАТЬ * ИЗ " + Список.ОсновнаяТаблица;
	КонецЕсли;
	
	ТекстОтбора = ПолучитьСтрокуОписанияЭлементаОтбораКомпоновкиДанных(Список.Отбор, "   И", Запрос, Период);
	ТекстОтбора = ?(ЗначениеЗаполнено(ТекстОтбора), Символы.ПС + "ГДЕ" + Символы.ПС +
		Прав(ТекстОтбора, СтрДлина(ТекстОтбора) - 5), "");
	ТекстУпорядочивания = "";
	
	Если НЕ НеУпорядочивать Тогда
		Для Каждого ЭлементПорядка Из Список.Порядок.Элементы Цикл
			Если ЭлементПорядка.Использование Тогда
				ТекстУпорядочивания = ТекстУпорядочивания + Символы.ПС + ", " + ЭлементПорядка.Поле	+ " ВОЗР";
			КонецЕсли;
		КонецЦикла;
			
		Если ТекстУпорядочивания <> "" Тогда
	 		ТекстУпорядочивания = Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + Сред(ТекстУпорядочивания, 3);
	 	КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    " + ВозвращаемыеПоля + "
		|ИЗ
		|    (
		|" + ТекстЗапросаСписка + "
		|) КАК Список"
			+ ТекстОтбора + ТекстУпорядочивания;
	
	Запрос.Текст = ТекстЗапроса;
	
	//В случае наличия установленных параметров - необходимо их продублировать
	Для Каждого Параметр Из Список.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(Строка(Параметр.Параметр), Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ДобавитьПериодСпискаВОтборы(Нод, Период)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;
	
	ПолеОтбораДата = Нод.ДоступныеПоляОтбора.Элементы.Найти("Дата");
	Если ПолеОтбораДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отборы = Нод.Элементы;
	Если НЕ ОбщегоНазначения_КлиентСервер_ат.ПустоеЗначение(Период.ДатаНачала) Тогда
		НовыйОтбор = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		НовыйОтбор.ПравоеЗначение = Период.ДатаНачала;
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	КонецЕсли;			
	
	Если НЕ ОбщегоНазначения_КлиентСервер_ат.ПустоеЗначение(Период.ДатаОкончания) Тогда
		НовыйОтбор = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		НовыйОтбор.ПравоеЗначение = Период.ДатаОкончания;
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	КонецЕсли;		

КонецПроцедуры

Процедура УдалитьПериодИзСпискаВОтборы(Нод, Период)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;
	
	ПолеОтбораДата = Нод.ДоступныеПоляОтбора.Элементы.Найти("Дата");
	Если ПолеОтбораДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отборы = Нод.Элементы;
	МассивУдаления = Новый Массив;
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ОбщегоНазначения_КлиентСервер_ат.ПустоеЗначение(Период.ДатаНачала)
			И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата")
			И ЭлементОтбора.ПравоеЗначение = Период.ДатаНачала
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
			Тогда
			МассивУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;	
		
		Если НЕ ОбщегоНазначения_КлиентСервер_ат.ПустоеЗначение(Период.ДатаОкончания)
			И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата")
			И ЭлементОтбора.ПравоеЗначение = Период.ДатаОкончания
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
			Тогда
			МассивУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Эл Из МассивУдаления Цикл
		Отборы.Удалить(Эл);	
	КонецЦикла;
	
КонецПроцедуры

Функция   ПолучитьСтрокуСравненияДляЗапросаИзОтбораКомпоновкиДанных(ЭлементОтбора, Запрос)
	
	ВидСравненияЭлементаОтбора = ЭлементОтбора.ВидСравнения;
	Гуид = Новый УникальныйИдентификатор;
	Гуид = СтрЗаменить(Гуид, "-", "");
	Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
		Имя = ЭлементОтбора.ЛевоеЗначение;
		ИмяПеременнойЗапроса = СтрЗаменить(ЭлементОтбора.ЛевоеЗначение, ".", "_");
		Значение = ЭлементОтбора.ПравоеЗначение;
	Иначе
		Имя = ЭлементОтбора.ПравоеЗначение;
		ИмяПеременнойЗапроса = СтрЗаменить(ЭлементОтбора.ПравоеЗначение, ".", "_");
		Значение = ЭлементОтбора.ЛевоеЗначение;
	КонецЕсли;
	
	//Вернем обратно привычную нам дату.
	Если ТипЗнч(Значение) = Тип("СтандартнаяДатаНачала") Тогда
		Значение = Значение.Дата;		
	КонецЕсли;
	
	ИмяПеременнойЗапроса = ИмяПеременнойЗапроса + "_" + Гуид;
		
	Если ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Больше Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " > &" + ИмяПеременнойЗапроса;
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " >= &" + ИмяПеременнойЗапроса;
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " В ИЕРАРХИИ(&" + ИмяПеременнойЗапроса+")";
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " В (&" + ИмяПеременнойЗапроса+")";
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " В ИЕРАРХИИ(&" + ИмяПеременнойЗапроса+")";
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Меньше Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " < &" + ИмяПеременнойЗапроса;
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " <= &" + ИмяПеременнойЗапроса;
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		ТекстОтбора = Символы.ПС + "(НЕ Список." + Имя + " В ИЕРАРХИИ(&" + ИмяПеременнойЗапроса+"))";
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		ТекстОтбора = Символы.ПС + "(НЕ Список." + Имя + " В (&" + ИмяПеременнойЗапроса+"))";
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		ТекстОтбора = Символы.ПС + "(НЕ Список." + Имя + " В ИЕРАРХИИ(&" + ИмяПеременнойЗапроса+"))";
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " <> &" + ИмяПеременнойЗапроса;
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		ТекстОтбора = Символы.ПС + "(НЕ Список." + Имя + " ПОДОБНО &" + ИмяПеременнойЗапроса+")";
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, "%" + Значение + "%");
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " = &" + ИмяПеременнойЗапроса;
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, Значение);
	ИначеЕсли ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Содержит Тогда
		ТекстОтбора = Символы.ПС + "Список." + Имя + " ПОДОБНО &" + ИмяПеременнойЗапроса;
		Запрос.УстановитьПараметр(ИмяПеременнойЗапроса, "%" + Значение + "%");
	КонецЕсли;
	
	Возврат ТекстОтбора;
	
КонецФункции

Функция   ПолучитьСтрокуОписанияЭлементаОтбораКомпоновкиДанных(Нод, СтрокаГруппировкиСравнения, Запрос, Период = Неопределено)
	
	ТекстДляВозврата = "";
	ДобавитьПериодСпискаВОтборы(Нод, Период);
	
	Для Каждого Элемент ИЗ Нод.Элементы Цикл
		
		Если НЕ Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				ТипГруппировки = "   И";
			ИначеЕсли Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				ТипГруппировки = " ИЛИ";
			Иначе
				ТипГруппировки = "И НЕ";
			КонецЕсли;
			
			ТекстГруппы = ПолучитьСтрокуОписанияЭлементаОтбораКомпоновкиДанных(Элемент, ТипГруппировки, Запрос);
			ТекстДляВозврата = ?(ЗначениеЗаполнено(ТекстГруппы),
				ТекстДляВозврата + СтрокаГруппировкиСравнения + " ( " +
				Прав(ТекстГруппы, СтрДлина(ТекстГруппы) - 5) + " ) ", ТекстДляВозврата);
			
		Иначе
			ТекстДляВозврата = ТекстДляВозврата + СтрокаГруппировкиСравнения + " "
				+ ПолучитьСтрокуСравненияДляЗапросаИзОтбораКомпоновкиДанных(Элемент, Запрос);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьПериодИзСпискаВОтборы(Нод, Период);
	
	Возврат ТекстДляВозврата;
	
КонецФункции 

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// УСТАНОВКА ФИЛЬТРОВ ДЛЯ ДИНАМИЧЕСКОГО СПИСКА

#Область  УстановкаФильтровДляДинамическогоСписка

// ЗначениеВДанныеФормы по одной 1С известной причине не работает с деревом значений.
// Пришлось писать свой обработчик.
Процедура ПоместитьДеревоЗначенийВДанныеФормы(ДеревоЗначений, ДанныеФормы) Экспорт
	
	Для Каждого Строка Из ДеревоЗначений.Строки Цикл
		
		НоваяСтрокаДанныхФормы = ДанныеФормы.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДанныхФормы,Строка);
		ПоместитьДеревоЗначенийВДанныеФормы(Строка, НоваяСтрокаДанныхФормы);
		
	КонецЦикла
	
КонецПроцедуры

Функция   ВыполнитьЗапросНаСервере(ТекстЗапроса, СтруктураПараметров, ОбходРезультата) Экспорт
	
	Параметры = ЗначениеИзСтрокиВнутр(СтруктураПараметров);
	Запрос = Новый Запрос(ТекстЗапроса);
	Для Каждого ТекущийПараметр Из Параметры Цикл
		Запрос.УстановитьПараметр(ТекущийПараметр.Ключ,ТекущийПараметр.Значение);	
	КонецЦикла;
	ДЗ = Запрос.Выполнить().Выгрузить(ОбходРезультата);
	
	Возврат ДЗ;
	
КонецФункции

Процедура ПереместитьСкрытыеПараметрыОтбораВПользовательскиеНастройки(Список, Отбор) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Отбор) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыОтбораИзНастройки = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		
		НовыйЭлементОтбора = Неопределено;
		
		Для Каждого ЭлементОтбораИзНастройки Из ЭлементыОтбораИзНастройки Цикл
			
			Если Строка(ЭлементОтбораИзНастройки.ЛевоеЗначение) = ЭлементОтбора.Ключ Тогда
				
				НовыйЭлементОтбора = ЭлементОтбораИзНастройки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НовыйЭлементОтбора = Неопределено Тогда
			
			НовыйЭлементОтбора = ЭлементыОтбораИзНастройки.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
		КонецЕсли;
		
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
		
		ЗначениеОтбора = ЭлементОтбора.Значение;
		
		Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Или ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		НовыйЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
		
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
		НовыйЭлементОтбора.ИдентификаторПользовательскойНастройки = ЭлементОтбора.Ключ;
		НовыйЭлементОтбора.ПредставлениеПользовательскойНастройки = ЭлементОтбора.Ключ;
		
	КонецЦикла;
	
	Отбор.Очистить();
	
КонецПроцедуры

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ХАКИ ДЛЯ УПРАВЛЯЕМЫХ ФОРМ

#Область  ХакиДляУправляемыхФорм

//Хак для создания документов с неуправляемыми формами из управляемой формы списка.
Функция   Сервер_Создать(Список) Экспорт
	
	Если НЕ Список.ОсновнаяТаблица = "" Тогда
		Метаданное = Метаданные.НайтиПоПолномуИмени(Список.ОсновнаяТаблица);
	Иначе
		Метаданное = ПолучитьОбъектМетаданныхСсылкиИзЗапроса(Список.ТекстЗапроса);
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит( Метаданное) Тогда
		Возврат Документы[Метаданное.Имя].СоздатьДокумент();
	ИначеЕсли Метаданные.Справочники.Содержит(Метаданное) Тогда
		Возврат Справочники[Метаданное.Имя].СоздатьЭлемент();
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(Метаданное) Тогда
		Возврат РегистрыСведений[Метаданное.Имя].СоздатьМенеджерЗаписи();
	КонецЕсли;
	
КонецФункции

//Хак для открытия формы любого переданного в функцию объекта. Возвращает полное имя объекта метаданных.
Функция   ПолучитьПолноеИмяМетаданногоОбъекта(Объект) Экспорт
	
	Возврат Объект.Метаданные().ПолноеИмя();
	
КонецФункции

//Хак для проверки ЭтоГруппа
Функция   Справочники_ЭтоГруппа(ЭлементСправочника) Экспорт
	
	Возврат ЭлементСправочника.ЭтоГруппа;
	
КонецФункции

Функция   ПолучитьТипыРеквизитаМетаданного(ТипМетаданного, КлассМетаданного, Реквизит) Экспорт
	
	Возврат Метаданные[ТипМетаданного][КлассМетаданного].Реквизиты[Реквизит].Тип.Типы();
	
КонецФункции

Функция   ЗначенияПеречисления(ИмяПеречисления) Экспорт
	
	ВозврСтруктура = Новый Структура;
	Метаданное = Метаданные.Перечисления[ИмяПеречисления];
	
	Для Каждого Значение Из Метаданное.ЗначенияПеречисления Цикл
		ВозврСтруктура.Вставить(Значение.Имя,Перечисления[ИмяПеречисления][Значение.Имя]);	
	КонецЦикла;
	
	Возврат ВозврСтруктура;
	
КонецФункции

Функция   ЗначенияПредопределенныхЭлементовСправочника(ИмяСправочника) Экспорт //!ЗАКОММЕНТИРОВАНА
	
	//СправочникМенеджер = Справочники[ИмяСправочника];
	//МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	//
	//Для Каждого Элемент Из МетаданныеСправочника.Предопределенные Цикл
	//	
	//КонецЦикла;
	
КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ЗАПИСЬ ОБЪЕКТА В ФОРМЕ

#Область  ЗаписьОбъектаВФорме

// Функция спрашивает пользователя записать ли объект, или нет, если он новый/модифицированный.
// Основана на смеси из 3х типовых.
//
// Параметры
//  ФормаОбъектаИлиОбъект - Форма объекта или объект
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция   ЗаписатьНовыйИлиМодифицированныйОбъектВФорме(ЭтаФорма) Экспорт //!ЗАКОММЕНТИРОВАНА
	
	//Результат = Ложь;
	//ЭтотОбъект = ЭтаФорма.ОбработчикУниверсальныхДействий_Сервер(Новый Структура("Имя", "ЭтотОбъект"));
	//
	//ЭтоДокумент = Метаданные.Документы.Содержит(ЭтотОбъект.Метаданные());
	//Проведен = ЭтоДокумент И ЭтотОбъект.Проведен;
	//
	//Попытка
	//	Если ЭтоДокумент Тогда
	//		Проведение = ?(Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	//		Результат = ЭтаФорма.ЗаписатьВФорме(Проведение);
	//	Иначе
	//		Результат = ЭтаФорма.ЗаписатьВФорме();
	//	КонецЕсли;
	//Исключение
	//	Сообщение(мюСтроки.УдалитьСлужебноеИзСообщенияОбОшибке(ОписаниеОшибки()),СтатусСообщения.Важное,"Автозапись объекта");
	//	Результат = Ложь;
	//КонецПопытки;
	//
	//Возврат Результат;

КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// ПРЕОБРАЗОВАНИЕ ССЫЛКИ БЕЗ РЕКВИЗИТОВ В ЭМУЛЯТОР ДАННЫЕ ФОРМЫ СТРУКТУРА

#Область  ПреобразованиеСсылкиБезРеквизитовВЭмуляторДанныеФормыСтруктура

//Преобразует массив ссылок в массив ДанныеФормыСтруктура
Функция   ДанныеФормыСтруктураИзСсылки_МассивСсылок(МассивСсылок) Экспорт
	
	ВозврСоответствие = Новый Соответствие;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		Если НЕ ВозврСоответствие.Получить(Ссылка) = Неопределено Тогда Продолжить; КонецЕсли;
		ВозврСоответствие.Вставить(Ссылка, ДанныеФормыСтруктураИзСсылки(Ссылка));
	КонецЦикла;
	
	Возврат ВозврСоответствие;
	
КонецФункции

//Преобразует ссылку в эмулятор ДанныеФормыСтруктура со всеми реквизитами.
Функция   ДанныеФормыСтруктураИзСсылки(Ссылка) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		Эмулятор = ДанныеФормыСтруктураИзСсылки_Справочник(Ссылка);
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		Эмулятор = ДанныеФормыСтруктураИзСсылки_Документ(Ссылка);
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда
		Эмулятор = ДанныеФормыСтруктураИзСсылки_Задача(Ссылка);
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		МассивРеквизитов = Новый Массив;
		ЭмуляторТабличнойЧасти = Новый Массив;
		
		//Заполним массив реквизитов. Для каждой строки табличной части будем брать значения из этого массива.
		Для Каждого РеквизитТабличнойЧасти ИЗ ТабличнаяЧасть.Реквизиты	Цикл 
			МассивРеквизитов.Добавить(РеквизитТабличнойЧасти.Имя);
		КонецЦикла;
		
		//Заполним строки.
		Для Каждого Строка Из Ссылка[ИмяТабличнойЧасти] Цикл
			НоваяПсевдострока = Новый Структура;
			Для Каждого Колонка Из МассивРеквизитов Цикл
				НоваяПсевдострока.Вставить(Колонка, Строка[Колонка]); 		
			КонецЦикла;
			ЭмуляторТабличнойЧасти.Добавить(НоваяПсевдострока);
		КонецЦикла;
		
		//Установим значение реквизита.
		Эмулятор.Вставить(ИмяТабличнойЧасти, ЭмуляторТабличнойЧасти);
	КонецЦикла;
	
	Возврат Эмулятор;
	
КонецФункции	

//Преобразует ссылку справочника в ДанныеФормыСтруктура
Функция   ДанныеФормыСтруктураИзСсылки_Справочник(Ссылка)
	
	Эмулятор = Новый Структура("Ссылка", Ссылка);
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Эмулятор.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Эмулятор.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	//Для хранилищ значений сразу подготовим их для получений.
	Если Эмулятор.Свойство("Хранилище") Тогда
		Эмулятор.Вставить("Хранилище_Значение", ПоместитьВоВременноеХранилище(Эмулятор.Хранилище.Получить()));
	КонецЕсли;
	
	Возврат Эмулятор;
	
КонецФункции

//Преобразует ссылку документа в ДанныеФормыСтруктура
Функция   ДанныеФормыСтруктураИзСсылки_Документ(Ссылка)
	
	Эмулятор = Новый Структура("Ссылка", Ссылка);
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Эмулятор.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Эмулятор.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат Эмулятор;
	
КонецФункции

//Преобразует ссылку задачи в ДанныеФормыСтруктура
Функция   ДанныеФормыСтруктураИзСсылки_Задача(Ссылка)
	
	Эмулятор = Новый Структура("Ссылка", Ссылка);
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Эмулятор.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Эмулятор.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.РеквизитыАдресации Цикл
		Эмулятор.Вставить(Реквизит.Имя, Ссылка[Реквизит.Имя]);
	КонецЦикла;
	
	Возврат Эмулятор;
	
КонецФункции

#КонецОбласти 


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕКВИЗИТАМИ ФОРМЫ И НЕСЕРИАЛИЗУЕМЫМИ ЗНАЧЕНИЯМИ

#Область  РаботаСРеквизитамиФормыИНесериализуемымиЗначениями

Процедура ПереместитьТаблицуЗначенийВКоллекцию(Коллекция, Таблица) Экспорт
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		НовыйЭлементКоллекции = Коллекция.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлементКоллекции, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Функция   ТаблицуЗначенийВСериализуемую(ТаблицаЗначений) Экспорт
	
	ПсевдоТаблица = Новый Массив;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		ПсевдоСтрока = Новый Структура;
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			ПсевдоСтрока.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		ПсевдоТаблица.Добавить(ПсевдоСтрока);
	КонецЦикла;
	
	Возврат ПсевдоТаблица;
	
КонецФункции

Функция   ПсевдотаблицуВТаблицуЗначений(Псевдотаблица) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	// Заполним колонки.
	Если НЕ Псевдотаблица.Количество() = 0 Тогда
		Для Каждого КлючИЗначение Из Псевдотаблица[0] Цикл
			ТаблицаЗначений.Колонки.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	// Перенесем значения
	Для Каждого Псевдострока Из Псевдотаблица Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Псевдострока); 
	КонецЦикла;

	Возврат ТаблицаЗначений;
	
КонецФункции

#КонецОбласти 


Процедура ОтобразитьСообщенияПользователю() Экспорт
	
	Для Каждого Сообщение Из ПолучитьСообщенияПользователю(Ложь) Цикл
		
		Сообщить(">>> " + Сообщение.Текст);
		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры
