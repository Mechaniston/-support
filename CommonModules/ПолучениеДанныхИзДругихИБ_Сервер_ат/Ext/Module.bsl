
Функция   ПолучитьПользователей()
	
	Объект = Константы.ИсточникСинхронизацииПользователей_ат.Получить();
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("Наименование",	 Объект.Наименование);
	СтруктураПодключения.Вставить("ФайловыйРежим",	 Объект.ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ",		 Объект.КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера",		 Объект.ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере",	 Объект.ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь",	 Объект.ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль",			 Объект.ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", Объект.ВерсияПлатформыИнформационнойБазыДляПодключения); 

	Соединение = ПодключениеКИБ_ат.ПодключитьсяКИнформационнойБазе(СтруктураПодключения);
	
	//Получим список пользователей сторонней базы
	Запрос = Соединение.NewObject("Запрос");
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Наименование,
	|	Пользователи.Код,
	|	Пользователи.ПометкаУдаления,
	|  	Пользователи.ФизЛицо.SA_ДанныеСотрудника.(
	|		Организация.Наименование КАК Организация,
	|		Подразделение.Наименование КАК Подразделение
	|	) КАК ТаблицаПодразделений
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ЭтоГруппа = Ложь";
	
	ВыборкаИБ = Запрос.Выполнить().Выгрузить();
	
	//Получим список пользователей текущей базы
	ЗапросТекИБ = Новый Запрос;
	ЗапросТекИБ.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Наименование,
		|	Пользователи.ИдентификаторПользователяИБ,
		|	Пользователи.ПометкаУдаления,
		|	Пользователи.Организация.(
		|		Организация.Наименование КАК Организация,
		|		Подразделение.Наименование КАК Подразделение
		|	) КАК ТаблицаПодразделений
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи";

	ВыборкаТекИБ = ЗапросТекИБ.Выполнить().Выбрать();
	
	Для Каждого Выборка Из ВыборкаИБ Цикл
		
		ВыборкаТекИБ.Сбросить();
		
		ПользовательИБВнеш = Соединение.ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Выборка.Код));
		ПользовательТекИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Выборка.Код));
		
		Если ПользовательИБВнеш = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПользовательТекИБ = Неопределено Тогда
			
			ПользовательТекИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			
			ПользовательТекИБ.Имя = ПользовательИБВнеш.Имя;
			ПользовательТекИБ.ПолноеИмя = ПользовательИБВнеш.ПолноеИмя; 
			ПользовательТекИБ.АутентификацияСтандартная = ПользовательИБВнеш.АутентификацияСтандартная;
			ПользовательТекИБ.АутентификацияОС = ПользовательИБВнеш.АутентификацияОС;
			ПользовательТекИБ.ЗапрещеноИзменятьПароль = ПользовательИБВнеш.ЗапрещеноИзменятьПароль;
			ПользовательТекИБ.Пароль = "999999999";
			ПользовательТекИБ.ПользовательОС = ПользовательИБВнеш.ПользовательОС;
			
			ПользовательТекИБ.Роли.Добавить(Метаданные.Роли.Найти("БазовыеПрава"));
			ПользовательТекИБ.Роли.Добавить(Метаданные.Роли.Найти("КлиентСотрудник_ат"));
			
			ПользовательТекИБ.Записать();
			
		КонецЕсли;
		
		Фильтр = Новый Структура("ИдентификаторПользователяИБ", ПользовательТекИБ.УникальныйИдентификатор);
		
		Если  ВыборкаТекИБ.НайтиСледующий(Фильтр) Тогда // Элемент уже существует, надо проверить изменения
			
			ТаблицаПодразделений = ВыборкаТекИБ.ТаблицаПодразделений.Выгрузить();
			РазличияПодразделений = 0;
			
			Для Каждого Строка Из Выборка.ТаблицаПодразделений Цикл  
				
				ФильтрТаблицы = Новый Структура("Организация, Подразделение", Строка.Организация, Строка.Подразделение);
				
				Если ТаблицаПодразделений.НайтиСтроки(ФильтрТаблицы).Количество() = 0 Тогда
					РазличияПодразделений = РазличияПодразделений + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			//Хитрый случай очистки подразделений в Класиксе
			Если Выборка.ТаблицаПодразделений.Количество() = 0 И НЕ ТаблицаПодразделений.Количество() = 0 Тогда
				РазличияПодразделений = 100500;
			КонецЕсли;
			
			Если НЕ ВыборкаТекИБ.Наименование = Выборка.Наименование ИЛИ НЕ ВыборкаТекИБ.ПометкаУдаления = Выборка.ПометкаУдаления ИЛИ РазличияПодразделений > 0 Тогда
				
				РедактируемыйЭлемент = ВыборкаТекИБ.Ссылка.ПолучитьОбъект();
				
				РедактируемыйЭлемент.Наименование = Выборка.Наименование;
				РедактируемыйЭлемент.ПометкаУдаления = Выборка.ПометкаУдаления;
				
				РедактируемыйЭлемент.Организация.Очистить();
				
				Для Каждого Строка Из Выборка.ТаблицаПодразделений Цикл
					
					Орг = Справочники.Контрагенты_ат.НайтиПоНаименованию(Строка.Организация);
					Если НЕ ЗначениеЗаполнено(Орг) Тогда
						Орг = Справочники.Контрагенты_ат.СоздатьЭлемент();
						Орг.Наименование = Строка.Организация;
						Орг.Записать();
					КонецЕсли;
					
					Подр = Справочники.ПодразделенияКлиентов_ат.НайтиПоНаименованию(Строка.Подразделение, , ,Орг.Ссылка);
					Если НЕ ЗначениеЗаполнено(Подр) Тогда
						Подр = Справочники.ПодразделенияКлиентов_ат.СоздатьЭлемент();
						Подр.Наименование = Строка.Подразделение;
						Подр.Владелец = Орг.Ссылка;
						Подр.Записать();
					КонецЕсли;
					
					Стр = РедактируемыйЭлемент.Организация.Добавить();
					Стр.Организация = Орг.Ссылка;
					Стр.Подразделение = Подр.Ссылка;
					
				КонецЦикла;
				
				РедактируемыйЭлемент.Записать();
			КонецЕсли;
			
		Иначе //Создадим новый элемент справочника
			
			Если НЕ Выборка.ПометкаУдаления Тогда
				
				НовПольз = Справочники.Пользователи.СоздатьЭлемент();
				НовПольз.ИдентификаторПользователяИБ = ПользовательТекИБ.УникальныйИдентификатор;
				НовПольз.Наименование = Выборка.Наименование;
				
				Для Каждого Строка Из Выборка.ТаблицаПодразделений Цикл
					
					Орг = Справочники.Контрагенты_ат.НайтиПоНаименованию(Строка.Организация);
					Если НЕ ЗначениеЗаполнено(Орг) Тогда
						Орг = Справочники.Контрагенты_ат.СоздатьЭлемент();
						Орг.Наименование = Строка.Организация;
						Орг.Записать();
					КонецЕсли;
					
					Подр = Справочники.ПодразделенияКлиентов_ат.НайтиПоНаименованию(Строка.Подразделение, , ,Орг.Ссылка);
					Если НЕ ЗначениеЗаполнено(Подр) Тогда
						Подр = Справочники.ПодразделенияКлиентов_ат.СоздатьЭлемент();
						Подр.Наименование = Строка.Подразделение;
						Подр.Владелец = Орг.Ссылка;
						Подр.Записать();
					КонецЕсли;
					
					Стр = НовПольз.Организация.Добавить();
					Стр.Организация = Орг.Ссылка;
					Стр.Подразделение = Подр.Ссылка;
					
				КонецЦикла;
				
				НовПольз.ОбменДанными.Загрузка = Истина;
				ПараметрыОбработкиПользователяИБ = Неопределено;
				ПользователиСлужебный.НачатьОбработкуПользователяИБ(НовПольз, ПараметрыОбработкиПользователяИБ);
				НовПольз.Записать();
				ПользователиСлужебный.ОбновитьСоставыГруппПользователей(Справочники.ГруппыПользователей.ВсеПользователи, НовПольз.Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура СинхронизацияПользователей() Экспорт
	
	//ПолучитьПользователей();
	
КонецПроцедуры
