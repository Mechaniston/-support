
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПользовательФильтраПерсональные = Пользователи.ТекущийПользователь();
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоЗаданию", Ложь);
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("Задание", Неопределено);
	
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоЗаявке", Истина);
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("Заявка", Неопределено);
	
	УстановитьФильтрыКакГлавноеНаСервере();
	Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Истина;
	
	ВнутреннегоИспользования_ВызовСервера_ат.УстановитьОтборПоКлиентуДляОтбора(ЭтаФорма, "СписокЗаявок");
	
	Если ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава() Тогда
		
		Элементы.СоздатьПодчиненноеЗадание.ТолькоВоВсехДействиях = Истина;
		Элементы.СоздатьПодчиненнуюЗаявку.ТолькоВоВсехДействиях = Ложь;
		
	Иначе
		
		Элементы.СоздатьПодчиненноеЗадание.ТолькоВоВсехДействиях = Ложь;
		Элементы.СоздатьПодчиненнуюЗаявку.ТолькоВоВсехДействиях = Ложь;
		
		Элементы.СписокЗаявокДатаСтатуса.Формат = "ДФ=dd.MM.yy";
		
	КонецЕсли;
	
	УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
		СписокЗаявок, "ПометкаУдаления",, Ложь, Истина, "Скрыть помеченные на удаление",, СписокЗаявок.Отбор, 1);
	
	УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
		СписокЗаданий, "ПометкаУдаления",, Ложь, Истина, "Скрыть помеченные на удаление",, СписокЗаданий.Отбор, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КлиентДляОтбораИзменен" И НЕ Элементы.ОтборЗаявокПоЗаданиям.Пометка Тогда
		
		ВнутреннегоИспользования_Клиент_ат.ИзменитьОтборПоКлиентуДляОтбора(СписокЗаявок, , Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Заявки

&НаКлиенте
Процедура СписокЗаявокПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ОтборЗаявокПоЗаданиям.Пометка Тогда
		
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("Заявка", Элемент.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокЗаявокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	//Если Элементы.ОтборПоЗаданиям.Пометка Тогда //???
		
		УправляемыеФормы_КлиентСервер_ат.ВосстановитьОтборСписка(СписокЗаданий, Настройки, "РодительскаяЗаявка_Клиент"); //???
		
	//Иначе
		
		УправляемыеФормы_КлиентСервер_ат.ВосстановитьОтборСписка(СписокЗаявок, Настройки, "Клиент");
		
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ИзменитьПриоритетЗаявки(ПараметрыПеретаскивания.Значение, Строка);
	
	Элемент.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Задания

&НаКлиенте
Процедура СписокЗаданийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОтборЗаявокПоЗаданиям.Пометка Тогда
		
		СписокЗаявок.Параметры.УстановитьЗначениеПараметра("Задание", Элемент.ТекущаяСтрока);
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		КомментарийЗадания = Элемент.ТекущиеДанные.Комментарий;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьОтборПоАктуальным(Команда)
	
	УстановитьОтборПоАктуальнымНаСервере(НЕ Элементы.ОтборПоАктуальным.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПользователю(Команда)
	
	УстановитьОтборПоПользователюНаСервере(ЭтаФорма, НЕ Элементы.ОтборПоПользователю.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоПроектам(Команда)
	
	Если Элементы.ОтборПоПроектам.Пометка Тогда
		
		ПослеВыбораПроектов(Неопределено, Неопределено);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораПроектов", ЭтаФорма);
		
		ОткрытьФорму("Справочник.Проекты_ат.Форма.ФормаГрупповогоВыбора", , ЭтаФорма, , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаявокПоЗаданиям(Команда)
	
	Элементы.ОтборЗаявокПоЗаданиям.Пометка = НЕ Элементы.ОтборЗаявокПоЗаданиям.Пометка;
	
	ОтборЗаявокПоЗаданиямНаСервере();
	
	//??? не очень понятно, зачем сделаны две похожие функции с немного отличным друг от друга алгоритмом,
	// что приводит к такому странному использованию - для отклоючения отбора с сервера вызывается _клиентская_
	// функция, которая, в отличие от серверной имеет особенность - при отсутствии значения отбора он снимает
	//Если Элементы.ПереключитьОтборЗЗ.Пометка Тогда
	//	
	//	ВнутреннегоИспользования_Клиент_ат.ИзменитьОтборПоКлиентуДляОтбора(СписокЗаявок, , Неопределено);
	//	
	//Иначе
	//	
	//	ВнутреннегоИспользования_ВызовСервера_ат.УстановитьОтборПоКлиентуДляОтбора(ЭтаФорма, "СписокЗаявок");
	//	
	//КонецЕсли;
	//
	// => будем просто накладывать отбор сразу на оба списка
	//
КонецПроцедуры

&НаСервере
Процедура ОтборЗаявокПоЗаданиямНаСервере()
	
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоЗаявке", НЕ Элементы.ОтборЗаявокПоЗаданиям.Пометка);
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("Заявка", Элементы.СписокЗаявок.ТекущаяСтрока);
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоЗаданию", Элементы.ОтборЗаявокПоЗаданиям.Пометка);
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("Задание", Элементы.СписокЗаданий.ТекущаяСтрока);
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРПЗ(Команда)
	
	ОткрытьФорму("Обработка.ПланированиеЗаданий_ат.Форма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборПоАктуальнымНаСервере(ИспользоватьОтбор)
	
	//Элементы.ОтборПоАктуальным.Пометка = ИспользоватьОтбор;
	//
	//МенеджерПроектовИлиПолныеПрава = ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава();
	//
	//АктуальныеПроекты = Планирование_Сервер_ат.ПолучитьМассивАктуальныхПроектов(ИспользоватьОтбор, МенеджерПроектовИлиПолныеПрава);
	//
	//СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ТолькоАктуальные", ИспользоватьОтбор);
	//СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоАктуальнымПроектам", ИспользоватьОтбор);
	//СписокЗаявок.Параметры.УстановитьЗначениеПараметра("АктуальныеПроекты", АктуальныеПроекты);
	//
	//СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоАктуальнымПроектам", ИспользоватьОтбор);
	//СписокЗаданий.Параметры.УстановитьЗначениеПараметра("АктуальныеПроекты", АктуальныеПроекты);
	//
	//УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
	//	СписокЗаявок, "Скрыть подчинённые", ИспользоватьОтбор);
	//УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
	//	СписокЗаявок, "Скрыть завершённые", ИспользоватьОтбор);
	//
	//УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
	//	СписокЗаданий, "Скрыть подчинённые", ИспользоватьОтбор);
	//УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
	//	СписокЗаданий, "Скрыть завершённые", ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста  
Процедура УстановитьОтборПоПользователюНаСервере(Форма, ИспользоватьОтбор)
	
	//Форма.Элементы.ОтборПоПользователю.Пометка = ИспользоватьОтбор;
	//
	//Форма.СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПользователю", ИспользоватьОтбор);
	//Форма.СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПользователю", ИспользоватьОтбор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПроектов(Результат, ПередаваемыеПараметры) Экспорт
	
	//TODO - переделать на УстановитьЭлементОтбораДинамическогоСписка и Проект / РодительскаяЗаявка.Проект
	Если Результат <> Неопределено И Результат.Проекты.Количество() > 0 Тогда
		
		СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПроектам", Истина);
		СписокЗаявок.Параметры.УстановитьЗначениеПараметра("Проекты", Результат.Проекты);
		
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПроектам", Истина);
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("Проекты", Результат.Проекты);
		
		Элементы.ОтборПоПроектам.Пометка = Истина;
		Элементы.ОтборПоПроектам.РасширеннаяПодсказка.Заголовок = Результат.Представление;
		
	Иначе
		
		СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПроектам", Ложь);
		
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПроектам", Ложь);
		
		Элементы.ОтборПоПроектам.Пометка = Ложь;
		Элементы.ОтборПоПроектам.РасширеннаяПодсказка.Заголовок = "Установить отбор по проектам";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПриоритетЗаявки(Заявка, ВыбраннаяПозиция)
	
	Планирование_Сервер_ат.ИзменитьПриоритетЗаявки(Заявка, ВыбраннаяПозиция);
	
КонецПроцедуры

#КонецОбласти

#Область  Фильтры

&НаКлиенте
Процедура УстановитьФильтрыКакГлавное(Команда)
	
	УстановитьФильтрыКакГлавноеНаСервере();
	
	Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Не Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрыКакГлавноеНаСервере()
	
	Если Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка Тогда
		
		//+ аналог СброситьВсеФильтры(Команда)
		
		Элементы.ФормаФильтр_Актуальные.Пометка = Ложь;
		Элементы.ФормаФильтр_Отложенные.Пометка = Ложь;
		Элементы.ФормаФильтр_Архивные.Пометка = Ложь;
		
		Элементы.ФормаФильтр_ПерсональныеМои.Пометка = Ложь;
		Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка = Ложь;
		
		Элементы.ФормаФильтр_Планирование.Пометка = Ложь;
		Элементы.ФормаФильтр_Выполнение.Пометка = Ложь;
		Элементы.ФормаФильтр_Ожидание.Пометка = Ложь;
		
		//- аналог СброситьВсеФильтры(Команда)
		
	Иначе
		
		Руководитель = ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава();
		
		Элементы.ФормаФильтр_Актуальные.Пометка = Истина;
		Элементы.ФормаФильтр_Отложенные.Пометка = Ложь;
		Элементы.ФормаФильтр_Архивные.Пометка = Ложь;
		Элементы.ФормаФильтр_ПерсональныеМои.Пометка = Не Руководитель;
		Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка = Ложь;
		
		Элементы.ФормаФильтр_Планирование.Пометка = Руководитель;
		Элементы.ФормаФильтр_Выполнение.Пометка = РольДоступна("ОрганизацияИсполнитель_ат");
		Элементы.ФормаФильтр_Ожидание.Пометка = Ложь; //ВнутреннегоИспользования_ВызовСервера_ат.СотрудникКлиента();
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
	//TODO - добавить фильтры по проектам, клиентам, продуктам
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеФильтры(Команда)
	
	Элементы.ФормаФильтр_Актуальные.Пометка = Ложь;
	Элементы.ФормаФильтр_Отложенные.Пометка = Ложь;
	Элементы.ФормаФильтр_Архивные.Пометка = Ложь;
	
	Элементы.ФормаФильтр_ПерсональныеМои.Пометка = Ложь;
	Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка = Ложь;
	
	Элементы.ФормаФильтр_Планирование.Пометка = Ложь;
	Элементы.ФормаФильтр_Выполнение.Пометка = Ложь;
	Элементы.ФормаФильтр_Ожидание.Пометка = Ложь;
	
	//TODO: убирать по проектам, клиентам, продуктам
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ПользовательФильтраПерсональные", ПользовательФильтраПерсональные);
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ПользовательФильтраПерсональные", ПользовательФильтраПерсональные);
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("СкрытьПодчиненные", Ложь);
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("СкрытьПодчиненные", Ложь);
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ТолькоАктуальные", Ложь);
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ТолькоАктуальные", Ложь);
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПользователю", Ложь);
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПользователю", Ложь);
	
	УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
		СписокЗаявок, "Статус", Ложь,, 1);
		
	УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
		СписокЗаданий, "Статус", Ложь,, 1);
		
	УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
		СписокЗаданий, "РодительскаяЗаявка_Проект", Ложь,, 1);
	
	УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
		СписокЗаданий, "РодительскаяЗаявка_Клиент", Ложь,, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_Актуальные(Команда)
	
	Элементы.ФормаФильтр_Актуальные.Пометка = НЕ Элементы.ФормаФильтр_Актуальные.Пометка;
	
	Если Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка Тогда
		
		Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ФормаФильтр_Актуальные.Пометка Тогда
		
		Элементы.ФормаФильтр_Архивные.Пометка = Ложь;
		Элементы.ФормаФильтр_Отложенные.Пометка = Ложь;
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_Архивные(Команда)
	
	Элементы.ФормаФильтр_Архивные.Пометка = Не Элементы.ФормаФильтр_Архивные.Пометка;
	
	Если Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка Тогда
		
		Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Ложь;
		Элементы.ФормаФильтр_Планирование.Пометка = Ложь;
		Элементы.ФормаФильтр_Выполнение.Пометка = Ложь;
		Элементы.ФормаФильтр_Ожидание.Пометка = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ФормаФильтр_Архивные.Пометка И Элементы.ФормаФильтр_Актуальные.Пометка Тогда
		
		Элементы.ФормаФильтр_Актуальные.Пометка = Ложь;
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_Отложенные(Команда)
	
	Элементы.ФормаФильтр_Отложенные.Пометка = Не Элементы.ФормаФильтр_Отложенные.Пометка;
	
	Если Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка Тогда
		
		Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Ложь;
		Элементы.ФормаФильтр_Планирование.Пометка = Ложь;
		Элементы.ФормаФильтр_Выполнение.Пометка = Ложь;
		Элементы.ФормаФильтр_Ожидание.Пометка = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ФормаФильтр_Отложенные.Пометка И Элементы.ФормаФильтр_Актуальные.Пометка Тогда
		
		Элементы.ФормаФильтр_Актуальные.Пометка = Ложь;
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
	УстановитьДоступностьИЗаголовкиФильтров();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьИЗаголовкиФильтров()
	
	Элементы.ФормаФильтр_Отложенные.Доступность =
		Не Элементы.ФормаФильтр_Планирование.Пометка
		Или (Не Элементы.ФормаФильтр_Планирование.Пометка
			И Не Элементы.ФормаФильтр_Выполнение.Пометка
			И Не Элементы.ФормаФильтр_Ожидание.Пометка);
	
	СоответствиеФильтровИКолва = ПолучитьСтруктуруКолваЗаявокПоФильтрам();
	
	Для Каждого ФильтрИКолво Из СоответствиеФильтровИКолва Цикл
		
		ЗаголовокФильтр = Элементы[ФильтрИКолво.Ключ].Заголовок;
		
		ПозицияКолва = СтрНайти(ЗаголовокФильтр, "(");
		Если ПозицияКолва > 0 Тогда
			ЗаголовокФильтр = Лев(ЗаголовокФильтр, ПозицияКолва - 2);
		КонецЕсли;
		
		Элементы[ФильтрИКолво.Ключ].Заголовок = ЗаголовокФильтр + " (" + ФильтрИКолво.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьСтруктуруКолваЗаявокПоФильтрам()
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка) КАК Колво,
	|	""Архивные"" КАК Фильтр
	|ИЗ
	|	Документ.Заявка_ат КАК ДокументЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаявок_ат КАК СвойстваЗаявок
	|			ПО ДокументЗаявка.Ссылка = СвойстваЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовЗаявокСрезПоследних
	|			ПО ДокументЗаявка.Ссылка = ИсторияСтатусовЗаявокСрезПоследних.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовРодительскихЗаявок
	|			ПО ДокументЗаявка.РодительскаяЗаявка.Ссылка = ИсторияСтатусовРодительскихЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектовЗаданий
	|			ПО ДокументЗаявка.Ссылка = СвязиОбъектовЗаданий.Предок
	|				И СвязиОбъектовЗаданий.Объект ССЫЛКА Документ.Задание_ат
	|ГДЕ
	|	(ИсторияСтатусовЗаявокСрезПоследних.Статус В (&АрхивныеСтатусы)
	|		ИЛИ ДокументЗаявка.Проект.Архивный)
	|	
	|	И ДокументЗаявка.Проект В (&Проекты)
	|	
	|	И ВЫБОР
	|		КОГДА &ОтбиратьПоПользователю
	|			ТОГДА ДокументЗаявка.Автор = &ТекущийПользователь
	|				ИЛИ ДокументЗаявка.Сотрудник = &ТекущийПользователь
	|				ИЛИ ДокументЗаявка.Ответственный = &ТекущийПользователь
	|				ИЛИ ДокументЗаявка.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ИЛИ ДокументЗаявка.Проект.Ответственный = &ТекущийПользователь
	|				ИЛИ 1 В // отбор по Кураторам Проектов
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						1
	|					ИЗ
	|						Справочник.Проекты_ат.Кураторы КАК ПроектКураторы
	|					ГДЕ
	|						ПроектКураторы.Ссылка = ДокументЗаявка.Проект
	|						И ПроектКураторы.Куратор = &ТекущийПользователь)
	|				ИЛИ 1 В // отбор по Заданиям
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						1
	|					ИЗ
	|						РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	|								ПО СвойстваЗаданий_ат.Ссылка = СвязиОбъектов_ат.Объект
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(, ) КАК ИсторияСтатусовЗаданий_атСрезПоследних
	|								ПО ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка = СвязиОбъектов_ат.Объект
	|					ГДЕ
	|						СвязиОбъектов_ат.Предок = ДокументЗаявка.Ссылка
	|						И СвязиОбъектов_ат.Объект ССЫЛКА Документ.Задание_ат
	|						И НЕ СвязиОбъектов_ат.Объект.ПометкаУдаления
	|						И (СвойстваЗаданий_ат.Исполнитель = &ТекущийПользователь
	|							ИЛИ СвязиОбъектов_ат.Объект.Автор = &ТекущийПользователь)
	|						И ВЫБОР
	|							КОГДА &ТолькоАктуальные
	|								ТОГДА ИсторияСтатусовЗаданий_атСрезПоследних.Статус ЕСТЬ NULL 
	|									ИЛИ (НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Выполнено)
	|										И НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Прервано)
	|										И НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено))
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|					)
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	""Отложенные""
	|ИЗ
	|	Документ.Заявка_ат КАК ДокументЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаявок_ат КАК СвойстваЗаявок
	|			ПО ДокументЗаявка.Ссылка = СвойстваЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовЗаявокСрезПоследних
	|			ПО ДокументЗаявка.Ссылка = ИсторияСтатусовЗаявокСрезПоследних.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовРодительскихЗаявок
	|			ПО ДокументЗаявка.РодительскаяЗаявка.Ссылка = ИсторияСтатусовРодительскихЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектовЗаданий
	|			ПО ДокументЗаявка.Ссылка = СвязиОбъектовЗаданий.Предок
	|				И СвязиОбъектовЗаданий.Объект ССЫЛКА Документ.Задание_ат
	|ГДЕ
	|	((НЕ ДокументЗаявка.РодительскаяЗаявка = ЗНАЧЕНИЕ(Документ.Заявка_ат.ПустаяСсылка)
	|		И НЕ ДокументЗаявка.РодительскаяЗаявка.ПометкаУдаления
	|		И НЕ ИсторияСтатусовРодительскихЗаявок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Закрыта)
	|		)
	|	ИЛИ ДокументЗаявка.Проект.БудущихПериодов
	|	)
	|	
	|	И ДокументЗаявка.Проект В (&Проекты)
	|	
	|	И ВЫБОР
	|		КОГДА &ОтбиратьПоПользователю
	|			ТОГДА ДокументЗаявка.Автор = &ТекущийПользователь
	|				ИЛИ ДокументЗаявка.Сотрудник = &ТекущийПользователь
	|				ИЛИ ДокументЗаявка.Ответственный = &ТекущийПользователь
	|				ИЛИ ДокументЗаявка.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ИЛИ ДокументЗаявка.Проект.Ответственный = &ТекущийПользователь
	|				ИЛИ 1 В // отбор по Кураторам Проектов
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						1
	|					ИЗ
	|						Справочник.Проекты_ат.Кураторы КАК ПроектКураторы
	|					ГДЕ
	|						ПроектКураторы.Ссылка = ДокументЗаявка.Проект
	|						И ПроектКураторы.Куратор = &ТекущийПользователь)
	|				ИЛИ 1 В // отбор по Заданиям
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						1
	|					ИЗ
	|						РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	|								ПО СвойстваЗаданий_ат.Ссылка = СвязиОбъектов_ат.Объект
	|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(, ) КАК ИсторияСтатусовЗаданий_атСрезПоследних
	|								ПО ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка = СвязиОбъектов_ат.Объект
	|					ГДЕ
	|						СвязиОбъектов_ат.Предок = ДокументЗаявка.Ссылка
	|						И СвязиОбъектов_ат.Объект ССЫЛКА Документ.Задание_ат
	|						И НЕ СвязиОбъектов_ат.Объект.ПометкаУдаления
	|						И (СвойстваЗаданий_ат.Исполнитель = &ТекущийПользователь
	|							ИЛИ СвязиОбъектов_ат.Объект.Автор = &ТекущийПользователь)
	|						И ВЫБОР
	|							КОГДА &ТолькоАктуальные
	|								ТОГДА ИсторияСтатусовЗаданий_атСрезПоследних.Статус ЕСТЬ NULL 
	|									ИЛИ (НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Выполнено)
	|										И НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Прервано)
	|										И НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено))
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|					)
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	""Персональные""
	|ИЗ
	|	Документ.Заявка_ат КАК ДокументЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаявок_ат КАК СвойстваЗаявок
	|			ПО ДокументЗаявка.Ссылка = СвойстваЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовЗаявокСрезПоследних
	|			ПО ДокументЗаявка.Ссылка = ИсторияСтатусовЗаявокСрезПоследних.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовРодительскихЗаявок
	|			ПО ДокументЗаявка.РодительскаяЗаявка.Ссылка = ИсторияСтатусовРодительскихЗаявок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектовЗаданий
	|			ПО ДокументЗаявка.Ссылка = СвязиОбъектовЗаданий.Предок
	|				И СвязиОбъектовЗаданий.Объект ССЫЛКА Документ.Задание_ат
	|ГДЕ
	|	ИСТИНА // нет конкретных отборов по этому фильтру
	|	
	|	И ДокументЗаявка.Проект В (&Проекты)
	|	
	|	И ДокументЗаявка.Автор = &ТекущийПользователь
	|		ИЛИ ДокументЗаявка.Сотрудник = &ТекущийПользователь
	|		ИЛИ ДокументЗаявка.Ответственный = &ТекущийПользователь
	|		ИЛИ ДокументЗаявка.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|		ИЛИ ДокументЗаявка.Проект.Ответственный = &ТекущийПользователь
	|		ИЛИ 1 В // отбор по Кураторам Проектов
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				Справочник.Проекты_ат.Кураторы КАК ПроектКураторы
	|			ГДЕ
	|				ПроектКураторы.Ссылка = ДокументЗаявка.Проект
	|				И ПроектКураторы.Куратор = &ТекущийПользователь)
	|		ИЛИ 1 В // отбор по Заданиям
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов_ат
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваЗаданий_ат КАК СвойстваЗаданий_ат
	|						ПО СвойстваЗаданий_ат.Ссылка = СвязиОбъектов_ат.Объект
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних(, ) КАК ИсторияСтатусовЗаданий_атСрезПоследних
	|						ПО ИсторияСтатусовЗаданий_атСрезПоследних.Ссылка = СвязиОбъектов_ат.Объект
	|			ГДЕ
	|				СвязиОбъектов_ат.Предок = ДокументЗаявка.Ссылка
	|				И СвязиОбъектов_ат.Объект ССЫЛКА Документ.Задание_ат
	|				И НЕ СвязиОбъектов_ат.Объект.ПометкаУдаления
	|				И (СвойстваЗаданий_ат.Исполнитель = &ТекущийПользователь
	|					ИЛИ СвязиОбъектов_ат.Объект.Автор = &ТекущийПользователь)
	|				И ВЫБОР
	|					КОГДА &ТолькоАктуальные
	|						ТОГДА ИсторияСтатусовЗаданий_атСрезПоследних.Статус ЕСТЬ NULL 
	|							ИЛИ (НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Выполнено)
	|								И НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Прервано)
	|								И НЕ ИсторияСтатусовЗаданий_атСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий_ат.Отменено))
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			)
	|	
	|");
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОтбиратьПоПользователю", Элементы.ФормаФильтр_ПерсональныеМои.Пометка);
	Запрос.УстановитьПараметр("ТолькоАктуальные", Элементы.ФормаФильтр_Актуальные.Пометка);
	
	Запрос.УстановитьПараметр("Проекты", Новый СписокЗначений);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьФильтрыНаСервере()
	
	// сбор данных
	
	Актуальные = Элементы.ФормаФильтр_Актуальные.Пометка;
	Архивные = Элементы.ФормаФильтр_Архивные.Пометка;
	Отложенные = Элементы.ФормаФильтр_Отложенные.Пометка;
	Планирование = Элементы.ФормаФильтр_Планирование.Пометка;
	Выполнение = Элементы.ФормаФильтр_Выполнение.Пометка;
	Ожидание = Элементы.ФормаФильтр_Ожидание.Пометка;
	Персональные = Элементы.ФормаФильтр_ПерсональныеМои.Пометка Или Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка;
	
	ОписаниеОтбораПоСтатусам = ПолучитьОписаниеОтбораПоСтатусам(Актуальные, Архивные, Отложенные,
		Планирование, Выполнение, Ожидание);
	
	СтатусыЗаявок = Новый СписокЗначений;
	СтатусыЗаданий = Новый СписокЗначений;
	
	Если Архивные Тогда
		
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.Закрыта);
		
		СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Выполнено);
		СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Отменено);
		СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Прервано);
		
	КонецЕсли;
	
	Если Отложенные Тогда
		
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.Черновик);
		
		//СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.ПустаяСсылка());
		//СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Планируемое);
		
	КонецЕсли;
	
	Если Планирование Тогда
		
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.Пожелание); //TODO: вообще-то надо отдельный фильтр - он не имеет особого приоритета
		
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.Зарегистрирована);
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.НаРассмотрении);
		
		Если Элементы.ОтборЗаявокПоЗаданиям.Пометка Тогда
			
			СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.ПустаяСсылка());
			СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Планируемое);
			СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.ВОчереди);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Выполнение Тогда
		
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.ВОчереди);
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.Выполняется);
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.НаТестировании); // ???
		
		Если Элементы.ОтборЗаявокПоЗаданиям.Пометка Тогда
			
			СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.ВОчереди);
			СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.ВРаботе);
			СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.КВозобновлению);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ожидание Тогда
		
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.НаСогласовании);
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.НаПриемке);
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.ВОжиданииОтвета);
		СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.ВОжиданииРелиза);
		
	КонецЕсли;
	
	БезАрхивныхПроектов = Не Архивные Или Актуальные;
	БезБудущихПроектов = Не Отложенные Или Актуальные;
	ТолькоПерсональныеПроекты = Персональные И ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава();
	
	АктуальныеПроекты = Планирование_Сервер_ат.ПолучитьМассивАктуальныхПроектов(БезАрхивныхПроектов, БезБудущихПроектов,
		ТолькоПерсональныеПроекты);
	ОписаниеОтбораПоАктуальнымПроектам = ПолучитьОписаниеОтбораПоАктуальнымПроектам(БезАрхивныхПроектов, БезБудущихПроектов,
		ТолькоПерсональныеПроекты);
	
	Если Элементы.ФормаФильтр_ПерсональныеМои.Пометка Тогда
		
		ПользовательФильтраПерсональные = Пользователи.ТекущийПользователь();
		
	КонецЕсли;
	
	// наложение отборов
	
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ПользовательФильтраПерсональные", ПользовательФильтраПерсональные);
	СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ПользовательФильтраПерсональные", ПользовательФильтраПерсональные);
	
	Если Не Элементы.СписокЗаданийПоказатьВсеЗадания.Пометка Тогда //И Элементы.ОтборЗаявокПоЗаданиям.Пометка
		
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("СкрытьПодчиненные", Актуальные Или Не Отложенные);
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ТолькоАктуальные", Актуальные
			И Не ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава());
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПользователю", Персональные
			И Не ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава());
		
		//УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
		//	СписокЗаданий, "РодительскоеЗаданиеЗакрыто",, Истина, Актуальные Или Не Отложенные, "Скрыть подчинённые",, СписокЗаданий.Отбор);
		//УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
		//	СписокЗаданий, "Скрыть подчинённые", Актуальные Или Не Отложенные, СписокЗаданий.Отбор);
		
		Если СтатусыЗаданий.Количество() = 0 Тогда
			
			Если Актуальные Тогда
				
				СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Выполнено);
				СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Отменено);
				СтатусыЗаданий.Добавить(Перечисления.СтатусыЗаданий_ат.Прервано);
				
				УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
					СписокЗаданий, "Статус", ВидСравненияКомпоновкиДанных.НеВСписке,
					СтатусыЗаданий, Истина, ОписаниеОтбораПоСтатусам,, СписокЗаданий.Отбор, 1);
				
			Иначе
					
				УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
					СписокЗаданий, "Статус", Ложь,, 1);
				
			КонецЕсли;
			
		Иначе
			УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
				СписокЗаданий, "Статус", ВидСравненияКомпоновкиДанных.ВСписке,
				СтатусыЗаданий, СтатусыЗаданий.Количество() > 0, ОписаниеОтбораПоСтатусам,, СписокЗаданий.Отбор, 1);
		КонецЕсли;
		
	Иначе
		
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("СкрытьПодчиненные", Ложь);
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ТолькоАктуальные", Ложь);
		СписокЗаданий.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПользователю", Ложь);
		
		УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
			СписокЗаданий, "РодительскаяЗаявка_Проект", Ложь,, 1);
		
		УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
			СписокЗаданий, "Статус", Ложь,, 1);
		
	КонецЕсли;
	
	Если Элементы.ОтборЗаявокПоЗаданиям.Пометка Тогда
		
		УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
			СписокЗаданий, "РодительскаяЗаявка_Проект", ВидСравненияКомпоновкиДанных.ВСписке,
			АктуальныеПроекты, АктуальныеПроекты.Количество() > 0, ОписаниеОтбораПоАктуальнымПроектам,, СписокЗаданий.Отбор, 1);
			
		ВнутреннегоИспользования_ВызовСервера_ат.УстановитьОтборПоКлиентуДляОтбора(ЭтаФорма, "СписокЗаданий",
			"РодительскаяЗаявка_Клиент");
		
	Иначе
		
		СписокЗаявок.Параметры.УстановитьЗначениеПараметра("СкрытьПодчиненные", Актуальные Или Не Отложенные);
		СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ТолькоАктуальные",
			Актуальные И Не ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава());
		СписокЗаявок.Параметры.УстановитьЗначениеПараметра("ОтбиратьПоПользователю", Персональные);
			//И Не ВнутреннегоИспользования_ВызовСервера_ат.МенеджерПроектовИлиПолныеПрава());
		
		УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
			СписокЗаявок, "Проект", ВидСравненияКомпоновкиДанных.ВСписке,
			АктуальныеПроекты, АктуальныеПроекты.Количество() > 0, ОписаниеОтбораПоАктуальнымПроектам,, СписокЗаявок.Отбор, 1);
		
		Если СтатусыЗаявок.Количество() = 0 Тогда
			
			Если Актуальные Тогда
				
				СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.Черновик);
				СтатусыЗаявок.Добавить(Перечисления.СтатусыЗаявок_ат.Закрыта);
				
				УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
					СписокЗаявок, "Статус", ВидСравненияКомпоновкиДанных.НеВСписке,
					СтатусыЗаявок, Истина, ОписаниеОтбораПоСтатусам,, СписокЗаявок.Отбор, 1);
				
			Иначе
				УправляемыеФормы_КлиентСервер_ат.ИзменитьИспользованиеОтбораДинамическогоСписка(
					СписокЗаявок, "Статус", Ложь,, 1);
			КонецЕсли;
				
		Иначе
			
			УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(
				СписокЗаявок, "Статус", ВидСравненияКомпоновкиДанных.ВСписке,
				СтатусыЗаявок, СтатусыЗаявок.Количество() > 0, ОписаниеОтбораПоСтатусам,, СписокЗаявок.Отбор, 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//////
	
	//СписокЗаявок.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	//
	//Для Каждого ЭлНастройки Из СписокЗаявок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
	//	
	//	Если ТипЗнч(ЭлНастройки) = Тип("ЭлементОтбораКомпоновкиДанных")
	//	 Или ТипЗнч(ЭлНастройки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
	//		
	//			СписокЗаявок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Удалить(ЭлНастройки);
	//			//ЭлНастройки.Использование = Ложь;
	//			//СписокЗаявок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Очистить();
	//			
	//	КонецЕсли;
	//	//СписокЗаданий.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Очистить();
	//	
	//КонецЦикла;
	//
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//	СписокЗаявок, "Статус", СтатусыЗаявок, ВидСравненияКомпоновкиДанных.ВСписке, , // "По статусу"
	//	СтатусыЗаявок.Количество() > 0,
	//	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	//	
	////Эл = Новый ОтборКомпоновкиДанных;
	////ЭлОтбор = Эл.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	////ЭлОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	////ЭлОтбор.Использование = Истина;
	////ЭлОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	////ЭлОтбор.ПравоеЗначение = СтатусыЗаявок;
	////ЭлОтбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	////
	////СписокЗаявок.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Добавить(Эл);
	//	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//	СписокЗаданий, "Статус", СтатусыЗаданий, ВидСравненияКомпоновкиДанных.ВСписке, , // "По статусу"
	//	СтатусыЗаданий.Количество() > 0,
	//	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьОписаниеОтбораПоАктуальнымПроектам(БезАрхивных, БезБудущихПериодов, ТолькоПерсональные)
	
	ОписаниеОтбораПоПроектам = "";
	
	Если БезАрхивных Тогда
		ОписаниеОтбораПоПроектам = ОписаниеОтбораПоПроектам + ?(СтрДлина(ОписаниеОтбораПоПроектам) > 0, ", ", "")
			+ "не архивные";
	КонецЕсли;
	
	Если БезБудущихПериодов Тогда
		ОписаниеОтбораПоПроектам = ОписаниеОтбораПоПроектам + ?(СтрДлина(ОписаниеОтбораПоПроектам) > 0, ", ", "")
			+ "не будущих периодов";
	КонецЕсли;
	
	Если ТолькоПерсональные Тогда
		ОписаниеОтбораПоПроектам = ОписаниеОтбораПоПроектам + ?(СтрДлина(ОписаниеОтбораПоПроектам) > 0, ", ", "")
			+ "только персональные";
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОтбораПоПроектам) Тогда
		ОписаниеОтбораПоПроектам = "Все проекты";
	Иначе
		ОписаниеОтбораПоПроектам = "Проекты - " + ОписаниеОтбораПоПроектам;
	КонецЕсли;
	
	Возврат ОписаниеОтбораПоПроектам;
	
КонецФункции

&НаСервере
Функция   ПолучитьОписаниеОтбораПоСтатусам(Актуальные, Архивные, Отложенные, Планирование, Выполнение, Ожидание)
	
	ОписаниеОтбораПоСтатусам = "";
	
	Если Актуальные Тогда
		ОписаниеОтбораПоСтатусам = ОписаниеОтбораПоСтатусам + ?(СтрДлина(ОписаниеОтбораПоСтатусам) > 0, ", ", "")
			+ "актуальные";
	КонецЕсли;
		
	Если Архивные Тогда
		ОписаниеОтбораПоСтатусам = ОписаниеОтбораПоСтатусам + ?(СтрДлина(ОписаниеОтбораПоСтатусам) > 0, ", ", "")
			+ "архивные";
	КонецЕсли;
	
	Если Отложенные Тогда
		ОписаниеОтбораПоСтатусам = ОписаниеОтбораПоСтатусам + ?(СтрДлина(ОписаниеОтбораПоСтатусам) > 0, ", ", "")
			+ "отложенные";
	КонецЕсли;
	
	Если Планирование Тогда
		ОписаниеОтбораПоСтатусам = ОписаниеОтбораПоСтатусам + ?(СтрДлина(ОписаниеОтбораПоСтатусам) > 0, ", ", "")
			+ "планирование";
	КонецЕсли;
	
	Если Выполнение Тогда
		ОписаниеОтбораПоСтатусам = ОписаниеОтбораПоСтатусам + ?(СтрДлина(ОписаниеОтбораПоСтатусам) > 0, ", ", "")
			+ "выполнение";
	КонецЕсли;
	
	Если Ожидание Тогда
		ОписаниеОтбораПоСтатусам = ОписаниеОтбораПоСтатусам + ?(СтрДлина(ОписаниеОтбораПоСтатусам) > 0, ", ", "")
			+ "ожидание";
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОтбораПоСтатусам) Тогда
		ОписаниеОтбораПоСтатусам = "Все статусы";
	Иначе
		ОписаниеОтбораПоСтатусам = "Статусы - " + ОписаниеОтбораПоСтатусам;
	КонецЕсли;
	
	Возврат ОписаниеОтбораПоСтатусам;
	
КонецФункции

&НаКлиенте
Процедура Фильтр_ПерсональныеМои(Команда)
	
	Элементы.ФормаФильтр_ПерсональныеМои.Пометка = Не Элементы.ФормаФильтр_ПерсональныеМои.Пометка;
	
	Если Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка Тогда
		
		Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка = Ложь;
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПерсональныеПоПользователю(Команда)
	
	Если Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка Тогда
		
		Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка = Ложь;
		
	Иначе
		
		ОповещениеОВыбореПользователяФильтраПерсональные = Новый ОписаниеОповещения(
			"ВыборПользователяФильтраПерсональные", ЭтотОбъект, Параметры);
		
		ПоказатьВводЗначения(ОповещениеОВыбореПользователяФильтраПерсональные, ПользовательФильтраПерсональные,
			"Выберите пользователя для персонального фильтра списков Заявок и Заданий", Тип("СправочникСсылка.Пользователи"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_Планирование(Команда)
	
	Элементы.ФормаФильтр_Планирование.Пометка = Не Элементы.ФормаФильтр_Планирование.Пометка;
	
	Если Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка Тогда
		
		Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Ложь;
		Элементы.ФормаФильтр_ПерсональныеМои.Пометка = Ложь;
		
		Если Элементы.ФормаФильтр_Планирование.Пометка Тогда
			
			Элементы.ФормаФильтр_Выполнение.Пометка = Ложь;
			Элементы.ФормаФильтр_Ожидание.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_Выполнение(Команда)
	
	Элементы.ФормаФильтр_Выполнение.Пометка = Не Элементы.ФормаФильтр_Выполнение.Пометка;
	
	Если Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка Тогда
		
		Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Ложь;
		
		Если Элементы.ФормаФильтр_Выполнение.Пометка Тогда
			
			Элементы.ФормаФильтр_Планирование.Пометка = Ложь;
			Элементы.ФормаФильтр_Ожидание.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_Ожидание(Команда)
	
	Элементы.ФормаФильтр_Ожидание.Пометка = Не Элементы.ФормаФильтр_Ожидание.Пометка;
	
	Если Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка Тогда
		
		Элементы.ФормаУстановитьФильтрыКакГлавное.Пометка = Ложь;
		
		Если Элементы.ФормаФильтр_Ожидание.Пометка Тогда
			
			Элементы.ФормаФильтр_Планирование.Пометка = Ложь;
			Элементы.ФормаФильтр_Выполнение.Пометка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоВыбраннымКлиентам(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоВыбраннымПродуктам(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоВыбраннымПроектам(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоКлиентуЗаявки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоПродуктамПроектаЗаявки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоПродуктуЭкземпляраПродуктаЗаявки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоПроектуЗаявки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоЭкземпляруПродуктаЗаявки(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Фильтр_ПоЭкземпляруПродуктаИЕгоВерсииВЗаявке(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИскатьПоТекстам(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеЗадания(Команда)
	
	Элементы.СписокЗаданийПоказатьВсеЗадания.Пометка = Не Элементы.СписокЗаданийПоказатьВсеЗадания.Пометка;
	
	УстановитьФильтрыНаСервере();
	
КонецПроцедуры

Процедура ВыборПользователяФильтраПерсональные(Результат, ПередаваемыеПараметры) //Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Элементы.ФормаФильтр_ПерсональныеПоПользователю.Пометка = Истина;
		Элементы.ФормаФильтр_ПерсональныеМои.Пометка = Ложь;
		
		ПользовательФильтраПерсональные = Результат;
		
		УстановитьФильтрыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
