
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Клиент = ВнутреннегоИспользования_ВызовСервера_ат.ПолучитьЗначениеПоУмолчанию("КлиентДляОтбора");
	
	Если НЕ ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации() Тогда
		
		Элементы.Клиент.КнопкаОткрытия = Ложь;
		
		Если ПараметрыСеанса.КонтрагентыПользователя_ат.Количество() > 1 Тогда
			
			Элементы.Клиент.РежимВыбораИзСписка = Истина;
			Элементы.Клиент.СписокВыбора.ЗагрузитьЗначения(Новый Массив(ПараметрыСеанса.КонтрагентыПользователя_ат));
			
		Иначе
			
			Элементы.Клиент.ТолькоПросмотр = Истина;
			Элементы.Клиент.КнопкаОчистки  = Ложь;
			
			Элементы.СортироватьПоКлиенту.Видимость			= Ложь;
			Элементы.СортироватьПоКлиентуИОстатку.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("ОрганизацияФинансы_ат") И НЕ РольДоступна("КлиентФинансы_ат") Тогда
		
		Элементы.Период.Видимость							 = Ложь;
		Элементы.ОперативныеОстаткиГруппаФинансы.Видимость	 = Ложь;
		Элементы.СортироватьПоОстатку.Видимость				 = Ложь;
		Элементы.СортироватьПоВидуДоговораИОстатку.Видимость = Ложь;
		Элементы.СортироватьПоКлиентуИОстатку.Видимость		 = Ложь;
		
	КонецЕсли;
	
	ЗаполнитьСписокИнформационныхБаз();
	ОбновитьОперативныеОстатки();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьСортировкуОперативныхОстатков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	КлиентПриИзменении_Сервер();
	
	Оповестить("КлиентДляОтбораИзменен", Клиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьОперативныеОстатки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОперативныеОстатки

&НаКлиенте
Процедура ОперативныеОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ОперативныеОстаткиКлиент" Тогда
		
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Клиент);
	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ОперативныеОстаткиДоговор" Тогда
		
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Договор);
	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ОперативныеОстаткиОперативныйОстаток" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Договор", Элемент.ТекущиеДанные.Договор));
		ПараметрыОткрытия.Вставить("ДатаНач", НачалоПериода);
		ПараметрыОткрытия.Вставить("ДатаКон", КонецПериода);
		
		ОткрытьФорму("Отчет.ОстаткиСредствСДетализациейПоРаботам_ат.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор, , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ОперативныеОстаткиПополнитьСчет" Тогда
		
		ПоказатьПредупреждение(, "Механизм пополнения в разработке :(", 5);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьОперативныеОстатки();
	УстановитьСортировкуОперативныхОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежиме1СПредприятие(Команда)
	
	СтрокаСоединения = ПолучитьСтрокуСоединенияИБ(ИнформационнаяБаза);
	
	Если НЕ ПустаяСтрока(СтрокаСоединения) Тогда
		
		//СтрокаЗапуска = """%ProgramFiles(x86)%\1cv8\common\1cestart.exe"" ENTERPRISE "
		СтрокаЗапуска = """C:\Program Files (x86)\1cv8\common\1cestart.exe"" ENTERPRISE "
			+ СтрокаСоединения + " /N""Admin"" /P""1сadmin""";
		
		Сообщить(СтрокаЗапуска);
		ЗапуститьПриложение(СтрокаЗапуска);
		
	КонецЕсли;
	
	//ЗапуститьПриложение("%ProgramFiles(x86)%\1cv8\common\1cestart.exe ENTERPRISE /S ""Charlie.assist.claster.corp\support"" /N""Admin"" /P""1сadmin""");
	
	//ЗапуститьПриложение("""C:\Program Files (x86)\1cv8\common\1cestart.exe""" + " ENTERPRISE /S ""Charlie.assist.claster.corp\support"" /N""Admin"" /P""1сadmin""");
	
	////////////////////////////////////////////////////////////////////////////////
	//ЗапуститьПриложение("""C:\Program Files (x86)\1cv8\8.3.8.1652\bin\1cv8c.exe""" + " ENTERPRISE /S ""Charlie.assist.claster.corp\support"" /N""Admin"" /P""1сadmin""");
	//ЗапуститьПриложение("""C:\Program Files (x86)\1cv8\8.3.7.1993\bin\1cv8s.exe""" + " ENTERPRISE /S ""Charlie.assist.claster.corp\support"" /N""Admin"" /P""1сadmin""");
	//ЗапуститьПриложение("%ProgramFiles(x86)%\1cv8\common\1cestart.exe"  + " ENTERPRISE /S ""Charlie.assist.claster.corp\support"" /N""Admin"" /P""1сadmin""");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускВРежимеКонфигуратор(Команда)
	
	//ЗапуститьПриложение("""C:\Program Files (x86)\1cv8\common\1cestart.exe""" + " CONFIG /S ""Charlie.assist.claster.corp\support"" /N""Admin"" /P""1сadmin""");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоОстатку(Команда)
	
	УстановитьСортировкуОперативныхОстатков(Элементы.СортироватьПоОстатку);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоКлиенту(Команда)
	
	УстановитьСортировкуОперативныхОстатков(Элементы.СортироватьПоКлиенту);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВидуДоговора(Команда)
	
	УстановитьСортировкуОперативныхОстатков(Элементы.СортироватьПоВидуДоговора);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВидуДоговораИОстатку(Команда)
	
	УстановитьСортировкуОперативныхОстатков(Элементы.СортироватьПоВидуДоговораИОстатку);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоКлиентуИОстатку(Команда)
	
	УстановитьСортировкуОперативныхОстатков(Элементы.СортироватьПоКлиентуИОстатку);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура КлиентПриИзменении_Сервер()
	
	ВнутреннегоИспользования_ВызовСервера_ат.УстановитьЗначениеПоУмолчанию("КлиентДляОтбора", Клиент);
	
	ОбновитьОперативныеОстатки();
	ЗаполнитьСписокИнформационныхБаз();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОперативныеОстатки()
	
	Если Период = 1 Тогда // за последние 30 дней
		
		НачалоПериода = НачалоДня(ТекущаяДата()) - 86400 * 30;
		КонецПериода  = ТекущаяДата();
		
	ИначеЕсли Период = 2 Тогда // за прошлый месяц
		
		ПрошлыйМесяц = ДобавитьМесяц(ТекущаяДата(), -1);
		
		НачалоПериода = НачалоМесяца(ПрошлыйМесяц);
		КонецПериода  = КонецМесяца(ПрошлыйМесяц);
		
	Иначе // с начала месяца
		
		НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецПериода  = ТекущаяДата();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор КАК Договор,
		|	0 КАК ОперативныйОстаток,
		|	0 КАК Приход,
		|	0 КАК Расход,
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор.ВидДоговора КАК ВидДоговора,
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор.Владелец КАК Клиент,
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор.НомерДоговора КАК НомерДоговора,
		|	ИСТИНА КАК ДоговорАктивен
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров_ат.СрезПоследних(
		|			&КонецПериода,
		|			НЕ ПометкаУдаления
		|				И ВЫБОР
		|					КОГДА &Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|						ТОГДА РодительскийДоговор.Владелец.Клиент
		|					ИНАЧЕ РодительскийДоговор.Владелец = &Клиент
		|				КОНЕЦ
		|				И РодительскийДоговор.РодДоговора = ЗНАЧЕНИЕ(Перечисление.РодыДоговоров_ат.СПокупателем)) КАК ДанныеДоговоров_атСрезПоследних
		|ГДЕ
		|	(ДанныеДоговоров_атСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДоговоров_атСрезПоследних.ДатаОкончания > &КонецПериода)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Клиентский_атОстаткиИОбороты.Субконто1,
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаКонечныйОстаток, 0),
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаОборотДт, 0),
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаОборотКт, 0),
		|	Клиентский_атОстаткиИОбороты.Субконто1.ВидДоговора,
		|	Клиентский_атОстаткиИОбороты.Субконто1.Владелец,
		|	Клиентский_атОстаткиИОбороты.Субконто1.НомерДоговора,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.ОстаткиИОбороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный),
		|			,
		|			ВЫБОР
		|					КОГДА &Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|						ТОГДА Клиент.Клиент
		|					ИНАЧЕ Клиент = &Клиент
		|				КОНЕЦ
		|				И Субконто1.РодДоговора = ЗНАЧЕНИЕ(Перечисление.РодыДоговоров_ат.СПокупателем)) КАК Клиентский_атОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Договор КАК Договор,
		|	СУММА(ВТ.ОперативныйОстаток) КАК ОперативныйОстаток,
		|	СУММА(ВТ.Приход) КАК Приход,
		|	СУММА(ВТ.Расход) КАК Расход,
		|	ВТ.ВидДоговора КАК ВидДоговора,
		|	ВТ.Клиент КАК Клиент,
		|	МАКСИМУМ(ВТ.ДоговорАктивен) КАК ДоговорАктивен,
		|	СУММА(ВложенныйЗапрос.КоличествоПросроченныхСчетов) КАК КоличествоПросроченныхСчетов
		|ПОМЕСТИТЬ СвернутаяТаблицаПоСчетам
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВЫБОР
		|				КОГДА СчетНаОплату_ат.Договор.Родитель = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|					ТОГДА СчетНаОплату_ат.Договор
		|				ИНАЧЕ СчетНаОплату_ат.Договор.Родитель
		|			КОНЕЦ КАК Договор,
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплату_ат.Ссылка) КАК КоличествоПросроченныхСчетов
		|		ИЗ
		|			РегистрСведений.СтатусыСчетовНаОплату_ат КАК СтатусыСчетовНаОплату_ат
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплату_ат КАК СчетНаОплату_ат
		|				ПО СтатусыСчетовНаОплату_ат.Счет = СчетНаОплату_ат.Ссылка
		|		ГДЕ
		|			ВЫБОР
		|					КОГДА &Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ СчетНаОплату_ат.Клиент = &Клиент
		|				КОНЕЦ
		|			И СтатусыСчетовНаОплату_ат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОплатыСчетов_ат.НеОплачен)
		|			И СчетНаОплату_ат.ДатаОплатыПланируемая <> ДАТАВРЕМЯ(1, 1, 1)
		|			И СчетНаОплату_ат.ДатаОплатыПланируемая <= &КонецПериода
		|			И СчетНаОплату_ат.Проведен
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВЫБОР
		|				КОГДА СчетНаОплату_ат.Договор.Родитель = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|					ТОГДА СчетНаОплату_ат.Договор
		|				ИНАЧЕ СчетНаОплату_ат.Договор.Родитель
		|			КОНЕЦ) КАК ВложенныйЗапрос
		|		ПО ВТ.Договор = ВложенныйЗапрос.Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Договор,
		|	ВТ.ВидДоговора,
		|	ВТ.Клиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвернутаяТаблицаПоСчетам.Договор КАК Договор,
		|	СвернутаяТаблицаПоСчетам.ОперативныйОстаток КАК ОперативныйОстаток,
		|	СвернутаяТаблицаПоСчетам.Приход КАК Приход,
		|	СвернутаяТаблицаПоСчетам.Расход КАК Расход,
		|	СвернутаяТаблицаПоСчетам.ВидДоговора КАК ВидДоговора,
		|	СвернутаяТаблицаПоСчетам.Клиент КАК Клиент,
		|	""Пополнить"" КАК ПополнитьСчет,
		|	СвернутаяТаблицаПоСчетам.ДоговорАктивен КАК ДоговорАктивен,
		|	ВЫБОР
		|		КОГДА СвернутаяТаблицаПоСчетам.КоличествоПросроченныхСчетов > 0
		|			ТОГДА &СтрокаСообщенияОПросрочке
		|		КОГДА СвернутаяТаблицаПоСчетам.ОперативныйОстаток < 0
		|			ТОГДА &СтрокаСообщенияОЗадолженности
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК СтрокаЗадолженности
		|ИЗ
		|	СвернутаяТаблицаПоСчетам КАК СвернутаяТаблицаПоСчетам
		|ГДЕ
		|	(СвернутаяТаблицаПоСчетам.ДоговорАктивен
		|			ИЛИ НЕ СвернутаяТаблицаПоСчетам.ДоговорАктивен
		|				И СвернутаяТаблицаПоСчетам.ОперативныйОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СтрокаСообщенияОПросрочке", "Имеется просроченная задолженность!");
	Запрос.УстановитьПараметр("СтрокаСообщенияОЗадолженности", "Имеется задолженность!");
	
	ОперативныеОстатки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИнформационныхБаз()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭкземплярыПродуктов_ат.Ссылка
		|ИЗ
		|	Справочник.ЭкземплярыПродуктов_ат КАК ЭкземплярыПродуктов_ат
		|ГДЕ
		|	НЕ ЭкземплярыПродуктов_ат.ПометкаУдаления
		|	И ЭкземплярыПродуктов_ат.ТекущийПродукт.ТипПродукта = ЗНАЧЕНИЕ(Перечисление.ТипыПродуктов_ат.Конфигурация1С)
		|	И ВЫБОР
		|			КОГДА &Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЭкземплярыПродуктов_ат.Владелец.КонтрагентВладелец = &Клиент
		|		КОНЕЦ";
		
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Элементы.ИнформационнаяБаза.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Если Элементы.ИнформационнаяБаза.СписокВыбора.Количество() > 0 Тогда
		
		ИнформационнаяБаза = Элементы.ИнформационнаяБаза.СписокВыбора[0].Значение;
		
	Иначе
		
		ИнформационнаяБаза = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСортировкуОперативныхОстатков(Кнопка = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		
		Кнопка = Элементы.Найти(НачальнаяСортировка_ИмяКнопки);
		
		Если Кнопка = Неопределено Тогда
			
			ИмяКнопки = ИмяКнопкиСортировкиПоУмолчанию();
			Кнопка = Элементы[ИмяКнопки];
			
		КонецЕсли;
		
		Кнопка.Картинка = ?(НачальнаяСортировка_ПоУбыванию,
			БиблиотекаКартинок.СортироватьСписокПоУбыванию, БиблиотекаКартинок.СортироватьСписокПоВозрастанию);
		
	КонецЕсли;
	
	Если Кнопка.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию Тогда
		
		Кнопка.Картинка = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
		Направление = "Убыв";
		
	Иначе
		
		Кнопка.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
		Направление = "Возр";	
		
	КонецЕсли;
	
	Если Кнопка = Элементы.СортироватьПоОстатку Тогда
		
		СтрокаСортировки = "ОперативныйОстаток " + Направление + ", Клиент, ВидДоговора, НомерДоговора";
		
	ИначеЕсли Кнопка = Элементы.СортироватьПоКлиенту Тогда
		
		СтрокаСортировки = "Клиент " + Направление + ", ВидДоговора, НомерДоговора";
		
	ИначеЕсли Кнопка = Элементы.СортироватьПоВидуДоговора Тогда
		
		СтрокаСортировки = "ВидДоговора " + Направление + ", Клиент, ВидДоговора, НомерДоговора";
		
	ИначеЕсли Кнопка = Элементы.СортироватьПоВидуДоговораИОстатку Тогда
		
		СтрокаСортировки = "ВидДоговора, ОперативныйОстаток " + Направление + "Клиент, НомерДоговора";
		
	ИначеЕсли Кнопка = Элементы.СортироватьПоКлиентуИОстатку Тогда
		
		СтрокаСортировки = "Клиент, ОперативныйОстаток " + Направление + "ВидДоговора, НомерДоговора";
		
	КонецЕсли;
	
	ОперативныеОстатки.Сортировать(СтрокаСортировки);
	
	НачальнаяСортировка_ИмяКнопки  = Кнопка.Имя;
	НачальнаяСортировка_ПоУбыванию = (Кнопка.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ИмяКнопкиСортировкиПоУмолчанию()
	
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ОрганизацияФинансы_ат") ИЛИ РольДоступна("КлиентФинансы_ат") Тогда
		
		ИмяКнопки = "СортироватьПоОстатку";
		
	ИначеЕсли ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникОрганизации() Тогда
		
		ИмяКнопки = "СортироватьПоКлиенту";
		
	Иначе
		
		ИмяКнопки = "СортироватьПоВидуДоговора";
		
	КонецЕсли;
	
	Возврат ИмяКнопки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ОперативныеОстаткиКлиент.Видимость = Форма.Клиент.Пустая();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   ПолучитьСтрокуСоединенияИБ(ИБкакЭП)
	
	СтрокаСоединения = "";
	
	Если НЕ ИБкакЭП.Пустая() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СпецификацияЭП_Конфигурация1С_ат.ИмяИБНа1С КАК ИмяИБНа1С,
		|	СпецификацияЭП_Конфигурация1С_ат.ФайловыйКаталог КАК ФайловыйКаталог,
		|	ЭкземплярыПродуктов_ат.РольСервераРазмещения.ВидРолиСервера.ТипРолиСервера КАК ТипРолиСервера,
		|	ЭкземплярыПродуктов_ат.СерверРазмещения.Hostname КАК СерверРазмещенияHostname,
		|	Серверы_атDNS_суффиксы.DNS_суффикс.Наименование КАК DNS_суффикс
		|ИЗ
		|	РегистрСведений.СпецификацияЭП_Конфигурация1С_ат КАК СпецификацияЭП_Конфигурация1С_ат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭкземплярыПродуктов_ат КАК ЭкземплярыПродуктов_ат
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Серверы_ат.DNS_суффиксы КАК Серверы_атDNS_суффиксы
		|			ПО ЭкземплярыПродуктов_ат.СерверРазмещения = Серверы_атDNS_суффиксы.Ссылка
		|				И (Серверы_атDNS_суффиксы.НомерСтроки = 1)
		|		ПО СпецификацияЭП_Конфигурация1С_ат.ЭкземплярПродукта = ЭкземплярыПродуктов_ат.Ссылка
		|ГДЕ
		|	ЭкземплярыПродуктов_ат.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ИБкакЭП);
		ВРЗ = Запрос.Выполнить().Выбрать();
		
		Если ВРЗ.Следующий() Тогда
			
			Если ВРЗ.ТипРолиСервера = Перечисления.ТипыРолейСерверов_ат.Сервер1С Тогда
				
				СтрокаСоединения = "/IBConnectionString ""Srvr=" + ВРЗ.СерверРазмещенияHostname
					+ ?(ПустаяСтрока(ВРЗ.DNS_суффикс), "", "." + ВРЗ.DNS_суффикс)
					+ ";Ref=" + ВРЗ.ИмяИБНа1С + """";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаСоединения;
	
КонецФункции

#КонецОбласти
