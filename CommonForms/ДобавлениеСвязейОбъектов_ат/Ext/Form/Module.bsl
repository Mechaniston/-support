
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Ссылка = Параметры.Ссылка;
	ОтображаемыеСвязи = Параметры.ОтображаемыеСвязи;
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = "Добавление связей (" + ОтображаемыеСвязи + ")";
	
	НастроитьУсловноеОформление();
	
	ТипДобавляемыхСвязей = Справочники.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеПодчиненоЗаявке;
	
	ЗаполнитьДерево();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьУсловноеОформление()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВсеДеревья.Объект"); 
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Ссылка;
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВсеДеревья");
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВсеДеревья.НеДоступно"); 
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ВсеДеревьяПометка");
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДерево()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Заявка.Ссылка,
		|	Заявка.Тезис,
		|	ИсторияСтатусовЗаявокСрезПоследних.Статус
		|ИЗ
		|	Документ.Заявка_ат КАК Заявка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаявок_ат.СрезПоследних КАК ИсторияСтатусовЗаявокСрезПоследних
		|		ПО Заявка.Ссылка = ИсторияСтатусовЗаявокСрезПоследних.Ссылка
		|ГДЕ
		|	НЕ ИсторияСтатусовЗаявокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявок_ат.Закрыта)";
	
	ТаблицаЗаявок = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗаявок.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ВсеДеревья");
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиОбъектов.Код КАК Код,
		|	СвязиОбъектов.Предок КАК Предок,
		|	СвязиОбъектов.Объект КАК Объект,
		|	СвязиОбъектов.СсылкаНаКод КАК СсылкаНаКод,
		|	ИсторияСтатусовЗаданийСрезПоследних.Статус
		|ИЗ
		|	РегистрСведений.СвязиОбъектов_ат КАК СвязиОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСтатусовЗаданий_ат.СрезПоследних КАК ИсторияСтатусовЗаданийСрезПоследних
		|		ПО СвязиОбъектов.Объект = ИсторияСтатусовЗаданийСрезПоследних.Ссылка
		|ГДЕ
		|	СвязиОбъектов.Предок В(&МассивЗаявок)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвязиОбъектов.СсылкаНаКод,
		|	СвязиОбъектов.Код";
	
	Запрос.УстановитьПараметр("МассивЗаявок", ТаблицаЗаявок.ВыгрузитьКолонку("Ссылка"));
	ТаблицаПотомков = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаПотомков.Количество() = 0 Тогда Возврат; КонецЕсли;
	
	ТаблицаПотомков.Индексы.Добавить("Код");
	ТаблицаПотомков.Колонки.Добавить("СсылкаНаСтроку");
	
	Если ОтображаемыеСвязи = "Предки" Тогда
		МассивСвязанныхОбъектов = СвязиОбъектов_ат.ПолучитьПредковОбъекта(Ссылка, Истина, "СвязиОбъектов_ат");
		МассивНедоступныхСвязей = СвязиОбъектов_ат.ПолучитьПотомковОбъекта(Ссылка, , "СвязиОбъектов_ат");
	ИначеЕсли ОтображаемыеСвязи = "Потомки" Тогда
		МассивСвязанныхОбъектов = СвязиОбъектов_ат.ПолучитьПотомковОбъекта(Ссылка, Истина, "СвязиОбъектов_ат");
		МассивНедоступныхСвязей = СвязиОбъектов_ат.ПолучитьПредковОбъекта(Ссылка, , "СвязиОбъектов_ат");
	КонецЕсли;
	МассивНедоступныхСвязей.Добавить(Ссылка);
	
	ВходящиеСвязи.ЗагрузитьЗначения(МассивСвязанныхОбъектов);
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") ИЛИ ОтображаемыеСвязи = "Потомки" Тогда
		ЗапретВыбораЗаявки = Истина;
	КонецЕсли;
		
	Для каждого Заявка Из ТаблицаЗаявок Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Объект = Заявка.Ссылка;
		НоваяСтрока.Описание = ?(ЗначениеЗаполнено(Заявка.Тезис), "Заявка: " + Заявка.Тезис, Строка(Заявка.Ссылка));
		НоваяСтрока.Статус = Заявка.Статус;
		НоваяСтрока.Пометка = (НЕ МассивСвязанныхОбъектов.Найти(Заявка.Ссылка) = Неопределено);
		НоваяСтрока.НеДоступно = ЗапретВыбораЗаявки;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыПотомков Из ТаблицаПотомков Цикл
		СтрокаРодителя = Неопределено;
		Если СтрокаТаблицыПотомков.СсылкаНаКод = 0 Тогда
			СтрокаРодителя = Дерево.Строки.Найти(СтрокаТаблицыПотомков.Предок).Строки;
		Иначе	
			ПоискРодителя = ТаблицаПотомков.Найти(СтрокаТаблицыПотомков.СсылкаНаКод, "Код");
			Если ПоискРодителя <> Неопределено Тогда
				СтрокаРодителя = ПоискРодителя.СсылкаНаСтроку;
			КонецЕсли;
		КонецЕсли;
		Потомок = СтрокаРодителя.Добавить();
		Потомок.Объект = СтрокаТаблицыПотомков.Объект;
		Потомок.Описание = ?(ЗначениеЗаполнено(СтрокаТаблицыПотомков.Объект.Тезис), "Задание: " + СтрокаТаблицыПотомков.Объект.Тезис,
																					Строка(СтрокаТаблицыПотомков.Объект));
		Потомок.Статус = СтрокаТаблицыПотомков.Статус;
		Потомок.Пометка = (НЕ МассивСвязанныхОбъектов.Найти(СтрокаТаблицыПотомков.Объект) = Неопределено);
		Если НЕ МассивНедоступныхСвязей.Найти(СтрокаТаблицыПотомков.Объект) = Неопределено
				ИЛИ СтрокаТаблицыПотомков.Статус = Перечисления.СтатусыЗаданий_ат.Прервано 
				ИЛИ СтрокаТаблицыПотомков.Статус = Перечисления.СтатусыЗаданий_ат.Отменено 
				ИЛИ Потомок.Пометка Тогда
			Потомок.НеДоступно = Истина;
		Иначе
			Потомок.НеДоступно = Ложь;
		КонецЕсли;
		СтрокаТаблицыПотомков.СсылкаНаСтроку = Потомок.Строки;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ВсеДеревья");
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеДеревьяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Объект);

КонецПроцедуры

&НаКлиенте
Процедура ВсеДеревьяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	
	Применить_Сервер();
	
КонецПроцедуры

&НаСервере
Процедура Применить_Сервер()
	
	Дерево = РеквизитФормыВЗначение("ВсеДеревья");
	
	МассивВыбранных = ПолучитьВыбранныеЭлементы(Дерево);
	
	ВыбранныеСвязи = Новый СписокЗначений;
	ВыбранныеСвязи.ЗагрузитьЗначения(МассивВыбранных);
	
	Для Каждого Объект Из ВходящиеСвязи Цикл
		
		Связь = МассивВыбранных.Найти(Объект.Значение);
		
		Если НЕ Связь = Неопределено Тогда 
			МассивВыбранных.Удалить(Связь);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтображаемыеСвязи = "Предки" Тогда
		
		Если НЕ ТипДобавляемыхСвязей = Справочники.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеПодчиненоЗаявке Тогда
			
			МассивЗаявок = Новый Массив;
			НомерСтроки = 0;
			
			Для Каждого Объект Из МассивВыбранных Цикл
				
				Если ТипЗнч(Объект) = Тип("ДокументСсылка.Заявка_ат") Тогда
					
					МассивЗаявок.Добавить(Объект);
					МассивВыбранных.Удалить(НомерСтроки);
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
			Если МассивЗаявок.Количество() <> 0 Тогда
				
				СвязиОбъектов_ат.ДобавитьСвязиСПредками(Ссылка, МассивЗаявок,,
					Справочники.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеПодчиненоЗаявке, "СвязиОбъектов_ат");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МассивВыбранных.Количество() <> 0 Тогда
			СвязиОбъектов_ат.ДобавитьСвязиСПредками(Ссылка, МассивВыбранных,, ТипДобавляемыхСвязей, "СвязиОбъектов_ат");
		КонецЕсли;
		
	ИначеЕсли ОтображаемыеСвязи = "Потомки" Тогда
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Заявка_ат") Тогда 
			ТипСвязи = Справочники.СвязиОбъектов_ТипыСвязей_ат.ЗаданиеПодчиненоЗаявке;
		Иначе
			ТипСвязи = ТипДобавляемыхСвязей;
		КонецЕсли;
		
		СвязиОбъектов_ат.ДобавитьСвязиСПотомками(Ссылка, МассивВыбранных,, ТипСвязи, "СвязиОбъектов_ат");
		
	КонецЕсли;
	
	Планирование_Сервер_ат.ПересчитатьСтатусыСвязанныхЗаявок(Ссылка);
	
	ВходящиеСвязи = ВыбранныеСвязи;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьВыбранныеЭлементы(Дерево)
	
	ВыбранныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина);
	МассивВыбранных = Новый Массив;
	Для Каждого Строка Из ВыбранныеСтроки Цикл
		Если МассивВыбранных.Найти(Строка.Объект) = Неопределено Тогда
			МассивВыбранных.Добавить(Строка.Объект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВыбранных;
	
КонецФункции 
