
#Область  ЛокальныеПеременные

#Область  Комментарии_ат

&НаКлиенте
Перем КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам;

#КонецОбласти

#КонецОбласти


#Область  ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормы_Сервер_ат.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если Параметры.Свойство("ЗначениеКопирования") И ТипЗнч(Параметры.ЗначениеКопирования) = Тип("СправочникСсылка.Договоры_ат") Тогда
			
			РодительскийДоговор = Параметры.ЗначениеКопирования;
			
			Если НЕ РодительскийДоговор.Пустая() Тогда
				
				Объект.Услуги.Загрузить(Параметры.ЗначениеКопирования.Услуги.Выгрузить());
				
				Если РодительскийДоговор.Родитель.Пустая() Тогда
					Объект.Родитель = РодительскийДоговор;
				Иначе
					Объект.Родитель = РодительскийДоговор.Родитель;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Объект.Родитель.Пустая() Тогда // это д/с
			
			Объект.Организация = Объект.Родитель.Организация;
			Объект.ВидДоговора = Объект.Родитель.ВидДоговора;
			Объект.РодДоговора = Объект.Родитель.РодДоговора;
			
			Объект.ПрефиксНомера = "";
			Объект.НомерДоговора = 0;
			Объект.ПостфиксНомера = "";
			
			Элементы.Организация.ТолькоПросмотр = Истина;
			Элементы.ВидДоговора.ТолькоПросмотр = Истина;
			Элементы.РодДоговора.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
		Если НЕ Объект.ВидДоговора.Пустая() И Объект.Услуги.Количество() = 0 Тогда
			Объект.Услуги.Загрузить(Объект.ВидДоговора.Услуги.Выгрузить());
		КонецЕсли;
		
		Объект.ДатаДоговора = ТекущаяДатаСеанса();
		
		ПолучитьНовыйНомер();
		
		Элементы.СтраницаСерверы.Видимость = Ложь;
		Элементы.СтраницаПО.Видимость = Ложь;
		
		//// эти элементы заполняются автоматически при записи на основании НомераДоговора и пр. полей
		//Элементы.НаименованиеПолное.ТолькоПросмотр  = Истина;
		//Элементы.Наименование.ТолькоПросмотр = Истина;
		
	Иначе
		
		Элементы.СтраницаПО.Видимость = ложь;
		Элементы.СтраницаСерверы.Видимость = Ложь;
		
		Если Объект.ВидДоговора.ТипДоговора = Перечисления.ТипыДоговоров_ат.АрендаСерверов тогда
			
			Элементы.СтраницаСерверы.Видимость = Истина;
			СписокСерверовИРесурсов.Параметры.УстановитьЗначениеПараметра("ПометкаУдаления",ложь);
			
		ИначеЕсли Объект.ВидДоговора.ТипДоговора = Перечисления.ТипыДоговоров_ат.АрендаПрограммныхПродуктов тогда
			
			Элементы.СтраницаПО.Видимость = Истина;
			СписокПО.Параметры.УстановитьЗначениеПараметра("Клиент", Объект.Владелец);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Объект.Родитель.Пустая() Тогда
		
		Элементы.ПостфиксНомера.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		
	КонецЕсли;
	
	ОбработатьСпецификацию(?(Параметры.ЗначениеКопирования.Пустая(), Объект.Ссылка, Параметры.ЗначениеКопирования));
	
	БезНДС = Перечисления.СтавкиНДС_ат.БезНДС;
	
	НастроитьФормуДляДоговораИлиДопСоглашения();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	ОбновитьИтоги(ЭтаФорма);
	
	УстановитьПараметрыВыбораКонтрагента(ЭтаФорма);
	
	ЗагрузитьКомментарии(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправляемыеФормы_Сервер_ат.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ЗаполнитьСтатусОтправки();
	
	ЗагрузитьКомментарии(Ложь);
	
	НастроитьФормуДляДоговораИлиДопСоглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправляемыеФормы_Клиент_ат.ПриОткрытии(ЭтаФорма, Отказ);
	
	УстановитьПодсказкуВводаПолейОпределенияТарифногоПлана();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Для Каждого Реквизит Из СписокДобавленныхРеквизитов Цикл
		
		Если Элементы[Реквизит.Значение].ОтметкаНезаполненного Тогда
			ПроверяемыеРеквизиты.Добавить(Реквизит.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправляемыеФормы_Клиент_ат.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи);
	
	Если КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок)
		И НЕ ЗначениеЗаполнено(КомментарийСтатусаОтправки) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для данного статуса отправки необходимо заполнить комментарий."
			+ Символы.ПС + "(Кнопка """ + Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок + """)";
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
	#Область Комментарии
	
	Если КомментарийВнутреннийСформирован Тогда
		
		Элементы.КомментарийВнутренний.Документ.body.innerHTML =
			ПроверкаОрфографии_Клиент_ат.УдалитьИзТекстаHTMLТэгиВыделения(Элементы.КомментарийВнутренний.Документ.body.innerHTML);
		
		КомментарийВнутренний = Элементы.КомментарийВнутренний.Документ.documentElement.outerHTML;
		
		РаботаСHTML_Клиент_ат.ВключитьВозможностьРедактирования(ЭтаФорма,
			Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель, Истина);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() ИЛИ Объект.НомерДоговора <> ТекущийОбъект.НомерДоговора Тогда
		ТекущийОбъект.СтруктураНовогоНомера = СтруктураНовогоНомера;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УправляемыеФормы_Сервер_ат.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	#Область Комментарии
	
	Комментарии_ат.СохранитьКомментарий(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийВнутренний(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийКлиента(ЭтаФорма, ТекущийОбъект.Ссылка);
	Комментарии_ат.СохранитьКомментарийСинхронизируемый(ЭтаФорма, ТекущийОбъект.Ссылка);
	
	#КонецОбласти
	
	ЗаписатьСтатусОтправки(ТекущийОбъект.Ссылка, ПараметрыЗаписи);
	
	ИмяРегистра = Справочники.Договоры_ат.ПолучитьИмяРегистраСпецификацииДляТипаДоговора(ТекущийОбъект.ВидДоговора.ТипДоговора);
	
	Если ИмяРегистра = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИмяРегистра = "СпецификацияДоговоров_Обслуживание_ат" Тогда
		
		Если ЭтаФорма.ВключаетИТС = ТекущийОбъект.Ссылка Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Договор не должен ссылаться сам на себя.";
			Сообщение.Поле  = "ВключаетИТС";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить(); 
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(ТекущийОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
	Иначе
		Запись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	ЗаписьИзменена = Ложь;
	
	Для Каждого Элемент Из СписокДобавленныхРеквизитов Цикл
		
		ТекущиеДанные = ЭтаФорма[Элемент.Значение];
		
		Если ТипЗнч(ТекущиеДанные) = Тип("Строка") Тогда
			ТекущиеДанные = СокрЛП(ТекущиеДанные);
		КонецЕсли;
		
		Если Запись[Элемент.Значение] <> ТекущиеДанные Тогда
			
			Запись[Элемент.Значение] = ТекущиеДанные;
			ЗаписьИзменена = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписьИзменена Тогда
		
		Запись.Договор = ТекущийОбъект.Ссылка;
		
		Попытка
			
			НаборЗаписей.Записать();
			
		Исключение
			
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	СтруктураНовогоНомера = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//// см. ПриСозданииНаСервере
	//Элементы.НаименованиеПолное.ТолькоПросмотр  = Ложь;
	//Элементы.Наименование.ТолькоПросмотр = Ложь;
	
	НастроитьФормуДляДоговораИлиДопСоглашения();
	
КонецПроцедуры

#КонецОбласти


#Область  ОбработчикиДействийПользователя

&НаКлиенте
Процедура РодДоговораПриИзменении(Элемент)
	
	УстановитьПараметрыВыбораКонтрагента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеВопросоОЗаполненииУслуг", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Перезаполнить Услуги в соответствии с выбранным типом договора?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВидДоговораПриИзменении_Сервер(Истина);
		
	КонецЕсли;
	
	УстановитьПодсказкуВводаПолейОпределенияТарифногоПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	ЗаполнитьПоРодителю();
	
	УстановитьПодсказкуВводаПолейОпределенияТарифногоПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоговораПриИзменении(Элемент)
	
	ПолучитьНовыйНомер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	//TODO - вызывать только после реализации возможносить разделения нумерации по организациям
	//ПолучитьНовыйНомер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксНомераПриИзменении(Элемент)
	
	ЗаполнитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДоговораПриИзменении(Элемент)
	
	ЗаполнитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПостфиксНомераПриИзменении(Элемент)
	
	ЗаполнитьНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		Элемент.ТекущиеДанные.СтавкаНДС = БезНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПересчитатьСуммуУслуги("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)

	ПересчитатьСуммуУслуги("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПересчитатьЦену("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьНДС("Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ПересчитатьВсего("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтправкиПриИзменении(Элемент)

	Модифицированность = Истина;
	СтатусОтправкиИзменен = Истина;
	КомментарийСтатусаОтправки = Неопределено;
	
	Если КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок) Тогда
		ОткрытьКомментарийСтатусаОтправки(Команды.ОткрытьКомментарийСтатусаОтправки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДоговораОчистка(Элемент, СтандартнаяОбработка)
	
	ПолучитьНовыйНомер(); //TODO!!! переделать Очистку на выбор из списка спец. значения
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти


#Область  ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКомментарийСтатусаОтправки(Команда)

	Если ВнутреннегоИспользования_КлиентСерверПовтИсп_ат.СотрудникКлиента() Тогда
		
		ПоказатьПредупреждение(, КомментарийСтатусаОтправки, 10);
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПослеИзмененияКомментарияСтатусаОтправки", ЭтаФорма);
		ПоказатьВводСтроки(Оповещение, КомментарийСтатусаОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок, 0, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьУслугиДругогоДоговора(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораДоговораДляКопированияУслуг", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Договоры_ат.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор , , ,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДопСоглашение(Команда)
	
	//СоздатьДопСоглашениеНаСервере();
	Если Модифицированность Тогда
		
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Договоры_ат.ФормаОбъекта",
		Новый Структура("ЗначениеКопирования", ?(Объект.Родитель.Пустая(), Объект.Ссылка, Объект.Родитель), ЭтаФорма));
	
КонецПроцедуры

#КонецОбласти


#Область  СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПодсказкуВводаПолейОпределенияТарифногоПлана()
	
	Если НЕ Объект.Родитель.Пустая() И НЕ ПустаяСтрока(Объект.Родитель.ФормулаРасчетаТарифногоПлана) Тогда
		
		Элементы.ФормулаРасчетаТарифногоПлана.ПодсказкаВвода = Объект.Родитель.ФормулаРасчетаТарифногоПлана;
		
	ИначеЕсли НЕ ПустаяСтрока(Объект.ВидДоговора.ФормулаРасчетаТарифногоПлана) Тогда
		
		Элементы.ФормулаРасчетаТарифногоПлана.ПодсказкаВвода = Объект.ВидДоговора.ФормулаРасчетаТарифногоПлана;
		
	ИначеЕсли НЕ ПустаяСтрока(Константы.ФормулаРасчетаТарифногоПланаПоУмолчанию_ат.Получить()) Тогда
		
		Элементы.ФормулаРасчетаТарифногоПлана.ПодсказкаВвода = Константы.ФормулаРасчетаТарифногоПланаПоУмолчанию_ат.Получить();
		
	Иначе
		
		Элементы.ФормулаРасчетаТарифногоПлана.ПодсказкаВвода = "По умолчанию (Значение = 0)";
		
	КонецЕсли;
	
	Если НЕ Объект.Родитель.Пустая()
		И Объект.Родитель.ПериодДанныхДляОпределенияТарифногоПлана <> Неопределено Тогда
		
		Элементы.ПериодДанныхДляОпределенияТарифногоПлана.ПодсказкаВвода = Строка(Объект.Родитель.ПериодДанныхДляОпределенияТарифногоПлана);
		
	ИначеЕсли НЕ Объект.ВидДоговора.ПериодДанныхДляОпределенияТарифногоПлана.Пустая() Тогда
		
		Элементы.ПериодДанныхДляОпределенияТарифногоПлана.ПодсказкаВвода = Строка(Объект.ВидДоговора.ПериодДанныхДляОпределенияТарифногоПлана);
		
	ИначеЕсли НЕ Константы.ПериодДанныхДляОпределенияТарифногоПланаПоУмолчанию_ат.Получить().Пустая() Тогда
		
		Элементы.ПериодДанныхДляОпределенияТарифногоПлана.ПодсказкаВвода = Строка(Константы.ПериодДанныхДляОпределенияТарифногоПланаПоУмолчанию_ат.Получить());
		
	Иначе
		
		Элементы.ПериодДанныхДляОпределенияТарифногоПлана.ПодсказкаВвода = "По умолчанию (За предыдущий месяц)";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуДляДоговораИлиДопСоглашения()
	
	//Элементы.ФормаСоздатьДопСоглашение.Видимость = НЕ Объект.Ссылка.Пустая() И Объект.Родитель.Пустая();
	
	Если Объект.Родитель.Пустая() Тогда
		
		ЭтаФорма.АвтоЗаголовок = Истина;
		
	Иначе
		
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = Объект.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораКонтрагента(Форма)
	
	МассивПараметров = Новый Массив();

	Если Форма.Объект.РодДоговора = ПредопределенноеЗначение("Перечисление.РодыДоговоров_ат.СПокупателем") Тогда
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Клиент", Истина);
		
		МассивПараметров.Добавить(НовыйПараметр);
		
	ИначеЕсли Форма.Объект.РодДоговора = ПредопределенноеЗначение("Перечисление.РодыДоговоров_ат.СПоставщиком") Тогда	
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
		
		МассивПараметров.Добавить(НовыйПараметр);
		
	КонецЕсли;
	
	НовыеПараметры = Новый ФиксированныйМассив(МассивПараметров);
	
	Форма.Элементы.Владелец.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры 

&НаСервере
Процедура ВидДоговораПриИзменении_Сервер(ПерезаполнитьУслуги)
	
	ОбработатьСпецификацию(Объект.Ссылка);
	
	Объект.ПериодичностьСчетов = Объект.ВидДоговора.ПериодичностьСчетов;
	Объект.ПериодичностьРеализаций = Объект.ВидДоговора.ПериодичностьРеализаций;
	Объект.СрокОплатыВДнях = Объект.ВидДоговора.СрокОплатыВДнях;
	
	Если Не ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		Объект.ПрефиксНомера = Объект.ВидДоговора.ПрефиксНомера;
		Объект.ПостфиксНомера = Объект.ВидДоговора.ПостфиксНомера;
		
	КонецЕсли;
	
	Справочники.Договоры_ат.ЗаполнитьНаименованияДоговора(Объект);
	
	Если ПерезаполнитьУслуги Тогда
		
		Объект.Услуги.Загрузить(Объект.ВидДоговора.Услуги.Выгрузить());
		
	КонецЕсли;
	
	Если Объект.ВидДоговора.ТипДоговора = Перечисления.ТипыДоговоров_ат.АрендаСерверов Тогда
		
		Элементы.СтраницаСерверы.Видимость = Истина;
		СписокСерверовИРесурсов.Параметры.УстановитьЗначениеПараметра("КонтрагентВладелец", Объект.Владелец);
		СписокСерверовИРесурсов.Параметры.УстановитьЗначениеПараметра("ПометкаУдаления", Ложь);
		
	Иначе 
		
		Элементы.СтраницаСерверы.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименования()
	
	Справочники.Договоры_ат.ЗаполнитьНаименованияДоговора(Объект);
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьНовыйНомер()
	
	//TODO - если это изменение (в т.ч. даты договора), то сначала задать вопрос о продолжении
	
	СтруктураНовогоНомера = Неопределено;
	Объект.НомерДоговора = 0;
	
	ПолитикаФормированияВнешнегоНомера_Реализация = Перечисления.МетодикаПолученияВнешнегоНомера_ат.Тикет3по3; //!!!!!
	Если ПолитикаФормированияВнешнегоНомера_Реализация = Перечисления.МетодикаПолученияВнешнегоНомера_ат.Тикет3по3 Тогда
		
		Если Объект.Код = "" Тогда
			
			ОбъектФормы = РеквизитФормыВЗначение("Объект");
			ОбъектФормы.УстановитьНовыйКод();
			ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
			
		КонецЕсли;
		
		НовыйНомер = Число(Строки_КлиентСервер_ат.ВернутьТолькоЦифры(
			Строки_КлиентСервер_ат.ПолучитьНомерТикета(Объект.Код, ТекущаяДатаСеанса(), Ложь),,, Ложь));
		
	ИначеЕсли ПолитикаФормированияВнешнегоНомера_Реализация = Перечисления.МетодикаПолученияВнешнегоНомера_ат.СквознойВнутреннийНомер Тогда
		
		НовыйНомер = Справочники.Договоры_ат.ПолучитьНовыйНомерДоговора(Объект);
		
	КонецЕсли;
	
	Если ТипЗнч(НовыйНомер) = Тип("Структура") Тогда
		
		СтруктураНовогоНомера = НовыйНомер;
		Объект.НомерДоговора = СтруктураНовогоНомера.Номер;
		
	Иначе
		
		Объект.НомерДоговора = НовыйНомер;
		
	КонецЕсли;
	
	Справочники.Договоры_ат.ЗаполнитьНаименованияДоговора(Объект);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеВопросоОЗаполненииУслуг(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВидДоговораПриИзменении_Сервер(Истина);
		
	Иначе
		
		ВидДоговораПриИзменении_Сервер(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПересчитатьСуммуУслуги(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Финансы_КлиентСервер_ат.ПересчитатьСумму(Строка, Объект.СуммаВключаетНДС, 1);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦену(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
	Финансы_КлиентСервер_ат.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Финансы_КлиентСервер_ат.ПересчитатьСуммуНДС(Строка, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсего(ИмяТабЧасти)

	Строка = Элементы[ИмяТабЧасти].ТекущиеДанные;
	Строка.Всего = Строка.Сумма + ?(Объект.СуммаВключаетНДС, 0, Строка.СуммаНДС);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.ИтогиВсего    = Объект.Услуги.Итог("Всего");
	Форма.ИтогиВсегоНДС = Объект.Услуги.Итог("СуммаНДС");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусОтправки()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ДанныеСтатусаОтправки = Финансы_ат.ПолучитьДанныеТекущегоСтатусаОтправкиФинДокумента(Объект.Ссылка);
		
		СтатусОтправки 				= ДанныеСтатусаОтправки.Статус;
		ДатаСтатусаОтправки 		= ДанныеСтатусаОтправки.ДатаСтатуса;
		КомментарийСтатусаОтправки 	= ДанныеСтатусаОтправки.Комментарий;
		
		Если Элементы.Найти("ОткрытьКомментарийСтатусаОтправки") <> Неопределено Тогда // для некоторых ролей кнопка отсутствует
			
			КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, Элементы.ОткрытьКомментарийСтатусаОтправки.Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//+ На случай если форма была пересчитана принудительно
	СтатусОтправкиИзменен				= Ложь;
	КомментарийСтатусаОтправкиИзменен	= Ложь;
	//- На случай если форма была пересчитана принудительно
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   КомментарийСтатусаОтправкиОбязателен(СтатусОтправки, ЗаголовокКнопкиОткрытияКомментарияСтатусаОтправки)
	
	ЗаголовокКнопкиОткрытияКомментарияСтатусаОтправки = ?(ЗначениеЗаполнено(СтатусОтправки.ПредставлениеКомментария),
		СтатусОтправки.ПредставлениеКомментария, "Комментарий");
	
	Возврат СтатусОтправки.КомментарийОбязателен;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияКомментарияСтатусаОтправки(Строка, Параметры) Экспорт
	
	Если НЕ Строка = Неопределено Тогда
		
		КомментарийСтатусаОтправки = Строка;
		Модифицированность = Истина;
		КомментарийСтатусаОтправкиИзменен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусОтправки(Ссылка, ПараметрыЗаписи)
	
	Если НЕ СтатусОтправкиИзменен И НЕ КомментарийСтатусаОтправкиИзменен Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусОтправкиИзменен ИЛИ НЕ ЗначениеЗаполнено(ДатаСтатусаОтправки) Тогда
		ДатаСтатусаОтправки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Финансы_ат.ЗаписатьСтатусОтправкиФинДокумента(Ссылка, СтатусОтправки, КомментарийСтатусаОтправки, ДатаСтатусаОтправки);
	
	СтатусОтправкиИзменен = Ложь;
	КомментарийСтатусаОтправкиИзменен = Ложь;
	
	ПараметрыЗаписи.Вставить("ОповеститьОбИзмененииСтатусаОтправки", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДоговораДляКопированияУслуг(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СкопироватьУслуги_Сервер(Результат);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура СкопироватьУслуги_Сервер(Договор)
	
	Объект.Услуги.Загрузить(Договор.Услуги.Выгрузить());
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьДопСоглашениеНаСервере()
	
	//Если Модифицированность Тогда
	//	
	//	Если НЕ Записать() Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ОткрытьФорму("Справочник.Договоры_ат.ФормаОбъекта",
	//	Новый Структура("ЗначениеКопирования", ЭтотОбъект.РеквизитФормыВЗначение("Объект")), ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРодителю()
	
	Если НЕ Объект.Родитель.Пустая() Тогда
		
		Объект.Организация = Объект.Родитель.Организация;
		Объект.ВидДоговора = Объект.Родитель.ВидДоговора;
		
		Объект.ПрефиксНомера = "";
		Объект.ПостфиксНомера = "";
		
	Иначе
		
		
		
	КонецЕсли;
	
	ЗаполнитьНаименования();
	НастроитьФормуДляДоговораИлиДопСоглашения();
	
КонецПроцедуры

#КонецОбласти


#Область  СпецификацияДоговоров

&НаСервере
Процедура ОбработатьСпецификацию(Ссылка)
	
	УдаляемыеРеквизиты = СписокДобавленныхРеквизитов.ВыгрузитьЗначения();
	ЭтаФорма.ИзменитьРеквизиты( , УдаляемыеРеквизиты);
	
	Для Каждого Реквизит Из УдаляемыеРеквизиты Цикл
		
		Элементы.Удалить(Элементы[Реквизит]);
		
	КонецЦикла;
	
	СписокДобавленныхРеквизитов.Очистить();
	
	ИмяРегистра = Справочники.Договоры_ат.ПолучитьИмяРегистраСпецификацииДляТипаДоговора(Объект.ВидДоговора.ТипДоговора);
	
	Если ИмяРегистра = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	МассивИмен = Новый Массив;
	
	Для Каждого Ресурс Из Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы Цикл 
		
		Реквизит = Новый РеквизитФормы(Ресурс.Имя, Ресурс.Тип,, Ресурс.Синоним, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		МассивИмен.Добавить(Ресурс.Имя);
		
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	СписокДобавленныхРеквизитов.ЗагрузитьЗначения(МассивИмен);
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(Ссылка);
	НаборЗаписей.Прочитать();

	ЕстьДанныеДляЗаполнения = НаборЗаписей.Количество() <> 0;
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		Элемент = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.СтраницаСпецификация);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяРеквизита;
		
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		
		Если ТипЗнч(ЭтаФорма[ИмяРеквизита]) = Тип("Число") Тогда
			
			Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			
		ИначеЕсли ТипЗнч(ЭтаФорма[ИмяРеквизита]) = Тип("Строка") И Реквизит.ТипЗначения.КвалификаторыСтроки.Длина = 0 Тогда
			
			Элемент.МногострочныйРежим = Истина;
			
		КонецЕсли;
		
		Если ЕстьДанныеДляЗаполнения Тогда
			
			ЭтаФорма[ИмяРеквизита] = НаборЗаписей[0][ИмяРеквизита];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ВидДоговора.ТипДоговора = Перечисления.ТипыДоговоров_ат.ИТС Тогда
		
		Элементы.ТипИТС.АвтоОтметкаНезаполненного = Истина;
		Элементы.ТарифИТС.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.ДатаНачалаПодписки.УстановитьДействие("ПриИзменении", "ДатаНачалаПодпискиПриИзменении");
		Элементы.ДатаНачалаПодписки.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.ДатаОкончанияПодписки.УстановитьДействие("ПриИзменении", "ДатаОкончанияПодпискиПриИзменении");
		Элементы.ДатаОкончанияПодписки.АвтоОтметкаНезаполненного = Истина;
		
		Элементы.ДлительностьПодписки.УстановитьДействие("ПриИзменении", "ДлительностьПодпискиПриИзменении");
		Элементы.ДлительностьПодписки.АвтоОтметкаНезаполненного = Истина;
		
	ИначеЕсли Объект.ВидДоговора.ТипДоговора = Перечисления.ТипыДоговоров_ат.Обслуживание Тогда
		
		МассивСвязейПараметровВыбора = Новый Массив;
		МассивСвязейПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Владелец",
			РежимИзмененияСвязанногоЗначения.Очищать));
		МассивСвязейПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация",
			РежимИзмененияСвязанногоЗначения.Очищать));
		
		Элементы.ВключаетИТС.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
		
		МассивПараметровВыбора = Новый Массив();
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ТипДоговора", Перечисления.ТипыДоговоров_ат.ИТС));
		
		Элементы.ВключаетИТС.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПодпискиПриИзменении()
	
	ЭтаФорма.ДатаНачалаПодписки = НачалоМесяца(ЭтаФорма.ДатаНачалаПодписки);	
	
	ПересчитатьДлительностьПодписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПодпискиПриИзменении()
	
	ЭтаФорма.ДатаОкончанияПодписки = КонецМесяца(ЭтаФорма.ДатаОкончанияПодписки);
	
	ПересчитатьДлительностьПодписки();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПересчитатьДлительностьПодписки()
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаНачалаПодписки)
		ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаОкончанияПодписки)
		ИЛИ ЭтаФорма.ДатаНачалаПодписки > ЭтаФорма.ДатаОкончанияПодписки
		Тогда
		
		ЭтаФорма.ДлительностьПодписки = Неопределено;
		
	Иначе
		
		ПересчитатьДлительностьПодписки_Сервер(ЭтаФорма.ДатаНачалаПодписки, ЭтаФорма.ДатаОкончанияПодписки, ЭтаФорма.ДлительностьПодписки)
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста 
Процедура ПересчитатьДлительностьПодписки_Сервер(ДатаНачала, ДатаОкончания, ДлительностьПодписки)
	
	Годы = Год(ДатаОкончания) - Год(ДатаНачала);
	Месяцы = Месяц(ДатаОкончания) - Месяц(ДатаНачала);
	
	РазностьВМесяцах = Месяцы + Годы * 12;
	
	ДлительностьВМесяцах = РазностьВМесяцах + 1;
	
	Если ДлительностьВМесяцах = 1 Тогда
		
		ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ОдинМесяц;
		
	ИначеЕсли ДлительностьВМесяцах = 3 Тогда
		
		ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ТриМесяца;
		
	ИначеЕсли ДлительностьВМесяцах = 6 Тогда	
		
		ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ШестьМесяцев;
		
	ИначеЕсли ДлительностьВМесяцах = 12 Тогда	
		
		ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ОдинГод;
		
	Иначе
		
		ДлительностьПодписки = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДлительностьПодпискиПриИзменении()
	
	Если ЗначениеЗаполнено(ЭтаФорма.ДлительностьПодписки) И ЗначениеЗаполнено(ЭтаФорма.ДатаНачалаПодписки) Тогда
		
		ПересчитатьДатуОкончанияПодписки_Сервер(ЭтаФорма.ДатаНачалаПодписки, ЭтаФорма.ДатаОкончанияПодписки, ЭтаФорма.ДлительностьПодписки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьДатуОкончанияПодписки_Сервер(ДатаНачала, ДатаОкончания, ДлительностьПодписки)
	
	Если ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ОдинМесяц Тогда
		
		ДобавляемыеМесяцы = 0;
		
	ИначеЕсли ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ТриМесяца Тогда
		
		ДобавляемыеМесяцы = 2;
		
	ИначеЕсли ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ШестьМесяцев Тогда
		
		ДобавляемыеМесяцы = 5;
		
	ИначеЕсли ДлительностьПодписки = Перечисления.ДлительностиПодписокИТС_ат.ОдинГод Тогда
		
		ДобавляемыеМесяцы = 11;
		
	Иначе
		
		ДатаОкончания = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	ДатаОкончания = КонецМесяца(ДобавитьМесяц(ДатаНачала, ДобавляемыеМесяцы));
	
КонецПроцедуры 

#КонецОбласти


#Область УниверсальныеОбработчикиДействий

&НаКлиенте
Процедура ОбработчикУниверсальныхДействий(Команда)
	
	УправляемыеФормы_Клиент_ат.ДополнительныеДействияФормы(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Функция   ОбработчикУниверсальныхДействий_Сервер(Элемент) Экспорт
	
	Возврат УправляемыеФормы_Сервер_ат.ДополнительныеДействияФормы(ЭтаФорма, Команды[Элемент.Имя]);
	
КонецФункции

#КонецОбласти


#Область  Комментарии

&НаСервере
Процедура ЗагрузитьКомментарии(СозданиеФормы)
	
	Если НЕ СозданиеФормы Тогда
		
		Комментарии_ат.ЗагрузитьКомментарий(ЭтаФорма, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийКлиента(ЭтаФорма, Объект.Ссылка);
		Комментарии_ат.ЗагрузитьКомментарийСинхронизируемый(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если НЕ СозданиеФормы ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Комментарии_ат.ЗагрузитьКомментарийВнутренний(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
	Если СозданиеФормы И Элементы.КомментарийВнутренний.Видимость И НЕ Элементы.КомментарийВнутренний.ТолькоПросмотр Тогда
		
		РаботаСHTML_Сервер_ат.СоздатьПанелиРаботыСHTML(ЭтаФорма, Элементы.КомментарийВнутренний_КоманднаяПанель,
			"КомментарийВнутренний_ОбработчикКоманд", , Элементы.КомментарийВнутренний.КонтекстноеМеню);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийДокументСформирован(Элемент)
	
	КомментарийВнутреннийСформирован = Истина;
	
	//ДобавитьОбработчик Элемент.Документ.Body.oncontextmenu, ОбработчикСобытийВнутреннегоКомментария;
	
	РаботаСHTML_Клиент_ат.УстановитьДоступностьПанелейРедактирования(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутреннийПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаСHTML_Клиент_ат.ИзменитьПометкиКнопок(Элементы.КомментарийВнутренний_КоманднаяПанель,
		Элементы.КомментарийВнутренний.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСобытийВнутреннегоКомментария(Событие)
	
	Если Событие.type = "contextmenu" Тогда
		
		ПолеМожноРедактировать = РаботаСHTML_Клиент_ат.HTMLПолеМожноРедактировать(Элементы.КомментарийВнутренний);
		
		Для каждого ЭлементКонтекстногоМеню Из Элементы.КомментарийВнутренний.ПодчиненныеЭлементы Цикл
			
			Если НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ВключитьВозможностьРедактирования"
				И НЕ ЭлементКонтекстногоМеню.Имя = "КомментарийВнутренний_КонтекстноеМеню_ПроверитьОрфографию" Тогда
				
				ЭлементКонтекстногоМеню.Доступность = ПолеМожноРедактировать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПолеМожноРедактировать Тогда
			
			Если Событие.srcElement.id = "red_marker" Тогда
				
				РаботаСHTML_Клиент_ат.ОбработатьВызовКонтекстногоМеню(Событие, КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);	
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам);
				
			Иначе
				
				ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
				
			КонецЕсли;
			
		Иначе
			
			ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(Неопределено, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКонтестноеМенюЗаменыСловВнутреннегоКомментария(СоответствиеКомандЗаменыСловам, ТолькоОчистить = Ложь)
	
	РаботаСHTML_Сервер_ат.ИзменитьКонтестноеМенюЗаменыСловПоляHTML(ЭтаФорма,
		Элементы.КомментарийВнутренний.КонтекстноеМеню, СоответствиеКомандЗаменыСловам,
		ТолькоОчистить, "КомментарийВнутренний_ОбработчикКоманд");
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВнутренний_ОбработчикКоманд(Команда, ВыбранноеЗначение)
	
	РаботаСHTML_Клиент_ат.ОбработчикКомандРаботыСHTML(ЭтаФорма, Команда, ВыбранноеЗначение,
		Элементы.КомментарийВнутренний, Элементы.КомментарийВнутренний_КоманднаяПанель,
		КоординатыЗаменяемогоСлова, СоответствиеКомандЗаменыСловам);
	
КонецПроцедуры

#КонецОбласти
