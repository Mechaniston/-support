
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	ПоказыватьШаблоныПодчиненныхГрупп = Истина;
	
	ОбновитьЗначениеПараметра(ГруппыШаблонов, "Пользователь", Пользователи.ТекущийПользователь());
	ОбновитьЗначениеПараметра(Список, "ВыбиратьИерархически", Истина);
	
	ХранимыеПараметры = Новый Структура;
	ХранимыеПараметры.Вставить("ГруппаВсеШаблоны", Справочники.ГруппыШаблоновЗаявок_ат.ВсеШаблоны);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УправляемыеФормы_Клиент_ат.ПередЗакрытием(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиДействийПользователя

&НаКлиенте
Процедура ГруппыШаблоновПриАктивизацииСтроки(Элемент)

	ОбновитьЗначениеПараметра(Список, "ГруппаШаблонов", Элементы.ГруппыШаблонов.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьШаблоныПодчиненныхГруппПриИзменении(Элемент)
	
	ОбновитьЗначениеПараметра(Список, "ВыбиратьИерархически", ЭтаФорма.ПоказыватьШаблоныПодчиненныхГрупп);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыШаблоновПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыШаблоновПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппыШаблонов.ТекущаяСтрока = Строка ИЛИ Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		Перемещение = Истина;
	Иначе
		Перемещение = Ложь;
	КонецЕсли;
	
	//+ Создание представления для вопроса
	КоличествоШаблонов = ПараметрыПеретаскивания.Значение.Количество();
	Представление = "шаблон" + ?(КоличествоШаблонов > 1, "ы (" + КоличествоШаблонов + " шт.)",
		" """ + Строка(ПараметрыПеретаскивания.Значение[0]) + """");
	//- Создание представления для вопроса
	
	//+ Генерация текста вопроса
	Если ХранимыеПараметры.ГруппаВсеШаблоны = Строка Тогда // перемещение в группу "Все шаблоны"
		ТекстВопроса = "Исключить " + Представление + " из группы " + Элементы.ГруппыШаблонов.ТекущаяСтрока;
	Иначе	
		Действие = ?(ХранимыеПараметры.ГруппаВсеШаблоны = Элементы.ГруппыШаблонов.ТекущаяСтрока, "Включить ",
			?(Перемещение, "Переместить ", "Скопировать "));
		Если Элементы.ГруппыШаблонов.ДанныеСтроки(Строка).ПометкаУдаления Тогда // перемещение в удаленную группу
			ТекстВопроса = "Группа """ + Строка + """ помечена на удаление." + Символы.ПС;
			ТекстВопроса = ТекстВопроса + Действие + Представление + " в эту группу";
		Иначе
			ТекстВопроса = Действие + Представление + " в группу """ + Строка + """";
		КонецЕсли;
	КонецЕсли;
	ТекстВопроса = ТекстВопроса + "?";
	//- Генерация текста вопроса 
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("ГруппаВсеШаблоны", ХранимыеПараметры.ГруппаВсеШаблоны);
	ПередаваемыеПараметры.Вставить("МассивСсылок", ПараметрыПеретаскивания.Значение);
	ПередаваемыеПараметры.Вставить("ТекущаяГруппа", Элементы.ГруппыШаблонов.ТекущаяСтрока);
	ПередаваемыеПараметры.Вставить("НоваяГруппа", Строка);
	ПередаваемыеПараметры.Вставить("Перемещение", Перемещение);
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ПередаваемыеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеПараметра(Знач ВладелецПараметров, Знач ИмяПараметра, Знач ЗначениеПараметра)
	
	Для Каждого Параметр Из ВладелецПараметров.Параметры.Элементы Цикл
		Если Строка(Параметр.Параметр) = ИмяПараметра Тогда
			Если Параметр.Использование И Параметр.Значение = ЗначениеПараметра Тогда
				Возврат;
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецПараметров.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьГруппуШаблонов(Параметры);

КонецПроцедуры

&НаСервере
Процедура ИзменитьГруппуШаблонов(Параметры)
	
	НачатьТранзакцию();
	Попытка
	Если Параметры.НоваяГруппа <> Параметры.ГруппаВсеШаблоны Тогда
		ДобавитьШаблоныВГруппу(Параметры.НоваяГруппа, Параметры.МассивСсылок);
	КонецЕсли;
	
	Если Параметры.ТекущаяГруппа <> Параметры.ГруппаВсеШаблоны И Параметры.Перемещение Тогда
		УдалитьШаблоныИзГруппы(Параметры.ТекущаяГруппа, Параметры.МассивСсылок);
	КонецЕсли;
		
	ЗафиксироватьТранзакцию();
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();
	Возврат;	
	КонецПопытки;	
	
	Элементы.Список.Обновить();
	Элементы.ГруппыШаблонов.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьШаблоныВГруппу(ГруппаВладелец, МассивШаблонов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставыГруппШаблоновЗаявок_ат.Шаблон
		|ИЗ
		|	РегистрСведений.СоставыГруппШаблоновЗаявок_ат КАК СоставыГруппШаблоновЗаявок_ат
		|ГДЕ
		|	СоставыГруппШаблоновЗаявок_ат.ГруппаШаблонов = &ГруппаШаблонов
		|	И СоставыГруппШаблоновЗаявок_ат.Шаблон В(&МассивШаблонов)";

	Запрос.УстановитьПараметр("ГруппаШаблонов", ГруппаВладелец);
	Запрос.УстановитьПараметр("МассивШаблонов", МассивШаблонов);

	СуществующиеЗаписи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Шаблон");;

	Если СуществующиеЗаписи.Количество() = МассивШаблонов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СоставыГруппШаблоновЗаявок_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаШаблонов.Установить(ГруппаВладелец);
	НаборЗаписей.Прочитать();
	
	ДобавленыЗаписи = Ложь;
	Для Каждого Шаблон Из МассивШаблонов Цикл
		Если СуществующиеЗаписи.Найти(Шаблон) = Неопределено Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ГруппаШаблонов = ГруппаВладелец;
			НоваяЗапись.Шаблон = Шаблон;
			ДобавленыЗаписи = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ДобавленыЗаписи Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьШаблоныИзГруппы(ГруппаВладелец, МассивШаблонов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоставыГруппШаблоновЗаявок_ат.ГруппаШаблонов,
		|	СоставыГруппШаблоновЗаявок_ат.Шаблон
		|ИЗ
		|	РегистрСведений.СоставыГруппШаблоновЗаявок_ат КАК СоставыГруппШаблоновЗаявок_ат
		|ГДЕ
		|	СоставыГруппШаблоновЗаявок_ат.ГруппаШаблонов = &ГруппаШаблонов
		|	И НЕ СоставыГруппШаблоновЗаявок_ат.Шаблон В (&МассивШаблонов)";

	Запрос.УстановитьПараметр("ГруппаШаблонов", ГруппаВладелец);
	Запрос.УстановитьПараметр("МассивШаблонов", МассивШаблонов);

	НаборЗаписей = РегистрыСведений.СоставыГруппШаблоновЗаявок_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГруппаШаблонов.Установить(ГруппаВладелец);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти
