
&НаКлиенте
Процедура TerminalServicesModeПриИзменении(Элемент)
	
	Если TerminalServicesMode = 0 then
		Элементы.TerminalServicesMode.Подсказка = "Этот режим позволит вам одновременно открыть две сессии RDP и один сеанс консоли в контейнер. Не требует использования сервера лицензирования сервера терминалов" ;
	Иначе
		Элементы.TerminalServicesMode.Подсказка = "Этот режим позволяет одновременно открывать любое количество сеансов RDP в контейнере, как определено по выдаче сервера служб терминалов. Некоторые приложения требуют могут требовать это режим для их эксплуатации";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура HDDПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Элемент.ТекущиеДанные.объем = HDDПриОкончанииРедактированияНаСервере(
	Элемент.ТекущиеДанные.Количество, Элемент.ТекущиеДанные.HDD_ат, Элемент.ТекущиеДанные.Raid);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция   HDDПриОкончанииРедактированияНаСервере(количество,HDD_ат,Raid)
	
	Возврат РаботаССерверами_ат.ОбъёмДисковойСистемы(количество,HDD_ат,Raid);
	
КонецФункции 

#Область ОтборCPU

&НаКлиенте
Процедура CPUПроцессорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// отбор процессора по разьему в материнке
	
	СтандартнаяОбработка = Ложь; 
	ПараметрыОтбора =  Новый Структура("Отбор",ПолучитьПарметрыОтбораCPU());
	ОткрытьФорму("Справочник.CPU_ат.ФормаВыбора",ПараметрыОтбора,Элемент);
	
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПарметрыОтбораCPU()
	
	ПараметрыОтбора = Новый Структура;
	//сравниваем значения реквизита Разъем с реквизитом СокетПодПроцессор 
	ПараметрыОтбора.Вставить("Разъем", Объект.МатеринскаяПлата.СокетПодПроцессор.Ссылка);
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти

#Область ОтборRAM

&НаКлиенте
Процедура RAMМодулиПамятиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// отбор RAM по типу в материнке
	
	СтандартнаяОбработка = Ложь; 
	ПараметрыОтбора =  Новый Структура("Отбор",ПолучитьПарметрыОтбораRAM());
	ОткрытьФорму("Справочник.МодулиПамяти_ат.ФормаВыбора",ПараметрыОтбора,Элемент);
	
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьПарметрыОтбораRAM()
	
	ПараметрыОтбора = Новый Структура;
	//сравниваем значения реквизита Разъем с реквизитом СокетПодПроцессор 
	ПараметрыОтбора.Вставить("ТипПамяти", Объект.МатеринскаяПлата.ТипПамяти);
	ПараметрыОтбора.Вставить("ПоддержкаECC", Объект.МатеринскаяПлата.ПоддержкаECC);
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОформлениеИнтерфейса()
	
	Подсказка1 = "(pcs)" ;
	//+ Символы.ПС + "Это положительное целое число, которое определяет, сколько процессорного времени одного контейнера получит в сравнении с другими Контейнеры," +  
	//				"в случае когда все процессоры узла полностью используется. Контейнер может потреблять больше, чем гарантированное значение, " +  
	//				"если нет других Контейнеров, конкурирующих за CPU и параметр 'CPULimit' не определен.";
	Подсказка2 = "(в %) ";
	//+ Символы.ПС + "Это положительное целое число, указывающее время центрального процессора, в процентах, который соответствующий контейнер гарантированно получит.";
	Подсказка3 = "(в %) ";
	//+ Символы.ПС + "Это положительное число, указывающее время центрального процессора, в процентах, которое соответствующий контейнер не может превышать.";
	Подсказка4 = "(Кол-во ядер)";
	//+ Символы.ПС + "Количество процессоров используется для выполнения всех процессов, запущенных внутри контейнера."+
	//				"По умолчанию, любой контейнер разрешается потреблять процессорное время всех процессоров, установленных на узле.";
	
	Описание =	"Это положительное целое число, которое определяет, сколько процессорного времени одного контейнера получит в сравнении с другими Контейнеры," +  
	"в случае когда все процессоры узла полностью используется. Контейнер может потреблять больше, чем гарантированное значение, " +  
	"если нет других Контейнеров, конкурирующих за CPU и параметр 'CPULimit' не определен."; 
	
	Описание1 =	"Это положительное целое число, указывающее время центрального процессора, в процентах, который соответствующий контейнер гарантированно получит.";
	Описание2 =	"Это положительное число, указывающее время центрального процессора, в процентах, которое соответствующий контейнер не может превышать.";
	Описание3 =	"Количество процессоров используется для выполнения всех процессов, запущенных внутри контейнера."+
	"По умолчанию, любой контейнер разрешается потреблять процессорное время всех процессоров, установленных на узле.";
	
	Описание4 =	"Используйте, чтобы данный сервер-контейнер автоматически стартовал при включении Ноды.";
	описание5	=	"Выберите этот флажок, чтобы включить показ ID строки, которая будет отображаться на рабочем столе контейнера. "+ 
	"Эта строка, отображаемая в правом верхнем углу контейнера рабочего стола и идентифицирует контейнер, в который вы вошли в настоящее время";
	описание6	= 	"Выберите этот флажок, чтобы включить поддержку сети просмотра внутри контейнера. "+ 
	"Это позволит просматривать и получить доступ ко всем сетевых серверам и совместно использовать файловые ресурсы, имеющиеся в вашей сети Windows изнутри контейнера";				
	описание7	= 	"Выберите этот флажок, чтобы включить пакетный QoS планировщик для вашего сервера-контейнера";
	Внимание	= 	"У выбранных пользователей в контактной информации должно быть заполнено поле " + 
	Символ(34)+"Email  для уведомлений" + Символ(34);
	
	Элементы.CPUguarantee.Подсказка 	= Подсказка2;
	Элементы.CPULimit.Подсказка 			= Подсказка3;
	Элементы.CPUUnits.Подсказка			= Подсказка1;
	Элементы.NumberOfCpus.Подсказка  	= Подсказка4;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеВыделенныхРесурсов(Сервер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РесурсыИПараметрыСерверов_ат.Сервер,
	|	РесурсыИПараметрыСерверов_ат.Родитель,
	|	РесурсыИПараметрыСерверов_ат.Параметр,
	|	РесурсыИПараметрыСерверов_ат.Значение
	|ИЗ
	|	РегистрСведений.РесурсыИПараметрыСерверов_ат КАК РесурсыИПараметрыСерверов_ат
	|ГДЕ
	|	РесурсыИПараметрыСерверов_ат.Сервер = &Сервер";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.Core тогда 
			NumberOfCpus = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.HDD_ат тогда
			ContainerDiskSpace = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.RAM тогда
			ContainerMemory = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.numproc тогда
			NumberOfProcess = ВыборкаДетальныеЗаписи.Значение;
			
			
			
			// сведения о сети	
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.IPv4 тогда 
			IPv4 = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.mask тогда
			Mask = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.gate тогда
			gate = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.dns тогда
			DNS = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.dns2 тогда
			DNS2 = ВыборкаДетальныеЗаписи.Значение;
			
			// дополнительно 
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.AdmPass тогда 
			ПарольАдмина = ВыборкаДетальныеЗаписи.Значение;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.СозданНаСервере тогда
			СозданНаСервере = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.Запущен тогда
			Запущен = ВыборкаДетальныеЗаписи.Значение;
			
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.VEID тогда
			VEID = ВыборкаДетальныеЗаписи.Значение;	
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.РазрешенаАренда тогда
			РазрешенаАренда = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.СборСтатистикиWMI тогда
			СборСтатистикиWMI = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.СборСтатистикиVZ тогда
			СборСтатистикиVZ = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ТипыРесурсов_ат.СборСтатистикиZabbix тогда
			СборСтатистикиZabbix = ВыборкаДетальныеЗаписи.Значение;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПараметровУведомлений(Сервер)
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыУведомленийОСерверах_ат.Сервер,
	|	ПараметрыУведомленийОСерверах_ат.Параметр,
	|	ПараметрыУведомленийОСерверах_ат.Значение
	|ИЗ
	|	РегистрСведений.ПараметрыУведомленийОСерверах_ат КАК ПараметрыУведомленийОСерверах_ат
	|ГДЕ
	|	ПараметрыУведомленийОСерверах_ат.Сервер = &Сервер";
	
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		//значения
		Если ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПроцессора тогда
			ЗначениеКритическойНагрузкиCPU = ВыборкаДетальныеЗаписи.Значение ;
		ИначеЕсли  ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПамяти тогда
			ЗначениеКритичнойЗагрузкиRAM = ВыборкаДетальныеЗаписи.Значение ;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаДисковойПодсистемы тогда
			ЗначениеКритичногоЗаполненияHDD = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаПроцессора тогда
			ЗначениеВысокойНагрузкиCPU = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаПамяти тогда
			ЗначениеВысокойЗагрузкиRAM = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаДисковойПодсистемы тогда
			ЗначениеПредельногоЗаполненияHDD = ВыборкаДетальныеЗаписи.Значение;
			
			// уведомления	
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи тогда
			УведомлятьОНедоступностиСервера = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПроцессора тогда
			УведомлятьОВысокойЗагрузкеПроцессора = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПамяти тогда
			УведомлятьОВысокойЗагрузкеПамяти = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПороговомЗаполненииДисковойПодсистемы тогда
			УведомлятьОВысокомЗаполненииДисковойПодсистемы = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПроцессора тогда
			УведомлятьОКритическойЗагрузкеПроцессора = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПамяти тогда
			УведомлятьОКритическойЗагрузкеПамяти = ВыборкаДетальныеЗаписи.Значение;
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическомЗаполненииДискокойПодсистемы Тогда 
			УведомлятьОКритическомЗаполненииДисковойПодсистемы = ВыборкаДетальныеЗаписи.Значение;
			
			// периодичность	 
		ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийГлобальная тогда
			ПериодичностьУведомлений =  ВыборкаДетальныеЗаписи.Значение;
			
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОбОтсутствииСвязиССервером тогда
			//	  ПериодичностьУведомленийОНедоступностиСервера = ВыборкаДетальныеЗаписи.Значение;
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеПроцессора тогда
			//	  ПериодичностьУведомленийОВысокойЗагрузкиПроцессора = ВыборкаДетальныеЗаписи.Значение;
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеПамяти тогда
			//	  ПериодичностьУведомленийОВысокойЗагрузкиПамяти = ВыборкаДетальныеЗаписи.Значение;
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеДиска тогда
			//	  ПериодичностьУведомленийОВысокомЗаполненииДисковойПодсистемы = ВыборкаДетальныеЗаписи.Значение;
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеПроцессора тогда
			//	  ПериодичностьУведомленийОКритическойЗагрузкеПроцессора = ВыборкаДетальныеЗаписи.Значение;
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеПамяти тогда
			//	  ПериодичностьУведомленийОКритическойЗагрузкеПамяти = ВыборкаДетальныеЗаписи.Значение;
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеДисковойПодсистемы тогда
			//	  ПериодичностьУведомленийОКритическомЗаполненииДисковойПодсистемы = ВыборкаДетальныеЗаписи.Значение;
			
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПроцессора тогда
			//	  ВыборкаДетальныеЗаписи.Значение = ЗначениеКритическойНагрузкиCPU;
			//ИначеЕсли ВыборкаДетальныеЗаписи.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПроцессора тогда
			//	  ВыборкаДетальныеЗаписи.Значение = ЗначениеКритическойНагрузкиCPU;
			
		конецЕсли;
		
		
		
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОформлениеИнтерфейса();
	УсредненныеЗначенияЗа = Константы.ПериодДляУсредненногоЗначеннияWMI_ат.Получить();
	
	
	Если не Объект.Ссылка.Пустая() тогда 
		Сервер = Объект.Ссылка;
		
		ЗаполнениеВыделенныхРесурсов(Сервер);
		ЗаполнениеПараметровУведомлений(Сервер);
		
		
		
	Иначе
	КонецЕсли;
	
	//СписокУведомляемых.Параметры.УстановитьЗначениеПараметра("Ссылка",Объект.Ссылка);
	
	НазначениеПараметровЖелеза();
	
	ПроверкаОтображения();
	
	ЗаполениеСписковИнтерфейсовИАдресов();
	
	ЗаполнениеСпискаУведомляемых();
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПараметровЖелеза()
	
	Если НЕ Объект.МатеринскаяПлата.Пустая() тогда
		ЖелезоРазъемПроцессора 	= Объект.МатеринскаяПлата.СокетПодПроцессор;
		ЖелезоТипПамяти			= Объект.МатеринскаяПлата.ТипПамяти; 
		ЖелезоПоддержкаECC		= Объект.МатеринскаяПлата.ПоддержкаECC;	
	Иначе
		ЖелезоРазъемПроцессора 	= Неопределено;
		ЖелезоТипПамяти			= Неопределено; 
		ЖелезоПоддержкаECC		= Неопределено;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеСтатистикиWMI()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОСерверахПоWMI_ат.ТипРесурса,
	|	СРЕДНЕЕ(СведенияОСерверахПоWMI_ат.Значение) КАК Значение
	|ИЗ
	|	РегистрСведений.СведенияОСерверахПоWMI_ат КАК СведенияОСерверахПоWMI_ат
	|ГДЕ
	|	СведенияОСерверахПоWMI_ат.Сервер = &Сервер
	|	И СведенияОСерверахПоWMI_ат.Период МЕЖДУ &Период1 И &Период2
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОСерверахПоWMI_ат.ТипРесурса";
	
	Запрос.УстановитьПараметр("Период1", (ПоследниеДанныеАктуальныНа -УсредненныеЗначенияЗа*60*60));
	Запрос.УстановитьПараметр("Период2", ПоследниеДанныеАктуальныНа);
	Запрос.УстановитьПараметр("Сервер", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		// в этот цикл нужно добавлять дополнительные параметры которые мы хотим показать
		//Если 	ВыборкаДетальныеЗаписи.ТипРесурса =   Перечисления.ТипыРесурсовWMI_ат.CPU_proc тогда
		//	Парам = полученныеПараметры.Добавить();
		//	Парам.НаименованиеПараметра 	= Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
		//	Парам.Значение 								= ВыборкаДетальныеЗаписи.Значение;
		//ИначеЕсли 	ВыборкаДетальныеЗаписи.ТипРесурса =   Перечисления.ТипыРесурсовWMI_ат.CPU_proc тогда
		//	Парам = полученныеПараметры.Добавить();
		//	Парам.НаименованиеПараметра 	= Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
		//	Парам.Значение 								= ВыборкаДетальныеЗаписи.Значение;			
		//ИначеЕсли 	ВыборкаДетальныеЗаписи.ТипРесурса =   Перечисления.ТипыРесурсовWMI_ат.CPU_proc Тогда 
		//	Парам = полученныеПараметры.Добавить();
		//	Парам.НаименованиеПараметра 	= Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
		//	Парам.Значение 								= ВыборкаДетальныеЗаписи.Значение;			
		
		//КонецЕсли;
		
		Парам = полученныеПараметры.Добавить();
		Парам.НаименованиеПараметра 	= ВыборкаДетальныеЗаписи.ТипРесурса;
		Парам.Значение 					= ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнениеГрафикаНагрузки(Сервер)
	
	График				= Новый ТабличныйДокумент;
	НачалоПериода	= ПоследниеДанныеАктуальныНа -УсредненныеЗначенияЗа*60*60;
	КонецПериода		= ПоследниеДанныеАктуальныНа;
	ПериодДняИНочи	= 0;
	ТипРесурса1		= Перечисления.ТипыРесурсовWMI_ат.CPU_proc;
	ТипРесурса2		= Перечисления.ТипыРесурсовWMI_ат.RAM_proc;
	ТипРесурса3		= Перечисления.ТипыРесурсовWMI_ат.HDD_proc;
	
	
	//Получаем схему из макета
	//СхемаКомпоновкиДанных = Справочники.Серверы_ат.ПолучитьМакет("Макет");
	СхемаКомпоновкиДанных = Отчеты.ОбщийОтчетОПроизводительностиСервера_ат.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	//СхемаКомпоновкиДанных = Отчеты.ПобробнаяСтатисткаWMIПоСерверам.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	ТипРесурса = Новый СписокЗначений;
	ТипРесурса.Добавить(ТипРесурса1);
	ТипРесурса.Добавить(ТипРесурса2);
	ТипРесурса.Добавить(ТипРесурса3);
	
	
	
	КНКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КНКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КНКД.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	// Установка параметров данных
	КНКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сервер", 				Сервер);
	КНКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипыРесурсов", 	ТипРесурса);
	КНКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала",			НачалоПериода);
	КНКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаКонца",			КонецПериода);
	//КНКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода",		НачалоПериода);
	//КНКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",		КонецПериода);
	//КНКД.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПериодДняИНочи",	ПериодДняИНочи);
	
	// Компоновка макета
	
	КМКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КНКД.Настройки;	
	МакетКомпоновкиДанных = КМКД.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанных"));
	
	// Инициализация процессора компоновки
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(График);
	ПроцессорВывода.НачатьВывод();
	
	Пока Истина Цикл
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультата= Неопределено Тогда
			Прервать;
		Иначе
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		КонецЕсли;
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	Если График.Рисунки.Количество() > 0 тогда
		График.Рисунки[0].Ширина = 100;	
		График.Рисунки[0].Высота  = 50;
	Иначе
	КонецЕсли;
	
	//Возврат График;
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки, ДанныеРасшифровки);
	////Выполним компоновку с помощью процессора компоновки
	//ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	////Очищаем поле табличного документа
	//Результат = ЭлементыФормы.Результат;
	//Результат.Очистить();
	////Выводим результат в табличный документ
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.УстановитьДокумент(Результат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);   
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаОтображения()
	
	Элементы.Resources.Видимость					= истина;
	Элементы.TerminalServices.Видимость		= истина;
	Элементы.СведенияПоWMI.Видимость			= истина;
	Элементы.СборСтатистикиWMI.Видимость	= истина;
	Элементы.СборСтатистикиVZ.Видимость		= истина;
	
	Элементы.РазрешенаАренда.Видимость		= истина;
	Элементы.Resources.Видимость					= истина;
	Элементы.VEID.Видимость							= истина;
	Элементы.Опции.Видимость						= Истина;
	Элементы.Ресурсы.Видимость					= Истина;
	
	Элементы.ПараметрыУведомлений.Видимость	= Истина;
	
	Если Объект.Чужой = истина тогда
		Элементы.СборСтатистикиWMI.Видимость = ложь;
		Элементы.СборСтатистикиVZ.Видимость = ложь;
		Элементы.Виртуализация.Видимость =ложь;
		Элементы.РазрешенаАренда.Видимость = ложь;
		Элементы.Resources.Видимость = ложь;
		Элементы.TerminalServices.Видимость = ложь;
		Элементы.СведенияПоWMI.Видимость = ложь;
		Элементы.ПараметрыУведомлений.Видимость = ложь;
		Элементы.Опции.Видимость = ложь;
		Элементы.Ресурсы.Видимость = ложь;
		
		//	Элементы.ОсновнойIP.РежимВыбораИзСписка = Ложь;
		//	Элементы.ОсновнойIP.КнопкаСоздания = истина;
		//	//Элементы.ОсновнойIP.Доступность = Истина;
		//	
		//	// это нужно чтобы новые адреса "чужих" были привязаны непосредственно к серверам, а не интерфейсам.
		//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Ссылка");
		//	НовыйМассив = Новый Массив();
		//	НовыйМассив.Добавить(НоваяСвязь);
		//
		//			НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		//		Элементы.ОсновнойIP.СвязиПараметровВыбора = НовыеСвязи;
		
	Иначе
		//Элементы.ОсновнойIP.РежимВыбораИзСписка = истина;
		//Элементы.ОсновнойIP.КнопкаСоздания = ложь;
		
		
	КонецЕсли;
	
	Если Объект.Родитель.Пустая() тогда 
		Элементы.Виртуализация.Доступность = ложь;
		Объект.Виртуализация = Справочники.ВидыВиртуализацииСерверов_ат.БезВиртуализации;
	Иначе 
	КонецЕсли;
	
	
	Если Объект.Виртуализация = Справочники.ВидыВиртуализацииСерверов_ат.БезВиртуализации
		тогда
		ЭтаФорма.Элементы.VEID.Видимость = ложь;
		Элементы.Опции.Видимость = ложь;
		Элементы.Resources.Видимость = ложь;
		Элементы.TerminalServices.Видимость = ложь;
		
		//ЭтаФорма.Элементы.Аренда.Доступность = Истина;
		//ЭтаФорма.Элементы.КонтрагентВладелец.Доступность = ложь;
		//ЭтаФорма.Элементы.СборСтатистикиWMI.Доступность = истина;
		
		
	ИначеЕсли Объект.Виртуализация = Справочники.ВидыВиртуализацииСерверов_ат.VirtuozzoParallels
		тогда
		ЭтаФорма.Элементы.Ресурсы.Видимость = Ложь;
		//ЭтаФорма.Элементы.Аренда.Доступность = ложь;
		//ЭтаФорма.Элементы.КонтрагентВладелец.Доступность = истина;
		
		//ИначеЕсли Объект.Виртуализация =  Справочники.Виртуализация_ат.
		//	ЭтаФорма.Элементы.VEID.Видимость = ложь;
		//	ЭтаФорма.Элементы.Ресурсы.Видимость = Ложь;
		
		
	Иначе
		ЭтаФорма.Элементы.Ресурсы.Видимость = Ложь;
		ЭтаФорма.Элементы.VEID.Видимость = ложь;
		Элементы.Опции.Видимость = ложь;
		Элементы.TerminalServices.Видимость = ложь;
		
		
		
		
		Если Объект.Ссылка.Пустая() тогда
			ЭтаФорма.Элементы.VEID.Доступность = Истина;
		Иначе 
			ЭтаФорма.Элементы.VEID.Доступность = ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СборСтатистикиWMI = истина тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОСерверахПоWMI_атСрезПоследних.Период,
		|	СведенияОСерверахПоWMI_атСрезПоследних.Сервер
		|ИЗ
		|	РегистрСведений.СведенияОСерверахПоWMI_ат.СрезПоследних КАК СведенияОСерверахПоWMI_атСрезПоследних
		|ГДЕ
		|	СведенияОСерверахПоWMI_атСрезПоследних.Сервер = &Сервер";
		
		Запрос.УстановитьПараметр("Сервер", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПоследниеДанныеАктуальныНа = ВыборкаДетальныеЗаписи.Период;
		КонецЦикла;
		
		ПолучениеСтатистикиWMI();
		
		Элементы.СведенияПоWMI.Видимость = Истина;
		//Элементы.ПараметрыУведомлений.Доступность = Истина;
		ЗаполнениеГрафикаНагрузки(Объект.Ссылка);
		
	Иначе
		Элементы.СведенияПоWMI.Видимость = ложь;
		//Элементы.ПараметрыУведомлений.Доступность = ложь;
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") или РольДоступна("КлиентАрендатор_ат") тогда 
		
		ПолучитьСетевыеИнтерфейсы(Объект.Ссылка);
		
	Иначе
		Элементы.ПараметрыУведомлений.Видимость = Ложь;
	КонецЕсли;
	
	
	Если		СборСтатистикиVZ = истина 
		или	СборСтатистикиWMI = Истина 
		или	СборСтатистикиZabbix = Истина тогда
		Элементы.ПараметрыУведомлений.Доступность = Истина;
	Иначе
		Элементы.ПараметрыУведомлений.Доступность = ложь;
	КонецЕсли;
	
	Если РольДоступна("ОрганизацияСотрудник_ат") или РольДоступна("ПолныеПрава")тогда
		Элементы.КомментарийДляНас.Видимость	= Истина;
		Элементы.ОсновнойIP.Доступность			= Истина;
		Элементы.ОсновнойIP.Видимость				= Истина;
		Элементы.Виртуализация.Видимость 			= истина;
		Элементы.Родитель.Видимость					= Истина;
		Если Объект.Родитель.Пустая() тогда 
			Элементы.Виртуализация.Доступность = ложь;
			Объект.Виртуализация = Справочники.ВидыВиртуализацииСерверов_ат.БезВиртуализации;
		Иначе 
			
		КонецЕсли;
		Элементы.СетевыеИнтерфейсы.Видимость	= Истина;
		Элементы.DNS.Видимость							= Истина;
		Элементы.WINS.Видимость						= Истина;
		Элементы.SearchDomains.Видимость			= Истина;
		Элементы.Шлюз.Видимость						= Истина;
		Элементы.СетевыеПараметры.Видимость		= Истина;             //???
		
		Элементы.НастройкаСбораСтатистики.Видимость	 = Истина;
		
	Иначе
		
		Элементы.КомментарийДляНас.Видимость	= Ложь;
		Если Объект.ОсновнойIP.Белый или Объект.ОсновнойIP.Чужой тогда
			Элементы.ОсновнойIP.Видимость	= Истина;
		Иначе
			Элементы.ОсновнойIP.Видимость	= Ложь;
		КонецЕсли;
		
		Элементы.Виртуализация.Видимость 			= Ложь;
		Элементы.Родитель.Видимость					= Ложь;
		Элементы.СетевыеИнтерфейсы.Видимость	= Ложь;
		Элементы.DNS.Видимость							= Ложь;
		Элементы.WINS.Видимость						= Ложь;
		Элементы.SearchDomains.Видимость			= Ложь;
		Элементы.Шлюз.Видимость						= Ложь;
		Элементы.СетевыеПараметры.Видимость		= Ложь;
		Элементы.НастройкаСбораСтатистики.Видимость	 = Ложь;
	КонецЕсли;
	
	#область  old
	//	Если НЕ ЗначениеЗаполнено(Доступ) тогда 
	//		Элементы.login.Видимость		= ложь;
	//		Элементы.Password.Видимость	= ложь;
	//		Элементы.ПараметрыУведомлений.Видимость	= ложь;
	//		Элементы.СборСтатистикиWMI.Видимость 		= ложь;
	//		Элементы.СведенияПоWMI.Видимость			= ложь;
	//		Сообщить("Для данного сервера не обнаружена запись в спр.Доступы с видом 'Администратор' -  часть параметров не доступна!");
	//	Иначе
	//		Элементы.login.Видимость		= Истина;
	//		Элементы.Password.Видимость	= Истина;
	//		Элементы.ПараметрыУведомлений.Видимость	= Истина;
	//		Элементы.СборСтатистикиWMI.Видимость 		= Истина;
	//	
	//	Если СборСтатистикиWMI = истина тогда
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//			"ВЫБРАТЬ
	//			|	СведенияОСерверахПоWMI_атСрезПоследних.Период,
	//			|	СведенияОСерверахПоWMI_атСрезПоследних.Сервер
	//			|ИЗ
	//			|	РегистрСведений.СведенияОСерверахПоWMI_ат.СрезПоследних КАК СведенияОСерверахПоWMI_атСрезПоследних
	//			|ГДЕ
	//			|	СведенияОСерверахПоWMI_атСрезПоследних.Сервер = &Сервер";
	//		
	//		Запрос.УстановитьПараметр("Сервер", Объект.Ссылка);
	//		
	//		РезультатЗапроса = Запрос.Выполнить();
	//		
	//		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//		
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//			 ПоследниеДанныеАктуальныНа = ВыборкаДетальныеЗаписи.Период;
	//		КонецЦикла;
	//			
	//			УсредненныеЗначенияЗа = Константы.ПериодДляУсредненногоЗначеннияWMI_ат.Получить();
	//			ПолучениеСтатистикиWMI();
	//			
	//			Элементы.СведенияПоWMI.Видимость = Истина;
	//			Элементы.ПараметрыУведомлений.Доступность = Истина;
	//				
	//		Иначе
	//			Элементы.СведенияПоWMI.Видимость = ложь;
	//			Элементы.ПараметрыУведомлений.Доступность = ложь;
	//		КонецЕсли;
	//	КонецЕсли;
	//	если ВзаимодействиеПодсистем_ат.ПроверкаТипаПродукта(Объект.Ссылка,Перечисления.ТипыПродуктов_ат.СерверMSWindows)	тогда
	//		ЭтаФорма.Элементы.СборСтатистикиWMI.Доступность = истина;
	//	Иначе 
	//		ЭтаФорма.Элементы.СборСтатистикиWMI.Доступность = Ложь;
	//	КонецЕсли;
	//	Если СборСтатистикиWMI = истина тогда
	//		Элементы.СведенияПоWMI.Видимость = Истина;
	//		Элементы.ПараметрыУведомлений.Доступность = Истина;
	//		
	//	Иначе
	//	 	Элементы.СведенияПоWMI.Видимость = ложь;
	//		Элементы.ПараметрыУведомлений.Доступность = ложь;
	//	КонецЕсли;
	//Если Объект.УведомлятьОВысокойНагрузке 		= Истина тогда
	//	Элементы.ПериодУведомленийОВысокойНагрузки.Доступность 	= истина;
	//	Элементы.ДостижениеНАПриПроц.Доступность 					= Истина;
	//Иначе
	//	Элементы.ПериодУведомленийОВысокойНагрузки.Доступность	= ложь;
	//	Элементы.ДостижениеНАПриПроц.Доступность						= Ложь;
	//КонецЕсли;
	
	//Если Объект.УведомлятьОКритическойНагрузке 	= Истина тогда
	//	Элементы.ПериодКритическихУведомлений.Доступность 			= Истина;
	//	Элементы.ДостижениеКритическогоНАПриПроц.Доступность 		= Истина;
	//Иначе
	//	Элементы.ПериодКритическихУведомлений.Доступность 			= Ложь;
	//	Элементы.ДостижениеКритическогоНАПриПроц.Доступность 		= Ложь;
	//	
	//КонецЕсли;
	# КонецОбласти
КонецПроцедуры

&НаСервере
Процедура ПодстановкаЗначений()
	
	//	Если Объект.Виртуализация = Справочники.Виртуаллизация_ат.VirtuozzoParallels
	//		И НЕ Объект.Родитель.Пустая() тогда
	//		Объект.ОперационнаяСистема =  Объект.Родитель.ОперационнаяСистема;
	//	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВиртуализацияПриИзменении(Элемент)
	
	ПроверкаОтображения();
	ПодстановкаЗначений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Ошибка = ложь;
	Если Объект.КонтрагентВладелец.Пустая() тогда 
	Иначе
		Если Объект.Чужой = ложь тогда	
			Если Объект.Виртуализация = ПредопределенноеЗначение("Справочник.ВидыВиртуализацииСерверов_ат.БезВиртуализации") тогда
				
				Если НЕ ЗначениеЗаполнено(Объект.CPU_ат) тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "Объект.CPU_ат";
					Сообщение.Текст = "Необходимо указать кол-во ядер доступных серверу!";
					Сообщение.Сообщить();
					Ошибка = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.HDD_ат) тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "Объект.HDD_ат";
					Сообщение.Текст = "Необходимо указать размер данных доступных серверу!";
					Сообщение.Сообщить();
					Ошибка = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.RAM) тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "Объект.RAM";
					Сообщение.Текст = "Необходимо указать объем оперативной памяти доступной серверу!";
					Сообщение.Сообщить();
					Ошибка = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.КонтрагентВладелец) тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.ПутьКДанным = "Объект.КонтрагентВладелец";
					Сообщение.Текст = "Необходимо указать Владельца сервера!";
					Сообщение.Сообщить();
					Ошибка = Истина;
				КонецЕсли;
				
			ИначеЕсли Объект.Виртуализация.Пустая() тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.ПутьКДанным = "Объект.Виртуализация";
				Сообщение.Текст = "Необходимо указать виртуаллизацию!!";
				Сообщение.Сообщить();
				Ошибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Hostname) тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.ПутьКДанным = "Объект.Hostname";
			Сообщение.Текст = "Необходимо указать Hostname!";
			Сообщение.Сообщить();
			Ошибка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Ошибка = Истина тогда отказ = истина;
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НаборЗаписей  = РегистрыСведений.РесурсыИПараметрыСерверов_ат.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сервер.Установить(Объект.Ссылка);
	
	// ресурсы
	Ядро = НаборЗаписей.Добавить();
	Ядро.Сервер = Объект.Ссылка;
	Ядро.Родитель =  Объект.Родитель;
	Ядро.Параметр = Перечисления.ТипыРесурсов_ат.Core;
	Ядро.Значение = NumberOfCpus;   
	
	HD = НаборЗаписей.Добавить();
	HD.Сервер = Объект.Ссылка;
	HD.Параметр = Перечисления.ТипыРесурсов_ат.HDD_ат;
	HD.Родитель =  Объект.Родитель;
	HD.Значение = СтрЗаменить(ContainerDiskSpace,символы.НПП,"");   
	
	Память = НаборЗаписей.Добавить();
	Память.Сервер = Объект.Ссылка;
	Память.Параметр = Перечисления.ТипыРесурсов_ат.RAM;
	Память.Родитель =  Объект.Родитель;
	Память.Значение = СтрЗаменить(ContainerMemory,символы.НПП,"");
	
	//ParamDNS = НаборЗаписей.Добавить();
	//ParamDNS.Родитель =  Объект.Родитель;
	//ParamDNS.Сервер = Объект.Ссылка;
	//ParamDNS.Параметр = Перечисления.ТипыРесурсов_ат.dns;
	//ParamDNS.Значение = DNS;
	//
	//ParamDNS2 = НаборЗаписей.Добавить();
	//ParamDNS2.Родитель =  Объект.Родитель;
	//ParamDNS2.Сервер = Объект.Ссылка;
	//ParamDNS2.Параметр = Перечисления.ТипыРесурсов_ат.dns2;
	//ParamDNS2.Значение = DNS2;
	
	
	// параметры
	ParamNumproc = НаборЗаписей.Добавить();
	ParamNumproc.Родитель =  Объект.Родитель;ParamNumproc.Сервер = Объект.Ссылка;
	ParamNumproc.Параметр = Перечисления.ТипыРесурсов_ат.numproc;
	ParamNumproc.Значение = NumberOfProcess;
	
	ParamVEID = НаборЗаписей.Добавить();
	ParamVEID.Сервер = Объект.Ссылка;
	ParamVEID.Родитель =  Объект.Родитель;
	ParamVEID.Параметр = Перечисления.ТипыРесурсов_ат.VEID;
	ParamVEID.Значение = VEID;
	
	ParamРазрешенаАренда = НаборЗаписей.Добавить();
	ParamРазрешенаАренда.Сервер = Объект.Ссылка;
	ParamРазрешенаАренда.Родитель =  Объект.Родитель;
	ParamРазрешенаАренда.Параметр = Перечисления.ТипыРесурсов_ат.РазрешенаАренда;
	ParamРазрешенаАренда.Значение = РазрешенаАренда;
	
	//СборСтатистикиWMI
	ParamСтатистикаWMI = НаборЗаписей.Добавить();
	ParamСтатистикаWMI.Сервер = Объект.Ссылка;
	ParamСтатистикаWMI.Родитель =  Объект.Родитель;
	ParamСтатистикаWMI.Параметр = Перечисления.ТипыРесурсов_ат.СборСтатистикиWMI;
	ParamСтатистикаWMI.Значение = СборСтатистикиWMI;
	
	// СборСтатистикиVZ
	ParamСтатистикаZV = НаборЗаписей.Добавить();
	ParamСтатистикаZV.Сервер = Объект.Ссылка;
	ParamСтатистикаZV.Родитель =  Объект.Родитель;
	ParamСтатистикаZV.Параметр = Перечисления.ТипыРесурсов_ат.СборСтатистикиVZ;
	ParamСтатистикаZV.Значение = СборСтатистикиVZ;
	
	// СборСтатистикиZabbix
	ParamСтатистикаZabbix = НаборЗаписей.Добавить();
	ParamСтатистикаZabbix.Сервер = Объект.Ссылка;
	ParamСтатистикаZabbix.Родитель =  Объект.Родитель;
	ParamСтатистикаZabbix.Параметр = Перечисления.ТипыРесурсов_ат.СборСтатистикиZabbix;
	ParamСтатистикаZabbix.Значение = СборСтатистикиZabbix;
	
	//Зап = НаборЗаписей.Добавить();
	//Зап.Сервер = Объект.Ссылка;
	//Зап.Параметр = Перечисления.ТипыРесурсов_ат.AdmPass;
	//Зап.Значение = ПарольАдмина;
	
	// статусы
	// СНС это СозданНаСервере - булево
	//СНС = НаборЗаписей.Добавить();
	//СНС.Сервер = Объект.Ссылка;
	//СНС.Параметр = Перечисления.ТипыРесурсов_ат.СозданНаСервере;
	//СНС.Значение = СозданНаСервере;
	
	//Зап = НаборЗаписей.Добавить();
	//Зап.Сервер = Объект.Ссылка;
	//Зап.Параметр = Перечисления.ТипыРесурсов_ат.Запущен;
	//Зап.Значение = Запущен;
	
	
	// настройки сети
	//IP = НаборЗаписей.Добавить();
	//IP.Сервер = Объект.Ссылка;
	//IP.Параметр = Перечисления.ТипыРесурсов_ат.IPv4;
	//IP.Значение = IPv4;
	//
	//Зап = НаборЗаписей.Добавить();
	//Зап.Сервер = Объект.Ссылка;
	//Зап.Параметр = Перечисления.ТипыРесурсов_ат.mask;
	//Зап.Значение = Mask;
	
	//Зап = НаборЗаписей.Добавить();
	//Зап.Сервер = Объект.Ссылка;
	//Зап.Параметр = Перечисления.ТипыРесурсов_ат.gate;
	//Зап.Значение = gate;
	
	// продолжение будет!!!
	НаборЗаписей.Записать();
	
	
	
	ЗаписьПараметровУведомлений = РегистрыСведений.ПараметрыУведомленийОСерверах_ат.СоздатьНаборЗаписей();
	ЗаписьПараметровУведомлений.Отбор.Сервер.Установить(Объект.Ссылка);
	
	// созраняем галочки параметров
	УведомлениеОбОтстутсвииСвязи = ЗаписьПараметровУведомлений.Добавить();
	УведомлениеОбОтстутсвииСвязи.Сервер = Объект.Ссылка;
	УведомлениеОбОтстутсвииСвязи.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи;
	УведомлениеОбОтстутсвииСвязи.Значение = УведомлятьОНедоступностиСервера;
	
	УведомлениеОВысокойЗагрузкеCPU = ЗаписьПараметровУведомлений.Добавить();
	УведомлениеОВысокойЗагрузкеCPU.Сервер = Объект.Ссылка;
	УведомлениеОВысокойЗагрузкеCPU.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПроцессора;
	УведомлениеОВысокойЗагрузкеCPU.Значение = УведомлятьОВысокойЗагрузкеПроцессора;
	
	УведомлениеОВысокойЗагрузкеRAM = ЗаписьПараметровУведомлений.Добавить();
	УведомлениеОВысокойЗагрузкеRAM.Сервер = Объект.Ссылка;
	УведомлениеОВысокойЗагрузкеRAM.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПамяти;
	УведомлениеОВысокойЗагрузкеRAM.Значение = УведомлятьОВысокойЗагрузкеПамяти;
	
	УведомлениеОВысокойЗагрузкеHDD = ЗаписьПараметровУведомлений.Добавить();
	УведомлениеОВысокойЗагрузкеHDD.Сервер = Объект.Ссылка;
	УведомлениеОВысокойЗагрузкеHDD.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОПороговомЗаполненииДисковойПодсистемы;
	УведомлениеОВысокойЗагрузкеHDD.Значение = УведомлятьОВысокомЗаполненииДисковойПодсистемы;
	
	УведомлениеОКритическойЗагрузкеCPU = ЗаписьПараметровУведомлений.Добавить();
	УведомлениеОКритическойЗагрузкеCPU.Сервер = Объект.Ссылка;
	УведомлениеОКритическойЗагрузкеCPU.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПроцессора;
	УведомлениеОКритическойЗагрузкеCPU.Значение = УведомлятьОКритическойЗагрузкеПроцессора;
	
	УведомлениеОКритическойЗагрузкеRAM = ЗаписьПараметровУведомлений.Добавить();
	УведомлениеОКритическойЗагрузкеRAM.Сервер = Объект.Ссылка;
	УведомлениеОКритическойЗагрузкеRAM.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПамяти;
	УведомлениеОКритическойЗагрузкеRAM.Значение = УведомлятьОВысокойЗагрузкеПамяти;
	
	УведомлениеОКритическойЗагрузкеHDD = ЗаписьПараметровУведомлений.Добавить();
	УведомлениеОКритическойЗагрузкеHDD.Сервер = Объект.Ссылка;
	УведомлениеОКритическойЗагрузкеHDD.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическомЗаполненииДискокойПодсистемы;
	УведомлениеОКритическойЗагрузкеHDD.Значение = УведомлятьОКритическомЗаполненииДисковойПодсистемы;
	
	
	// сохраняем значения Периодичности уведомлений
	//ПериодУведомленияОВысокойЗагрузкеCPU = ЗаписьПараметровУведомлений.Добавить();
	//ПериодУведомленияОВысокойЗагрузкеCPU.Сервер = Объект.Ссылка;
	//ПериодУведомленияОВысокойЗагрузкеCPU.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеПроцессора;
	//ПериодУведомленияОВысокойЗагрузкеCPU.Значение = ПериодичностьУведомленийОВысокойЗагрузкиПроцессора;
	
	//ПериодУведомленияОВысокойЗагрузкеRAM = ЗаписьПараметровУведомлений.Добавить();
	//ПериодУведомленияОВысокойЗагрузкеRAM.Сервер = Объект.Ссылка;
	//ПериодУведомленияОВысокойЗагрузкеRAM.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеПамяти;
	//ПериодУведомленияОВысокойЗагрузкеRAM.Значение = ПериодичностьУведомленийОВысокойЗагрузкиПамяти;
	
	
	//ПериодУведомленияОВысокойЗагрузкеHDD = ЗаписьПараметровУведомлений.Добавить();
	//ПериодУведомленияОВысокойЗагрузкеHDD.Сервер = Объект.Ссылка;
	//ПериодУведомленияОВысокойЗагрузкеHDD.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОПредельнойЗагрузкеДиска;
	//ПериодУведомленияОВысокойЗагрузкеHDD.Значение = ПериодичностьУведомленийОВысокомЗаполненииДисковойПодсистемы;
	
	
	//ПериодУведомленияОКритичнойЗагрузкеCPU = ЗаписьПараметровУведомлений.Добавить();
	//ПериодУведомленияОКритичнойЗагрузкеCPU.Сервер = Объект.Ссылка;
	//ПериодУведомленияОКритичнойЗагрузкеCPU.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеПроцессора;
	//ПериодУведомленияОКритичнойЗагрузкеCPU.Значение = ПериодичностьУведомленийОКритическойЗагрузкеПроцессора;
	
	//ПериодУведомленияОКритичнойЗагрузкеRAM = ЗаписьПараметровУведомлений.Добавить();
	//ПериодУведомленияОКритичнойЗагрузкеRAM.Сервер = Объект.Ссылка;
	//ПериодУведомленияОКритичнойЗагрузкеRAM.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеПамяти;
	//ПериодУведомленияОКритичнойЗагрузкеRAM.Значение = ПериодичностьУведомленийОКритическойЗагрузкеПамяти;
	
	//ПериодУведомленияОКритичнойЗагрузкеHDD = ЗаписьПараметровУведомлений.Добавить();
	//ПериодУведомленияОКритичнойЗагрузкеHDD.Сервер = Объект.Ссылка;
	//ПериодУведомленияОКритичнойЗагрузкеHDD.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОКретичнойЗагрузкеДисковойПодсистемы;
	//ПериодУведомленияОКритичнойЗагрузкеHDD.Значение = ПериодичностьУведомленийОКритическомЗаполненииДисковойПодсистемы;
	
	//ПериодУведомленияОНедоступностиСервера = ЗаписьПараметровУведомлений.Добавить();
	//ПериодУведомленияОНедоступностиСервера.Сервер = Объект.Ссылка;
	//ПериодУведомленияОНедоступностиСервера.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийОбОтсутствииСвязиССервером;
	//ПериодУведомленияОНедоступностиСервера.Значение = ПериодичностьУведомленийОНедоступностиСервера;
	
	ПериодУведомленияГлобальный = ЗаписьПараметровУведомлений.Добавить();
	ПериодУведомленияГлобальный.Сервер = Объект.Ссылка;
	ПериодУведомленияГлобальный.Параметр = Перечисления.ПараметрыСерверов_ат.ПериодичностьУведомленийГлобальная;
	ПериодУведомленияГлобальный.Значение = ПериодичностьУведомлений;
	
	
	
	// перечень значений
	ПредельнаяЗагрузкаCPU = ЗаписьПараметровУведомлений.Добавить();
	ПредельнаяЗагрузкаCPU.Сервер = Объект.Ссылка;
	ПредельнаяЗагрузкаCPU.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаПроцессора;
	ПредельнаяЗагрузкаCPU.Значение = ЗначениеВысокойНагрузкиCPU;
	
	ПредельнаяЗагрузкаRAM = ЗаписьПараметровУведомлений.Добавить();
	ПредельнаяЗагрузкаRAM.Сервер = Объект.Ссылка;
	ПредельнаяЗагрузкаRAM.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаПамяти;
	ПредельнаяЗагрузкаRAM.Значение = ЗначениеВысокойЗагрузкиRAM;
	
	ПредельноеЗаполнениеHDD = ЗаписьПараметровУведомлений.Добавить();
	ПредельноеЗаполнениеHDD.Сервер = Объект.Ссылка;
	ПредельноеЗаполнениеHDD.Параметр = Перечисления.ПараметрыСерверов_ат.ПороговаяЗагрузкаДисковойПодсистемы;
	ПредельноеЗаполнениеHDD.Значение = ЗначениеПредельногоЗаполненияHDD;
	
	КритичнаяЗагрузкаCPU = ЗаписьПараметровУведомлений.Добавить();
	КритичнаяЗагрузкаCPU.Сервер = Объект.Ссылка;
	КритичнаяЗагрузкаCPU.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПроцессора;
	КритичнаяЗагрузкаCPU.Значение = ЗначениеКритическойНагрузкиCPU;
	
	КритичнаяЗагрузкаRAM 	= ЗаписьПараметровУведомлений.Добавить();
	КритичнаяЗагрузкаRAM.Сервер 		= Объект.Ссылка;
	КритичнаяЗагрузкаRAM.Параметр	= Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаПамяти;
	КритичнаяЗагрузкаRAM.Значение	= ЗначениеКритичнойЗагрузкиRAM;
	
	КритическоеЗаполнениеHDD = ЗаписьПараметровУведомлений.Добавить();
	КритическоеЗаполнениеHDD.Сервер = Объект.Ссылка;
	КритическоеЗаполнениеHDD.Параметр = Перечисления.ПараметрыСерверов_ат.КритичнаяЗагрузкаДисковойПодсистемы;
	КритическоеЗаполнениеHDD.Значение = ЗначениеКритичногоЗаполненияHDD;
	
	
	// запись
	ЗаписьПараметровУведомлений.Записать();
	ЗаполениеСписковИнтерфейсовИАдресов();
	
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	ПроверкаОтображения();
КонецПроцедуры

&НаКлиенте
Процедура РазрешенаСтатистикаWMIПриИзменении(Элемент)
	//Если (ЗначениеЗаполнено(Объект.Login) и ЗначениеЗаполнено(Объект.Password)) тогда
	//Если (ЗначениеЗаполнено(Login) и ЗначениеЗаполнено(Password)) тогда
	//	ПроверкаОтображения();
	//	Модифицированность = Истина;
	//Иначе
	//	СБЩ = новый СообщениеПользователю;
	//	СБЩ.Текст = " для включения опции необходимо указать login и Password";
	////	СБЩ.ПутьКДанным = "Элемент"; //"СборСтатистикиWMI";
	////	СБЩ.Поле = "Элемент";
	//	СБЩ.Сообщить();
	//	Если СборСтатистикиWMI = Истина тогда 
	//		СборСтатистикиWMI = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	Если СборСтатистикиWMI = Истина тогда
		СборСтатистикиVZ = ложь;
		СборСтатистикиZabbix = Ложь;
		
	Иначе
	КонецЕсли;
	
	ПроверкаОтображения();
	Модифицированность = Истина;
	//		ОбновитьИнтерфейс(); 
	
КонецПроцедуры

&НаКлиенте
Процедура УсредненныеЗначенияЗаПриИзменении(Элемент)
	
	полученныеПараметры.Очистить();
	ПолучениеСтатистикиWMI();
	ПроверкаОтображения();
	//	ЗаполнениеГрафикаНагрузки(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатистику(Команда)
	// ВыделенныеПараметры = новый массив;
	// Если  ЗначениеЗаполнено(Элементы.ПолученныеПараметры.ВыделенныеСтроки) тогда
	//	для каждого запись из Элементы.ПолученныеПараметры.ВыделенныеСтроки цикл
	//		ВыделенныеПараметры.Добавить(ПолученныеПараметры[запись].НаименованиеПараметра);
	//	КонецЦикла;
	
	НачалоПериода		= ПоследниеДанныеАктуальныНа - (УсредненныеЗначенияЗа*60*60);
	КонецПериода			= ПоследниеДанныеАктуальныНа;
	
	//ПараметрыОтбора		= Новый Структура;
	//ПараметрыОтбора.Вставить("Сервер",		Объект.Ссылка);
	//ПараметрыОтбора.Вставить("ДатаНачала",	НачалоПериода);
	//ПараметрыОтбора.Вставить("ДатаКонца", 	КонецПериода);
	
	ПараметрыФормы	= новый структура;
	//ПараметрыФормы.Вставить("Сервер", Объект.Ссылка);
	ПараметрыФормы.Вставить("ДатаНачала",	НачалоПериода);
	ПараметрыФормы.Вставить("ДатаКонца", 	КонецПериода);
	ПараметрыФормы.Вставить("Сервер",		Объект.Ссылка);
	//ПараметрыФормы.Вставить("Отбор",			ПараметрыОтбора);
	
	
	//	ПараметрыФормы.Вставить("Параметры", ВыделенныеПараметры);
	
	//	ОткрытьФорму("ОбщаяФорма.СтатистикаWMI_ат",ПараметрыФормы, ,); 
	//	ОткрытьФорму("Отчет.СтатистикаWMI_ат.Форма",ПараметрыФормы, ,истина); 
	//	ФормаОтчета		= ПолучитьФорму("Отчет.СтатистикаWMI_ат.Форма",ПараметрыФормы, ,истина,ВариантОткрытияОкна.ОтдельноеОкно);
	ФормаОтчета		= ПолучитьФорму("Отчет.ПодробнаяСтатисткаWMIПоСерверам_ат.Форма", ПараметрыФормы,,Истина,ВариантОткрытияОкна.ОтдельноеОкно);
	//	ФормаОтчета.открыть;
	ФормаОтчета.открыть();
	//Иначе
	//Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура РазрешенаАрендаПриИзменении(Элемент)
	Модифицированность = Истина;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура HDDПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ШлюзПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СборСтатистикиVZПриИзменении(Элемент)
	Если Объект.Родитель.Пустая() тогда 
		СборСтатистикиVZ = НЕ СборСтатистикиVZ;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "получение статистики Virtuozzo возможно только для подчиненного контейнера ";
		Сообщение.Поле = "объект.Родитель";
		Сообщение.Сообщить();
		
	Иначе
		
		
		// Вставить содержимое обработчика.
		Если СборСтатистикиVZ	= Истина тогда
			СборСтатистикиWMI	= ложь;
			СборСтатистикиZabbix	= ложь;
		Иначе
			//	СборСтатистикиWMI = Истина;
		КонецЕсли;
		Модифицированность	= Истина;
		ПроверкаОтображения();	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийПриИзменении(Элемент)
	ПроверкаОтображения();
КонецПроцедуры

&НаКлиенте
Процедура CPU_атПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = ПроверкаМатеринскойПлаты();
	
КонецПроцедуры

&НаКлиенте
Функция   ПроверкаМатеринскойПлаты()
	Если Объект.МатеринскаяПлата.Пустая() тогда
		сообщение = Новый СообщениеПользователю();
		сообщение.Поле ="Объект.МатеринскаяПлата";
		сообщение.Текст = "перед добавлением компонентов необходио выбрать материнскую плату";
		сообщение.Сообщить();
		
		возврат истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура RAMПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = ПроверкаМатеринскойПлаты();
	
КонецПроцедуры

&НаКлиенте
Процедура HDD_атПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = ПроверкаМатеринскойПлаты();
	
КонецПроцедуры

&НаКлиенте
Процедура СХД_атПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = ПроверкаМатеринскойПлаты();
	
КонецПроцедуры

&НаКлиенте
Процедура МатеринскаяПлатаПриИзменении(Элемент)
	МатеринскаяПлатаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура МатеринскаяПлатаПриИзмененииНаСервере()
	НазначениеПараметровЖелеза();
	ПроверкаОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойIPНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Если Модифицированность тогда 
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.ПутьКДанным = "объект.ОсновнойIP";
		Сообщение.Текст = "Перед указанием ОсновногоIP необходимо сохранить этот объект";
		Сообщение.Сообщить();
		
		Возврат;
	Иначе 
		
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Сервер", Объект.Ссылка);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		//ПараметрыФормы.Вставить("ВладелецФормы", ЭтаФорма);
		Форма = ОткрытьФорму("Справочник.ВыделенныеIP_ат.ФормаВыбора", ПараметрыФормы, Элемент);	
		
	КонецЕсли;
	
	
	
	//Если Объект.Interfaces.Количество() = 0 тогда
	//
	//	
	//	Ответ = Вопрос("У вас нет ни одного сетевого интерфейса" + Символы.ПС + " для продолжения необходимо создать хотябы один интерфейс "
	//			+ Символы.ПС + "Создать?", РежимДиалогаВопрос.ДаНет);
	//	
	//			Если Ответ = КодВозвратаДиалога.Да тогда 
	//				Форма = ОткрытьФорму("Справочник.СетевыеИнтерфейсы_ат.Форма.ФормаЭлемента", , Объект.Ссылка);					
	//				
	//			Иначе
	//				
	//				
	//			КонецЕсли;
	//			
	//	
	//		
	//	Если Объект.Чужой = ложь тогда
	//		
	//		Сообщение = Новый СообщениеПользователю();
	//		Сообщение.ПутьКДанным = "объект.ОсновнойIP";
	//		Сообщение.Текст = "Здесь можно выбрать только адреса принадлежащие уже установленным сетевым интерфейсам! " +
	//				Символы.ПС +" новый можно создать только в интерфейсе!! ";
	//		Сообщение.Сообщить();
	//		
	//		ОсновнойIPНачалоВыбораНаСервере ();
	//	Иначе
	//		Если Модифицированность тогда 
	//			
	//		Сообщение = Новый СообщениеПользователю();
	//		Сообщение.ПутьКДанным = "объект.ОсновнойIP";
	//		Сообщение.Текст = "Перед указанием ОсновногоIP необходимо сохранить этот объект";
	//		Сообщение.Сообщить();
	//		
	//		Возврат;
	//		КонецЕсли;
	
	//	КонецЕсли;
	//
	//КонецЕсли;	
	//
	
КонецПроцедуры

&Насервере
Процедура ЗаполениеСписковИнтерфейсовИАдресов()
	
	//ПараметрыИнтерфейсов = Новый Структура;
	//ОтборИнтрефейсов = Новый Структура;
	//ОтборИнтрефейсов.Вставить("Владелец", Объект.Ссылка);
	
	//IPAddress.Параметры.УстановитьЗначениеПараметра("Параметры", ПараметрыИнтерфейсов);  	
	//УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСпискаПоРеквизиту(IPInterfaces, "Владелец",
	//	ВидСравненияКомпоновкиДанных.Равно, Объект.Ссылка, Истина);
	//	
	//	                                                 
	//УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСпискаПоРеквизиту(IPAddress, "Владелец.Владелец",
	//	ВидСравненияКомпоновкиДанных.Равно, Объект.Ссылка, Истина);
	УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(IPInterfaces, "Владелец",, Объект.Ссылка, Истина,,, IPInterfaces.Отбор);
	УправляемыеФормы_КлиентСервер_ат.УстановитьОтборДинамическогоСписка(IPAddress, "Владелец.Владелец",, Объект.Ссылка, Истина,,, IPAddress.Отбор);
	
КонецПроцедуры

&НаКлиенте
Процедура IPAddressПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Модифицированность Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Перед добавлением интерфейсов и адресов необходимо сохранить изменения";
		Сообщение.Сообщить();
		Отказ = Истина;
		
	Иначе
		
		Отказ = Истина;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Сервер", Объект.Ссылка);
		ОткрытьФорму("Справочник.ВыделенныеIP_ат.ФормаОбъекта", ПараметрыОткрытияФормы, ЭтаФорма);
		
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура IPInterfacesПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Модифицированность Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Перед добавлением интерфейсов и адресов необходимо сохранить изменения";
		Сообщение.Сообщить();
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойIPОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = ложь;
	ОсновнойIPОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОсновнойIPОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка)
	
	Объект.ОсновнойIP 		= ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Модифицированность или Объект.Ссылка.Пустая() Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Перед добавлением интерфейсов и адресов необходимо сохранить изменения";
		Сообщение.Сообщить();
		Отказ = Истина;
		
	Иначе
		
		Отказ = Истина;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Сервер", Объект.Ссылка);
		// Вызов процедуры клиентского модуля
		//Оп = Новый ОписаниеОповещения("ЗаполнениеСпискаУведомляемых", ЭтотОбъект, Неопределено);
		
		
		//ПараметрыОткрытияФормы.Вставить("Пользователь", Объект.Ссылка);
		
		//ОткрытьФорму("РегистрСведений.СписокУведомляемыхОСтатусахСерверов_ат.ФормаЗаписи", ПараметрыОткрытияФормы, ЭтаФорма);
		//ОткрытьФорму("Справочник.Серверы_ат.Форма.ФормаНастрокиУведомляемых", ПараметрыОткрытияФормы, ЭтаФорма,,,,Оп);
		ОткрытьФорму("Справочник.Серверы_ат.Форма.ФормаНастрокиУведомляемых", ПараметрыОткрытияФормы, ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаЗакрытияФормыДобавления", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПоРесурсам(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Сервер", Объект.Ссылка);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОтчетПоРесурсамСерверов_ат.Форма.ФормаОтчета", ПараметрыФормы,,
	Истина, ВариантОткрытияОкна.ОтдельноеОкно);
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеСпискаУведомляемых(Результат=Неопределено, дополнительно=Неопределено) Экспорт 
	
	СписокУведомляемых.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокУведомляемыхОСтатусахСерверов_ат.Сервер КАК Сервер,
	|	СписокУведомляемыхОСтатусахСерверов_ат.Пользователь КАК Пользователь,
	|	СписокУведомляемыхОСтатусахСерверов_ат.Параметр КАК Параметр
	|ИЗ
	|	РегистрСведений.СписокУведомляемыхОСтатусахСерверов_ат КАК СписокУведомляемыхОСтатусахСерверов_ат
	|ГДЕ
	|	СписокУведомляемыхОСтатусахСерверов_ат.Сервер = &Сервер
	|ИТОГИ ПО
	|	Сервер,
	|	Пользователь,
	|	Параметр";
	
	Запрос.УстановитьПараметр("Сервер", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ВыборкаПоПользователям = ВыборкаДетальныеЗаписи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		
		Пока ВыборкаПоПользователям.Следующий() Цикл
			НоваяСтрока = СписокУведомляемых.Добавить();
			НоваяСтрока.Уведомляемый = ВыборкаПоПользователям.Пользователь;
			
			ВыборкаПоПараметрам = ВыборкаПоПользователям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоПараметрам.Следующий() Цикл
				//Если ВыборкаПоПараметрам.Параметр = Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи тогда
				//НоваяСтрока.ОС = Истина;
				ИмяПараметра = Метаданные.Перечисления.ПараметрыСерверов_ат.ЗначенияПеречисления[Перечисления.ПараметрыСерверов_ат.Индекс(ВыборкаПоПараметрам.Параметр)].Имя;
				//Если СписокУведомляемых.С
				НоваяСтрока[ИмяПараметра] = Истина;
				//КонецЕсли;
				
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Вызов процедуры клиентского модуля
	//Оп = Новый ОписаниеОповещения("ЗаполнениеСпискаУведомляемых", ЭтотОбъект, Неопределено);
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Сервер", Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("Пользователь", Элемент.ТекущиеДанные.Уведомляемый);
	
	//ОткрытьФорму("РегистрСведений.СписокУведомляемыхОСтатусахСерверов_ат.ФормаЗаписи", ПараметрыОткрытияФормы, ЭтаФорма);
	//ОткрытьФорму("Справочник.Серверы_ат.Форма.ФормаНастрокиУведомляемых", ПараметрыОткрытияФормы, ЭтаФорма,,,,Оп);
	//ОткрытьФорму("Справочник.Серверы_ат.Форма.ФормаНастрокиУведомляемых", ПараметрыОткрытияФормы, ЭтаФорма);
	ОткрытьФорму("Справочник.Серверы_ат.Форма.ФормаНастрокиУведомляемых", ПараметрыОткрытияФормы, ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаЗакрытияФормыДобавления", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыДобавления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено или Не ТипЗнч(Результат) = Тип("Структура") тогда
		
		Возврат;
		
	Иначе
		
		ПроверкаИЗаполнениеПользователяВСпискеУведомляемых(Результат) ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаИЗаполнениеПользователяВСпискеУведомляемых(Результат)
	
	//НайденаяСтрока = СписокУведомляемых.Найти("Уведомляемый", Результат.Уведомляемый) ;
	ТЗСписокУведомляемых = ДанныеФормыВЗначение(СписокУведомляемых, Тип("ТаблицаЗначений"));
	НайденаяСтрока = ТЗСписокУведомляемых.Найти(Результат.Уведомляемый, "Уведомляемый") ;
	
	Если не НайденаяСтрока = Неопределено тогда
		ЗаполнитьЗначенияСвойств(НайденаяСтрока, Результат);
		
	Иначе
		
		НовСтрока = ТЗСписокУведомляемых.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Результат);
		
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ТЗСписокУведомляемых, СписокУведомляемых);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписьИОбновлениеСпискаУведоляемых() ;
	
КонецПроцедуры

Процедура ЗаписьИОбновлениеСпискаУведоляемых()
	
	НаборЗаписей = РегистрыСведений.СписокУведомляемыхОСтатусахСерверов_ат.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Пользователь.Установить(строка.Уведомляемый);
	НаборЗаписей.Отбор.Сервер.Установить(Объект.ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Для каждого Строка из СписокУведомляемых цикл
		
		Если Строка.УведомлятьОбОтсутствииСвязи = истина тогда
			ОСН = НаборЗаписей.Добавить();
			ОСН.Пользователь	= Строка.Уведомляемый;
			ОСН.Сервер			= Объект.ссылка;
			ОСН.Параметр			= Перечисления.ПараметрыСерверов_ат.УведомлятьОбОтсутствииСвязи;
		КонецЕсли;
		
		Если Строка.УведомлятьОПредельнойЗагрузкеПроцессора = истина тогда
			ВНП = НаборЗаписей.Добавить();
			ВНП.Пользователь		= Строка.Уведомляемый;
			ВНП.Сервер			= Объект.ссылка;
			ВНП.Параметр			= Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПроцессора
		КонецЕсли;
		
		Если Строка.УведомлятьОПредельнойЗагрузкеПамяти = истина тогда
			ВНМ = НаборЗаписей.Добавить();
			ВНМ.Пользователь	= Строка.Уведомляемый;
			ВНМ.Сервер			= Объект.ссылка;
			ВНМ.Параметр			= Перечисления.ПараметрыСерверов_ат.УведомлятьОПредельнойЗагрузкеПамяти;
		КонецЕсли;
		
		Если Строка.УведомлятьОПороговомЗаполненииДисковойПодсистемы = истина тогда
			ВНД = НаборЗаписей.Добавить();
			ВНД.Пользователь	= Строка.Уведомляемый;
			ВНД.Сервер			= Объект.ссылка;
			ВНД.Параметр			= Перечисления.ПараметрыСерверов_ат.УведомлятьОПороговомЗаполненииДисковойПодсистемы	КонецЕсли;
		
		Если Строка.УведомлятьОКритическойЗагрузкеПроцессора = истина тогда
			КНП = НаборЗаписей.Добавить();
			КНП.Пользователь		= Строка.Уведомляемый;
			КНП.Сервер			= Объект.ссылка;
			КНП.Параметр			= Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПроцессора;
		КонецЕсли;
		
		Если Строка.УведомлятьОКритическойЗагрузкеПамяти = истина тогда
			КНМ = НаборЗаписей.Добавить();
			КНМ.Пользователь	= Строка.Уведомляемый;;
			КНМ.Сервер			= Объект.ссылка;
			КНМ.Параметр			= Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическойЗагрузкеПамяти;
		КонецЕсли;
		
		Если Строка.УведомлятьОКритическомЗаполненииДискокойПодсистемы = истина тогда
			КНД = НаборЗаписей.Добавить();
			КНД.Пользователь	= Строка.Уведомляемый;
			КНД.Сервер			= Объект.ссылка;
			КНД.Параметр			= Перечисления.ПараметрыСерверов_ат.УведомлятьОКритическомЗаполненииДискокойПодсистемы;
		КонецЕсли;
		
	КонецЦикла;
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура СборСтатистикиZabbixПриИзменении(Элемент)
	
	Если  СборСтатистикиZabbix = Истина Тогда
		
		СборСтатистикиVZ		= Ложь;
		СборСтатистикиWMI	= Ложь;
		
	КонецЕсли;
	ПроверкаОтображения();
	Модифицированность		= Истина;
	//	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура Группа3ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СведенияПоZabbix тогда
		
		ПриСменеСтраницыСведенияПоZabbixНаСервере();
		//Если График2.Рисунки.Количество() > 0  тогда
		//Иначе Элементы.График2.Видимость = ложь;
		//КонецЕсли;
		//		Если График3.Рисунки.Количество() > 0  тогда
		//Иначе Элементы.График3.Видимость = ложь;
		//КонецЕсли;
		//Если График4.Рисунки.Количество() > 0  тогда
		//Иначе Элементы.График4.Видимость = ложь;
		//КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
процедура ПриСменеСтраницыСведенияПоZabbixНаСервере()
	
	УсредненныеЗначенияЗа = Константы.ПериодДляУсредненногоЗначеннияWMI_ат.Получить();
	ЗаполнитьДанныеЗагрузкиZabbix();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЗагрузкиZabbix()
	
	Если не Объект.Ссылка.Пустая() тогда
		ТаблицаОтветов = Неопределено;
		СписокПараметров1 = Новый СписокЗначений;
		СписокПараметров1.Добавить(Перечисления.ТипыРесурсовZabbix_at.TotalMemory);
		СписокПараметров1.Добавить(Перечисления.ТипыРесурсовZabbix_at.FreeMemory);
		СписокПараметров1.Добавить(Перечисления.ТипыРесурсовZabbix_at.AgentPing);
		СписокПараметров1.Добавить(Перечисления.ТипыРесурсовZabbix_at.ICMPResponseTime);
		СписокПараметров1.Добавить(Перечисления.ТипыРесурсовZabbix_at.AgentVersion);
		
		СписокПараметров2 = Новый СписокЗначений;  // для HDD отдельно, т.к. содержат множество значений для каждого раздела
		СписокПараметров2.Добавить(Перечисления.ТипыРесурсовZabbix_at.UsedDiskSpaceOn);
		СписокПараметров2.Добавить(Перечисления.ТипыРесурсовZabbix_at.TotalDiskSpaceOn);
		СписокПараметров2.Добавить(Перечисления.ТипыРесурсовZabbix_at.FreeDiskSpaceOn);
		
		Ответ1 = ПолучитьСрезПоследнихДанныхПоПараметруZabbix(СписокПараметров1, Объект.Ссылка, ТаблицаОтветов);
		Если Ответ1 тогда
			
			Для каждого Строка из  ТаблицаОтветов Цикл
				
				Если			Строка.Параметр  				= Перечисления.ТипыРесурсовZabbix_at.TotalMemory тогда
					ОперативнойПамяти_Всего	= Строка.Значение/1024/1024/1024;          // в ГБ
					Элементы.ОперативнойПамяти_Всего.Подсказка = "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				ИначеЕсли Строка.Параметр  					= Перечисления.ТипыРесурсовZabbix_at.FreeMemory тогда
					ОперативнойПамяти_Свободно	= Строка.Значение/1024/1024/1024;						
					Элементы.ОперативнойПамятиСвободно.Подсказка = "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				ИначеЕсли Строка.Параметр  					= Перечисления.ТипыРесурсовZabbix_at.AgentPing тогда
					Проблема 								= Строка.Значение;
					Элементы.Проблема.Подсказка = "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				ИначеЕсли Строка.Параметр  					= Перечисления.ТипыРесурсовZabbix_at.ICMPResponseTime тогда
					Задержка 								= Строка.Значение;
					Элементы.Задержка.Подсказка = "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				ИначеЕсли Строка.Параметр  					= Перечисления.ТипыРесурсовZabbix_at.AgentVersion тогда
					ВерсияАгента							= Строка.Значение;
					Элементы.Задержка.Подсказка = "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Ответ2 = ПолучитьСрезПоследнихДанныхПоПараметруZabbix(СписокПараметров2, Объект.Ссылка, ТаблицаОтветов);
		Если Ответ2 тогда
			ДисковоеПространство_Всего = 0;
			ДисковоеПространство_Свободно = 0;
			ДисковоеПространство_Используется = 0;
			
			Для Каждого Строка из ТаблицаОтветов Цикл 
				Если  		Строка.Параметр  					= Перечисления.ТипыРесурсовZabbix_at.TotalDiskSpaceOn тогда
					ДисковоеПространство_Всего	= ДисковоеПространство_Всего + Строка.Значение /1024/1024/1024; // перевод в MB
					Элементы.ДисковоеПространство_Всего.Подсказка = "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				ИначеЕсли Строка.Параметр  						= Перечисления.ТипыРесурсовZabbix_at.FreeDiskSpaceOn тогда
					ДисковоеПространство_Свободно	= ДисковоеПространство_Свободно + Строка.Значение /1024/1024/1024;						
					Элементы.ДисковоеПространство_Свободно.Подсказка = "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				ИначеЕсли Строка.Параметр  								= Перечисления.ТипыРесурсовZabbix_at.UsedDiskSpaceOn тогда
					ДисковоеПространство_Используется	= ДисковоеПространство_Используется + Строка.Значение /1024/1024/1024;
					Элементы.ДисковоеПространство_Используется.Подсказка 	= "Данные актуальны на  " + Строка.ДатаАктуальности;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ДисковоеПространство_Всего = 0 и НЕ ДисковоеПространство_Свободно = 0 И Не ДисковоеПространство_Используется = 0 тогда
			ДисковоеПространство_Всего =	ДисковоеПространство_Свободно + ДисковоеПространство_Используется;
		КонецЕсли;
		
		
		График2				= Новый ТабличныйДокумент;
		График3				= Новый ТабличныйДокумент;
		График4				= Новый ТабличныйДокумент;
		График5				= Новый ТабличныйДокумент;
		График6				= Новый ТабличныйДокумент;
		График7				= Новый ТабличныйДокумент;
		
		ТипРесурса1		= Перечисления.ТипыРесурсовZabbix_at.ProcessorPerfomance;
		ТипРесурса2		= Перечисления.ТипыРесурсовZabbix_at.CPU_time;
		ТипРесурса3		= Перечисления.ТипыРесурсовZabbix_at.NumberOfProcesses;
		ТипРесурса4		= Перечисления.ТипыРесурсовZabbix_at.NumberOfLoggedInUsers;
		ТипРесурса5		= Перечисления.ТипыРесурсовZabbix_at.FileReadBytesPerSecond;
		ТипРесурса6		= Перечисления.ТипыРесурсовZabbix_at.FileWriteBytesPerSecond;
		ТипРесурса7		= Перечисления.ТипыРесурсовZabbix_at.IncomingNetworkTrafficOn;
		ТипРесурса8		= Перечисления.ТипыРесурсовZabbix_at.OutgoingNetworkTrafficOn;
		ТипРесурса9		= Перечисления.ТипыРесурсовZabbix_at.FreeMemory;
		ТипРесурса10		= Перечисления.ТипыРесурсовZabbix_at.FreeDiskSpace_Percentage;
		ТипРесурса11		= Перечисления.ТипыРесурсовZabbix_at.TermUsersCount;		
		
		
		ПараметрыВСписке = Новый СписокЗначений;		// График2 
		ПараметрыВСписке.Добавить(ТипРесурса1);		//		ProcessorPerfomance
		ПараметрыВСписке.Добавить(ТипРесурса2); 		//		CPU_time
		ПараметрыВСписке.Добавить(ТипРесурса4);		//		NumberOfLoggedInUsers
		ПараметрыВСписке.Добавить(ТипРесурса11);		//		TermUsersCount;
		
		ПараметрыВСписке2 = Новый СписокЗначений;	// График3
		ПараметрыВСписке2.Добавить(ТипРесурса3);		//     NumberOfProcesses
		
		ПараметрыВСписке3 = Новый СписокЗначений;	// График4
		ПараметрыВСписке3.Добавить(ТипРесурса9);		// 		FreeMemory
		
		ПараметрыВСписке4 = Новый СписокЗначений;	// График5
		ПараметрыВСписке4.Добавить(ТипРесурса10); 	//		FreeDiskSpace_Percentage
		
		ПараметрыВСписке5 = Новый СписокЗначений;	// График6
		ПараметрыВСписке5.Добавить(ТипРесурса7);		//		IncomingNetworkTrafficOn
		ПараметрыВСписке5.Добавить(ТипРесурса8);		//		OutgoingNetworkTrafficOn	
		
		ПараметрыВСписке6 = Новый СписокЗначений;	// График7
		ПараметрыВСписке6.Добавить(ТипРесурса5);		//		FileReadBytesPerSecond
		ПараметрыВСписке6.Добавить(ТипРесурса6);		//		FileWriteBytesPerSecond
		
		
		ДатаКонца		= ТекущаяДата();
		//ДатаНачала	= ТекущаяДата()-3*60*60;
		ДатаНачала	= ТекущаяДата()-УсредненныеЗначенияЗа*60*60;
		
		Элементы.График2.Видимость = ЗаполнениеГрафика2НагрузкиZabbix(Объект.Ссылка,ДатаНачала, ДатаКонца, ПараметрыВСписке		,График2,,,ТипДиаграммы.ГрафикСОбластями) ;
		Элементы.График3.Видимость = ЗаполнениеГрафика2НагрузкиZabbix(Объект.Ссылка,ДатаНачала, ДатаКонца, ПараметрыВСписке2	,График3,,,ТипДиаграммы.ГрафикСОбластями) ;
		Элементы.График4.Видимость = ЗаполнениеГрафика2НагрузкиZabbix(Объект.Ссылка,ДатаНачала, ДатаКонца, ПараметрыВСписке3	,График4,,,ТипДиаграммы.ГрафикСОбластями) ;
		Элементы.График5.Видимость = ЗаполнениеГрафика2НагрузкиZabbix(Объект.Ссылка,ДатаНачала, ДатаКонца, ПараметрыВСписке4	,График5,,,ТипДиаграммы.ГрафикСОбластями) ;
		Элементы.График6.Видимость = ЗаполнениеГрафика2НагрузкиZabbix(Объект.Ссылка,ДатаНачала, ДатаКонца, ПараметрыВСписке5	,График6,,,ТипДиаграммы.ГрафикСОбластями) ;
		Элементы.График7.Видимость = ЗаполнениеГрафика2НагрузкиZabbix(Объект.Ссылка,ДатаНачала, ДатаКонца, ПараметрыВСписке6	,График7,,,ТипДиаграммы.ГрафикСОбластями) ;
		
	Иначе
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьСрезПоследнихДанныхПоПараметруZabbix(параметры, Сервер, ТаблицаОтветов)
	
	ТаблицаОтветов = Новый ТаблицаЗначений;
	ТаблицаОтветов.Колонки.Добавить("Параметр", ,"Параметр");
	ТаблицаОтветов.Колонки.Добавить("Значение", ,"Значение");
	ТаблицаОтветов.Колонки.Добавить("ДатаАктуальности", ,"ДатаАктуальности");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОСерверахПоZabbix_atСрезПоследних.Период,
	|	СведенияОСерверахПоZabbix_atСрезПоследних.Сервер,
	|	СведенияОСерверахПоZabbix_atСрезПоследних.Параметр,
	|	СведенияОСерверахПоZabbix_atСрезПоследних.Ключ,
	|	СведенияОСерверахПоZabbix_atСрезПоследних.Значение,
	|	СведенияОСерверахПоZabbix_atСрезПоследних.ДатаЗаписи
	|ИЗ
	|	РегистрСведений.СведенияОСерверахПоZabbix_at.СрезПоследних КАК СведенияОСерверахПоZabbix_atСрезПоследних
	|ГДЕ
	|	СведенияОСерверахПоZabbix_atСрезПоследних.Сервер = &Сервер
	|	И СведенияОСерверахПоZabbix_atСрезПоследних.Параметр В(&Параметры)";
	
	
	Запрос.УстановитьПараметр("Параметры", Параметры);
	Запрос.УстановитьПараметр("Сервер", Сервер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если РезультатЗапроса.Пустой() тогда
		Ответ = ложь;
	Иначе
		Ответ = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаОтвета = ТаблицаОтветов.Добавить();
			СтрокаОтвета.Параметр	=	ВыборкаДетальныеЗаписи.Параметр;
			СтрокаОтвета.Значение	= ВыборкаДетальныеЗаписи.Значение;
			СтрокаОтвета.ДатаАктуальности	= ВыборкаДетальныеЗаписи.ДатаЗаписи;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ответ ;	
КонецФункции

&НаСервере
Функция   ЗаполнениеГрафика2НагрузкиZabbix(Сервер, НачалоПериода, КонецПериода, ПараметрыВСписке, ГрафикТабличныйДокумент, ШиринаГрафика = 95, ВысотаГрафика = 50, ЗаданныйТипДиаграммы = Неопределено )
	
	Если ЗаданныйТипДиаграммы = Неопределено тогда
		
		ЗаданныйТипДиаграммы = ТипДиаграммы.ГрафикСОбластями;
		
	КонецЕсли;
	
	Таблица_Параметров = ПолучитьРезультатПоПараметрам(Сервер, НачалоПериода,КонецПериода, ПараметрыВСписке);
	Если Таблица_Параметров.количество() = 0 тогда
		Возврат ложь;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Справочники.Серверы_ат.ПолучитьМакет("Макет2");
	
	КНКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КНКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КНКД.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КМКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КНКД.Настройки;	
	Для каждого настройка из Настройки.ПараметрыВывода.Элементы Цикл  
		
		Если Строка(Настройка.Параметр) = "ТипДиаграммы"  тогда
			Настройка.Значение = ЗаданныйТипДиаграммы;
		КонецЕсли;
		
		
	КонецЦикла;
	
	МакетКомпоновкиДанных = КМКД.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанных"));
	
	// Инициализация процессора компоновки
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	СтрТабЗнач = Новый Структура;
	СтрТабЗнач.Вставить("Таблица_Параметров", Таблица_Параметров);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,СтрТабЗнач);
	
	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ГрафикТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных,Ложь);
	Если ГрафикТабличныйДокумент.Рисунки.Количество() > 0 тогда
		ГрафикТабличныйДокумент.Рисунки[0].Ширина = ШиринаГрафика;	
		ГрафикТабличныйДокумент.Рисунки[0].Высота  = ВысотаГрафика;
		
		
	Иначе
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
// <Описание функции>
//
// Параметры:
//  Сервер  - СправочникСервер.ссыдка - Сервер для которого снимаем показания
//                 
//  НачалоПериода  - ДатаИВремя - Начало периода с которого ведется отчет
//                 
//  КонецПерода		- ДатаИВремя - Конец периода с которого ведется отчет
//                 
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица скоростей для построения графика;
//
//Функция   ПолучитьСкоростиСетиИДиска(Сервер, НачалоПериода,КонецПерода, ТаблицаСкоростейСети, ТаблицаСкоростейДисков)
Функция   ПолучитьРезультатПоПараметрам(Сервер, НачалоПериода,КонецПерода, ПараметрыВСписке);
	
	ТаблицаРезультата 				= Новый ТаблицаЗначений;
	// форматируем сохраняемый вывод
	Массив	= Новый Массив;
	КЧ 		= Новый КвалификаторыЧисла(20,2);
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	Массив.Очистить();
	
	ТаблицаРезультата.Колонки.Добавить("Время",, "Время");
	ТаблицаРезультата.Колонки.Добавить("ТипЗначения",, "ТипЗначения");
	ТаблицаРезультата.Колонки.Добавить("Значение",ОписаниеТиповЧ, "Значение");
	
	РезультатЗапроса = РаботаССерверами_ат.ПолучитьТаблицуПоНагрузкеНаСерверПоZabbix(ПараметрыВСписке,Сервер, НачалоПериода,КонецПерода);
	
	Если РезультатЗапроса = Неопределено тогда
	Иначе
		//СкоростьОбращенияКДиску	= 0;
		//СкоростьСетей					= 0;
		//FileRead 							= 0;
		//FileWrite							= 0;
		//IncomingTraffic					= 0;
		//OutgoingTraffic					= 0;
		ДатаЗаписиСтроки = неопределено;
		Для каждого СтрокПоВремени из РезультатЗапроса.Строки цикл
			
			Для каждого СтрокаПараметра  из СтрокПоВремени.Строки цикл
				
				Если	
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.FileReadBytesPerSecond тогда
					FileRead 											= СтрокаПараметра.ЗначениеПараметра/1024/1024;		//перевод в Мб(МБ)
					НовСтрСкорДиска								= ТаблицаРезультата.Добавить();
					НовСтрСкорДиска.Время 						= СтрокаПараметра.ДатаВМинутах;
					НовСтрСкорДиска.ТипЗначения				= "Чтение файлов";
					НовСтрСкорДиска.Значение 					= FileRead;
					
				ИначеЕсли 
					
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.FileWriteBytesPerSecond тогда
					FileWrite 											= СтрокаПараметра.ЗначениеПараметра/1024/1024;		//перевод в Мб(МБ)
					НовСтрСкорДиска								= ТаблицаРезультата.Добавить();
					НовСтрСкорДиска.Время 						= СтрокаПараметра.ДатаВМинутах;
					НовСтрСкорДиска.ТипЗначения				= "Запись Файлов";
					НовСтрСкорДиска.Значение 					= FileWrite;
					
					
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.OutgoingNetworkTrafficOn тогда
					OutgoingTraffic	 			   					= СтрокаПараметра.ЗначениеПараметра/1024/1024;
					НовСтрСкорСети									= ТаблицаРезультата.Добавить();
					НовСтрСкорСети.Время 						= СтрокаПараметра.ДатаВМинутах;
					НовСтрСкорСети.ТипЗначения				= "Исх. трафик";
					НовСтрСкорСети.Значение 					= OutgoingTraffic;
					
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.IncomingNetworkTrafficOn тогда
					IncomingTraffic	 			   					= СтрокаПараметра.ЗначениеПараметра/1024/1024;
					НовСтрСкорСети									= ТаблицаРезультата.Добавить();
					НовСтрСкорСети.Время 						= СтрокаПараметра.ДатаВМинутах;
					НовСтрСкорСети.ТипЗначения				= "Вход. трафик";
					НовСтрСкорСети.Значение 					= IncomingTraffic;
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.ProcessorPerfomance тогда
					ProcessorPerfomance	 						= СтрокаПараметра.ЗначениеПараметра;
					НовСтрСкорНагрПроц							= ТаблицаРезультата.Добавить();
					НовСтрСкорНагрПроц.Время 					= СтрокаПараметра.ДатаВМинутах;
					НовСтрСкорНагрПроц.ТипЗначения		= "CPU %";
					НовСтрСкорНагрПроц.Значение 			= ProcessorPerfomance;
					
				ИначеЕсли 
					СтрокаПараметра.Параметр =  Перечисления.ТипыРесурсовZabbix_at.CPU_time тогда
					CPU_time	 										= СтрокаПараметра.ЗначениеПараметра;
					НовСтрПроцВремя								= ТаблицаРезультата.Добавить();
					НовСтрПроцВремя.Время 						= СтрокаПараметра.ДатаВМинутах;
					НовСтрПроцВремя.ТипЗначения				= "CPU_time";
					НовСтрПроцВремя.Значение 					= CPU_time;
					
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.NumberOfProcesses тогда
					NumberOfProcesses	 							= СтрокаПараметра.ЗначениеПараметра;
					НовСтрКолПроцессы							= ТаблицаРезультата.Добавить();
					НовСтрКолПроцессы.Время 					= СтрокаПараметра.ДатаВМинутах;
					НовСтрКолПроцессы.ТипЗначения			= "Кол-во процессов";
					НовСтрКолПроцессы.Значение 				= NumberOfProcesses;
					
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.NumberOfLoggedInUsers тогда
					NumberOfLoggedInUsers	 					= СтрокаПараметра.ЗначениеПараметра;
					НовСтрКолПользователей						= ТаблицаРезультата.Добавить();
					НовСтрКолПользователей.Время 			= СтрокаПараметра.ДатаВМинутах;
					НовСтрКолПользователей.ТипЗначения	= "Кол-во Пользователей";
					НовСтрКолПользователей.Значение 		= NumberOfLoggedInUsers;
					
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.FreeMemory тогда
					FreeMemory					 					= СтрокаПараметра.ЗначениеПараметра /1024 /1024;
					НовСтрКолПользователей						= ТаблицаРезультата.Добавить();
					НовСтрКолПользователей.Время 			= СтрокаПараметра.ДатаВМинутах;
					НовСтрКолПользователей.ТипЗначения	= "Свободная Память";
					НовСтрКолПользователей.Значение 		= FreeMemory;
					
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.TermUsersCount тогда
					TermUsersCount				 					= СтрокаПараметра.ЗначениеПараметра;
					НовСтрКолПользователей						= ТаблицаРезультата.Добавить();
					НовСтрКолПользователей.Время 			= СтрокаПараметра.ДатаВМинутах;
					НовСтрКолПользователей.ТипЗначения	= "Кол-во Пользователей RDP";
					НовСтрКолПользователей.Значение 		= TermUsersCount;
					
				ИначеЕсли 
					СтрокаПараметра.Параметр = Перечисления.ТипыРесурсовZabbix_at.FreeDiskSpace_Percentage Тогда
					FreeDiskSpace_Percentage				 		= СтрокаПараметра.ЗначениеПараметра;
					НовСтрКолПользователей						= ТаблицаРезультата.Добавить();
					НовСтрКолПользователей.Время 			= СтрокаПараметра.ДатаВМинутах;
					НовСтрКолПользователей.ТипЗначения	= "Free Disk Space % ";
					НовСтрКолПользователей.Значение 		= FreeDiskSpace_Percentage;
					
				КонецЕсли;
				
			КонецЦикла
		КонецЦикла
		
	КонецЕсли;
	Возврат 	ТаблицаРезультата;
	
	
КонецФункции 

&НаКлиенте
Процедура УсредненныеЗначенияЗа1ПриИзменении(Элемент)
	УсредненныеЗначенияЗа1ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УсредненныеЗначенияЗа1ПриИзмененииНаСервере()
	
	ЗаполнитьДанныеЗагрузкиZabbix() ;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСетевыеИнтерфейсы(Владелец, Количество=Неопределено)
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СетевыеИнтерфейсы_ат.Ссылка,
	|	СетевыеИнтерфейсы_ат.ПометкаУдаления,
	|	СетевыеИнтерфейсы_ат.Владелец,
	|	СетевыеИнтерфейсы_ат.Наименование,
	|	СетевыеИнтерфейсы_ат.ТипСетевогоАдаптера,
	|	СетевыеИнтерфейсы_ат.ВиртуальнаяСеть,
	|	СетевыеИнтерфейсы_ат.АдресMAC,
	|	СетевыеИнтерфейсы_ат.НеУстанавливатьIP,
	|	СетевыеИнтерфейсы_ат.МетодНазначенияIP,
	|	СетевыеИнтерфейсы_ат.MTU
	|ИЗ
	|	Справочник.СетевыеИнтерфейсы_ат КАК СетевыеИнтерфейсы_ат
	|ГДЕ
	|	СетевыеИнтерфейсы_ат.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса 	= Запрос.Выполнить();
	ВДЗ						= РезультатЗапроса.Выбрать();
	Количество				= ВДЗ.Количество();
	Пока ВДЗ.Следующий() Цикл
		
		СтрокаТаблицы = СетевыеИнтерфейсы.Добавить();
		СтрокаТаблицы.Интерфейс					= ВДЗ.Ссылка;
		СтрокаТаблицы.ТипСетевогоАдаптера		= ВДЗ.ТипСетевогоАдаптера;
		СтрокаТаблицы.ПометкаУдаления			= ВДЗ.ПометкаУдаления;
		СтрокаТаблицы.MTU						= ВДЗ.MTU;
		СтрокаТаблицы.MAC						= ВДЗ.АдресMAC;
		//СтрокаТаблицы.Новый					= Ложь;
		СтрокаТаблицы.Измененный				= Ложь;
		СтрокаТаблицы.Наименование				= ВДЗ.Наименование;
		СтрокаТаблицы.ВиртуальнаяСеть			= ВДЗ.ВиртуальнаяСеть;
		//СтрокаТаблицы.МетодНазначенияIP		= ВДЗ.МетодНазначенияIP;
		СтрокаТаблицы.НеУстанавливатьIP			= ВДЗ.НеУстанавливатьIP;
		//СтрокаТаблицы.MTU						= ВДЗ.MTU;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СетевыеИнтерфейсы1ПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.Новый = Истина  Тогда 
		ИндексТекущейСтроки = Элемент.ТекущаяСтрока;
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ПометкаУдаления = Истина;
		ИмяИнтерфейса = ТекущиеДанные.Интерфейс;
		//Строка = СетевыеИнтерфейсы.Получить(ИндексТекущейСтроки);
		//Строка.ПометкаУдаления = Истина;
		Сообщить("Интерфейс " +  ИмяИнтерфейса +" с индексом " + ИндексТекущейСтроки + " будет помечен на удаление при сохранении");
		//Элемент.ТекущийЭлемент.Шрифт.Зачеркивание	= Истина;
		//Элемент.ТекущийЭлемент.Шрифт.Наклонный		= Истина;
		Отказ = Истина;
	Иначе
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СетевыеИнтерфейсы1ПриИзмененииНаСервере()
	
	//ТекущиеДанные;	
	
КонецПроцедуры

&НаСервере
Процедура СетевыеИнтерфейсыВыборНаСервере(ВыбраннаяСтрока)
	
	Строка = СетевыеИнтерфейсы.НайтиПоИдентификатору(ВыбраннаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтерфейсОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ИнтерфейсОбработкаВыбораНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнтерфейсОбработкаВыбораНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СетевыеИнтерфейсы1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	////Отказ = Истина;
	//НоваяСтрока = СетевыеИнтерфейсы.Добавить();
	//НоваяСтрока.Новый = Истина;
	
	//	Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.Новый = Истина;
	//	Элементы.СетевыеИнтерфейсы1.ИзменитьСтроку();	
	//	Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока
	
	
КонецПроцедуры

&НаКлиенте
Процедура СетевыеИнтерфейсы1ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СетевыеИнтерфейсы1ПередНачаломИзменения(Элемент, Отказ)
	
	Если	Не Объект.Ссылка.Пустая()
		//и	НЕ Модифицированность 
		тогда
		// это про сервер, если он не новый ...	
		
		// ТрегерИзменения принимает значения 
		// 0 - если элемент записан и не меняется (дефолтное после заполнения таблицы)
		// 1 - если меняем записаный элемент (Старый ставим ПУ = Истина)
		// 2 - новый элемент не записаный в базу и созданный на основе записанного (измененный или скопированный, передаем старый объект(ссылка) + индекс новой строки)
		// 3 - новый скопированный элемент  (передаем эту строку (структуру))
		// 4 - Удаляемый элемент (ничего не запращиваем, просто помечаем его на удаление)
		
		Если Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ТригерИзменения = 0 тогда				// если мы изменяем записаный элемент
			
			Если не Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ПометкаУдаления	= Истина тогда          
				// ^- если не новый и не ПУ тогда ...
				Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ПометкаУдаления	= Истина;		//пометили старый элемент на удаления
				Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ТригерИзменения	= 1;              //отметили его в таблице как измененный
				
				ИндексСтаройСтроки = Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока;
				//СетевыеИнтерфейсы.НайтиПоИдентификатору(Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока) ; 
				ПараметрыОткрытияФормы = Новый Структура;
				ПараметрыОткрытияФормы.Вставить("Владелец", Объект.Ссылка);
				ПараметрыОткрытияФормы.Вставить("Новый", ложь);
				ПараметрыОткрытияФормы.Вставить("ТригерИзменения", 2);
				//ПараметрыОткрытияФормы.Вставить("Интерфейс", СетевыеИнтерфейсы[ИндексСтаройСтроки].Интерфейс);        //неуверен что тут правильно...
				ПараметрыОткрытияФормы.Вставить("Интерфейс", СетевыеИнтерфейсы.НайтиПоИдентификатору(Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока).Интерфейс);
			Иначе                     // это если существующий объект помечен на удаление
				ИндексСтроки = Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока;
				СБЩ = Новый СообщениеПользователю;
				СБЩ.Поле = СетевыеИнтерфейсы[ИндексСтроки].Интерфейс;
				СБЩ.Текст = "Объект уже помечен на удаление => его изменить нельзя!";
				СБЩ.Сообщить();
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ТригерИзменения = 1 тогда 
			// вообще согласно логике такого наступить не должно...  ибо ТИ=1 отфильтуется еще на ПУ
			ИндексСтроки = СетевыеИнтерфейсы.Количество() -1;
			
			СБЩ 				= Новый СообщениеПользователю;
			СБЩ.Поле		= СетевыеИнтерфейсы[ИндексСтроки].Интерфейс;
			СБЩ.Текст		= "Объект уже помечен на удаление => его изменить нельзя!";
			СБЩ.Сообщить();
			
			
		ИначеЕсли Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ТригерИзменения = 2 тогда 
			// 2 - новый элемент не записаный в базу и созданный на основе записанного 
			//(измененный или скопированный, передаем старый объект(ссылка) + индекс новой строки)
			//Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ТригерИзменения	= 1;
			// ИндексСтроки - определяет куда мы пишем новые данные
			ИндексСтроки = Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока;
			
			//СетевыеИнтерфейсы.НайтиПоИдентификатору(Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока)   ;
			
			ТекущиеДанные 	= Элементы.СетевыеИнтерфейсы1.ТекущиеДанные ;
			СтараяСтрока		= Новый Структура;
			СтараяСтрока.Вставить("MAC",							ТекущиеДанные.MAC);
			СтараяСтрока.Вставить("MTU",							ТекущиеДанные.MTU);
			СтараяСтрока.Вставить("ВидСетевогоАдаптера", 	ТекущиеДанные.ТипСетевогоАдаптера);
			СтараяСтрока.Вставить("ВиртуальнаяСеть",		ТекущиеДанные.ВиртуальнаяСеть);
			СтараяСтрока.Вставить("Наименование",			ТекущиеДанные.Наименование);
			СтараяСтрока.Вставить("НеУстанавливатьIp",		ТекущиеДанные.НеУстанавливатьIp);
			СтараяСтрока.Вставить("ТригерИзменения", 		ТекущиеДанные.ТригерИзменения);
			СтараяСтрока.Вставить("Интерфейс",					ТекущиеДанные.Интерфейс);
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Владелец", Объект.Ссылка);
			ПараметрыОткрытияФормы.Вставить("Новый", Ложь);
			ПараметрыОткрытияФормы.Вставить("ТрегерИзменения", 2);
			ПараметрыОткрытияФормы.Вставить("СтараяСтрока" , СтараяСтрока);
			ПараметрыОткрытияФормы.Вставить("ИндексСтроки",    ИндексСтроки);
			//ПараметрыОткрытияФормы.Вставить("ТекущиеДанные", ТекущиеДанные);
			ПараметрыОткрытияФормы.Вставить("Интерфейс", СетевыеИнтерфейсы.НайтиПоИдентификатору(Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока).Интерфейс);
			
		ИначеЕсли Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ТригерИзменения = 3 тогда 
			
		ИначеЕсли Элементы.СетевыеИнтерфейсы1.ТекущиеДанные.ТригерИзменения = 4 тогда 
			
			НоваяСтрока = СетевыеИнтерфейсы.Добавить();
			НоваяСтрока.Новый = Истина;
			
			//ИндексСтроки - определяет куда мы пишем дановые данные
			ИндексСтроки 			= Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока;
			ИндексСтаройСтроки 	= Элементы.СетевыеИнтерфейсы1.ТекущаяСтрока;
			ПараметрыОткрытияФормы		= Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Владелец", Объект.Ссылка);
			ПараметрыОткрытияФормы.Вставить("Новый", Истина);
			ПараметрыОткрытияФормы.Вставить("ТригерИзменения",3);
			
			//		ПараметрыОткрытияФормы.Вставить("Интерфейс", СетевыеИнтерфейсы[ИндексСтаройСтроки].Интерфейс);
			
		КонецЕсли;
		//СтандартнаяОбработка = ложь;
		// открыть форму выбора и передать в нее сервер для отбора
		
		//Основание								= Новый Структура;
		//Основание.Вставить("Сервер", Объект.Ссылка);
		//Отбор 									= Новый Структура;
		//Отбор.Вставить("Владелец", Объект.Ссылка);
		//ПараметрыОткрытияФормы.Вставить("Отбор",				Отбор);
		//ПараметрыОткрытияФормы.Вставить("РежимВыбора",	Истина);
		//ПараметрыОткрытияФормы.Вставить("Основание",	Основание);
		
		ПараметрыОповещения = Новый Структура;
		//ПараметрыОповещения.Вставить("ИндексСтроки", ИндексСтроки); 
		ПараметрыОповещения.Вставить("Владелец", Объект.Ссылка);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораИнтерфейса", ЭтотОбъект, ПараметрыОповещения);
		ОткрытьФорму("Справочник.Серверы_ат.Форма.ФормаИнтерфейса",ПараметрыОткрытияФормы, ЭтаФорма,,
		ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Отказ = Истина;
		
	Иначе
		
		СБЩ = Новый СообщениеПользователю;
		СБЩ.Поле = СетевыеИнтерфейсы[ИндексСтроки].Интерфейс;
		СБЩ.Текст = "Объект уже помечен на удаление => его изменить нельзя!";
		СБЩ.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораИнтерфейса(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат.Свойство("ТригерИзменения") тогда 
		
		Если Результат.ТригерИзменения = 2 тогда
			
			НовыйИнтерфейс						= СетевыеИнтерфейсы.Добавить();
			НовыйИнтерфейс.MAC					= Результат.MAC;
			НовыйИнтерфейс.MTU					= Результат.MTU;
			НовыйИнтерфейс.ТипСетевогоАдаптера	= Результат.ТипСетевогоАдаптера;
			НовыйИнтерфейс.ВиртуальнаяСеть		= Результат.ВиртуальнаяСеть;
			НовыйИнтерфейс.Наименование			= Результат.Наименование;
			НовыйИнтерфейс.НеУстанавливатьIp	= Результат.НеУстанавливатьIp;
			НовыйИнтерфейс.ТригерИзменения 		= Результат.ТригерИзменения;
			НовыйИнтерфейс.НовыйЭлемент 		= Результат.НовыйЭлемент;
			НовыйИнтерфейс.Измененный			= Истина;
			НовыйИнтерфейс.Интерфейс			= Результат.Интерфейс;
			
		ИначеЕсли 	Результат.ТригерИзменения = 3 тогда
		ИначеЕсли 	Результат.ТригерИзменения = 4 тогда
		ИначеЕсли 	Результат.ТригерИзменения = 5 тогда
			
			Если ДополнительныеПараметры.Владелец = Объект.Ссылка тогда
				
				Если ДополнительныеПараметры.Свойство("ИндексСтроки") тогда
					
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].MAC					= Результат.MAC;
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].MTU					= Результат.MTU;
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].ТипСетевогоАдаптера	= Результат.ТипСетевогоАдаптера;
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].ВиртуальнаяСеть		= Результат.ВиртуальнаяСеть;
					//СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].Измененный 		= Результат.Измененный;
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].Интерфейс			= Результат.Интерфейс;
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].Наименование		= Результат.Наименование;
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].НеУстанавливатьIp	= Результат.НеУстанавливатьIp;
					СетевыеИнтерфейсы[ДополнительныеПараметры.ИндексСтроки].Новый				= Результат.Новый;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Сбщ = Новый СообщениеПользователю;
		Сбщ.Текст = "нет данных для внесения";
		Сбщ.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

СписокПараметров.Добавить("Перечисления.ТипыРесурсов_ат.ПроцентИспользованияПроцессора");
СписокПараметров.Добавить("Перечисления.ТипыРесурсов_ат.ПроцентИспользованияПамяти");
СписокПараметров.Добавить("Перечисления.ТипыРесурсов_ат.ПроцентИспользованияЖесткогоДиска");
