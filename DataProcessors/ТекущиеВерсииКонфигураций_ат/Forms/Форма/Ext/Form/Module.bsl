
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ПортHTTP = 8080;
	ПортHTTP = 80; // !!!ХАРДКОД!!!
	
	УстановитьОтборЭкземпляровПоСерверу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КластерСервера1СПриИзменении(Элемент)
	
	УстановитьОтборЭкземпляровПоСерверу();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаБаз

&НаКлиенте
Процедура ТаблицаБазСинхронизироватьПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаБаз.ТекущиеДанные;
	
	Если ТекДанные.Синхронизировать Тогда
		
		ТекДанные.СинхронизироватьВерсию  = Истина;
		ТекДанные.ТекущаяВерсияЭкземпляра = ТекДанные.ВерсияКонфигурации;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБазЭкземплярПродуктаПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаБаз.ТекущиеДанные;
	
	Если ТекДанные.ЭкземплярПродукта.Пустая() Тогда
		
		ОчиститьДанныеЭкземпляра(ТекДанные);
		
	Иначе
		
		ТаблицаБазЭкземплярПродуктаПриИзменении_Сервер(Элементы.ТаблицаБаз.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБазИсточникНаименованияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаБаз.ТекущиеДанные;
	
	ТекДанные.Синхронизировать = Истина;
	
	Если ТекДанные.ИсточникНаименования = 1 Тогда
		
		ТекДанные.НаименованиеЭкземпляра = ТекДанные.ИмяБазы;
		
	ИначеЕсли ТекДанные.ИсточникНаименования = 2 Тогда
		
		ТекДанные.НаименованиеЭкземпляра = ТекДанные.ОписаниеБазы;
		
	ИначеЕсли ТекДанные.ИсточникНаименования = 3 Тогда
		
		ТекДанные.НаименованиеЭкземпляра = ТекДанные.СинонимКонфигурации;
		
	ИначеЕсли ТекДанные.ИсточникНаименования = 4 Тогда
		
		ТекДанные.НаименованиеЭкземпляра = ТекДанные.КраткаяИнформацияКонфигурации;
		
	Иначе
		
		ТекДанные.НаименованиеЭкземпляра = ТекДанные.НаименованиеЭкземпляраСохраненное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБазИсточникОписанияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаБаз.ТекущиеДанные;
	
	ТекДанные.Синхронизировать = Истина;
	
	Если ТекДанные.ИсточникОписания = 1 Тогда
		
		ТекДанные.ОписаниеЭкземпляра = ТекДанные.ИмяБазы;
		
	ИначеЕсли ТекДанные.ИсточникОписания = 2 Тогда
		
		ТекДанные.ОписаниеЭкземпляра = ТекДанные.ОписаниеБазы;
		
	ИначеЕсли ТекДанные.ИсточникОписания = 3 Тогда
		
		ТекДанные.ОписаниеЭкземпляра = ТекДанные.СинонимКонфигурации;
		
	ИначеЕсли ТекДанные.ИсточникОписания = 4 Тогда
		
		ТекДанные.ОписаниеЭкземпляра = ТекДанные.КраткаяИнформацияКонфигурации;
		
	Иначе
		
		ТекДанные.ОписаниеЭкземпляра = ТекДанные.ОписаниеЭкземпляраСохраненное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБазСинхронизироватьВерсиюПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаБаз.ТекущиеДанные;
	
	Если ТекДанные.СинхронизироватьВерсию Тогда
		
		ТекДанные.Синхронизировать		  = Истина;
		ТекДанные.ТекущаяВерсияЭкземпляра = ТекДанные.ВерсияКонфигурации;
		
	Иначе
		
		ТекДанные.ТекущаяВерсияЭкземпляра = ТекДанные.ТекущаяВерсияЭкземпляраСохраненная;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьДанныеИБ(Команда)
	
	Если КластерСервера1С.Пустая() Тогда
		
		ПоказатьПредупреждение(, "Кластер Сервера 1С не выбран!.", 5);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуБаз();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКонфигурации(Команда)
	
	ТекСтрока = Элементы.ТаблицаБаз.ТекущаяСтрока;
	
	Если ТекСтрока <> Неопределено Тогда
		
		ОписаниеОшибки = "";
		
		ОбновитьДанныеКонфигурации_Сервер(ТекСтрока, ОписаниеОшибки);
		
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			
			Сообщить(ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьОтмеченные(Команда)
	
	СинхронизироватьОтмеченные_Сервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборЭкземпляровПоСерверу()
	
	МассивПараметровВыбора = Новый Массив();
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.СерверРазмещения", КластерСервера1С.СерверРазмещения));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипПродукта", Перечисления.ТипыПродуктов_ат.Конфигурация1С));
	
	Элементы.ТаблицаБазЭкземплярПродукта.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуБаз()
	
	ОписаниеОшибки = "";
	HTTPСоединение = Неопределено;
	
	ТаблицаБаз.Очистить();
	
	ДанныеКластера = СтруктураДанныхКластера(КластерСервера1С, ОписаниеОшибки);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		
		Сообщить(ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЭкземпляров = ТаблицаЭкземпляровКонфигурацийВКластере(КластерСервера1С);
	
	Если ИспользоватьПрямоеПодключение Тогда
		
		МассивОписанийИБ = МассивОписанийИБ_ПрямоеПодключение(ДанныеКластера, ОписаниеОшибки);
		
	Иначе
		
		HTTPСоединение = HTTPСоединение(ДанныеКластера);
		
		HTTPЗапрос = Новый HTTPЗапрос(ДанныеКластера.АдресРесурсаHTTP);
		
		МассивОписанийИБ = МассивОписанийИБ_Агент(HTTPСоединение, HTTPЗапрос, ДанныеКластера, ОписаниеОшибки);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		
		Сообщить(ОписаниеОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого ОписаниеИБ Из МассивОписанийИБ Цикл
		
		СтрокаБазы = ТаблицаБаз.Добавить();
		
		СтрокаБазы.ИмяБазы		= ОписаниеИБ.ИмяБазы;
		СтрокаБазы.ОписаниеБазы = ОписаниеИБ.ОписаниеБазы;
		
		СтрокаЭкземпляра = ТаблицаЭкземпляров.Найти(ВРег(ОписаниеИБ.ИмяБазы), "ИмяБазыДляПоиска");
		
		Если СтрокаЭкземпляра = Неопределено Тогда // Не найдено соответствие базы и экземпляра продукта.
			
			Продолжить;
			
		Иначе
			
			СтрокаБазы.ЭкземплярПродукта				  = СтрокаЭкземпляра.ЭкземплярПродукта;
			СтрокаБазы.ТекущийПродукт					  = СтрокаЭкземпляра.ТекущийПродукт;
			СтрокаБазы.НаименованиеЭкземпляра			  = СтрокаЭкземпляра.Наименование;
			СтрокаБазы.НаименованиеЭкземпляраСохраненное  = СтрокаЭкземпляра.Наименование;
			СтрокаБазы.ОписаниеЭкземпляра				  = СтрокаЭкземпляра.Описание;
			СтрокаБазы.ОписаниеЭкземпляраСохраненное	  = СтрокаЭкземпляра.Описание;
			СтрокаБазы.ТекущаяВерсияЭкземпляра			  = СтрокаЭкземпляра.ТекущаяВерсия;
			СтрокаБазы.ТекущаяВерсияЭкземпляраСохраненная = СтрокаЭкземпляра.ТекущаяВерсия;
			СтрокаБазы.Логин							  = СтрокаЭкземпляра.Логин;
			СтрокаБазы.Пароль							  = СтрокаЭкземпляра.Пароль;
			
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(СтрокаБазы.Логин) Тогда
			
			ПолучитьДанныеКонфигурации(ИспользоватьПрямоеПодключение, СтрокаБазы, ДанныеКластера, ОписаниеОшибки, HTTPСоединение);
			
			Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
				
				Сообщить(ОписаниеОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция   СтруктураДанныхКластера(КластерСсылка, ОписаниеОшибки)
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("COMProgID");
	ВозвращаемаяСтруктура.Вставить("ИмяСервера");
	ВозвращаемаяСтруктура.Вставить("ПортСервера");
	ВозвращаемаяСтруктура.Вставить("ПортКластера");
	ВозвращаемаяСтруктура.Вставить("ИмяАдминистратора");
	ВозвращаемаяСтруктура.Вставить("ПарольАдминистратора");
	ВозвращаемаяСтруктура.Вставить("ИмяХоста");
	ВозвращаемаяСтруктура.Вставить("ПортHTTP");
	ВозвращаемаяСтруктура.Вставить("АдресРесурсаHTTP");
	ВозвращаемаяСтруктура.Вставить("ЛогинHTTP");
	ВозвращаемаяСтруктура.Вставить("ПарольHTTP");
	
	Если КластерСервера1С.ПометкаУдаления Тогда
		
		ОписаниеОшибки = "Выбранный кластер сервера 1С помечен на удаление.";
		
		Возврат ВозвращаемаяСтруктура;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Серверы_ат.Hostname КАК Hostname,
		|	ЕСТЬNULL(СпецификацияСервера.ПортСервера, """") КАК ПортСервера,
		|	ЕСТЬNULL(СпецификацияСервера.ПортКластера, """") КАК ПортКластера,
		|	ЭкземплярыПродуктов_ат.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ЕСТЬNULL(Доступы_ат.Логин, """") КАК Логин,
		|	ЕСТЬNULL(Доступы_ат.Пароль, """") КАК Пароль
		|ИЗ
		|	Справочник.ЭкземплярыПродуктов_ат КАК ЭкземплярыПродуктов_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Серверы_ат КАК Серверы_ат
		|		ПО ЭкземплярыПродуктов_ат.СерверРазмещения = Серверы_ат.Ссылка
		|			И (НЕ Серверы_ат.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияЭП_Сервер1С_ат КАК СпецификацияСервера
		|		ПО ЭкземплярыПродуктов_ат.Ссылка = СпецификацияСервера.ЭкземплярПродукта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Доступы_ат КАК Доступы_ат
		|		ПО ЭкземплярыПродуктов_ат.Ссылка = Доступы_ат.Владелец
		|			И (Доступы_ат.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступа_ат.АдминистраторКластераСерверов1С))
		|			И (НЕ Доступы_ат.ПометкаУдаления)
		|ГДЕ
		|	ЭкземплярыПродуктов_ат.Ссылка = &КластерСервера1С";
	
	Запрос.УстановитьПараметр("КластерСервера1С", КластерСервера1С);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ПустаяСтрока(Выборка.Hostname) Тогда
		
		ОписаниеОшибки = "Не заполнено Hostname сервера.";
		
		Возврат ВозвращаемаяСтруктура;
		
	КонецЕсли;
	
	ВозвращаемаяСтруктура.COMProgID				= "V" + СтрЗаменить(Лев(Выборка.ТекущаяВерсия, 3), ".", "") + ".COMConnector";
	ВозвращаемаяСтруктура.ИмяСервера			= Выборка.Hostname;
	ВозвращаемаяСтруктура.ПортСервера			= Формат(Выборка.ПортСервера, "ЧГ=0");
	ВозвращаемаяСтруктура.ПортКластера			= Формат(Выборка.ПортКластера, "ЧГ=0");
	ВозвращаемаяСтруктура.ИмяАдминистратора		= Выборка.Логин;
	ВозвращаемаяСтруктура.ПарольАдминистратора	= Выборка.Пароль;
	ВозвращаемаяСтруктура.ИмяХоста				= Выборка.Hostname; // ХАРДКОД!!!
	ВозвращаемаяСтруктура.ПортHTTP				= ПортHTTP; // ХАРДКОД!!!
	ВозвращаемаяСтруктура.АдресРесурсаHTTP		= "agent_support/hs/service/agent/execute"; // ХАРДКОД!!!
	ВозвращаемаяСтруктура.ЛогинHTTP				= "admin"; // ХАРДКОД!!!
	ВозвращаемаяСтруктура.ПарольHTTP			= "1сadmin"; // ХАРДКОД!!!
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

&НаСервере
Функция   ТаблицаЭкземпляровКонфигурацийВКластере(КластерСервера1С)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СпецификацияКонфигурации.ЭкземплярПродукта КАК ЭкземплярПродукта,
		|	СпецификацияКонфигурации.ЭкземплярПродукта.Наименование КАК Наименование,
		|	СпецификацияКонфигурации.ЭкземплярПродукта.Описание КАК Описание,
		|	СпецификацияКонфигурации.ЭкземплярПродукта.ТекущийПродукт КАК ТекущийПродукт,
		|	СпецификацияКонфигурации.ЭкземплярПродукта.ТекущаяВерсия КАК ТекущаяВерсия,
		|	СпецификацияКонфигурации.ИмяИБНа1С КАК ИмяБазы,
		|	СпецификацияКонфигурации.ИмяИБНа1С КАК ИмяБазыДляПоиска,
		|	Доступы_ат.Логин КАК Логин,
		|	Доступы_ат.Пароль КАК Пароль
		|ИЗ
		|	РегистрСведений.СпецификацияЭП_Конфигурация1С_ат КАК СпецификацияКонфигурации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Доступы_ат КАК Доступы_ат
		|		ПО СпецификацияКонфигурации.ЭкземплярПродукта = Доступы_ат.Владелец
		|			И (Доступы_ат.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступа_ат.АдминистраторИБ))
		|			И (НЕ Доступы_ат.ПометкаУдаления)
		|ГДЕ
		|	СпецификацияКонфигурации.Сервер1С = &КластерСервера1С";
	
	Запрос.УстановитьПараметр("КластерСервера1С", КластерСервера1С);
	
	ТаблицаЭкземпляров = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаЭкземпляра Из ТаблицаЭкземпляров Цикл
		
		СтрокаЭкземпляра.ИмяБазыДляПоиска = ВРег(СтрокаЭкземпляра.ИмяБазыДляПоиска);
		
	КонецЦикла;
	
	Возврат ТаблицаЭкземпляров;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеКонфигурации(ИспользоватьПрямоеПодключение, СтрокаБазы, ДанныеКластера, ОписаниеОшибки, HTTPСоединение = Неопределено)
	
	Если ИспользоватьПрямоеПодключение Тогда
		
		ПолучитьДанныеКонфигурации_ПрямоеПодключение(СтрокаБазы, ДанныеКластера, ОписаниеОшибки);
		
	Иначе
		
		ПолучитьДанныеКонфигурации_Агент(ДанныеКластера, СтрокаБазы, HTTPСоединение, ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Получение_данных_через_агент

&НаСервере
Функция   МассивОписанийИБ_Агент(HTTPСоединение, HTTPЗапрос, ДанныеКластера, ОписаниеОшибки)
	
	СтруктураПеременных = Новый Структура;
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "COMProgID", ДанныеКластера.COMProgID);
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "СтрокаСоединения", ИдентификаторАгентаСервера(ДанныеКластера));
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "ПортКластера", ДанныеКластера.ПортКластера);
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "ИмяАдминистратора", ДанныеКластера.ИмяАдминистратора);
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "ПарольАдминистратора", ДанныеКластера.ПарольАдминистратора);
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "ВозвращаемыеДанные");
	
	ИсполняемаяСтрока =
		"ОбъектПодключения = Новый COMObject(COMProgID);
		|СоединениеСАгентом = ОбъектПодключения.ConnectAgent(СтрокаСоединения);
		|МассивКластеров = СоединениеСАгентом.GetClusters();
		|
		|Для каждого ОписаниеКластера Из МассивКластеров Цикл
		|	
		|	Если Формат(ОписаниеКластера.MainPort, ""ЧГ=0"") <> ПортКластера Тогда
		|		
		|		Продолжить;
		|		
		|	КонецЕсли;
		|	
		|	Попытка
		|		
		|		СоединениеСАгентом.Authenticate(ОписаниеКластера, ИмяАдминистратора, ПарольАдминистратора);
		|	
		|		МассивОписанийИБ = СоединениеСАгентом.GetInfoBases(ОписаниеКластера);
		|		
		|	Исключение
		|		
		|		ОписаниеОшибки = ОписаниеОшибки();
		|		
		|		Перейти ~КонецИсполняемойСтроки;
		|		
		|	КонецПопытки;
		|	
		|КонецЦикла;
		|
		|ВозвращаемыеДанные = Новый Массив;
		|
		|Для каждого ОписаниеИБ Из МассивОписанийИБ Цикл
		|	
		|	СтруктураОписанияИБ = Новый Структура;
		|	СтруктураОписанияИБ.Вставить(""ИмяБазы"", ОписаниеИБ.Name);
		|	СтруктураОписанияИБ.Вставить(""ОписаниеБазы"", ОписаниеИБ.Descr);
		|	
		|	ВозвращаемыеДанные.Добавить(СтруктураОписанияИБ);
		|
		|КонецЦикла;
		|~КонецИсполняемойСтроки:;";
	
	Для каждого КлючИЗначение Из СтруктураПеременных Цикл
		
		ИсполняемаяСтрока = СтрЗаменить(ИсполняемаяСтрока, КлючИЗначение.Ключ, "Переменные." + КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	Результат = ЗапросКАгенту(HTTPСоединение, HTTPЗапрос, ИсполняемаяСтрока, СтруктураПеременных, "ВозвращаемыеДанные", ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеКонфигурации_Агент(ДанныеКластера, СтрокаБазы, HTTPСоединение = Неопределено, ОписаниеОшибки)
	
	Если HTTPСоединение = Неопределено Тогда
		
		HTTPСоединение = HTTPСоединение(ДанныеКластера);
		
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(ДанныеКластера.АдресРесурсаHTTP);
	
	СтруктураПеременных = Новый Структура;
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "COMProgID", ДанныеКластера.COMProgID);
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "СтрокаСоединенияСИБ", СтрокаСоединенияСИБ(ДанныеКластера, СтрокаБазы));
	ВставитьПеременнуюВСтруктуру(СтруктураПеременных, "ВозвращаемыеДанные");
	
	ИсполняемаяСтрока =
		"ОбъектПодключения = Новый COMObject(COMProgID);
		|
		|Попытка
		|	
		|	ПодключениеКБазе = ОбъектПодключения.Connect(СтрокаСоединенияСИБ);
		|	
		|Исключение
		|	
		|	ОписаниеОшибки = ""Не удалось подключиться к базе """"" + СтрокаБазы.ИмяБазы + """"" по причине: "" + ОписаниеОшибки();
		|	
		|	Перейти ~КонецИсполняемойСтроки;
		|	
		|КонецПопытки;
		|
		|МетаданныеБазы = ПодключениеКБазе.Метаданные();
		|
		|ВозвращаемыеДанные = Новый Структура;
		|ВозвращаемыеДанные.Вставить(""Версия"", МетаданныеБазы.Версия);
		|ВозвращаемыеДанные.Вставить(""Синоним"", МетаданныеБазы.Синоним);
		|ВозвращаемыеДанные.Вставить(""КраткаяИнформация"", МетаданныеБазы.КраткаяИнформация);
		|
		|ПодключениеКБазе = Неопределено;
		|
		|~КонецИсполняемойСтроки:;";
	
	Для каждого КлючИЗначение Из СтруктураПеременных Цикл
		
		ИсполняемаяСтрока = СтрЗаменить(ИсполняемаяСтрока, КлючИЗначение.Ключ, "Переменные." + КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	Результат = ЗапросКАгенту(HTTPСоединение, HTTPЗапрос, ИсполняемаяСтрока, СтруктураПеременных, "ВозвращаемыеДанные", ОписаниеОшибки);
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		СтрокаБазы.ВерсияКонфигурации			 = Результат.Версия;
		СтрокаБазы.СинонимКонфигурации			 = Результат.Синоним;
		СтрокаБазы.КраткаяИнформацияКонфигурации = Результат.КраткаяИнформация;
		СтрокаБазы.ДанныеКонфигурацииПолучены	 = Истина;
		
	Иначе
		
		СтрокаБазы.ДанныеКонфигурацииПолучены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   HTTPСоединение(ДанныеКластера)
	
	Если ПустаяСтрока(ДанныеКластера.ЛогинHTTP) Тогда
		
		HTTPСоединение = Новый HTTPСоединение(ДанныеКластера.ИмяХоста, ДанныеКластера.ПортHTTP);
		
	Иначе
		
		HTTPСоединение = Новый HTTPСоединение(ДанныеКластера.ИмяХоста, ДанныеКластера.ПортHTTP,
												ДанныеКластера.ЛогинHTTP, ДанныеКластера.ПарольHTTP);
		
	КонецЕсли;
	
	Возврат HTTPСоединение;
	
КонецФункции

&НаСервере
Функция   ЗапросКАгенту(HTTPСоединение, HTTPЗапрос, ИсполняемаяСтрока, СтруктураПеременных, ИмяВозвращаемойПеременной, ОписаниеОшибки)
	
	ТекстJSON = КомандаВJSON(ИсполняемаяСтрока, СтруктураПеременных, ИмяВозвращаемойПеременной);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстJSON);
	
	Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ТелоКакСтрока = Ответ.ПолучитьТелоКакСтроку();
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока);
		
		Результат = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
		
	Иначе
		
		ОписаниеОшибки = ТелоКакСтрока;
		
		Результат = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция   КомандаВJSON(ИсполняемаяСтрока, СтруктураПеременных, ИмяВозвращаемойПеременной = "")
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("Команда", ИсполняемаяСтрока);
	СтруктураКоманды.Вставить("СтруктураПеременных", СтруктураПеременных);
	СтруктураКоманды.Вставить("ИмяВозвращаемойПеременной", ИмяВозвращаемойПеременной);
	
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.УстановитьСтроку();
	
	ЗаписатьJSON(Запись, СтруктураКоманды);
	
	ТекстJSON = Запись.Закрыть();
	
	Возврат ТекстJSON;
	
КонецФункции

&НаСервере
Процедура ВставитьПеременнуюВСтруктуру(СтруктураПеременных, Имя, Значение = Неопределено, Получать = Ложь, Хранить = Ложь)
	
	СтруктураПеременной = Новый Структура;
	СтруктураПеременной.Вставить("Значение", Значение);
	СтруктураПеременной.Вставить("Получать", Получать);
	СтруктураПеременной.Вставить("Хранить", Хранить);
	
	СтруктураПеременных.Вставить(Имя, СтруктураПеременной);
	
КонецПроцедуры

#КонецОбласти

#Область Получение_данных_через_прямое_подключение

&НаСервере
Функция   МассивОписанийИБ_ПрямоеПодключение(ДанныеКластера, ОписаниеОшибки)
	
	ВозвращаемыеДанные = Новый Массив;
	
	ОбъектПодключения = Новый COMObject(ДанныеКластера.COMProgID);
	
	СоединениеСАгентом = ОбъектПодключения.ConnectAgent(ИдентификаторАгентаСервера(ДанныеКластера));
	
	МассивКластеров = СоединениеСАгентом.GetClusters();
	
	Для каждого ОписаниеКластера Из МассивКластеров Цикл
		
		Если Формат(ОписаниеКластера.MainPort, "ЧГ=0") <> ДанныеКластера.ПортКластера Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			СоединениеСАгентом.Authenticate(ОписаниеКластера, ДанныеКластера.ИмяАдминистратора, ДанныеКластера.ПарольАдминистратора);
			
			МассивОписанийИБ = СоединениеСАгентом.GetInfoBases(ОписаниеКластера);
			
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			
			Прервать;
			
		КонецПопытки;
		
		Для каждого ОписаниеИБ Из МассивОписанийИБ Цикл
			
			СтруктураОписанияИБ = Новый Структура;
			СтруктураОписанияИБ.Вставить("ИмяБазы", ОписаниеИБ.Name);
			СтруктураОписанияИБ.Вставить("ОписаниеБазы", ОписаниеИБ.Descr);
			
			ВозвращаемыеДанные.Добавить(СтруктураОписанияИБ);
			
		КонецЦикла;
		
		СоединениеСАгентом = Неопределено;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьДанныеКонфигурации_ПрямоеПодключение(СтрокаБазы, ДанныеКластера, ОписаниеОшибки)
	
	ОбъектПодключения = Новый COMObject(ДанныеКластера.COMProgID);
	
	СтрокаСоединения = СтрокаСоединенияСИБ(ДанныеКластера, СтрокаБазы);
	
	Попытка
		
		ПодключениеКБазе = ОбъектПодключения.Connect(СтрокаСоединения);
		
	Исключение
		
		СтрокаБазы.ДанныеКонфигурацииПолучены = Ложь;
		
		ОписаниеОшибки = "Не удалось подключиться к базе """ + СтрокаБазы.ИмяБазы + """ по причине: " + ОписаниеОшибки();
		
		Возврат;
		
	КонецПопытки;
	
	МетаданныеБазы = ПодключениеКБазе.Метаданные();
	
	СтрокаБазы.ВерсияКонфигурации			 = МетаданныеБазы.Версия;
	СтрокаБазы.СинонимКонфигурации			 = МетаданныеБазы.Синоним;
	СтрокаБазы.КраткаяИнформацияКонфигурации = МетаданныеБазы.КраткаяИнформация;
	СтрокаБазы.ДанныеКонфигурацииПолучены	 = Истина;
	
	ПодключениеКБазе = Неопределено;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция   ИдентификаторАгентаСервера(ДанныеКластера)
	
	ИдентификаторАгентаСервера = "TCP://" + ДанныеКластера.ИмяСервера;
	
	Если НЕ ПустаяСтрока(ДанныеКластера.ПортСервера) Тогда
		
		ИдентификаторАгентаСервера = ИдентификаторАгентаСервера + ":" + ДанныеКластера.ПортСервера;
		
	КонецЕсли;
	
	Возврат ИдентификаторАгентаСервера;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция   СтрокаСоединенияСИБ(ДанныеКластера, СтрокаБазы)
	
	СтрокаСоединения = "Srvr = """ + ДанныеКластера.ИмяСервера;
	СтрокаСоединения = СтрокаСоединения + ?(ПустаяСтрока(ДанныеКластера.ПортКластера), "", ":" + ДанныеКластера.ПортКластера) + """;";
	СтрокаСоединения = СтрокаСоединения + " Ref = """ + СтрокаБазы.ИмяБазы + """;";
	
	Если НЕ ПустаяСтрока(СтрокаБазы.Логин) Тогда
		
		СтрокаСоединения = СтрокаСоединения + " Usr = """ + СтрокаБазы.Логин + """;";
		
		Если НЕ ПустаяСтрока(СтрокаБазы.Пароль) Тогда
			
			СтрокаСоединения = СтрокаСоединения + " Pwd = """ + СтрокаБазы.Пароль + """;";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаСоединения;
	
КонецФункции

&НаСервере
Процедура ТаблицаБазЭкземплярПродуктаПриИзменении_Сервер(ИдентификаторСтроки)
	
	СтрокаБазы = ТаблицаБаз.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокиСВыбраннымЭкземпляром = ТаблицаБаз.НайтиСтроки(Новый Структура("ЭкземплярПродукта", СтрокаБазы.ЭкземплярПродукта));
	
	СтрокиСВыбраннымЭкземпляром.Удалить(СтрокиСВыбраннымЭкземпляром.Найти(СтрокаБазы));
	
	Для каждого СтрокаСВыбраннымЭкземпляром Из СтрокиСВыбраннымЭкземпляром Цикл
		
		ОчиститьДанныеЭкземпляра(СтрокаСВыбраннымЭкземпляром);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭкземплярыПродуктов_ат.Ссылка КАК ЭкземплярПродукта,
		|	ЭкземплярыПродуктов_ат.Наименование КАК Наименование,
		|	ЭкземплярыПродуктов_ат.Описание КАК Описание,
		|	ЭкземплярыПродуктов_ат.ТекущийПродукт КАК ТекущийПродукт,
		|	ЭкземплярыПродуктов_ат.ТекущаяВерсия КАК ТекущаяВерсия,
		|	СпецификацияКонфигурации.ИмяИБНа1С КАК ИмяБазы,
		|	СпецификацияКонфигурации.ИмяИБНа1С КАК ИмяБазыДляПоиска,
		|	Доступы_ат.Логин КАК Логин,
		|	Доступы_ат.Пароль КАК Пароль
		|ИЗ
		|	Справочник.ЭкземплярыПродуктов_ат КАК ЭкземплярыПродуктов_ат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацияЭП_Конфигурация1С_ат КАК СпецификацияКонфигурации
		|		ПО ЭкземплярыПродуктов_ат.Ссылка = СпецификацияКонфигурации.ЭкземплярПродукта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Доступы_ат КАК Доступы_ат
		|		ПО ЭкземплярыПродуктов_ат.Ссылка = Доступы_ат.Владелец
		|			И (Доступы_ат.ТипДоступа = ЗНАЧЕНИЕ(Перечисление.ТипыДоступа_ат.АдминистраторИБ))
		|			И (НЕ Доступы_ат.ПометкаУдаления)
		|ГДЕ
		|	ЭкземплярыПродуктов_ат.Ссылка = &ЭкземплярПродукта";
	
	Запрос.УстановитьПараметр("ЭкземплярПродукта", СтрокаБазы.ЭкземплярПродукта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтрокаБазы.ТекущийПродукт 					  = Выборка.ТекущийПродукт;
	СтрокаБазы.НаименованиеЭкземпляра			  = Выборка.Наименование;
	СтрокаБазы.НаименованиеЭкземпляраСохраненное  = Выборка.Наименование;
	СтрокаБазы.ОписаниеЭкземпляра				  = Выборка.Описание;
	СтрокаБазы.ОписаниеЭкземпляраСохраненное	  = Выборка.Описание;
	СтрокаБазы.ТекущаяВерсияЭкземпляра			  = Выборка.ТекущаяВерсия;
	СтрокаБазы.ТекущаяВерсияЭкземпляраСохраненная = Выборка.ТекущаяВерсия;
	СтрокаБазы.Логин							  = Выборка.Логин;
	СтрокаБазы.Пароль							  = Выборка.Пароль;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеКонфигурации_Сервер(ТекСтрока, ОписаниеОшибки)
	
	СтрокаБазы = ТаблицаБаз.Получить(ТекСтрока);
	
	ПолучитьДанныеКонфигурации(ИспользоватьПрямоеПодключение, СтрокаБазы, ДанныеКластера, ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеЭкземпляра(СтрокаБазы)
	
	СтрокаБазы.ЭкземплярПродукта				  = Неопределено;
	СтрокаБазы.ТекущийПродукт					  = Неопределено;
	СтрокаБазы.Синхронизировать					  = Ложь;
	СтрокаБазы.СинхронизироватьВерсию			  = Ложь;
	СтрокаБазы.ТекущаяВерсияЭкземпляра			  = Неопределено;
	СтрокаБазы.ТекущаяВерсияЭкземпляраСохраненная = Неопределено;
	СтрокаБазы.ИсточникНаименования				  = 0;
	СтрокаБазы.НаименованиеЭкземпляра			  = Неопределено;
	СтрокаБазы.НаименованиеЭкземпляраСохраненное  = Неопределено;
	СтрокаБазы.ИсточникОписания					  = 0;
	СтрокаБазы.ОписаниеЭкземпляра				  = Неопределено;
	СтрокаБазы.ОписаниеЭкземпляраСохраненное	  = Неопределено;
	СтрокаБазы.Логин							  = Неопределено;
	СтрокаБазы.Пароль							  = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьОтмеченные_Сервер()
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Синхронизировать", Истина);
	СтруктураПоиска.Вставить("СинхронизироватьВерсию", Истина);
	
	ТаблицаИзменяемыхВерсий = ТаблицаБаз.Выгрузить(ТаблицаБаз.НайтиСтроки(СтруктураПоиска), "ТекущаяВерсияЭкземпляра, ТекущийПродукт");
	
	ТаблицаИзменяемыхВерсий.Колонки.Добавить("ВерсияЧислом", Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаИзменяемыхВерсий Из ТаблицаИзменяемыхВерсий Цикл
		
		СтрокаИзменяемыхВерсий.ТекущаяВерсияЭкземпляра	= СокрЛП(СтрокаИзменяемыхВерсий.ТекущаяВерсияЭкземпляра);
		СтрокаИзменяемыхВерсий.ВерсияЧислом				= УчетПродуктов_ат.ПолучитьВерсиюЧислом(СтрокаИзменяемыхВерсий.ТекущаяВерсияЭкземпляра);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаИзменяемыхВерсий.ТекущийПродукт КАК ТекущийПродукт,
		|	ТаблицаИзменяемыхВерсий.ВерсияЧислом КАК ВерсияЧислом
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТаблицаИзменяемыхВерсий КАК ТаблицаИзменяемыхВерсий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.ТекущийПродукт КАК ТекущийПродукт,
		|	ВерсииПродуктов_ат.Ссылка КАК ВерсияПродуктаСсылка
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПродуктов_ат КАК ВерсииПродуктов_ат
		|		ПО ВТ.ТекущийПродукт = ВерсииПродуктов_ат.Владелец
		|			И ВТ.ВерсияЧислом = ВерсииПродуктов_ат.ВерсияЧислом
		|			И (НЕ ВерсииПродуктов_ат.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
	
	Запрос.УстановитьПараметр("ТаблицаИзменяемыхВерсий", ТаблицаИзменяемыхВерсий);
	
	ТаблицаИзменяемыхВерсий = Запрос.Выполнить().Выгрузить();
	
	СинхронизируемыеСтроки = ТаблицаБаз.НайтиСтроки(Новый Структура("Синхронизировать", Истина));
	
	Для каждого СтрокаЭкземпляра Из СинхронизируемыеСтроки Цикл
		
		ЭкземплярОбъект = СтрокаЭкземпляра.ЭкземплярПродукта.ПолучитьОбъект();
		
		Если СтрокаЭкземпляра.ИсточникНаименования <> 0 Тогда
			
			ЭкземплярОбъект.Наименование = СтрокаЭкземпляра.НаименованиеЭкземпляра;
			
		КонецЕсли;
		
		Если СтрокаЭкземпляра.ИсточникОписания <> 0 Тогда
			
			ЭкземплярОбъект.Описание = СтрокаЭкземпляра.ОписаниеЭкземпляра;
			
		КонецЕсли;
		
		Если СтрокаЭкземпляра.СинхронизироватьВерсию Тогда
			
			СтрокаВерсии = ТаблицаИзменяемыхВерсий.Найти(СтрокаЭкземпляра.ТекущийПродукт, "ТекущийПродукт");
			
			Если НЕ ЗначениеЗаполнено(СтрокаВерсии.ВерсияПродуктаСсылка) Тогда
				
				НоваяВерсия = Справочники.ВерсииПродуктов_ат.СоздатьЭлемент();
				
				НоваяВерсия.Владелец	 = СтрокаЭкземпляра.ТекущийПродукт;
				НоваяВерсия.Наименование = СтрокаЭкземпляра.ТекущаяВерсияЭкземпляра;
				
				Попытка
					
					НоваяВерсия.Записать();
					
					СтрокаВерсии.ВерсияПродуктаСсылка = НоваяВерсия.Ссылка;
					
				Исключение
					
					ТекстОшибки = "Не удалось создать версию продукта " + СтрокаЭкземпляра.ТекущийПродукт;
					ТекстОшибки = ТекстОшибки + " по причине: " + ОписаниеОшибки();
					
					Сообщить(ТекстОшибки);
					
					Продолжить;
					
				КонецПопытки;
				
			КонецЕсли;
			
			ЭкземплярОбъект.ТекущаяВерсия = СтрокаВерсии.ВерсияПродуктаСсылка;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			
			ЭкземплярОбъект.Записать();
			
			ИмяРегистра = УчетПродуктов_ат.ПолучитьИмяРегистраСпецификацииЭкземпляраПродукта(Перечисления.ТипыПродуктов_ат.Конфигурация1С);
			
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭкземплярПродукта.Установить(СтрокаЭкземпляра.ЭкземплярПродукта);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				Запись = НаборЗаписей[0];
				
			Иначе
				
				Запись = НаборЗаписей.Добавить();
				Запись.ЭкземплярПродукта = СтрокаЭкземпляра.ЭкземплярПродукта;
				
			КонецЕсли;
			
			Запись.ИмяИБНа1С = СтрокаЭкземпляра.ИмяБазы;
			Запись.Сервер1С  = КластерСервера1С;
			
			НаборЗаписей.Записать();
			
			СтрокаЭкземпляра.Синхронизировать = Ложь;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = "Не удалось изменить экземпляр " + СтрокаЭкземпляра.ЭкземплярПродукта;
			ТекстОшибки = ТекстОшибки + " по причине: " + ОписаниеОшибки();
			
			Сообщить(ТекстОшибки);
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
