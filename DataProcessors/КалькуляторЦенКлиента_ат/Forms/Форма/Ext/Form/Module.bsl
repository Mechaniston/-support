
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Клиент = ВнутреннегоИспользования_ВызовСервера_ат.ПолучитьЗначениеПоУмолчанию("КлиентДляОтбора");
	
	ДатаРасчета = ТекущаяДатаСеанса();
	
	Период = 1; // за прошлый месяц
	ГлубинаАнализа = 2; // за весь период
	// значения см. в УстановитьПериодРасчета и ГлубинаАнализаПриИзменении
	
	ОбновитьДанные_Сервер(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры


&НаКлиенте
Процедура ПериодРасчетаПриИзменении(Элемент)
	
	Если ПериодРасчета.ДатаОкончания = Дата(1, 1, 1) Тогда
		
		ПериодРасчета.ДатаОкончания = КонецДня(ТекущаяДата());
		
	КонецЕсли;
	
	ДатаРасчета = ПериодРасчета.ДатаОкончания;
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулаРасчетаПриИзменении(Элемент)
	
	ОбновитьАнализ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасчетаПриИзменении(Элемент)
	
	Если ДатаРасчета = Дата(1, 1, 1) Тогда
		
		ДатаРасчета = ТекущаяДата();
		
	КонецЕсли;
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыАнализаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаДокументыПоДоговору Тогда
		
		УстановитьФормулуРасчетаИзДоговора();
		ОбновитьАнализ();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДанныеПоДоговорам Тогда
		
		ПодключитьОбработчикОжидания("ВыборДоговора", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГлубинаАнализаПриИзменении(Элемент)
	
	Если ГлубинаАнализа = 0 Тогда // за период расчёта
		
		ПериодАнализа.ДатаНачала	= ПериодРасчета.ДатаНачала;
		ПериодАнализа.ДатаОкончания	= ПериодРасчета.ДатаОкончания;
		
		Элементы.ПериодАнализа.Доступность = Ложь;
		
		ОбновитьАнализ();
		
	ИначеЕсли ГлубинаАнализа = 2 Тогда // за весь период
		
		ПериодАнализа.ДатаНачала	= Дата(1, 1, 1);
		ПериодАнализа.ДатаОкончания	= ТекущаяДата();
		
		Элементы.ПериодАнализа.Доступность = Ложь;
		
		ОбновитьАнализ();
		
	Иначе // при переключении в режим "За заданный период", период анализа равен периоду расчёта и обороты с регистраторам уже заполнены
		
		Элементы.ПериодАнализа.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАнализаПриИзменении()
	
	Если ПериодАнализа.ДатаОкончания = Дата(1, 1, 1) Тогда
		
		ПериодАнализа.ДатаОкончания = ТекущаяДата();
		
	КонецЕсли;
	
	ОбновитьАнализ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТарифаНажатие(Элемент)
	
	ОткрытьФормуКалькулятораЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеВиртТарифаНажатие(Элемент)
	
	ОткрытьФормуКалькулятораЦен();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Остатки

&НаКлиенте
Процедура ОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ОстаткиДоговор" Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Договор);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ОстаткиКлиент" Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Клиент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ВыборДоговора", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОборотыСРегистраторами

&НаКлиенте
Процедура ОборотыСРегистраторамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ОборотыСРегистраторамиРегистратор" Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Регистратор);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ОборотыСРегистраторамиДокумент" Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ОборотыСРегистраторамиДоговор" Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Договор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборотыСРегистраторамиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьОписаниеВиртТарифа", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДеньМинус(Команда)
	
	ДатаРасчета = ДатаРасчета - (24 * 60 * 60);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеньПлюс(Команда)
	
	ДатаРасчета = ДатаРасчета + (24 * 60 * 60);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцМинус(Команда)
	
	ДатаРасчета = ДобавитьМесяц(ДатаРасчета, -1);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцПлюс(Команда)
	
	ДатаРасчета = ДобавитьМесяц(ДатаРасчета, 1);
	
	ОбновитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВидуДоговора(Команда)
	
	УстановитьСортировкуОперативныхОстатков("СортироватьПоВидуДоговора");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоКлиенту(Команда)
	
	УстановитьСортировкуОперативныхОстатков("СортироватьПоКлиенту");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоРасчету(Команда)
	
	УстановитьСортировкуОперативныхОстатков("СортироватьПоРасчету");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПлатеж(Команда)
	
	ДоговорНаДату = ПолучитьАктуальноеДСПоДоговору(АнализируемыйДоговор,
		НачалоДня(Элементы.ОборотыСРегистраторами.ТекущиеДанные.Дата));
	
	СтрокиПоступлений = ДобавленныеПоступления.НайтиСтроки(Новый Структура("Договор", АнализируемыйДоговор));
	
	Если СтрокиПоступлений.Количество() = 0 Тогда
		Сумма = 0;
	Иначе
		Сумма = СтрокиПоступлений[0].Сумма;
	КонецЕсли;
	
	ПередаваемыеПараметры = Новый Структура;
	ПередаваемыеПараметры.Вставить("Договор", ДоговорНаДату);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСуммы", ЭтаФорма, ПередаваемыеПараметры);
	ПоказатьВводЧисла(Оповещение, Сумма, "Введите сумму поступления", 15, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПлатеж(Команда)
	
	ДоговорНаДату = ПолучитьАктуальноеДСПоДоговору(АнализируемыйДоговор,
		НачалоДня(Элементы.ОборотыСРегистраторами.ТекущиеДанные.Дата));
	
	СтрокиПоступлений = ДобавленныеПоступления.НайтиСтроки(Новый Структура("Договор", АнализируемыйДоговор));
	
	Для Каждого СтрокаПоступления Из СтрокиПоступлений Цикл
		ДобавленныеПоступления.Удалить(СтрокаПоступления);
	КонецЦикла;
	
	ОбновитьАнализ();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтовозвратАктов(Команда)
	
	Элементы.АвтовозвратАктов.Пометка = НЕ Элементы.АвтовозвратАктов.Пометка;
	
	ОбновитьАнализ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПрайсЛиста(Команда)
	
	ТабДок = Неопределено;
	ПараметрыТарифа = ПараметрыТарифа(Элементы.Остатки.ТекущиеДанные);
	
	Если ПараметрыТарифа <> Неопределено Тогда
		ТабДок = ВывестиТарифВТабличныйДокумент(ПараметрыТарифа);
	КонецЕсли;
	
	Если ТабДок = Неопределено Тогда
		ПоказатьПредупреждение(, "Подходящий тарифный план не найден.");
	Иначе
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТарифов(Команда)
	
	// ТУДУ [Grig]: После переноса обработки в базу, процедуру необходимо переделать на нормальную штатную печать 
	
	ПараметрыТарифов = Новый Массив;
	
	Для Каждого Идентификатор Из Элементы.Остатки.ВыделенныеСтроки Цикл
		
		ПараметрыТарифов.Добавить(ПараметрыТарифа(Остатки.НайтиПоИдентификатору(Идентификатор)));
		
	КонецЦикла;
	
	КоллекцияПечатныхФорм = НоваяКоллекцияПечатныхФорм("Макет");
	ПечатнаяФорма = КоллекцияПечатныхФорм[0];
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокументТарифы(ПараметрыТарифов);
	
	ОбъектыПечати = Новый СписокЗначений;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ИменаМакетов = "Макет";
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, КлючУникальности);
	
КонецПроцедуры

&НаСервере
Функция НоваяКоллекцияПечатныхФорм(Идентификаторы)
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(Идентификаторы));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДанные()
	
	ТекДанные = Элементы.Остатки.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		
		ОбновитьДанные_Сервер(ТекДанные.Договор);
		
	Иначе
		
		ОбновитьДанные_Сервер(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанные_Сервер(ДоговорТек)
	
	УстановитьПериодРасчета();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор.Организация КАК Организация,
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор.Владелец КАК Клиент,
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор.ВидДоговора КАК ВидДоговора,
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор КАК Договор,
		|	ДанныеДоговоров_атСрезПоследних.РодительскийДоговор.ДатаДоговора КАК ДатаДоговора,
		|	ИСТИНА КАК ДоговорАктивен,
		|	0 КАК Приход,
		|	0 КАК ФактическийРасход,
		|	0 КАК ФактическийОстаток,
		|	0 КАК ОперативныйРасход,
		|	0 КАК ОперативныйОстаток
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.ДанныеДоговоров_ат.СрезПоследних(
		|			&ДатаОкончания,
		|			НЕ ПометкаУдаления
		|				И ВЫБОР
		|					КОГДА &Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|						ТОГДА РодительскийДоговор.Владелец.Клиент
		|					ИНАЧЕ РодительскийДоговор.Владелец = &Клиент
		|				КОНЕЦ
		|				И РодительскийДоговор.РодДоговора = ЗНАЧЕНИЕ(Перечисление.РодыДоговоров_ат.СПокупателем)
		|				И ВЫБОР
		|					КОГДА &ВидДоговора = ЗНАЧЕНИЕ(Справочник.ВидыДоговоров_ат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ РодительскийДоговор.ВидДоговора = &ВидДоговора
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ РодительскийДоговор = &Договор
		|				КОНЕЦ) КАК ДанныеДоговоров_атСрезПоследних
		|ГДЕ
		|	(ДанныеДоговоров_атСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДоговоров_атСрезПоследних.ДатаОкончания > &ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Клиентский_атОстаткиИОбороты.Субконто1.Организация,
		|	Клиентский_атОстаткиИОбороты.Субконто1.Владелец,
		|	Клиентский_атОстаткиИОбороты.Субконто1.ВидДоговора,
		|	Клиентский_атОстаткиИОбороты.Субконто1,
		|	Клиентский_атОстаткиИОбороты.Субконто1.ДатаДоговора,
		|	ЛОЖЬ,
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаОборотДт, 0),
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаОборотКт, 0),
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаКонечныйОстаток, 0),
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Фактический),
		|			,
		|			ВЫБОР
		|					КОГДА &Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|						ТОГДА Клиент.Клиент
		|					ИНАЧЕ Клиент = &Клиент
		|				КОНЕЦ
		|				И Субконто1.РодДоговора = ЗНАЧЕНИЕ(Перечисление.РодыДоговоров_ат.СПокупателем)
		|				И ВЫБОР
		|					КОГДА &ВидДоговора = ЗНАЧЕНИЕ(Справочник.ВидыДоговоров_ат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто1.ВидДоговора = &ВидДоговора
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто1 = &Договор
		|				КОНЕЦ) КАК Клиентский_атОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Клиентский_атОстаткиИОбороты.Субконто1.Организация,
		|	Клиентский_атОстаткиИОбороты.Субконто1.Владелец,
		|	Клиентский_атОстаткиИОбороты.Субконто1.ВидДоговора,
		|	Клиентский_атОстаткиИОбороты.Субконто1,
		|	Клиентский_атОстаткиИОбороты.Субконто1.ДатаДоговора,
		|	ЛОЖЬ,
		|	0,
		|	0,
		|	0,
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаОборотКт, 0),
		|	ЕСТЬNULL(Клиентский_атОстаткиИОбороты.СуммаКонечныйОстаток, 0)
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный),
		|			,
		|			ВЫБОР
		|					КОГДА &Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка)
		|						ТОГДА Клиент.Клиент
		|					ИНАЧЕ Клиент = &Клиент
		|				КОНЕЦ
		|				И Субконто1.РодДоговора = ЗНАЧЕНИЕ(Перечисление.РодыДоговоров_ат.СПокупателем)
		|				И ВЫБОР
		|					КОГДА &ВидДоговора = ЗНАЧЕНИЕ(Справочник.ВидыДоговоров_ат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто1.ВидДоговора = &ВидДоговора
		|				КОНЕЦ
		|				И ВЫБОР
		|					КОГДА &Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Субконто1 = &Договор
		|				КОНЕЦ) КАК Клиентский_атОстаткиИОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Клиент КАК Клиент,
		|	ВТ.ВидДоговора КАК ВидДоговора,
		|	ВТ.Договор КАК Договор,
		|	ВТ.ДатаДоговора КАК ДатаДоговора,
		|	ВТ.Организация КАК Организация,
		|	МАКСИМУМ(ВТ.ДоговорАктивен) КАК ДоговорАктивен,
		|	СУММА(ВТ.Приход) КАК Приход,
		|	СУММА(ВТ.ОперативныйРасход) КАК ОперативныйРасход,
		|	СУММА(ВТ.ОперативныйОстаток) КАК ОперативныйОстаток,
		|	СУММА(ВТ.ФактическийРасход) КАК ФактическийРасход,
		|	СУММА(ВТ.ФактическийОстаток) КАК ФактическийОстаток
		|ПОМЕСТИТЬ СвернутаяТаблицаПоСчетам
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Договор,
		|	ВТ.ВидДоговора,
		|	ВТ.Клиент,
		|	ВТ.ДатаДоговора,
		|	ВТ.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвернутаяТаблицаПоСчетам.Организация КАК Организация,
		|	СвернутаяТаблицаПоСчетам.Клиент КАК Клиент,
		|	СвернутаяТаблицаПоСчетам.ВидДоговора КАК ВидДоговора,
		|	СвернутаяТаблицаПоСчетам.Договор КАК Договор,
		|	СвернутаяТаблицаПоСчетам.ДатаДоговора КАК ДатаДоговора,
		|	СвернутаяТаблицаПоСчетам.ДоговорАктивен КАК ДоговорАктивен,
		|	СвернутаяТаблицаПоСчетам.Приход КАК Приход,
		|	СвернутаяТаблицаПоСчетам.ОперативныйРасход КАК ОперативныйРасход,
		|	СвернутаяТаблицаПоСчетам.ОперативныйОстаток КАК ОперативныйОстаток,
		|	СвернутаяТаблицаПоСчетам.Приход + СвернутаяТаблицаПоСчетам.ОперативныйРасход КАК ОперативныйОборот,
		|	СвернутаяТаблицаПоСчетам.ФактическийРасход КАК ФактическийРасход,
		|	СвернутаяТаблицаПоСчетам.ФактическийОстаток КАК ФактическийОстаток,
		|	СвернутаяТаблицаПоСчетам.Приход + СвернутаяТаблицаПоСчетам.ФактическийРасход КАК ФактическийОборот
		|ИЗ
		|	СвернутаяТаблицаПоСчетам КАК СвернутаяТаблицаПоСчетам
		|ГДЕ
		|	СвернутаяТаблицаПоСчетам.ДоговорАктивен
		|		ИЛИ (НЕ СвернутаяТаблицаПоСчетам.ДоговорАктивен
		|			И СвернутаяТаблицаПоСчетам.ОперативныйОстаток <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СвернутаяТаблицаПоСчетам";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодРасчета.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодРасчета.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Остатки.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если НЕ ВидДоговора.Пустая() Тогда
		
		Организации = ОрганизацииСДоступнымиТарифами();
		
		Для Каждого Организация Из Организации Цикл
			
			НоваяСтрока = Остатки.Добавить();
			
			НоваяСтрока.Договор		= "Потенциальный договор с '" + Организация + "'";
			НоваяСтрока.Клиент		= Клиент;
			НоваяСтрока.ВидДоговора = ВидДоговора;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Порядок		= 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьСортировкуОперативныхОстатков();
	
	РассчитатьЗначенияВыбораТарифныхПлановПоДоговорам();
	
	// Попытка спозиционироваться на выделенной до пересчёта строке.
	Если ДоговорТек <> Неопределено Тогда
		
		МассивСтрок = Остатки.НайтиСтроки(Новый Структура("Договор", ДоговорТек));
		
		Если МассивСтрок.Количество() > 0 Тогда
			Элементы.Остатки.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьЗначенияВыбораТарифныхПлановПоДоговорам()
	
	// далее - частичная копия ОМ.Финансы_ат.Функция ПолучитьЗначениеОпределяющееТарифныйПланПоДоговору,
	// с переименованием переменной Договор для исключения конфликта с реквизитом формы
	
	ФормулаРасчетаТарифногоПланаПоУмолчанию = Константы.ФормулаРасчетаТарифногоПланаПоУмолчанию_ат.Получить();
	
	Для Каждого СтрокаОстатков Из Остатки Цикл
		
		ДоговорПоСтрокеОстатков = СтрокаОстатков.Договор;
		
		Если НЕ ПустаяСтрока(ДоговорПоСтрокеОстатков.ФормулаРасчетаТарифногоПлана) Тогда
			ФормулаРасчетаТарифногоПлана = ДоговорПоСтрокеОстатков.ФормулаРасчетаТарифногоПлана;
		Иначе
			Если НЕ ПустаяСтрока(ДоговорПоСтрокеОстатков.ВидДоговора.ФормулаРасчетаТарифногоПлана) Тогда
				ФормулаРасчетаТарифногоПлана = ДоговорПоСтрокеОстатков.ФормулаРасчетаТарифногоПлана;
			Иначе
				ФормулаРасчетаТарифногоПлана = ФормулаРасчетаТарифногоПланаПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ФормулаРасчетаТарифногоПлана) Тогда
			
			СтрокаОстатков.Расчет = 0;
			Продолжить;
			
		КонецЕсли;
		
		Если ДоговорПоСтрокеОстатков.ПериодДанныхДляОпределенияТарифногоПлана = Перечисления.ПериодДанныхДляОпределенияТарифногоПлана_ат.ЗаПоследние30Дней
			ИЛИ ДоговорПоСтрокеОстатков.ПериодДанныхДляОпределенияТарифногоПлана = Неопределено Тогда // по умолчанию
			
			ДатаОстатков = НачалоДня(ДатаРасчета);
			ДатаОборотов = НачалоДня(ДатаРасчета - 30 * 24 * 60 * 60);
			
		ИначеЕсли ДоговорПоСтрокеОстатков.ПериодДанныхДляОпределенияТарифногоПлана = Перечисления.ПериодДанныхДляОпределенияТарифногоПлана_ат.СНачалаМесяца Тогда
			
			ДатаОстатков = НачалоДня(ДатаРасчета);
			ДатаОборотов = НачалоМесяца(ДатаРасчета);
			
		ИначеЕсли ДоговорПоСтрокеОстатков.ПериодДанныхДляОпределенияТарифногоПлана = Перечисления.ПериодДанныхДляОпределенияТарифногоПлана_ат.ЗаПредыдущийМесяц Тогда
			
			ДатаОстатков = НачалоМесяца(ДатаРасчета);
			ДатаОборотов = НачалоМесяца(ДобавитьМесяц(ДатаРасчета, -1));
			
		КонецЕсли;
		
		ОперативныйОстаток = СтрокаОстатков.ОперативныйОстаток;
		ФактическийОстаток = СтрокаОстатков.ФактическийОстаток;
		ОперативныйОборот = СтрокаОстатков.ОперативныйОборот;
		ФактическийОборот = СтрокаОстатков.ФактическийОборот;
		ОперативныеПоступления = СтрокаОстатков.Приход;
		ФактическиеПоступления = СтрокаОстатков.Приход;
		Поступления = СтрокаОстатков.Приход;
		ОперативныеСписания = СтрокаОстатков.ОперативныйРасход;
		ФактическиеСписания = СтрокаОстатков.ФактическийРасход;
		
		Значение = 0;
		СтрокаОстатков.Расчет = 0;
		
		Попытка
			
			//Выполнить ФормулаРасчета; // может сделать доп. режим?
			Выполнить ФормулаРасчетаТарифногоПлана;
			СтрокаОстатков.Расчет = Значение;
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодРасчета()
	
	Если Период = 0 Тогда // с начала месяца
		
		ПериодРасчета.ДатаНачала 	= НачалоМесяца(ДатаРасчета);
		ПериодРасчета.ДатаОкончания = НачалоДня(ДатаРасчета);
		
	ИначеЕсли Период = 1 Тогда // за прошлый месяц
		
		ПрошлыйМесяц = ДобавитьМесяц(ДатаРасчета, -1);
		
		ПериодРасчета.ДатаНачала 	= НачалоМесяца(ПрошлыйМесяц);
		ПериодРасчета.ДатаОкончания = КонецМесяца(ПрошлыйМесяц);
		
	ИначеЕсли Период = 2 Тогда // на текущий день
		
		//ПериодРасчета.ДатаНачала	= Дата(1, 1, 1);
		ПериодРасчета.ДатаНачала 	= НачалоДня(ДатаРасчета) - 30 * 24 * 60 * 60;
		ПериодРасчета.ДатаОкончания = НачалоДня(ДатаРасчета);
		
	КонецЕсли;
	
	Если ГлубинаАнализа = 0 Тогда
		
		ПериодАнализа.ДатаНачала 	= ПериодРасчета.ДатаНачала;
		ПериодАнализа.ДатаОкончания = ПериодРасчета.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормулуРасчетаИзДоговора()
	
	Если НЕ ПустаяСтрока(АнализируемыйДоговор.ФормулаРасчетаТарифногоПлана) Тогда
		ФормулаРасчета = АнализируемыйДоговор.ФормулаРасчетаТарифногоПлана;
	Иначе
		Если НЕ ПустаяСтрока(АнализируемыйДоговор.ВидДоговора.ФормулаРасчетаТарифногоПлана) Тогда
			ФормулаРасчета = АнализируемыйДоговор.ФормулаРасчетаТарифногоПлана;
		Иначе
			ФормулаРасчета = Константы.ФормулаРасчетаТарифногоПланаПоУмолчанию_ат.Получить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОрганизацииСДоступнымиТарифами()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Тарифы_атСрезПоследних.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.Тарифы_ат.СрезПоследних(
		|			&Дата,
		|			(ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ ОкончаниеДействия >= &Дата)
		|				И ВидДоговора = &ВидДоговора
		|				И (Клиент = &Клиент
		|					ИЛИ Клиент = ЗНАЧЕНИЕ(Справочник.Контрагенты_ат.ПустаяСсылка))
		|				И (Договор = &Договор
		|					ИЛИ Договор = ЗНАЧЕНИЕ(Справочник.Договоры_ат.ПустаяСсылка))) КАК Тарифы_атСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ПериодРасчета.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидДоговора", ВидДоговора);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьАнализ()
	
	ОбновитьАнализ_Сервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАнализ_Сервер()
	
	ТаблицаДобавленныхПоступлений = ДобавленныеПоступления.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК Порядок,
		|	ДобавленныеПоступления.Договор КАК Договор,
		|	ДобавленныеПоступления.Счет КАК Счет,
		|	ДобавленныеПоступления.Сумма КАК Сумма,
		|	ДобавленныеПоступления.Дата КАК Дата,
		|	ДобавленныеПоступления.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ДобавленныеПоступления
		|ИЗ
		|	&ТаблицаДобавленныхПоступлений КАК ДобавленныеПоступления
		|ГДЕ
		|	ДобавленныеПоступления.Договор = &Договор
		|	И ДобавленныеПоступления.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0 КАК Порядок,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Клиентский_атОбороты.Регистратор) = ТИП(Документ.ПоступлениеНаСчетКлиента_ат)
		|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.ПустаяСсылка)
		|		ИНАЧЕ Клиентский_атОбороты.Счет
		|	КОНЕЦ КАК Счет,
		|	Клиентский_атОбороты.Субконто1 КАК Договор,
		|	Клиентский_атОбороты.Регистратор КАК Регистратор,
		|	Клиентский_атОбороты.Субконто2 КАК Документ,
		|	Клиентский_атОбороты.СуммаОборот КАК Сумма,
		|	Клиентский_атОбороты.Период КАК Дата,
		|	"""" КАК Идентификатор
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, , , Субконто1 = &Договор) КАК Клиентский_атОбороты
		|ГДЕ
		|	НЕ(ТИПЗНАЧЕНИЯ(Клиентский_атОбороты.Регистратор) = ТИП(Документ.ПоступлениеНаСчетКлиента_ат)
		|		И Клиентский_атОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	ДобавленныеПоступления.Счет,
		|	ДобавленныеПоступления.Договор,
		|	NULL,
		|	NULL,
		|	ДобавленныеПоступления.Сумма,
		|	ДобавленныеПоступления.Дата,
		|	ДобавленныеПоступления.Идентификатор
		|ИЗ
		|	ДобавленныеПоступления КАК ДобавленныеПоступления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Фактический),
		|	ВложенныйЗапрос.Договор,
		|	NULL,
		|	NULL,
		|	-ВложенныйЗапрос.Сумма,
		|	&ДатаОкончания,
		|	"" Автовозврат актов""
		|ИЗ
		|	(ВЫБРАТЬ
		|		Реализация_ат.Договор КАК Договор,
		|		СУММА(Реализация_ат.СуммаДокумента) КАК Сумма
		|	ИЗ
		|		Документ.Реализация_ат КАК Реализация_ат
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Клиентский_ат.ДвиженияССубконто(
		|					,
		|					&ДатаОкончания,
		|					Субконто1 = &Договор
		|						И ТИПЗНАЧЕНИЯ(Субконто2) = ТИП(Документ.Реализация_ат),
		|					,
		|					) КАК Клиентский_атДвиженияССубконто
		|			ПО (Клиентский_атДвиженияССубконто.Субконто2 = Реализация_ат.Ссылка)
		|	ГДЕ
		|		Реализация_ат.Проведен
		|		И (Реализация_ат.Договор = &Договор
		|			ИЛИ Реализация_ат.Договор.Родитель = &Договор)
		|		И Реализация_ат.Дата <= &ДатаОкончания
		|		И Клиентский_атДвиженияССубконто.Субконто2 ЕСТЬ NULL
		|	СГРУППИРОВАТЬ ПО
		|		Реализация_ат.Договор) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &АвтовозвратАктов
		|				ТОГДА ВложенныйЗапрос.Сумма <> 0
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДобавленныеПоступления";
	
	Если Период = 1 Тогда // за прошлый месяц
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО",
			"ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	2,
			|	ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.ПустаяСсылка),
			|	NULL,
			|	NULL,
			|	NULL,
			|	0,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОкончания, МЕСЯЦ, 1), МЕСЯЦ),
			|	"" ЗНАЧЕНИЯ НА СЛЕД. МЕСЯЦ""
			|
			|УПОРЯДОЧИТЬ ПО");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ПериодАнализа.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодАнализа.ДатаОкончания);
	Запрос.УстановитьПараметр("Договор", АнализируемыйДоговор);
	Запрос.УстановитьПараметр("ТаблицаДобавленныхПоступлений", ТаблицаДобавленныхПоступлений);
	Запрос.УстановитьПараметр("АвтовозвратАктов", Элементы.АвтовозвратАктов.Пометка);
	
	ОборотыСРегистраторами.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьРасчитываемыеЗначения(АнализируемыйДоговор, ТаблицаДобавленныхПоступлений);
	
	КоличествоСтрок = ОборотыСРегистраторами.Количество();
	
	Если КоличествоСтрок > 0 Тогда
		Элементы.ОборотыСРегистраторами.ТекущаяСтрока = ОборотыСРегистраторами[КоличествоСтрок-1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСортировкуОперативныхОстатков(ИмяКнопки = Неопределено)
	
	Если ИмяКнопки = Неопределено Тогда
		Кнопка = Элементы[?(ПустаяСтрока(НачальнаяСортировка_ИмяКнопки), "СортироватьПоКлиенту", НачальнаяСортировка_ИмяКнопки)];
	Иначе
		Кнопка = Элементы[ИмяКнопки];
	КонецЕсли;
	
	Если Кнопка.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию Тогда
		
		Направление = "Убыв";
		
		Если ИмяКнопки <> Неопределено Тогда
			Кнопка.Картинка = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
		КонецЕсли;
		
	Иначе
		
		Направление = "Возр";
		
		Если ИмяКнопки <> Неопределено Тогда
			Кнопка.Картинка = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кнопка = Элементы.СортироватьПоВидуДоговора Тогда
		
		СтрокаСортировки = "Порядок, ВидДоговора " + Направление + ", Клиент, ДатаДоговора, Расчет";
		
	ИначеЕсли Кнопка = Элементы.СортироватьПоКлиенту Тогда
		
		СтрокаСортировки = "Порядок, Клиент " + Направление + ", ВидДоговора, ДатаДоговора, Расчет";
		
	ИначеЕсли Кнопка = Элементы.СортироватьПоРасчету Тогда
		
		СтрокаСортировки = "Порядок, Расчет " + Направление + ", ВидДоговора, Клиент, ДатаДоговора";
		
	КонецЕсли;
	
	Остатки.Сортировать(СтрокаСортировки);
	
	НачальнаяСортировка_ИмяКнопки = Кнопка.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСуммы(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПередаваемыеПараметры.Вставить("Сумма", Результат);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаДаты", ЭтаФорма, ПередаваемыеПараметры);
	ПоказатьВводДаты(Оповещение, НачалоДня(Элементы.ОборотыСРегистраторами.ТекущиеДанные.Дата), "Введите дату поступления");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДаты(Результат, ПередаваемыеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорНаДату = ПолучитьАктуальноеДСПоДоговору(АнализируемыйДоговор, Результат);
	
	СтрокиПоДоговору = ДобавленныеПоступления.НайтиСтроки(Новый Структура("Договор", ДоговорНаДату));
	
	Если СтрокиПоДоговору.Количество() = 0 Тогда
		
		СтрокаПоступления = ДобавленныеПоступления.Добавить();
		
		СтрокаПоступления.Договор 		= ДоговорНаДату;
		СтрокаПоступления.Идентификатор = Строка(Новый УникальныйИдентификатор);
		
	Иначе
		
		СтрокаПоступления = СтрокиПоДоговору[0];
		
	КонецЕсли;
	
	СтрокаПоступления.Сумма = ПередаваемыеПараметры.Сумма;
	СтрокаПоступления.Дата 	= Результат;
	
	ОбновитьАнализ_Сервер();
	
КонецПроцедуры

&НаСервере
Функция   ПолучитьАктуальноеДСПоДоговору(Договор, Дата = Неопределено)
	
	Возврат Финансы_ат.ПолучитьАктуальноеДСПоДоговору(Договор, Дата);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасчитываемыеЗначения(ДоговорТек, ТаблицаДобавленныхПоступлений)
	
	Если ОборотыСРегистраторами.Количество() > 0 Тогда
		Строка = ОборотыСРегистраторами.Вставить(0);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПериодАнализа.ДатаНачала = Дата(1, 1, 1) Тогда // получать начальные остатки бессмысленно
		
		НачальныйОстатокФакт = 0;
		НачальныйОстатокОпер = 0;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДобавленныеПоступления.Договор КАК Договор,
			|	ДобавленныеПоступления.Сумма КАК ФактическийОстаток,
			|	ДобавленныеПоступления.Сумма КАК ОперативныйОстаток
			|ПОМЕСТИТЬ ДобавленныеПоступления
			|ИЗ
			|	&ТаблицаДобавленныхПоступлений КАК ДобавленныеПоступления
			|ГДЕ
			|	ДобавленныеПоступления.Договор = &Договор
			|	И ДобавленныеПоступления.Дата < &ДатаОстатков
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДобавленныеПоступления.Договор КАК Договор,
			|	ДобавленныеПоступления.ФактическийОстаток КАК ФактическийОстаток,
			|	ДобавленныеПоступления.ОперативныйОстаток КАК ОперативныйОстаток
			|ПОМЕСТИТЬ ТаблицаОстатков
			|ИЗ
			|	ДобавленныеПоступления КАК ДобавленныеПоступления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Клиентский_атОстатки.Субконто1,
			|	ВЫБОР
			|		КОГДА Клиентский_атОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Фактический)
			|			ТОГДА Клиентский_атОстатки.СуммаОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Клиентский_атОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный)
			|			ТОГДА Клиентский_атОстатки.СуммаОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ
			|ИЗ
			|	РегистрБухгалтерии.Клиентский_ат.Остатки(&ДатаОстатков, , , ) КАК Клиентский_атОстатки
			|ГДЕ
			|	Клиентский_атОстатки.Субконто1 = &Договор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ДобавленныеПоступления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаОстатоков.Договор КАК Договор,
			|	СУММА(ТаблицаОстатоков.ФактическийОстаток) КАК ФактическийОстаток,
			|	СУММА(ТаблицаОстатоков.ОперативныйОстаток) КАК ОперативныйОстаток
			|ИЗ
			|	ТаблицаОстатков КАК ТаблицаОстатоков
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаОстатоков.Договор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ТаблицаОстатков";
		
		Запрос.УстановитьПараметр("ДатаОстатков", ПериодАнализа.ДатаНачала - 1);
		Запрос.УстановитьПараметр("Договор", ДоговорТек);
		Запрос.УстановитьПараметр("ТаблицаДобавленныхПоступлений", ТаблицаДобавленныхПоступлений);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НачальныйОстатокФакт = Выборка.ФактическийОстаток;
			НачальныйОстатокОпер = Выборка.ОперативныйОстаток;
			
		Иначе
			
			НачальныйОстатокФакт = 0;
			НачальныйОстатокОпер = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляРасчета = СтруктураОборотов();
	ДанныеДляРасчета.ФактОстаток = НачальныйОстатокФакт;
	ДанныеДляРасчета.ОперОстаток = НачальныйОстатокОпер;
	
	ДанныеДляОтображения = СтруктураОборотов();
	ДанныеДляОтображения.ФактОстаток = НачальныйОстатокФакт;
	ДанныеДляОтображения.ОперОстаток = НачальныйОстатокОпер;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеДляРасчета", ДанныеДляРасчета);
	СтруктураПараметров.Вставить("ДанныеДляОтображения", ДанныеДляОтображения);
	СтруктураПараметров.Вставить("ДанныеПредыдущегоПериода", Неопределено);
	
	Для Каждого Строка Из ОборотыСРегистраторами Цикл
		
		РассчитатьДанныеСтрокиОборотыСРегистраторами(ДоговорТек, Строка, СтруктураПараметров, ТаблицаДобавленныхПоступлений);
		ИзменитьДанныеСтрокиОборотыСРегистраторами(Строка, СтруктураПараметров);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДанныеСтрокиОборотыСРегистраторами(ДоговорТек, Строка, СтруктураПараметров, ТаблицаДобавленныхПоступлений)
	
	Если Период = 0 Тогда // с начала месяца
		
		Если СтруктураПараметров.ДанныеПредыдущегоПериода = Неопределено Тогда // добавленная строка входящих остатков
			
			Если ПериодАнализа.ДатаНачала = НачалоМесяца(ОборотыСРегистраторами[1].Дата) Тогда
				
				СтруктураПараметров.ДанныеПредыдущегоПериода = ПериодАнализа.ДатаНачала;
				
			Иначе
				
				ДатаНачала	  = НачалоМесяца(ПериодАнализа.ДатаНачала);
				ДатаОкончания = ОборотыСРегистраторами[1].Дата - 1;
				
				ПредыдущиеОбороты = ОборотыПоДоговоруЗаПериод(ДоговорТек, ДатаНачала, ДатаОкончания, ТаблицаДобавленныхПоступлений);
				
				ЗаполнитьЗначенияСвойств(СтруктураПараметров.ДанныеДляРасчета, ПредыдущиеОбороты);
				ЗаполнитьЗначенияСвойств(СтруктураПараметров.ДанныеДляОтображения, ПредыдущиеОбороты);
				
				СтруктураПараметров.ДанныеПредыдущегоПериода = НачалоМесяца(ДатаНачала);
				
			КонецЕсли;
			
		ИначеЕсли СтруктураПараметров.ДанныеПредыдущегоПериода <> НачалоМесяца(Строка.Дата) Тогда
			
			СтруктураПараметров.ДанныеДляРасчета.Приход = 0;
			СтруктураПараметров.ДанныеДляРасчета.ФактРасход = 0;
			СтруктураПараметров.ДанныеДляРасчета.ФактОборот = 0;
			СтруктураПараметров.ДанныеДляРасчета.ОперРасход = 0;
			СтруктураПараметров.ДанныеДляРасчета.ОперОборот = 0;
			
			СтруктураПараметров.ДанныеДляОтображения.Приход = 0;
			СтруктураПараметров.ДанныеДляОтображения.ФактРасход = 0;
			СтруктураПараметров.ДанныеДляОтображения.ФактОборот = 0;
			СтруктураПараметров.ДанныеДляОтображения.ОперРасход = 0;
			СтруктураПараметров.ДанныеДляОтображения.ОперОборот = 0;
			
			СтруктураПараметров.ДанныеПредыдущегоПериода = НачалоМесяца(Строка.Дата);
			
		КонецЕсли;
		
		ДобавитьДвижениеВСтруктуруОборотов(Строка, СтруктураПараметров.ДанныеДляРасчета);
		ДобавитьДвижениеВСтруктуруОборотов(Строка, СтруктураПараметров.ДанныеДляОтображения);
		
	ИначеЕсли Период = 1 Тогда // за прошлый месяц
		
		Если СтруктураПараметров.ДанныеПредыдущегоПериода = Неопределено Тогда // добавленная строка входящих остатков
			
			НачалоМесяца = НачалоМесяца(ОборотыСРегистраторами[1].Дата);
			
			ДатаНачала	  = ДобавитьМесяц(НачалоМесяца, -1);
			ДатаОкончания = НачалоМесяца - 1;
			
			ПредыдущиеОбороты = ОборотыПоДоговоруЗаПериод(ДоговорТек, ДатаНачала, ДатаОкончания, ТаблицаДобавленныхПоступлений);
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров.ДанныеДляРасчета, ПредыдущиеОбороты);
			
			СтруктураПараметров.ДанныеПредыдущегоПериода = НачалоМесяца;
			
		Иначе
			
			Если СтруктураПараметров.ДанныеПредыдущегоПериода <> НачалоМесяца(Строка.Дата) Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПараметров.ДанныеДляРасчета, СтруктураПараметров.ДанныеДляОтображения);
				
				СтруктураПараметров.ДанныеДляОтображения.Приход = 0;
				СтруктураПараметров.ДанныеДляОтображения.ФактРасход = 0;
				СтруктураПараметров.ДанныеДляОтображения.ФактОборот = 0;
				СтруктураПараметров.ДанныеДляОтображения.ОперРасход = 0;
				СтруктураПараметров.ДанныеДляОтображения.ОперОборот = 0;
				
				СтруктураПараметров.ДанныеПредыдущегоПериода = НачалоМесяца(Строка.Дата);
				
			КонецЕсли;
			
			ДобавитьДвижениеВСтруктуруОборотов(Строка, СтруктураПараметров.ДанныеДляОтображения);
			
		КонецЕсли;
		
	ИначеЕсли Период = 2 Тогда // на текущий день
		
		Если СтруктураПараметров.ДанныеПредыдущегоПериода = Неопределено Тогда // добавленная строка входящих остатков
			
			//ДатаНачала	  = Дата(1, 1, 1);
			ДатаОкончания = ОборотыСРегистраторами[1].Дата - 1;
			ДатаНачала	  = ДатаОкончания - 30 * 24 * 60 * 60 + 1;
			
			ПредыдущиеОбороты = ОборотыПоДоговоруЗаПериод(ДоговорТек, ДатаНачала, ДатаОкончания, ТаблицаДобавленныхПоступлений);
			
			ЗаполнитьЗначенияСвойств(СтруктураПараметров.ДанныеДляРасчета, ПредыдущиеОбороты);
			ЗаполнитьЗначенияСвойств(СтруктураПараметров.ДанныеДляОтображения, ПредыдущиеОбороты);
			
			СтруктураПараметров.ДанныеПредыдущегоПериода = ДатаНачала;
			
		КонецЕсли;
		
		ДобавитьДвижениеВСтруктуруОборотов(Строка, СтруктураПараметров.ДанныеДляРасчета);
		ДобавитьДвижениеВСтруктуруОборотов(Строка, СтруктураПараметров.ДанныеДляОтображения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   СтруктураОборотов()
	
	СтруктураОборотов = Новый Структура;
	СтруктураОборотов.Вставить("Приход", 	 0);
	СтруктураОборотов.Вставить("ФактРасход", 0);
	СтруктураОборотов.Вставить("ФактОстаток",0);
	СтруктураОборотов.Вставить("ФактОборот", 0);
	СтруктураОборотов.Вставить("ОперРасход", 0);
	СтруктураОборотов.Вставить("ОперОборот", 0);
	СтруктураОборотов.Вставить("ОперОстаток",0);
	
	Возврат СтруктураОборотов;
	
КонецФункции

&НаСервере
Процедура ДобавитьДвижениеВСтруктуруОборотов(Строка, СтруктураОборотов)
	
	СтруктураОборотов.Приход = СтруктураОборотов.Приход + ?(Строка.Сумма < 0, 0, Строка.Сумма);
	
	// ПланыСчетов.Клиентский_ат.ПустаяСсылка() - поступления, в том числе и добавленные
	
	Если Строка.Счет = ПланыСчетов.Клиентский_ат.ПустаяСсылка() Или Строка.Счет = ПланыСчетов.Клиентский_ат.Фактический Тогда
		
		СтруктураОборотов.ФактРасход	= СтруктураОборотов.ФактРасход - ?(Строка.Сумма < 0, Строка.Сумма, 0);
		СтруктураОборотов.ФактОстаток	= СтруктураОборотов.ФактОстаток + Строка.Сумма;
		СтруктураОборотов.ФактОборот	= СтруктураОборотов.ФактОборот + ?(Строка.Сумма < 0, -Строка.Сумма, Строка.Сумма);
		
	КонецЕсли;
	
	Если Строка.Счет = ПланыСчетов.Клиентский_ат.ПустаяСсылка() Или Строка.Счет = ПланыСчетов.Клиентский_ат.Оперативный Тогда
		
		СтруктураОборотов.ОперРасход	= СтруктураОборотов.ОперРасход - ?(Строка.Сумма < 0, Строка.Сумма, 0);
		СтруктураОборотов.ОперОстаток	= СтруктураОборотов.ОперОстаток + Строка.Сумма;
		СтруктураОборотов.ОперОборот	= СтруктураОборотов.ОперОборот + ?(Строка.Сумма < 0, -Строка.Сумма, Строка.Сумма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция   ОборотыПоДоговоруЗаПериод(ДоговорТек, ДатаНачала, ДатаОкончания, ТаблицаДобавленныхПоступлений)
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("Приход", 	 0);
	ВозвращаемаяСтруктура.Вставить("ФактРасход", 0);
	ВозвращаемаяСтруктура.Вставить("ФактОборот", 0);
	ВозвращаемаяСтруктура.Вставить("ОперРасход", 0);
	ВозвращаемаяСтруктура.Вставить("ОперОборот", 0);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДобавленныеПоступления.Сумма КАК Приход,
		|	ДобавленныеПоступления.Сумма КАК ФактОборот,
		|	ДобавленныеПоступления.Сумма КАК ОперОборот
		|ПОМЕСТИТЬ ДобавленныеПоступления
		|ИЗ
		|	&ТаблицаДобавленныхПоступлений КАК ДобавленныеПоступления
		|ГДЕ
		|	ДобавленныеПоступления.Договор = &Договор
		|	И ДобавленныеПоступления.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Клиентский_атОбороты.СуммаОборотДт КАК Приход,
		|	ВЫБОР
		|		КОГДА Клиентский_атОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Фактический)
		|			ТОГДА Клиентский_атОбороты.СуммаОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФактРасход,
		|	ВЫБОР
		|		КОГДА Клиентский_атОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Фактический)
		|			ТОГДА Клиентский_атОбороты.СуммаОборотДт + Клиентский_атОбороты.СуммаОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ФактОборот,
		|	ВЫБОР
		|		КОГДА Клиентский_атОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный)
		|			ТОГДА Клиентский_атОбороты.СуммаОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОперРасход,
		|	ВЫБОР
		|		КОГДА Клиентский_атОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный)
		|			ТОГДА Клиентский_атОбороты.СуммаОборотДт + Клиентский_атОбороты.СуммаОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОперОборот
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрБухгалтерии.Клиентский_ат.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, , , Субконто1 = &Договор) КАК Клиентский_атОбороты
		|ГДЕ
		|	НЕ(ТИПЗНАЧЕНИЯ(Клиентский_атОбороты.Регистратор) = ТИП(Документ.ПоступлениеНаСчетКлиента_ат)
		|		И Клиентский_атОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Клиентский_ат.Оперативный))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДобавленныеПоступления.Приход,
		|	NULL,
		|	ДобавленныеПоступления.ФактОборот,
		|	NULL,
		|	ДобавленныеПоступления.ОперОборот
		|ИЗ
		|	ДобавленныеПоступления КАК ДобавленныеПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДобавленныеПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВТ.Приход), 0) КАК Приход,
		|	ЕСТЬNULL(СУММА(ВТ.ФактРасход), 0) КАК ФактРасход,
		|	ЕСТЬNULL(СУММА(ВТ.ФактОборот), 0) КАК ФактОборот,
		|	ЕСТЬNULL(СУММА(ВТ.ОперРасход), 0) КАК ОперРасход,
		|	ЕСТЬNULL(СУММА(ВТ.ОперОборот), 0) КАК ОперОборот
		|ИЗ
		|	ВТ КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ";
		
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Договор", ДоговорТек);
	Запрос.УстановитьПараметр("ТаблицаДобавленныхПоступлений", ТаблицаДобавленныхПоступлений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ВозвращаемаяСтруктура.Вставить("Приход", 	 Выборка.Приход);
	ВозвращаемаяСтруктура.Вставить("ОперРасход", Выборка.ОперРасход);
	ВозвращаемаяСтруктура.Вставить("ОперОборот", Выборка.ОперОборот);
	ВозвращаемаяСтруктура.Вставить("ФактРасход", Выборка.ФактРасход);
	ВозвращаемаяСтруктура.Вставить("ФактОборот", Выборка.ФактОборот);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

&НаСервере
Процедура ИзменитьДанныеСтрокиОборотыСРегистраторами(Строка, СтруктураПараметров)
	
	// Данные для расчёта
	Строка.Приход 				= СтруктураПараметров.ДанныеДляРасчета.Приход;
	Строка.ФактическийРасход 	= СтруктураПараметров.ДанныеДляРасчета.ФактРасход;
	Строка.ФактическийОборот 	= СтруктураПараметров.ДанныеДляРасчета.ФактОборот;
	Строка.ФактическийОстаток 	= СтруктураПараметров.ДанныеДляРасчета.ФактОстаток;
	Строка.ОперативныйРасход 	= СтруктураПараметров.ДанныеДляРасчета.ОперРасход;
	Строка.ОперативныйОборот 	= СтруктураПараметров.ДанныеДляРасчета.ОперОборот;
	Строка.ОперативныйОстаток 	= СтруктураПараметров.ДанныеДляРасчета.ОперОстаток;
	
	// Данные для отображения
	Строка.Приход1 				= СтруктураПараметров.ДанныеДляОтображения.Приход;
	Строка.ФактическийРасход1 	= СтруктураПараметров.ДанныеДляОтображения.ФактРасход;
	Строка.ФактическийОборот1 	= СтруктураПараметров.ДанныеДляОтображения.ФактОборот;
	Строка.ФактическийОстаток1 	= СтруктураПараметров.ДанныеДляОтображения.ФактОстаток;
	Строка.ОперативныйРасход1 	= СтруктураПараметров.ДанныеДляОтображения.ОперРасход;
	Строка.ОперативныйОборот1 	= СтруктураПараметров.ДанныеДляОтображения.ОперОборот;
	Строка.ОперативныйОстаток1 	= СтруктураПараметров.ДанныеДляОтображения.ОперОстаток;
	
	// далее - частичная копия ОМ.Финансы_ат.Функция ПолучитьЗначениеОпределяющееТарифныйПланПоДоговору
	
	ОперативныйОстаток = Строка.ОперативныйОстаток;
	ФактическийОстаток = Строка.ФактическийОстаток;
	ОперативныйОборот = Строка.ОперативныйОборот;
	ФактическийОборот = Строка.ФактическийОборот;
	ОперативныеПоступления = Строка.Приход;
	ФактическиеПоступления = Строка.Приход;
	Поступления = Строка.Приход;
	ОперативныеСписания = Строка.ОперативныйРасход;
	ФактическиеСписания = Строка.ФактическийРасход;
	
	Значение = 0;
	Строка.Расчет = 0;
	
	Попытка
		
		Выполнить ФормулаРасчета;
		Строка.Расчет = Значение;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоговора()
	
	Если Элементы.Остатки.ТекущиеДанные = Неопределено Тогда
		
		Элементы.СтраницаДокументыПоДоговору.Видимость = Ложь;
		АнализируемыйДоговор = Неопределено;
		
	Иначе
		
		ТекДанные = Элементы.Остатки.ТекущиеДанные;
		
		Если ТекДанные.Договор.Пустая() Тогда
			
			Элементы.СтраницаДокументыПоДоговору.Видимость = Ложь;
			АнализируемыйДоговор = Неопределено;
			
		Иначе
			
			АнализируемыйДоговор = ТекДанные.Договор;
			
			Элементы.СтраницаДокументыПоДоговору.Видимость = Истина;
			Элементы.СтраницаДокументыПоДоговору.Заголовок = "Данные по договору " + АнализируемыйДоговор;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПрейскурант();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрейскурант()
	
	ПараметрыТарифа = ПараметрыТарифа(Элементы.Остатки.ТекущиеДанные);
	
	Если ПараметрыТарифа = Неопределено Тогда
		
		Прейскурант.Очистить();
		
		ТарифныйПлан 		= Неопределено;
		ТекстОписанияТарифа = "";
		
	Иначе
		
		ЗаполнитьПрейскурант_Сервер(ПараметрыТарифа);
		
		ТарифныйПлан 		= ?(Прейскурант.Количество() = 0, Неопределено, Прейскурант[0].ТарифныйПлан);
		ТекстОписанияТарифа = ТекстОписанияТарифа(ТарифныйПлан, ПараметрыТарифа);
		
	КонецЕсли;
	
	Элементы.ОписаниеТарифа.Заголовок = ТекстОписанияТарифа;
	Элементы.ОписаниеТарифа.Гиперссылка = (ТарифныйПлан <> Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрейскурант_Сервер(ПараметрыТарифа)
	
	Прейскурант.Загрузить(ТаблицаЦен(ПараметрыТарифа));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОписаниеВиртТарифа()
	
	ПараметрыТарифа = ПараметрыТарифа(Элементы.Остатки.ТекущиеДанные);
	
	Если ПараметрыТарифа = Неопределено Тогда
		
		ТарифныйПлан 		= Неопределено;
		ТекстОписанияТарифа = "";
		
	Иначе
		
		ТарифныйПлан 		= ТарифныйПлан(ПараметрыТарифа);
		ТекстОписанияТарифа = ТекстОписанияТарифа(ТарифныйПлан, ПараметрыТарифа);
		
	КонецЕсли;
	
	Элементы.ОписаниеВиртТарифа.Заголовок = ТекстОписанияТарифа;
	Элементы.ОписаниеВиртТарифа.Гиперссылка = (ТарифныйПлан <> Неопределено);
	
КонецПроцедуры

&НаКлиенте
Функция   ПараметрыТарифа(ТекДанные)
	
	Если ТекДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыТарифа = Новый Структура;
	
	Если Элементы.СтраницыАнализа.ТекущаяСтраница = Элементы.СтраницаДанныеПоДоговорам Тогда
		
		Расчет 		= ТекДанные.Расчет;
		ДатаТарифа 	= ДатаРасчета;
		
	ИначеЕсли Элементы.СтраницыАнализа.ТекущаяСтраница = Элементы.СтраницаДокументыПоДоговору Тогда
		
		Если Элементы.ОборотыСРегистраторами.ТекущиеДанные = Неопределено Тогда
			
			Расчет 		= 0;
			ДатаТарифа 	= ПериодАнализа.ДатаОкончания;
			
		Иначе
			
			СтрокаРасчетаТарифа = Элементы.ОборотыСРегистраторами.ТекущиеДанные;
			Расчет = СтрокаРасчетаТарифа.Расчет;
			
			Если СтрокаРасчетаТарифа.Дата = Дата(1, 1, 1) Тогда // для входящих остатков надо брать дату первого документа
				ДатаТарифа = ОборотыСРегистраторами[1].Дата;
			Иначе
				ДатаТарифа = СтрокаРасчетаТарифа.Дата;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПараметрыТарифа.Вставить("Дата", 						 ДатаТарифа);
	ПараметрыТарифа.Вставить("Договор", 					 ТекДанные.Договор);
	ПараметрыТарифа.Вставить("Организация", 				 ТекДанные.Организация);
	ПараметрыТарифа.Вставить("ВидДоговора", 				 ТекДанные.ВидДоговора);
	ПараметрыТарифа.Вставить("Клиент", 						 ТекДанные.Клиент);
	ПараметрыТарифа.Вставить("Проект", 						 ПредопределенноеЗначение("Справочник.Проекты_ат.ПустаяСсылка"));
	ПараметрыТарифа.Вставить("ЗначениеВыбораТарифногоПлана", Расчет);
	
	Возврат ПараметрыТарифа;
	
КонецФункции

&НаСервере
Функция   ТарифныйПлан(ПараметрыТарифа)
	
	ТаблицаЦен = ТаблицаЦен(ПараметрыТарифа);
	Возврат ?(ТаблицаЦен.Количество() = 0, Неопределено, ТаблицаЦен[0].ТарифныйПлан);
	
КонецФункции

&НаСервере
Функция   ТаблицаЦен(ПараметрыТарифа, ВсеТарифныеПланы = Ложь)
	
	Возврат Финансы_ат.ПолучитьЦеныНоменклатур(ПараметрыТарифа.Дата,, ПараметрыТарифа.Организация, ПараметрыТарифа.ВидДоговора,
		ПараметрыТарифа.Клиент, ПараметрыТарифа.Договор, ПараметрыТарифа.Проект,
		ПараметрыТарифа.ЗначениеВыбораТарифногоПлана, ВсеТарифныеПланы);
	
КонецФункции

&НаСервереБезКонтекста
Функция   ТекстОписанияТарифа(ТарифныйПлан, ПараметрыТарифа)
	
	Если ТарифныйПлан = Неопределено Тогда
		
		ТекстОписанияТарифа = "Подходящий тарифный план не найден.";
		
	Иначе
		
		Если ТипЗнч(ПараметрыТарифа.Договор) = Тип("Строка") Тогда
			
			ОписаниеДоговора = "потенциального договора с видом """ + ПараметрыТарифа.ВидДоговора + """";
			
		Иначе
			
			ОписаниеДоговора = "договора " + ПараметрыТарифа.Договор;
			
		КонецЕсли;
		
		ТекстОписанияТарифа = "Тарифный план для " + ОписаниеДоговора + " на " + Формат(ПараметрыТарифа.Дата, "ДФ=dd.MM.yyyy")
			+ " - " + ТарифныйПлан + " (согласно расчету: " + ПараметрыТарифа.ЗначениеВыбораТарифногоПлана + ")";
		
	КонецЕсли;
	
	Возврат ТекстОписанияТарифа;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуКалькулятораЦен()
	
	ПараметрыТарифа = ПараметрыТарифа(Элементы.Остатки.ТекущиеДанные);
	
	Если ПараметрыТарифа = Неопределено Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ПараметрыТарифа", ПараметрыТарифа);
	
	ОткрытьФорму("ВнешняяОбработка.КалькуляторЦенКлиента.Форма.ФормаКалькулятораЦен", ПараметрыОткрытия,
		ЭтотОбъект, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция   ВывестиТарифВТабличныйДокумент(ПараметрыТарифа, ТекстЗаголовка = "", ТабДок = Неопределено, ВсеТарифныеПланы = Истина)
	
	Если ТабДок = Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТаблицаЦен = ТаблицаЦен(ПараметрыТарифа, ВсеТарифныеПланы);
	Если ТаблицаЦен.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет("Макет");
	
	Если НЕ ПустаяСтрока(ТекстЗаголовка) Тогда
		
		ЗаголовокТабДока = Макет.ПолучитьОбласть("Заголовок");
		ЗаголовокТабДока.Параметры.Заголовок = ТекстЗаголовка;
		
		ТабДок.Вывести(ЗаголовокТабДока);
		
	КонецЕсли;
	
	ЗаголовокТарифа 	= Макет.ПолучитьОбласть("ЗаголовокТарифа");
	СтрокаНоменклатуры 	= Макет.ПолучитьОбласть("СтрокаНоменклатуры");
	
	ТарифныйПлан = Неопределено;
	
	Для Каждого Строка Из ТаблицаЦен Цикл
		
		Если ТарифныйПлан <> Строка.ТарифныйПлан Тогда
			
			ТарифныйПлан = Строка.ТарифныйПлан;
			ЗаголовокТарифа.Параметры.ТарифныйПлан = ТарифныйПлан;
			
			ТабДок.Вывести(ЗаголовокТарифа);
			
		КонецЕсли;
		
		СтрокаНоменклатуры.Параметры.Номенклатура = Строка.Номенклатура;
		СтрокаНоменклатуры.Параметры.Цена 		  = Строка.Цена;
		
		ТабДок.Вывести(СтрокаНоменклатуры);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция   ТабличныйДокументТарифы(ПараметрыТарифов)
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ПараметрыТарифа Из ПараметрыТарифов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		ВывестиТарифВТабличныйДокумент(ПараметрыТарифа, ТекстОписанияТарифа("", ПараметрыТарифа), ТабДок, Ложь);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти
